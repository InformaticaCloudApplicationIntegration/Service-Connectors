{
  "swagger" : "2.0",
  "info" : {
    "description" : "Catalog administrator public REST API.",
    "version" : "1.0.0",
    "title" : "Catalog Administrator Public REST API"
  },
  "basePath" : "/2",
  "tags" : [ {
    "name" : "Object Info",
    "description" : "Search, perform lineage or view object properties and associations"
  }, {
    "name" : "Object Modification",
    "description" : "Create, update, or delete custom properties, objects, and associations"
  }, {
    "name" : "Monitoring Info",
    "description" : "Monitoring and Creating Jobs"
  }, {
    "name" : "Resource Info",
    "description" : "Read information about resource configuration, schedules, and runs"
  }, {
    "name" : "Resource Execution",
    "description" : "Manually execute resource loads, test connections"
  }, {
    "name" : "Model Info",
    "description" : "Read classes, attributes, associations, and data types"
  }, {
    "name" : "Model Modification",
    "description" : "Create, update, or delete attributes"
  }, {
    "name" : "Catalog Events",
    "description" : "Subscribe, Unsubscribe to objects for changes and get change events."
  }, {
    "name" : "Business Terms",
    "description" : "Update, delete, view, curate Business Terms"
  }, {
    "name" : "Data Provision",
    "description" : "Configure, update and delete ICS users, provision task and provision history"
  }, {
    "name" : "Product Info",
    "description" : "Read EDC Product information"
  } ],
  "produces" : [ "application/json" ],
  "security" : [ {
    "basic" : [ ]
  }, {
    "apiKey" : [ ]
  } ],
  "paths" : {
    "/catalog/models/dataTypes" : {
      "get" : {
        "tags" : [ "Catalog", "Model Info" ],
        "summary" : "Data Types",
        "description" : "List data types",
        "parameters" : [ {
          "name" : "id",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "pattern" : "[^.]+[.].*[^.]"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Starting from result",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "minimum" : 0
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "Results per page",
          "required" : false,
          "type" : "integer",
          "default" : 20,
          "minimum" : 1
        } ],
        "responses" : {
          "200" : {
            "description" : "List of data types",
            "schema" : {
              "$ref" : "#/definitions/DataTypesResponse"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/models/dataTypes/{id}" : {
      "get" : {
        "tags" : [ "Catalog", "Model Info" ],
        "summary" : "Data Type",
        "description" : "Data type details",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Data type",
            "schema" : {
              "$ref" : "#/definitions/AbstractDataTypeResponse"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/models/associations" : {
      "get" : {
        "tags" : [ "Catalog", "Model Info" ],
        "summary" : "Associations",
        "description" : "List associations",
        "parameters" : [ {
          "name" : "id",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "pattern" : "[^.]+[.].*[^.]"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Starting from result",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "minimum" : 0
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "Results per page",
          "required" : false,
          "type" : "integer",
          "default" : 20,
          "minimum" : 1
        }, {
          "name" : "isA",
          "in" : "query",
          "description" : "Return associations that inherit the given association kinds",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "List of associations",
            "schema" : {
              "$ref" : "#/definitions/AssociationsResponse"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/models/associations/{id}" : {
      "get" : {
        "tags" : [ "Catalog", "Model Info" ],
        "summary" : "Association",
        "description" : "Association details",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Association",
            "schema" : {
              "$ref" : "#/definitions/AssociationResponse"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/models/associationKinds" : {
      "get" : {
        "tags" : [ "Catalog", "Model Info" ],
        "summary" : "Association Kinds",
        "description" : "List association kinds",
        "parameters" : [ {
          "name" : "id",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "pattern" : "[^.]+[.].*[^.]"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Starting from result",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "minimum" : 0
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "Results per page",
          "required" : false,
          "type" : "integer",
          "default" : 20,
          "minimum" : 1
        } ],
        "responses" : {
          "200" : {
            "description" : "List of association kinds",
            "schema" : {
              "$ref" : "#/definitions/AssociationKindsResponse"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/models/associationKinds/{id}" : {
      "get" : {
        "tags" : [ "Catalog", "Model Info" ],
        "summary" : "Association Kind",
        "description" : "Association kind details",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Association kind",
            "schema" : {
              "$ref" : "#/definitions/AssociationKindResponse"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/models/classes" : {
      "get" : {
        "tags" : [ "Catalog", "Model Info" ],
        "summary" : "Classes",
        "description" : "List classes",
        "parameters" : [ {
          "name" : "id",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "pattern" : "[^.]+[.].*[^.]"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Starting from result",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "minimum" : 0
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "Results per page",
          "required" : false,
          "type" : "integer",
          "default" : 20,
          "minimum" : 1
        }, {
          "name" : "isA",
          "in" : "query",
          "description" : "Return classes that inherit from the given classes",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "List of classes",
            "schema" : {
              "$ref" : "#/definitions/ClassesResponse"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/models/classes/{id}" : {
      "get" : {
        "tags" : [ "Catalog", "Model Info" ],
        "summary" : "Class",
        "description" : "Class details",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Class",
            "schema" : {
              "$ref" : "#/definitions/ClassResponse"
            },
            "headers" : {
              "ETag" : {
                "type" : "string",
                "description" : "Send as If-Match value"
              }
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Catalog", "Model Modification" ],
        "summary" : "Update Class",
        "description" : "Update a class. Indexing may be required after invoking this.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "classPutRequest",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ClassPutRequest"
          }
        }, {
          "name" : "If-Match",
          "in" : "header",
          "description" : "Do not update if etag for resource has changed",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Class",
            "schema" : {
              "$ref" : "#/definitions/ClassResponse"
            },
            "headers" : {
              "ETag" : {
                "type" : "string",
                "description" : "Send as If-Match value"
              }
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "412" : {
            "description" : "Conflicting edit detected",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/models/referenceDataTypes" : {
      "get" : {
        "tags" : [ "Catalog", "Model Info" ],
        "summary" : "Reference Data Types",
        "description" : "List reference data types",
        "parameters" : [ {
          "name" : "id",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "pattern" : "[^.]+[.].*[^.]"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Starting from result",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "minimum" : 0
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "Results per page",
          "required" : false,
          "type" : "integer",
          "default" : 20,
          "minimum" : 1
        } ],
        "responses" : {
          "200" : {
            "description" : "List of reference data types",
            "schema" : {
              "$ref" : "#/definitions/RefDataTypesResponse"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/models/referenceDataTypes/{id}" : {
      "get" : {
        "tags" : [ "Catalog", "Model Info" ],
        "summary" : "Reference Data Type",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Reference Data Type",
            "schema" : {
              "$ref" : "#/definitions/RefDataTypeResponse"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/models/referenceAttributes" : {
      "get" : {
        "tags" : [ "Catalog", "Model Info" ],
        "summary" : "Reference Attributes",
        "description" : "List reference attributes",
        "parameters" : [ {
          "name" : "id",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "pattern" : "[^.]+[.].*[^.]"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "classId",
          "in" : "query",
          "description" : "Filter attributes by class they may apply to",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "packageId",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi",
          "pattern" : "^[a-zA-Z0-9.]*$"
        }, {
          "name" : "resources",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi",
          "pattern" : "^[^\n\r]+$"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Starting from result",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "minimum" : 0
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "Results per page",
          "required" : false,
          "type" : "integer",
          "default" : 20,
          "minimum" : 1
        } ],
        "responses" : {
          "200" : {
            "description" : "List of reference attributes",
            "schema" : {
              "$ref" : "#/definitions/RefAttributesResponse"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Catalog", "Model Modification" ],
        "summary" : "Create Reference Attributes",
        "description" : "Create new custom reference attributes.",
        "parameters" : [ {
          "in" : "body",
          "name" : "attributes",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/RefAttributesPost"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created reference attributes",
            "schema" : {
              "$ref" : "#/definitions/RefAttributesResponse"
            },
            "headers" : {
              "ETag" : {
                "type" : "string",
                "description" : "Send as If-Match value"
              }
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/models/referenceAttributes/{id}" : {
      "get" : {
        "tags" : [ "Catalog", "Model Info" ],
        "summary" : "Reference Attribute",
        "description" : "Reference Attribute details",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Reference Attribute",
            "schema" : {
              "$ref" : "#/definitions/RefAttributeResponse"
            },
            "headers" : {
              "ETag" : {
                "type" : "string",
                "description" : "Send as If-Match value"
              }
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Catalog", "Model Modification" ],
        "summary" : "Update Reference Attribute",
        "description" : "Update a reference attribute. Indexing may be required after invoking this.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "attribute",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/RefAttributePut"
          }
        }, {
          "name" : "If-Match",
          "in" : "header",
          "description" : "Do not update if etag for resource has changed",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Reference Attribute",
            "schema" : {
              "$ref" : "#/definitions/RefAttributeResponse"
            },
            "headers" : {
              "ETag" : {
                "type" : "string",
                "description" : "Send as If-Match value"
              }
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "412" : {
            "description" : "Conflicting edit detected",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Catalog", "Model Modification" ],
        "summary" : "Delete Reference Attribute",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Response"
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/models/attributes" : {
      "get" : {
        "tags" : [ "Catalog", "Model Info" ],
        "summary" : "Attributes",
        "description" : "List attributes",
        "parameters" : [ {
          "name" : "id",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "pattern" : "[^.]+[.].*[^.]"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "classId",
          "in" : "query",
          "description" : "Filter attributes by class",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "packageId",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi",
          "pattern" : "^[a-zA-Z0-9.]*$"
        }, {
          "name" : "resources",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi",
          "pattern" : "^[^\n\r]+$"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Starting from result",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "minimum" : 0
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "Results per page",
          "required" : false,
          "type" : "integer",
          "default" : 20,
          "minimum" : 1
        } ],
        "responses" : {
          "200" : {
            "description" : "List of attributes",
            "schema" : {
              "$ref" : "#/definitions/AttributesResponse"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Catalog", "Model Modification" ],
        "summary" : "Create Attributes",
        "description" : "Create new custom attributes.",
        "parameters" : [ {
          "in" : "body",
          "name" : "attributes",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AttributesRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Created attributes",
            "schema" : {
              "$ref" : "#/definitions/AttributesResponse"
            },
            "headers" : {
              "ETag" : {
                "type" : "string",
                "description" : "Send as If-Match value"
              }
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/models/attributes/{id}" : {
      "get" : {
        "tags" : [ "Catalog", "Model Info" ],
        "summary" : "Attribute",
        "description" : "Attribute details",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Attribute",
            "schema" : {
              "$ref" : "#/definitions/AttributeResponse"
            },
            "headers" : {
              "ETag" : {
                "type" : "string",
                "description" : "Send as If-Match value"
              }
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Catalog", "Model Modification" ],
        "summary" : "Update Attribute",
        "description" : "Update an attribute. Indexing may be required after invoking this.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "attribute",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AttributePutRequest"
          }
        }, {
          "name" : "If-Match",
          "in" : "header",
          "description" : "Do not update if etag for resource has changed",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Attribute",
            "schema" : {
              "$ref" : "#/definitions/AttributeResponse"
            },
            "headers" : {
              "ETag" : {
                "type" : "string",
                "description" : "Send as If-Match value"
              }
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "412" : {
            "description" : "Conflicting edit detected",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Catalog", "Model Modification" ],
        "summary" : "Delete Attribute",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Response"
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/models/lineageFilters" : {
      "get" : {
        "tags" : [ "Catalog", "Model Info" ],
        "summary" : "Lineage Filters definitions",
        "description" : "Defined lineage filters to be used during lineage apis",
        "parameters" : [ {
          "name" : "id",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Starting from result",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "minimum" : 0
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "Results per page",
          "required" : false,
          "type" : "integer",
          "default" : 20,
          "minimum" : 1
        } ],
        "responses" : {
          "200" : {
            "description" : "All Lineage Filters",
            "schema" : {
              "$ref" : "#/definitions/LineageFiltersModelResponse"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/models/defaultLineageFilter" : {
      "get" : {
        "tags" : [ "Catalog", "Get Default Lineage Filter" ],
        "summary" : "Default Lineage Filter",
        "description" : "Get Default Lineage Filter",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "All Lineage Filters",
            "schema" : {
              "$ref" : "#/definitions/LineageFilterModelResponse"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Catalog", "Set Default Lineage Filter" ],
        "summary" : "Default Lineage Filter",
        "description" : "Set Default Lineage Filter",
        "consumes" : [ "text/plain" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "lineageFilter",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Default Lineage filter"
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "412" : {
            "description" : "Conflicting edit detected",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/models/lineageFilter" : {
      "post" : {
        "tags" : [ "Catalog", "Lineage Filter" ],
        "summary" : "Create lineage filter",
        "description" : "Create lineage filter",
        "parameters" : [ {
          "in" : "body",
          "name" : "lineageFilter",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/LineageFilterModelRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Lineage filter",
            "schema" : {
              "$ref" : "#/definitions/LineageFilterModelResponse"
            },
            "headers" : {
              "ETag" : {
                "type" : "string",
                "description" : "Send as If-Match value"
              }
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "412" : {
            "description" : "Conflicting edit detected",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/models/lineageFilter/{id}" : {
      "get" : {
        "tags" : [ "Catalog", "Lineage Filter Info" ],
        "summary" : "lineage filter definition",
        "description" : "Definition of a single lineage filter.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Lineage Filter",
            "schema" : {
              "$ref" : "#/definitions/LineageFilterModelResponse"
            },
            "headers" : {
              "ETag" : {
                "type" : "string",
                "description" : "Send as If-Match value"
              }
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Catalog", "Lineage Filter Modification" ],
        "summary" : "Update Lineage Filter",
        "description" : "Update Lineage Filter",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "If-Match",
          "in" : "header",
          "description" : "Do not update if etag for resource has changed",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "facet",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/LineageFilterModelRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Lineage filter",
            "schema" : {
              "$ref" : "#/definitions/LineageFilterModelResponse"
            },
            "headers" : {
              "ETag" : {
                "type" : "string",
                "description" : "Send as If-Match value"
              }
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "412" : {
            "description" : "Conflicting edit detected",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Catalog", "Lineage Filter Modification" ],
        "summary" : "Delete a lineage filter definition",
        "description" : "Delete a lineage filter definition",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Facet deleted"
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/models/facets" : {
      "get" : {
        "tags" : [ "Catalog", "Model Info" ],
        "summary" : "Facets definitions",
        "description" : "Pre-defined facets to be used during search",
        "parameters" : [ {
          "name" : "id",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Starting from result",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "minimum" : 0
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "Results per page",
          "required" : false,
          "type" : "integer",
          "default" : 20,
          "minimum" : 1
        } ],
        "responses" : {
          "200" : {
            "description" : "All facets",
            "schema" : {
              "$ref" : "#/definitions/FacetsModelResponse"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/models/facets/queryFacets" : {
      "get" : {
        "tags" : [ "Catalog", "Model Info" ],
        "summary" : "Query facets definitions",
        "description" : "Pre-defined query facets to be used during search",
        "parameters" : [ {
          "name" : "id",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Starting from result",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "minimum" : 0
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "Results per page",
          "required" : false,
          "type" : "integer",
          "default" : 20,
          "minimum" : 1
        } ],
        "responses" : {
          "200" : {
            "description" : "All query facets",
            "schema" : {
              "$ref" : "#/definitions/QueryFacetsResponse"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Catalog", "Model Modification" ],
        "summary" : "Create query facet",
        "description" : "Create query facet",
        "parameters" : [ {
          "in" : "body",
          "name" : "facet",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/QueryFacet"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Query facet",
            "schema" : {
              "$ref" : "#/definitions/QueryFacetResponse"
            },
            "headers" : {
              "ETag" : {
                "type" : "string",
                "description" : "Send as If-Match value"
              }
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "412" : {
            "description" : "Conflicting edit detected",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/models/facets/queryFacets/{id}" : {
      "get" : {
        "tags" : [ "Catalog", "Model Info" ],
        "summary" : "Query facet definition",
        "description" : "Definition of a single query facet.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Query facet",
            "schema" : {
              "$ref" : "#/definitions/QueryFacetResponse"
            },
            "headers" : {
              "ETag" : {
                "type" : "string",
                "description" : "Send as If-Match value"
              }
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Catalog", "Model Modification" ],
        "summary" : "Update Query Facet",
        "description" : "Update Query Facet",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "If-Match",
          "in" : "header",
          "description" : "Do not update if etag for resource has changed",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "facet",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/QueryFacet"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Query facet",
            "schema" : {
              "$ref" : "#/definitions/QueryFacetResponse"
            },
            "headers" : {
              "ETag" : {
                "type" : "string",
                "description" : "Send as If-Match value"
              }
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "412" : {
            "description" : "Conflicting edit detected",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Catalog", "Model Modification" ],
        "summary" : "Delete a query facet definition",
        "description" : "Delete a query facet definition",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Facet deleted"
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/models/facets/fieldFacets" : {
      "get" : {
        "tags" : [ "Catalog", "Model Info" ],
        "summary" : "Field facet definitions",
        "description" : "Pre-defined field facets to be used during search",
        "parameters" : [ {
          "name" : "id",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Starting from result",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "minimum" : 0
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "Results per page",
          "required" : false,
          "type" : "integer",
          "default" : 20,
          "minimum" : 1
        } ],
        "responses" : {
          "200" : {
            "description" : "All field facets",
            "schema" : {
              "$ref" : "#/definitions/FieldFacetsModelResponse"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Catalog", "Model Modification" ],
        "summary" : "Create a field facet",
        "description" : "Create a field facet",
        "parameters" : [ {
          "in" : "body",
          "name" : "facet",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/FieldFacet"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Field facet",
            "schema" : {
              "$ref" : "#/definitions/FieldFacetResponse"
            },
            "headers" : {
              "ETag" : {
                "type" : "string",
                "description" : "Send as If-Match value"
              }
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "412" : {
            "description" : "Conflicting edit detected",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/models/facets/fieldFacets/{id}" : {
      "get" : {
        "tags" : [ "Catalog", "Model Info" ],
        "summary" : "Field facet definition",
        "description" : "Definition of a single field facet.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Field facet",
            "schema" : {
              "$ref" : "#/definitions/FieldFacetResponse"
            },
            "headers" : {
              "ETag" : {
                "type" : "string",
                "description" : "Send as If-Match value to update"
              }
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Catalog", "Model Modification" ],
        "summary" : "Update Field Facet",
        "description" : "Update Field Facet",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "If-Match",
          "in" : "header",
          "description" : "Do not update if etag for resource has changed",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "facet",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/FieldFacet"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Field facet",
            "schema" : {
              "$ref" : "#/definitions/FieldFacetResponse"
            },
            "headers" : {
              "ETag" : {
                "type" : "string",
                "description" : "Send as If-Match value"
              }
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "412" : {
            "description" : "Conflicting edit detected",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Catalog", "Model Modification" ],
        "summary" : "Delete a field facet definition",
        "description" : "Delete a field facet definition",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Facet deleted"
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/models/facets/sliderFacets" : {
      "get" : {
        "tags" : [ "Catalog", "Model Info" ],
        "summary" : "Slider facet definitions",
        "description" : "Pre-defined slider facets to be used during search",
        "parameters" : [ {
          "name" : "id",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Starting from result",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "minimum" : 0
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "Results per page",
          "required" : false,
          "type" : "integer",
          "default" : 20,
          "minimum" : 1
        } ],
        "responses" : {
          "200" : {
            "description" : "All slider facets",
            "schema" : {
              "$ref" : "#/definitions/SliderFacetsModelResponse"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Catalog", "Model Modification" ],
        "summary" : "Create a slider facet",
        "description" : "Create a slider facet",
        "parameters" : [ {
          "in" : "body",
          "name" : "facet",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SliderFacet"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Slider facet",
            "schema" : {
              "$ref" : "#/definitions/SliderFacetResponse"
            },
            "headers" : {
              "ETag" : {
                "type" : "string",
                "description" : "Send as If-Match value"
              }
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "412" : {
            "description" : "Conflicting edit detected",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/models/facets/sliderFacets/{id}" : {
      "get" : {
        "tags" : [ "Catalog", "Model Info" ],
        "summary" : "Slider facet definition",
        "description" : "Definition of a single slider facet.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Slider facet",
            "schema" : {
              "$ref" : "#/definitions/SliderFacetResponse"
            },
            "headers" : {
              "ETag" : {
                "type" : "string",
                "description" : "Send as If-Match value to update"
              }
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Catalog", "Model Modification" ],
        "summary" : "Update Slider Facet",
        "description" : "Update Slider Facet",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "If-Match",
          "in" : "header",
          "description" : "Do not update if etag for resource has changed",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "facet",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SliderFacet"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Slider facet",
            "schema" : {
              "$ref" : "#/definitions/SliderFacetResponse"
            },
            "headers" : {
              "ETag" : {
                "type" : "string",
                "description" : "Send as If-Match value"
              }
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "412" : {
            "description" : "Conflicting edit detected",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Catalog", "Model Modification" ],
        "summary" : "Delete a slider facet definition",
        "description" : "Delete a slider facet definition",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Facet deleted"
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/models/searchTabs" : {
      "get" : {
        "tags" : [ "Catalog", "Model Info" ],
        "summary" : "Search Tabs",
        "description" : "List all defined search tabs that the user may access",
        "parameters" : [ {
          "name" : "id",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Starting from result",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "minimum" : 0
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "Results per page",
          "required" : false,
          "type" : "integer",
          "default" : 20,
          "minimum" : 1
        } ],
        "responses" : {
          "200" : {
            "description" : "All search tabs the user may access",
            "schema" : {
              "$ref" : "#/definitions/SearchTabs"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Catalog", "Model Modification" ],
        "summary" : "New Search Tab",
        "description" : "Create a new search tab",
        "parameters" : [ {
          "in" : "body",
          "name" : "tab",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SearchTabRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Search tab created",
            "schema" : {
              "$ref" : "#/definitions/SearchTab"
            },
            "headers" : {
              "ETag" : {
                "type" : "string",
                "description" : "Send as If-Match value to update"
              }
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "412" : {
            "description" : "Conflicting edit detected",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/models/searchTabs/order" : {
      "get" : {
        "tags" : [ "Catalog", "Model Info" ],
        "summary" : "Search Tab Ordering",
        "description" : "Use this API to bulk change order of search tabs",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Search tab ordering",
            "schema" : {
              "$ref" : "#/definitions/SearchTabOrder"
            },
            "headers" : {
              "ETag" : {
                "type" : "string",
                "description" : "Send as If-Match value to update"
              }
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Catalog", "Model Modification" ],
        "summary" : "Update Search Tab Order",
        "description" : "Bulk update search tab ordering",
        "parameters" : [ {
          "in" : "body",
          "name" : "tabOrder",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SearchTabOrder"
          }
        }, {
          "name" : "If-Match",
          "in" : "header",
          "description" : "Do not update if etag for resource has changed",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "A search tab",
            "schema" : {
              "$ref" : "#/definitions/SearchTabOrder"
            },
            "headers" : {
              "ETag" : {
                "type" : "string",
                "description" : "Send as If-Match value"
              }
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "412" : {
            "description" : "Conflicting edit detected",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/models/searchTabs/{id}" : {
      "get" : {
        "tags" : [ "Catalog", "Model Info" ],
        "summary" : "Search Tab Definition",
        "description" : "Definition of a search tab",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Search tab",
            "schema" : {
              "$ref" : "#/definitions/SearchTab"
            },
            "headers" : {
              "ETag" : {
                "type" : "string",
                "description" : "Send as If-Match value to update"
              }
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Catalog", "Model Modification" ],
        "summary" : "Update Search Tab",
        "description" : "Update search tab",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "tab",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SearchTabRequest"
          }
        }, {
          "name" : "If-Match",
          "in" : "header",
          "description" : "Do not update if etag for resource has changed",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "A search tab",
            "schema" : {
              "$ref" : "#/definitions/SearchTab"
            },
            "headers" : {
              "ETag" : {
                "type" : "string",
                "description" : "Send as If-Match value"
              }
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "412" : {
            "description" : "Conflicting edit detected",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Catalog", "Model Modification" ],
        "summary" : "Delete Search Tab",
        "description" : "Delete a search tab definition",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Tab deleted"
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/data/relationships" : {
      "get" : {
        "tags" : [ "Catalog", "Object Info" ],
        "summary" : "Objects",
        "description" : "The objects endpoint returns objects stored in the catalog",
        "parameters" : [ {
          "name" : "seed",
          "in" : "query",
          "description" : "ID of the object from which to start",
          "required" : true,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "association",
          "in" : "query",
          "description" : "The association to traverse. Can be either an association or association kind.",
          "required" : true,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "direction",
          "in" : "query",
          "description" : "Direction to traverse. Valid values BOTH, IN, OUT",
          "required" : false,
          "type" : "string",
          "default" : "BOTH",
          "enum" : [ "IN", "OUT", "BOTH" ]
        }, {
          "name" : "removeDuplicateAggregateLinks",
          "in" : "query",
          "description" : "Duplicate aggregate links are somtimes created by scanners, when set to true they will not be displayed in responses.",
          "required" : false,
          "type" : "boolean",
          "default" : true
        }, {
          "name" : "depth",
          "in" : "query",
          "description" : "Depth of traversal. Valid values [0,N). 0 means traverse fully, any other integer means return links upto N hops from the seed node.",
          "required" : true,
          "type" : "number",
          "minimum" : 0,
          "format" : "int"
        }, {
          "name" : "includeTerms",
          "in" : "query",
          "description" : "If  true, connected business terms will be embedded in the response.",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "includeAttribute",
          "in" : "query",
          "description" : "Facts with the given attribute id will be embedded in the response.",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "includeRefObjects",
          "in" : "query",
          "description" : "Whether to include reference objects or not.",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "edgeQuery",
          "in" : "query",
          "description" : "Filter context of edge",
          "required" : false,
          "type" : "array",
	  "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "An array of links",
            "schema" : {
              "$ref" : "#/definitions/Links"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/data/objectsChildSummary/{id}" : {
      "get" : {
        "tags" : [ "Catalog", "Object Child Count" ],
        "summary" : "Object's childs count",
        "description" : "Return count of all type of childeren",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "An object",
            "schema" : {
              "$ref" : "#/definitions/MapResponse"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/data/objects" : {
      "get" : {
        "tags" : [ "Catalog", "Object Info" ],
        "summary" : "Objects",
        "description" : "The objects endpoint returns objects stored in the catalog",
        "parameters" : [ {
          "name" : "q",
          "in" : "query",
          "description" : "Search query to match objects. Return order undefined. [Lucene Query Syntax](https://lucene.apache.org/core/2_9_4/queryparsersyntax.html)",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fq",
          "in" : "query",
          "description" : "Filter queries to apply on top of q. Useful for applying facets.",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "id",
          "in" : "query",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Starting from result",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "minimum" : 0
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "Results per page",
          "required" : false,
          "type" : "integer",
          "default" : 20,
          "minimum" : 1
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Field on which results to be sorted from search. Default is relevance(score). Usage core.name_sort asc/desc",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "relatedId",
          "in" : "query",
          "description" : "Results can be joined to objects that are related to the given id(s)",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "As an alternative to offset, this can provide faster paginated results when deep paging",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "associations",
          "in" : "query",
          "description" : "List of association types to include in the response. By default links of all types are included.",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "includeSrcLinks",
          "in" : "query",
          "description" : "True if source links should be included.",
          "required" : false,
          "type" : "boolean",
          "default" : true
        }, {
          "name" : "includeDstLinks",
          "in" : "query",
          "description" : "True if destination links should be included.",
          "required" : false,
          "type" : "boolean",
          "default" : true
        }, {
          "name" : "shards",
          "in" : "query",
          "description" : "Advanced option. List of search shards to query. By default all shards are queried.",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "includeRefObjects",
          "in" : "query",
          "description" : "Whether to include reference objects or not.",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "An array of objects",
            "schema" : {
              "$ref" : "#/definitions/ObjectsResponse"
            },
            "headers" : {
              "ETag" : {
                "type" : "string",
                "description" : "Send as If-Match value"
              }
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Catalog", "Object Modification" ],
        "summary" : "Update Objects",
        "description" : "Update multiple objects' custom properties.",
        "parameters" : [ {
          "in" : "body",
          "name" : "objects",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ObjectsRequest"
          }
        }, {
          "name" : "If-Match",
          "in" : "header",
          "description" : "Do not update if etag for resource has changed",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "An array of objects",
            "schema" : {
              "$ref" : "#/definitions/ObjectsResponse"
            },
            "headers" : {
              "ETag" : {
                "type" : "string",
                "description" : "Send as If-Match value"
              }
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "412" : {
            "description" : "Conflicting edit detected",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/data/objects/{id}" : {
      "get" : {
        "tags" : [ "Catalog", "Object Info" ],
        "summary" : "Object",
        "description" : "Return details on a single object",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "includeRefObjects",
          "in" : "query",
          "description" : "Whether to include reference objects or not.",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "An object",
            "schema" : {
              "$ref" : "#/definitions/ObjectResponse"
            },
            "headers" : {
              "ETag" : {
                "type" : "string",
                "description" : "Send as If-Match value"
              }
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Catalog", "Object Modification" ],
        "summary" : "Update Object",
        "description" : "Update custom object properties",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "object",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ObjectIdRequest"
          }
        }, {
          "name" : "If-Match",
          "in" : "header",
          "description" : "Do not update if etag for resource has changed",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "An object",
            "schema" : {
              "$ref" : "#/definitions/ObjectResponse"
            },
            "headers" : {
              "ETag" : {
                "type" : "string",
                "description" : "Send as If-Match value"
              }
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "412" : {
            "description" : "Conflicting edit detected",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/data/objects/{id}/acceptedBusinessTerm" : {
      "get" : {
        "tags" : [ "Catalog", "Business Terms" ],
        "summary" : "Accepted Business Term",
        "description" : "Return Accepted Business Term",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Accepted Business Term",
            "schema" : {
              "$ref" : "#/definitions/ObjectRefResponse"
            },
            "headers" : {
              "ETag" : {
                "type" : "string",
                "description" : "Send as If-Match value"
              }
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Catalog", "Business Terms" ],
        "summary" : "Update Accepted Business Term",
        "description" : "Associate a Business Term",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "object",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ObjectRefRequest"
          }
        }, {
          "name" : "If-Match",
          "in" : "header",
          "description" : "Do not update if etag for resource has changed",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Term accepted"
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "412" : {
            "description" : "Conflicting edit detected",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Catalog", "Business Terms" ],
        "summary" : "Delete Accepted Business Term",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Term deleted"
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/data/objects/{id}/rejectedBusinessTerms" : {
      "get" : {
        "tags" : [ "Catalog", "Business Terms" ],
        "summary" : "Rejected Business Terms",
        "description" : "Return list of Rejected Business Terms",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Starting from result",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "minimum" : 0
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "Results per page",
          "required" : false,
          "type" : "integer",
          "default" : 20,
          "minimum" : 1
        } ],
        "responses" : {
          "200" : {
            "description" : "Rejected Business Terms",
            "schema" : {
              "$ref" : "#/definitions/RejectedTermsResponse"
            },
            "headers" : {
              "ETag" : {
                "type" : "string",
                "description" : "Send as If-Match value"
              }
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Catalog", "Business Terms" ],
        "summary" : "Update Rejected Business Terms",
        "description" : "Update Rejected Business Terms",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "object",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/RejectedTermsRequest"
          }
        }, {
          "name" : "If-Match",
          "in" : "header",
          "description" : "Do not update if etag for resource has changed",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Term(s) rejected"
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "409" : {
            "description" : "Conflict",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "412" : {
            "description" : "Conflicting edit detected",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Catalog", "Business Terms" ],
        "summary" : "Delete Rejected Business Terms",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "termId",
          "in" : "query",
          "description" : "Ids of Rejected Business Terms to be deleted.",
          "required" : true,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "Term(s) deleted"
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/data/objects/{id}/inferredBusinessTerms" : {
      "get" : {
        "tags" : [ "Catalog", "Business Terms" ],
        "summary" : "Inferred Business Terms",
        "description" : "Return details on inferred business terms",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Inferred Business Terms",
            "schema" : {
              "$ref" : "#/definitions/InferredTermsResponse"
            },
            "headers" : {
              "ETag" : {
                "type" : "string",
                "description" : "Send as If-Match value"
              }
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/resources/jobs/loads" : {
      "post" : {
        "tags" : [ "Catalog", "Resource Execution" ],
        "summary" : "Manual load of Resource",
        "description" : "Trigger execution for given resource.",
        "parameters" : [ {
          "in" : "body",
          "name" : "resourceExecutionRequest",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/JobPostRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Resource submitted for execution",
            "schema" : {
              "$ref" : "#/definitions/JobMonitor"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/resources/jobs/loads/{id}" : {
      "get" : {
        "tags" : [ "Catalog", "Resource Info" ],
        "summary" : "Monitor resource job",
        "description" : "Get job status for given job id.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Id of the job",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Resource job details",
            "schema" : {
              "$ref" : "#/definitions/JobMonitor"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/data/objects/{id}/certificate" : {
      "get" : {
        "tags" : [ "Catalog", "Object Certification" ],
        "summary" : "Get the certification properties of the object.",
        "description" : "Get the certification properties of the object.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "An object",
            "schema" : {
              "$ref" : "#/definitions/CertifyObjectResponse"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "412" : {
            "description" : "Conflicting edit detected",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Catalog", "Object Certification" ],
        "summary" : "Update the Certfication Properties.",
        "description" : "Update the Certfication Properties",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "object",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CertifyObjectRequest"
          }
        }, {
          "name" : "If-Match",
          "in" : "header",
          "description" : "Do not update if etag for resource has changed",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "An object",
            "schema" : {
              "$ref" : "#/definitions/CertifyObjectResponse"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "412" : {
            "description" : "Conflicting edit detected",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Catalog", "Object Certification" ],
        "summary" : "Deletes the Certfication Properties on object.",
        "description" : "Uncertify the certified object.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object Uncertified."
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "412" : {
            "description" : "Conflicting edit detected",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/data/objects/{id}/reviews" : {
      "get" : {
        "tags" : [ "Catalog", "Object Reviews" ],
        "summary" : "Get all reviews and ratings for the object.",
        "description" : "Return all reviews and ratings on single object",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "userFilter",
          "in" : "query",
          "description" : "Filter based on user.",
          "required" : false,
          "type" : "string",
          "enum" : [ "MY_REVIEW_ONLY", "EXCLUDING_MY_REVIEW" ]
        }, {
          "name" : "ratingFilter",
          "in" : "query",
          "description" : "Filter based on rating.",
          "required" : false,
          "type" : "string",
          "enum" : [ "RATING_ONE_AND_ABOVE", "RATING_TWO_AND_ABOVE", "RATING_THREE_AND_ABOVE", "RATING_FOUR_AND_ABOVE" ]
        }, {
          "name" : "sortOn",
          "in" : "query",
          "description" : "Sort comments.",
          "required" : false,
          "type" : "string",
          "default" : "TIMESTAMP",
          "enum" : [ "TIMESTAMP", "VOTE_COUNT", "RATING" ]
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Starting from result",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "minimum" : 0
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "Results per page",
          "required" : false,
          "type" : "integer",
          "default" : 20,
          "minimum" : 1
        } ],
        "responses" : {
          "200" : {
            "description" : "Reviews on object",
            "schema" : {
              "$ref" : "#/definitions/ObjectReviewsResponse"
            },
            "headers" : {
              "ETag" : {
                "type" : "string",
                "description" : "Send as If-Match value in update."
              }
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Catalog", "Object Reviews" ],
        "summary" : "Create a review.",
        "description" : "Creates a new review on object.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "object",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CreateReviewRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Review object",
            "schema" : {
              "$ref" : "#/definitions/ReviewResponse"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "412" : {
            "description" : "Conflicting edit detected",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/data/objects/{id}/reviews/{reviewId}" : {
      "get" : {
        "tags" : [ "Catalog", "Object Reviews" ],
        "summary" : "Get reviews and ratings details for particular review.",
        "description" : "Return all reviews and ratings on single object",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "reviewId",
          "in" : "path",
          "description" : "ID for the review.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Review object",
            "schema" : {
              "$ref" : "#/definitions/ReviewResponse"
            },
            "headers" : {
              "ETag" : {
                "type" : "string",
                "description" : "Send as If-Match value in update."
              }
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Catalog", "Object Reviews" ],
        "summary" : "Update review.",
        "description" : "Updates any existing review.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "reviewId",
          "in" : "path",
          "description" : "ID for the review.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "object",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CreateReviewRequest"
          }
        }, {
          "name" : "If-Match",
          "in" : "header",
          "description" : "Do not update if etag for resource has changed",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Review object",
            "schema" : {
              "$ref" : "#/definitions/ReviewResponse"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "412" : {
            "description" : "Conflicting edit detected",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Catalog", "Object Reviews" ],
        "summary" : "Deletes a review.",
        "description" : "Deletes the reviews and ratings.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "reviewId",
          "in" : "path",
          "description" : "ID for the review.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Review deleted."
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "412" : {
            "description" : "Conflicting edit detected",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/data/objects/{id}/reviews/{reviewId}/vote" : {
      "get" : {
        "tags" : [ "Catalog", "Object Reviews" ],
        "summary" : "Get aggregated votes on review.",
        "description" : "Returns aggregated votes on Single Review",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "reviewId",
          "in" : "path",
          "description" : "ID for the review.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Vote on review",
            "schema" : {
              "$ref" : "#/definitions/VoteResponse"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Catalog", "Object Reviews" ],
        "summary" : "Vote on the Review.",
        "description" : "Vote on Review",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "reviewId",
          "in" : "path",
          "description" : "ID for the review.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "object",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/VoteRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Upvote on comment.",
            "schema" : {
              "$ref" : "#/definitions/VoteResponse"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "412" : {
            "description" : "Conflicting edit detected",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Catalog", "Object Reviews" ],
        "summary" : "Delete vote on the review.",
        "description" : "Deletes vote on review",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "reviewId",
          "in" : "path",
          "description" : "ID for the review.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Deleted successfully vote on the review."
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "412" : {
            "description" : "Conflicting edit detected",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/data/objects/{id}/comments" : {
      "get" : {
        "tags" : [ "Catalog", "Object Comments" ],
        "summary" : "Get all comments.",
        "description" : "Return all comments made on single object",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "Filter Comments.",
          "required" : false,
          "type" : "string",
          "enum" : [ "MY_QUESTIONS", "UNANSWERED_QUESTIONS", "ANSWERED_QUESTIONS", "EXCLUDING_MY_QUESTIONS" ]
        }, {
          "name" : "sortOn",
          "in" : "query",
          "description" : "Sort comments based on timestamp or Vote count.",
          "required" : false,
          "type" : "string",
          "default" : "TIMESTAMP",
          "enum" : [ "TIMESTAMP" ]
        }, {
          "name" : "replyLimit",
          "in" : "query",
          "description" : "Limits the number of replies.",
          "required" : false,
          "type" : "number"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Starting from result",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "minimum" : 0
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "Results per page",
          "required" : false,
          "type" : "integer",
          "default" : 20,
          "minimum" : 1
        } ],
        "responses" : {
          "200" : {
            "description" : "Comments on object",
            "schema" : {
              "$ref" : "#/definitions/ObjectComments"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Catalog", "Object Comments" ],
        "summary" : "Create top level Comment.",
        "description" : "Create a new top level Comment.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "object",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CreateCommentRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "An object",
            "schema" : {
              "$ref" : "#/definitions/CommentResponse"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "412" : {
            "description" : "Conflicting edit detected",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/data/objects/{id}/comments/{commentId}" : {
      "get" : {
        "tags" : [ "Catalog", "Object Comments" ],
        "summary" : "Get a comment on object.",
        "description" : "Get a specific comment on object.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "commentId",
          "in" : "path",
          "description" : "ID for the comment.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Comment object",
            "schema" : {
              "$ref" : "#/definitions/CommentResponse"
            },
            "headers" : {
              "ETag" : {
                "type" : "string",
                "description" : "Send as If-Match value"
              }
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "412" : {
            "description" : "Conflicting edit detected",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Catalog", "Object Comments" ],
        "summary" : "Update comment.",
        "description" : "Updates any existing comment.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "commentId",
          "in" : "path",
          "description" : "ID for the comment.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "object",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CreateCommentRequest"
          }
        }, {
          "name" : "If-Match",
          "in" : "header",
          "description" : "Do not update if etag for resource has changed",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Comment object",
            "schema" : {
              "$ref" : "#/definitions/CommentResponse"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "412" : {
            "description" : "Conflicting edit detected",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Catalog", "Object Comments" ],
        "summary" : "Deletes a comment.",
        "description" : "Deletes the comments and all its replies",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "commentId",
          "in" : "path",
          "description" : "ID for the comment.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Comment deleted."
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "412" : {
            "description" : "Conflicting edit detected",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/data/objects/{id}/comments/{commentId}/vote" : {
      "get" : {
        "tags" : [ "Catalog", "Object Comments" ],
        "summary" : "Get aggregated votes on Comment.",
        "description" : "Returns aggregated votes on Single Comment",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "commentId",
          "in" : "path",
          "description" : "ID for the comment.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Vote on comment",
            "schema" : {
              "$ref" : "#/definitions/VoteResponse"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Catalog", "Object Comments" ],
        "summary" : "Vote on the Comment.",
        "description" : "Vote on comment",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "commentId",
          "in" : "path",
          "description" : "ID for the comment.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "object",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/VoteRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Upvote on comment.",
            "schema" : {
              "$ref" : "#/definitions/VoteResponse"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "412" : {
            "description" : "Conflicting edit detected",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Catalog", "Object Comments" ],
        "summary" : "Delete vote on the Comment.",
        "description" : "Deletes vote on comment",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "commentId",
          "in" : "path",
          "description" : "ID for the comment.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Deleted successfully vote on the comment."
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "412" : {
            "description" : "Conflicting edit detected",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/data/objects/{id}/comments/{commentId}/replies" : {
      "get" : {
        "tags" : [ "Catalog", "Object Comments" ],
        "summary" : "Get all replies.",
        "description" : "Return all comments made on single object",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "commentId",
          "in" : "path",
          "description" : "ID for the comment.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "sortOn",
          "in" : "query",
          "description" : "Sort comments based on timestamp or upvote count.",
          "required" : false,
          "type" : "string",
          "enum" : [ "TIMESTAMP", "VOTE_COUNT", "CREATED_BY" ]
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Starting from result",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "minimum" : 0
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "Results per page",
          "required" : false,
          "type" : "integer",
          "default" : 20,
          "minimum" : 1
        } ],
        "responses" : {
          "200" : {
            "description" : "Reply over comment on object",
            "schema" : {
              "$ref" : "#/definitions/CommentsReply"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Catalog", "Object Comments" ],
        "summary" : "Create reply for the comment.",
        "description" : "Creates a new reply for the comment.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "commentId",
          "in" : "path",
          "description" : "ID for the comment.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "object",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CreateReplyRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "An object",
            "schema" : {
              "$ref" : "#/definitions/ReplyResponse"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/data/objects/{id}/comments/{commentId}/replies/{replyId}" : {
      "get" : {
        "tags" : [ "Catalog", "Object Comments" ],
        "summary" : "Get a reply for the comment.",
        "description" : "Get a specific reply on comment.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "commentId",
          "in" : "path",
          "description" : "ID for the comment.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "replyId",
          "in" : "path",
          "description" : "ID for the comment reply.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Reply object",
            "schema" : {
              "$ref" : "#/definitions/ReplyResponse"
            },
            "headers" : {
              "ETag" : {
                "type" : "string",
                "description" : "Send as If-Match value"
              }
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Catalog", "Object Comments" ],
        "summary" : "Updates reply for the comment.",
        "description" : "Update reply on comments over any object.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "commentId",
          "in" : "path",
          "description" : "ID for the comment.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "replyId",
          "in" : "path",
          "description" : "ID for the comment reply.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "object",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CreateReplyRequest"
          }
        }, {
          "name" : "If-Match",
          "in" : "header",
          "description" : "Do not update if etag for resource has changed",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Reply object",
            "schema" : {
              "$ref" : "#/definitions/ReplyResponse"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "412" : {
            "description" : "Conflicting edit detected",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Catalog", "Object Comments" ],
        "summary" : "Deletes a reply over the comment.",
        "description" : "Deletes a reply made on comment over specified object",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "commentId",
          "in" : "path",
          "description" : "ID for the comment.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "replyId",
          "in" : "path",
          "description" : "ID for the comment reply.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Reply deleted"
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/data/objects/{id}/comments/{commentId}/reply/{replyId}/vote" : {
      "get" : {
        "tags" : [ "Catalog", "Object Comments" ],
        "summary" : "Get aggregated votes for the reply.",
        "description" : "Returns aggregated votes made on single reply",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "commentId",
          "in" : "path",
          "description" : "ID for the comment.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "replyId",
          "in" : "path",
          "description" : "ID for the comment reply.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Vote on reply",
            "schema" : {
              "$ref" : "#/definitions/VoteResponse"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Catalog", "Object Comments" ],
        "summary" : "Vote on the reply.",
        "description" : "Vote for the reply on comment",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "commentId",
          "in" : "path",
          "description" : "ID for the comment.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "replyId",
          "in" : "path",
          "description" : "ID for the comment reply.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "object",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/VoteRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Vote on reply.",
            "schema" : {
              "$ref" : "#/definitions/VoteResponse"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "412" : {
            "description" : "Conflicting edit detected",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Catalog", "Object Comments" ],
        "summary" : "Delete vote on the comment's reply.",
        "description" : "Deletes vote on replies",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "commentId",
          "in" : "path",
          "description" : "ID for the comment.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "replyId",
          "in" : "path",
          "description" : "ID for the comment reply.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Deleted successfully vote on the comment's reply."
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "412" : {
            "description" : "Conflicting edit detected",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/data/subscriptions" : {
      "get" : {
        "tags" : [ "Catalog", "Catalog Events" ],
        "summary" : "Gets subscriptions.",
        "description" : "Subscription list for a user.",
        "parameters" : [ {
          "name" : "objectId",
          "in" : "query",
          "description" : "Filter subscriptions by object id.",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "resourceName",
          "in" : "query",
          "description" : "Filter subscriptions by resources they belong to. Ignored if objectId is present.",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "classType",
          "in" : "query",
          "description" : "Filter subscriptions by the class types. Ignored if objectId is present.",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "changeType",
          "in" : "query",
          "description" : "Filter subscriptions by the change types. Ignored if objectId is present.",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "SOURCE", "INFERENCES_ANNOTATIONS", "COLLABORATION", "RESOURCE" ]
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "Results per page",
          "required" : false,
          "type" : "integer",
          "default" : 20,
          "minimum" : 1
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Starting from result",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "minimum" : 0
        } ],
        "responses" : {
          "200" : {
            "description" : "List of subscriptions.",
            "schema" : {
              "$ref" : "#/definitions/SubscriptionsResponse"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Catalog", "Catalog Events" ],
        "summary" : "Creates or updates multiple objects' subscriptions.",
        "description" : "Creates or updates multiple objects' subscriptions.",
        "parameters" : [ {
          "in" : "body",
          "name" : "subscriptions",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SubscriptionsRequest"
          }
        }, {
          "name" : "If-Match",
          "in" : "header",
          "description" : "Do not update if etag for resource has changed",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "An array of subscriptions",
            "schema" : {
              "$ref" : "#/definitions/SubscriptionsResponse"
            },
            "headers" : {
              "ETag" : {
                "type" : "string",
                "description" : "Send as If-Match value"
              }
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "409" : {
            "description" : "A subscription for the same object already exists.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Catalog", "Catalog Events" ],
        "summary" : "Deletes subscriptions.",
        "description" : "Deletes subscription of objects for a user.",
        "parameters" : [ {
          "name" : "objectId",
          "in" : "query",
          "description" : "Filter subscriptions by object id.",
          "required" : true,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "Objects unsubscribed."
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/data/subscriptions/{id}" : {
      "get" : {
        "tags" : [ "Catalog", "Catalog Events" ],
        "summary" : "Gets subscription of an object.",
        "description" : "Gets subscription of an object.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Subscription of an object.",
            "schema" : {
              "$ref" : "#/definitions/Subscription"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Catalog", "Catalog Events" ],
        "summary" : "Updates the subscription of an object.",
        "description" : "Updates the subscription of an object.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "subscription",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Subscription"
          }
        }, {
          "name" : "If-Match",
          "in" : "header",
          "description" : "Do not update if etag for resource has changed",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "A subscription.",
            "schema" : {
              "$ref" : "#/definitions/Subscription"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "412" : {
            "description" : "Conflicting edit detected",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Catalog", "Catalog Events" ],
        "summary" : "Deletes the subscription on object.",
        "description" : "Unsubscribe the subscribed object.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object unsubscribed."
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/data/subscriptions/{id}/subscribers" : {
      "get" : {
        "tags" : [ "Catalog", "Catalog Events" ],
        "summary" : "Gets subscribers of an object.",
        "description" : "Gets subscribers of an object.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Subscribers of an object.",
            "schema" : {
              "$ref" : "#/definitions/SubscribersResponse"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/data/app_events" : {
      "get" : {
        "tags" : [ "Catalog", "Catalog Events" ],
        "summary" : "Events for the application",
        "description" : "Gets the events for the application",
        "produces" : [ "application/json", "application/excel", "text/csv" ],
        "parameters" : [ {
          "name" : "since",
          "in" : "query",
          "description" : "Time from which the events needs to be returned. If the value is not provided, assumed value is user's last read point.",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "until",
          "in" : "query",
          "description" : "Time until which the events needs to be returned. If the value is not provided, assumed value is current time.",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "objectId",
          "in" : "query",
          "description" : "Filter events by object id.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "objectName",
          "in" : "query",
          "description" : "Filter events by object name.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "changeType",
          "in" : "query",
          "description" : "Filter events by change types.",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi",
          "enum" : [ "SOURCE", "INFERENCES_ANNOTATIONS", "COLLABORATION", "RESOURCE" ]
        }, {
          "name" : "classType",
          "in" : "query",
          "description" : "Filter events by class types.",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "resourceName",
          "in" : "query",
          "description" : "Filter events by resource.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "jobId",
          "in" : "query",
          "description" : "Filter events by job id.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sortBy",
          "in" : "query",
          "description" : "Sort by this column name.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "ascending",
          "in" : "query",
          "description" : "Ascending or not",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "responseType",
          "in" : "query",
          "required" : false,
          "type" : "string",
          "default" : "SIMPLE",
          "enum" : [ "SIMPLE", "DETAILED", "EXPORT" ]
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "Results per page",
          "required" : false,
          "type" : "integer",
          "default" : 20,
          "minimum" : 1
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Starting from result",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "minimum" : 0
        } ],
        "responses" : {
          "200" : {
            "description" : "An array of events.",
            "schema" : {
              "$ref" : "#/definitions/EventsResponse"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/data/app_events/count" : {
      "get" : {
        "tags" : [ "Catalog", "Catalog Events" ],
        "summary" : "Event count for application",
        "description" : "Gets the event count for the application",
        "parameters" : [ {
          "name" : "since",
          "in" : "query",
          "description" : "Time from which the events needs to be returned. If the value is not provided, assumed value is user's last read point.",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "until",
          "in" : "query",
          "description" : "Time until which the events needs to be returned. If the value is not provided, assumed value is current time.",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "objectName",
          "in" : "query",
          "description" : "Filter events by object name.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "changeType",
          "in" : "query",
          "description" : "Filter events by change types.",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi",
          "enum" : [ "SOURCE", "INFERENCES_ANNOTATIONS", "COLLABORATION", "RESOURCE" ]
        }, {
          "name" : "resourceName",
          "in" : "query",
          "description" : "Filter events by resource.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "jobId",
          "in" : "query",
          "description" : "Filter events by job id.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Count of the events",
            "schema" : {
              "$ref" : "#/definitions/EventsCountResponse"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/configuration/email_events" : {
      "get" : {
        "tags" : [ "Catalog", "Catalog Events" ],
        "summary" : "Gets the email configuration.",
        "description" : "Gets the email configuration.",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Email events configuration",
            "schema" : {
              "$ref" : "#/definitions/EventsEmailConfiguration"
            },
            "headers" : {
              "ETag" : {
                "type" : "string",
                "description" : "Send as If-Match value"
              }
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Catalog", "Catalog Events" ],
        "summary" : "Updates the email configuration",
        "description" : "Updates the email configuration",
        "parameters" : [ {
          "in" : "body",
          "name" : "configuration",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/EventsEmailConfiguration"
          }
        }, {
          "name" : "If-Match",
          "in" : "header",
          "description" : "Do not update if etag for resource has changed",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Email events configuration",
            "schema" : {
              "$ref" : "#/definitions/EventsEmailConfiguration"
            },
            "headers" : {
              "ETag" : {
                "type" : "string",
                "description" : "Send as If-Match value"
              }
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "412" : {
            "description" : "Conflicting edit detected",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/configuration/app_events" : {
      "get" : {
        "tags" : [ "Catalog", "Catalog Events" ],
        "summary" : "Gets the application configuration.",
        "description" : "Gets the application configuration.",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Events configuration",
            "schema" : {
              "$ref" : "#/definitions/EventsAppConfiguration"
            },
            "headers" : {
              "ETag" : {
                "type" : "string",
                "description" : "Send as If-Match value"
              }
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Catalog", "Catalog Events" ],
        "summary" : "Updates the application configuration",
        "description" : "Updates the application configuration",
        "parameters" : [ {
          "in" : "body",
          "name" : "configuration",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/EventsAppConfiguration"
          }
        }, {
          "name" : "If-Match",
          "in" : "header",
          "description" : "Do not update if etag for resource has changed",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Events configuration",
            "schema" : {
              "$ref" : "#/definitions/EventsAppConfiguration"
            },
            "headers" : {
              "ETag" : {
                "type" : "string",
                "description" : "Send as If-Match value"
              }
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "412" : {
            "description" : "Conflicting edit detected",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/data/suggest" : {
      "get" : {
        "tags" : [ "Catalog", "Object Info" ],
        "summary" : "Suggest",
        "description" : "Show type ahead suggestions for user query",
        "parameters" : [ {
          "name" : "basicQuery",
          "in" : "query",
          "description" : "Query string. All characters are treated as literals except * which represents a wildcard",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "Results per page",
          "required" : false,
          "type" : "integer",
          "default" : 20,
          "minimum" : 1
        } ],
        "responses" : {
          "200" : {
            "description" : "Suggestion result",
            "schema" : {
              "$ref" : "#/definitions/SuggestResult"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/data/search" : {
      "get" : {
        "tags" : [ "Catalog", "Object Info" ],
        "summary" : "Catalog search",
        "description" : "Search the catalog for search hits",
        "parameters" : [ {
          "name" : "q",
          "in" : "query",
          "description" : "Search query to match objects. Return order undefined. [Lucene Query Syntax](https://lucene.apache.org/core/2_9_4/queryparsersyntax.html)",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "basicQuery",
          "in" : "query",
          "description" : "EDC query string format. See documentation for details.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fq",
          "in" : "query",
          "description" : "Filter queries to apply on top of q. Useful for applying facets.",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "facet",
          "in" : "query",
          "description" : "If facets should be returned with this query.",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "defaultFacets",
          "in" : "query",
          "description" : "If faceting is enabled, true if pre-defined default facets should be included",
          "required" : false,
          "type" : "boolean",
          "default" : true
        }, {
          "name" : "facetId",
          "in" : "query",
          "description" : "If faceting is enabled, list of pre-defined facet ids to facet on.",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "queryFacetJson",
          "in" : "query",
          "description" : "If faceting is enabled, user can specify query facet in JSON format to create on the fly facet.",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "fieldFacetJson",
          "in" : "query",
          "description" : "If faceting is enabled, user can specify field facet in JSON format to create on the fly facet.",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "sliderFacetJson",
          "in" : "query",
          "description" : "If faceting is enabled, user can specify slider facet in JSON format to create on the fly facet.",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "rootTo",
          "in" : "query",
          "description" : "Results can be joined to either their root resource or data set",
          "required" : false,
          "type" : "string",
          "enum" : [ "RESOURCE", "DATA_SET" ]
        }, {
          "name" : "relatedId",
          "in" : "query",
          "description" : "Results can be joined to objects that are related to the given id(s)",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "highlight",
          "in" : "query",
          "description" : "True if highlighting should be performed on results",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Starting from result",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "minimum" : 0
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "Results per page",
          "required" : false,
          "type" : "integer",
          "default" : 20,
          "minimum" : 1
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Field on which results to be sorted from search. Default is relevance(score). Usage core.name_sort asc/desc",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "cursor",
          "in" : "query",
          "description" : "As an alternative to offset, this can provide faster paginated results when deep paging",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "shards",
          "in" : "query",
          "description" : "Advanced option. List of search shards to query. By default all shards are queried.",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "tabId",
          "in" : "query",
          "description" : "Apply filters for the given tab",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "fl",
          "in" : "query",
          "description" : "The fl parameter limits the information included in a query response to a specified list of fields.",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "qf",
          "in" : "query",
          "description" : "The qf parameter specifies the fields in the index on which to perform the query. The parameter should only reference the index attributes having index=\"true\" in the view model. Searching on non-indexed attributes will returns no hits.",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "enableLegacySearch",
          "in" : "query",
          "description" : "The parameter is deprecated! This is applicable to native query only. True if to default search on legacy fields which splits on whitespace, lower-case and prefix match.",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "disableSemanticSearch",
          "in" : "query",
          "description" : "True if semantic search (i.e. auto filtering) should be disabled.",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "includeRefObjects",
          "in" : "query",
          "description" : "Whether to include reference objects or not.",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "Search results",
            "schema" : {
              "$ref" : "#/definitions/SearchResult"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/jobs/searchExports" : {
      "get" : {
        "tags" : [ "Catalog", "Monitoring Info" ],
        "summary" : "Search Export Jobs",
        "description" : "Job detail for a jobs of type search export",
        "parameters" : [ {
          "name" : "jobId",
          "in" : "query",
          "description" : "List of job ids.",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Starting from result",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "minimum" : 0
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "Results per page",
          "required" : false,
          "type" : "integer",
          "default" : 20,
          "minimum" : 1
        }, {
          "name" : "sortBy",
          "in" : "query",
          "description" : "sort jobs on creation, start or end job time.",
          "required" : false,
          "type" : "string",
          "default" : "CREATED_TIME",
          "enum" : [ "CREATED_TIME", "STARTED_TIME", "END_TIME" ]
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "description" : "sorting order",
          "required" : false,
          "type" : "string",
          "default" : "DESC",
          "enum" : [ "DESC", "ASC" ]
        }, {
          "name" : "jobStatus",
          "in" : "query",
          "description" : "fetch jobs with status.",
          "required" : false,
          "type" : "string",
          "enum" : [ "RUNNING", "COMPLETED", "SUBMITTED", "CANCELLED", "FAILED" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "Bulk search export responses",
            "schema" : {
              "$ref" : "#/definitions/SearchExportApiResponses"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Catalog", "Monitoring Info" ],
        "summary" : "Bulk export of search result",
        "description" : "Bulk export of search result",
        "parameters" : [ {
          "in" : "body",
          "name" : "config",
          "description" : "Search export configuration.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/SearchExportConfig"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Bulk search export Response",
            "schema" : {
              "$ref" : "#/definitions/SearchExportApiResponse"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/jobs/searchExports/{id}" : {
      "get" : {
        "tags" : [ "Catalog", "Monitoring Info" ],
        "summary" : "Search Export Job Configuration",
        "description" : "Job Configuration for a single job of type search export",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Bulk search export configuration.",
            "schema" : {
              "$ref" : "#/definitions/SearchExportConfig"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Catalog", "Monitoring Info" ],
        "summary" : "Change search export job config",
        "description" : "Change search export job config",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "config",
          "description" : "Search export configuration.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/SearchExportConfig"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Bulk search export Response",
            "schema" : {
              "$ref" : "#/definitions/SearchExportApiResponse"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Catalog", "Monitoring Info" ],
        "summary" : "Delete search export job",
        "description" : "Delete search export job",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Job is deleted"
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/jobs/objectExports" : {
      "get" : {
        "tags" : [ "Catalog", "Monitoring Info" ],
        "summary" : "Object Export Jobs",
        "description" : "Job detail for a jobs of type object export",
        "parameters" : [ {
          "name" : "jobId",
          "in" : "query",
          "description" : "List of job ids.",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Starting from result",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "minimum" : 0
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "Results per page",
          "required" : false,
          "type" : "integer",
          "default" : 20,
          "minimum" : 1
        }, {
          "name" : "sortBy",
          "in" : "query",
          "description" : "sort jobs on creation, start or end job time.",
          "required" : false,
          "type" : "string",
          "default" : "CREATED_TIME",
          "enum" : [ "CREATED_TIME", "STARTED_TIME", "END_TIME" ]
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "description" : "sorting order",
          "required" : false,
          "type" : "string",
          "default" : "DESC",
          "enum" : [ "DESC", "ASC" ]
        }, {
          "name" : "jobStatus",
          "in" : "query",
          "description" : "fetch jobs with status.",
          "required" : false,
          "type" : "string",
          "enum" : [ "RUNNING", "COMPLETED", "SUBMITTED", "CANCELLED", "FAILED" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "Bulk object export responses",
            "schema" : {
              "$ref" : "#/definitions/ObjectExportApiResponses"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Catalog", "Monitoring Info" ],
        "summary" : "Catalog bulk export at object level",
        "description" : "Catalog bulk export at object level",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "config",
          "description" : "Object export configuration.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ObjectExportConfig"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Bulk object export response",
            "schema" : {
              "$ref" : "#/definitions/ObjectExportApiResponse"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/jobs/objectExports/{id}" : {
      "get" : {
        "tags" : [ "Catalog", "Monitoring Info" ],
        "summary" : "Object Export Job Configuration",
        "description" : "Job configuration for a single job of type object export",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Bulk object export configuration",
            "schema" : {
              "$ref" : "#/definitions/ObjectExportConfig"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Catalog", "Monitoring Info" ],
        "summary" : "Change object export job config",
        "description" : "Change object export job config",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "config",
          "description" : "object export configuration.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ObjectExportConfig"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Bulk search export Response",
            "schema" : {
              "$ref" : "#/definitions/ObjectExportApiResponse"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Catalog", "Monitoring Info" ],
        "summary" : "Delete object export job",
        "description" : "Delete object export job",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Object export job is deleted"
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/jobs/resourceExports" : {
      "get" : {
        "tags" : [ "Catalog", "Monitoring Info" ],
        "summary" : "Resource Export Jobs",
        "description" : "Jobs detail of type resource export",
        "parameters" : [ {
          "name" : "jobId",
          "in" : "query",
          "description" : "List of job ids.",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Starting from result",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "minimum" : 0
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "Results per page",
          "required" : false,
          "type" : "integer",
          "default" : 20,
          "minimum" : 1
        }, {
          "name" : "sortBy",
          "in" : "query",
          "description" : "sort jobs on creation, start or end job time.",
          "required" : false,
          "type" : "string",
          "default" : "CREATED_TIME",
          "enum" : [ "CREATED_TIME", "STARTED_TIME", "END_TIME" ]
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "description" : "sorting order",
          "required" : false,
          "type" : "string",
          "default" : "DESC",
          "enum" : [ "DESC", "ASC" ]
        }, {
          "name" : "jobStatus",
          "in" : "query",
          "description" : "fetch jobs with status.",
          "required" : false,
          "type" : "string",
          "enum" : [ "RUNNING", "COMPLETED", "SUBMITTED", "CANCELLED", "FAILED" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "Bulk resource export responses",
            "schema" : {
              "$ref" : "#/definitions/ResourceExportApiResponses"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Catalog", "Monitoring Info" ],
        "summary" : "Bulk export at resource level.",
        "description" : "Bulk export at resource level",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "config",
          "description" : "Resource export configuration.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ResourceExportConfig"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Bulk resource export response",
            "schema" : {
              "$ref" : "#/definitions/ResourceExportApiResponse"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/jobs/resourceExports/{id}" : {
      "get" : {
        "tags" : [ "Catalog", "Monitoring Info" ],
        "summary" : "Resource Export Job Configuration",
        "description" : "Job configuration of resource export",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Bulk resource export configuration",
            "schema" : {
              "$ref" : "#/definitions/ResourceExportConfig"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Catalog", "Monitoring Info" ],
        "summary" : "Change resource export job config",
        "description" : "Change resource export job config",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "config",
          "description" : "resource export configuration.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ResourceExportConfig"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Resource export response",
            "schema" : {
              "$ref" : "#/definitions/ResourceExportApiResponse"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Catalog", "Monitoring Info" ],
        "summary" : "Delete resource export job",
        "description" : "Delete resource export job",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Resource export job is deleted"
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/jobs/objectImports" : {
      "get" : {
        "tags" : [ "Catalog", "Monitoring Info" ],
        "summary" : "Import job details",
        "description" : "Job detail of import jobs",
        "parameters" : [ {
          "name" : "jobId",
          "in" : "query",
          "description" : "List of job ids.",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Starting from result",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "minimum" : 0
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "Results per page",
          "required" : false,
          "type" : "integer",
          "default" : 20,
          "minimum" : 1
        }, {
          "name" : "sortBy",
          "in" : "query",
          "description" : "sort jobs on creation, start or end job time.",
          "required" : false,
          "type" : "string",
          "default" : "CREATED_TIME",
          "enum" : [ "CREATED_TIME", "STARTED_TIME", "END_TIME" ]
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "description" : "sorting order",
          "required" : false,
          "type" : "string",
          "default" : "DESC",
          "enum" : [ "DESC", "ASC" ]
        }, {
          "name" : "jobStatus",
          "in" : "query",
          "description" : "fetch jobs with status.",
          "required" : false,
          "type" : "string",
          "enum" : [ "RUNNING", "COMPLETED", "SUBMITTED", "CANCELLED", "FAILED" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "Bulk object import responses",
            "schema" : {
              "$ref" : "#/definitions/ObjectImportApiResponses"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Catalog", "Monitoring Info" ],
        "summary" : "Catalog Object Import",
        "description" : "Catalog Bulk Import",
        "consumes" : [ "multipart/form-data" ],
        "parameters" : [ {
          "name" : "file",
          "in" : "formData",
          "description" : "The uploaded file data",
          "required" : true,
          "type" : "file"
        }, {
          "name" : "packages",
          "in" : "formData",
          "description" : "comma seperated list of packages",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "emailId",
          "in" : "formData",
          "description" : "Email Id of User.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Bulk object import response",
            "schema" : {
              "$ref" : "#/definitions/ObjectImportApiResponse"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/jobs/objectImports/{id}" : {
      "get" : {
        "tags" : [ "Catalog", "Monitoring Info" ],
        "summary" : "Import job configuration",
        "description" : "Job configuration for a single import job",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Bulk object import configuration",
            "schema" : {
              "$ref" : "#/definitions/ObjectImportConfig"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Catalog", "Monitoring Info" ],
        "summary" : "Change object import job config",
        "description" : "Change object import job config",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "config",
          "description" : "object import configuration.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ObjectImportConfig"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Bulk import Response",
            "schema" : {
              "$ref" : "#/definitions/ObjectImportApiResponse"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Catalog", "Monitoring Info" ],
        "summary" : "Delete import job",
        "description" : "Delete import job",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Import Job is deleted"
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/jobs" : {
      "get" : {
        "tags" : [ "Catalog", "Monitoring Info" ],
        "summary" : "Job Details",
        "description" : "Job details of jobs",
        "parameters" : [ {
          "name" : "jobId",
          "in" : "query",
          "description" : "List of job ids.",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Starting from result",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "minimum" : 0
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "Results per page",
          "required" : false,
          "type" : "integer",
          "default" : 20,
          "minimum" : 1
        }, {
          "name" : "sortBy",
          "in" : "query",
          "description" : "sort jobs on creation, start or end job time.",
          "required" : false,
          "type" : "string",
          "default" : "CREATED_TIME",
          "enum" : [ "CREATED_TIME", "STARTED_TIME", "END_TIME" ]
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "description" : "sorting order",
          "required" : false,
          "type" : "string",
          "default" : "DESC",
          "enum" : [ "DESC", "ASC" ]
        }, {
          "name" : "jobStatus",
          "in" : "query",
          "description" : "fetch jobs with status.",
          "required" : false,
          "type" : "string",
          "enum" : [ "RUNNING", "COMPLETED", "SUBMITTED", "CANCELLED", "FAILED" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "Job Responses",
            "schema" : {
              "$ref" : "#/definitions/JobResponses"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/jobs/{id}" : {
      "get" : {
        "tags" : [ "Catalog", "Monitoring Info" ],
        "summary" : "Job detail",
        "description" : "Job detail of a single job",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Job Response",
            "schema" : {
              "$ref" : "#/definitions/JobResponse"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/jobs/{id}/status" : {
      "get" : {
        "tags" : [ "Catalog", "Monitoring Info" ],
        "summary" : "Job status",
        "description" : "Gives status of a job",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Job Status",
            "schema" : {
              "$ref" : "#/definitions/JobStatus"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Catalog", "Monitoring Info" ],
        "summary" : "Change job status",
        "description" : "Catalog put export job status for the corresponding job id",
        "consumes" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "status",
          "description" : "Available Status.",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "RUNNING", "CANCELLED" ]
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Status of a job",
            "schema" : {
              "$ref" : "#/definitions/JobStatus"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/jobs/{id}/logs" : {
      "get" : {
        "tags" : [ "Catalog", "Monitoring Info" ],
        "summary" : "Available Logs",
        "description" : "List of logs the job support",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Available logs for the job",
            "schema" : {
              "$ref" : "#/definitions/AvailableLogsResponse"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/jobs/{id}/logs/{logId}" : {
      "get" : {
        "tags" : [ "Catalog", "Monitoring Info" ],
        "summary" : "Download log",
        "description" : "Download a single log for a job",
        "produces" : [ "text/plain" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "logId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "offset",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "Results per page",
          "required" : false,
          "type" : "integer",
          "default" : 20,
          "minimum" : 1
        } ],
        "responses" : {
          "200" : {
            "description" : "Logs"
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/jobs/{id}/logs/zip" : {
      "get" : {
        "tags" : [ "Catalog", "Monitoring Info" ],
        "summary" : "Download logs",
        "description" : "Download logs of a single job",
        "produces" : [ "application/zip" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Download complete"
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/jobs/objectExports/{id}/result" : {
      "get" : {
        "tags" : [ "Catalog", "Monitoring Info" ],
        "summary" : "Download csv of object export jobs",
        "description" : "Download csv of object export jobs",
        "produces" : [ "application/excel", "text/csv" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Download complete"
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/jobs/searchExports/{id}/result" : {
      "get" : {
        "tags" : [ "Catalog", "Monitoring Info" ],
        "summary" : "Download csv of search export jobs",
        "description" : "Download csv of search export jobs",
        "produces" : [ "application/excel", "text/csv" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Download complete"
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/jobs/resourceExports/{id}/result" : {
      "get" : {
        "tags" : [ "Catalog", "Monitoring Info" ],
        "summary" : "Download csv of resource export",
        "description" : "Download csv of resource export",
        "produces" : [ "application/excel", "text/csv" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Download complete"
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/provision/users" : {
      "get" : {
        "tags" : [ "Data Provision" ],
        "summary" : "Gets configured ICS org users.",
        "description" : "Configured ICS org users.",
        "parameters" : [ {
          "name" : "orgId",
          "in" : "query",
          "description" : "Filter users by org id.",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "username",
          "in" : "query",
          "description" : "Filter configured Informatica Cloud users by user name. Ignored if orgId filter is present.",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "List of Informatica Cloud Users.",
            "schema" : {
              "$ref" : "#/definitions/CloudUsersInfoResponse"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Data Provision" ],
        "summary" : "Configures or Updates Informatica Cloud Users.",
        "description" : "Configures or Updates Informatica Cloud Users.",
        "parameters" : [ {
          "in" : "body",
          "name" : "users",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CloudUsersInfoRequest"
          }
        }, {
          "name" : "If-Match",
          "in" : "header",
          "description" : "Do not update if etag for resource has changed",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "An array of ICS org user details.",
            "schema" : {
              "$ref" : "#/definitions/CloudUsersInfoResponse"
            },
            "headers" : {
              "ETag" : {
                "type" : "string",
                "description" : "Send as If-Match value"
              }
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "409" : {
            "description" : "ICS org user for the same object already exists.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/provision/users/{id}" : {
      "put" : {
        "tags" : [ "Data Provision" ],
        "summary" : "Configures or Updates Informatica Cloud User.",
        "description" : "Configures or Updates Informatica Cloud User.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "user",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CloudUserInfo"
          }
        }, {
          "name" : "If-Match",
          "in" : "header",
          "description" : "Do not update if etag for resource has changed",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Cloud Users Info",
            "schema" : {
              "$ref" : "#/definitions/CloudUserInfo"
            },
            "headers" : {
              "ETag" : {
                "type" : "string",
                "description" : "Send as If-Match value"
              }
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "409" : {
            "description" : "A cloud user for the same object already exists.",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Data Provision" ],
        "summary" : "Deletes the cloud user details.",
        "description" : "Deletes the cloud user details.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Cloud user details deleted."
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/provision/users/validate" : {
      "post" : {
        "tags" : [ "Data Provision" ],
        "summary" : "Validates the ICS org details and returns Org details",
        "description" : "Validates the ICS org details and returns Org details",
        "parameters" : [ {
          "in" : "body",
          "name" : "users",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CloudUsersInfoResponse"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "An array of Cloud Users Info",
            "schema" : {
              "$ref" : "#/definitions/CloudUsersInfoResponse"
            },
            "headers" : {
              "ETag" : {
                "type" : "string",
                "description" : "Send as If-Match value"
              }
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/provision/resources" : {
      "get" : {
        "tags" : [ "Data Provision" ],
        "summary" : "Gets the resources with connection information.",
        "description" : "Gets the resources with connection information.",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Connection information stored for resources.",
            "schema" : {
              "$ref" : "#/definitions/ResourceICSConnectionConfsResponse"
            },
            "headers" : {
              "ETag" : {
                "type" : "string",
                "description" : "Send as If-Match value"
              }
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/provision/resources/{resourceName}" : {
      "get" : {
        "tags" : [ "Data Provision" ],
        "summary" : "gets the connection configured for this resource",
        "description" : "gets the connection configured for this resource",
        "parameters" : [ {
          "name" : "resourceName",
          "in" : "path",
          "description" : "Connection for specific resource name",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Connections for the resource.",
            "schema" : {
              "$ref" : "#/definitions/ResourceICSConnectionConf"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Data Provision" ],
        "summary" : "Creates or update the connection configuration for the given resource.",
        "description" : "Creates or update the connection configuration for the given resource.",
        "parameters" : [ {
          "name" : "resourceName",
          "in" : "path",
          "description" : "Connection for specific resource name.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "connConf",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ResourceICSConnectionConf"
          }
        }, {
          "name" : "If-Match",
          "in" : "header",
          "description" : "Do not update if etag for resource has changed",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Connection created or updated.",
            "schema" : {
              "$ref" : "#/definitions/ResourceICSConnectionConf"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "412" : {
            "description" : "Conflicting edit detected",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Data Provision" ],
        "summary" : "Deletes the connection with resource",
        "description" : "Deletes the connection with resource.",
        "parameters" : [ {
          "name" : "resourceName",
          "in" : "path",
          "description" : "Resource name.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Connection de-linked to the resource."
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/provision/connections/config" : {
      "get" : {
        "tags" : [ "Data Provision" ],
        "summary" : "Gets connection configuration option for supported types.",
        "description" : "Gets connection configuration option for supported types.",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Connection configuration option for supported types.",
            "schema" : {
              "$ref" : "#/definitions/InfaCloudConnectionsInfoResponse"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/provision/connections/config/{type}" : {
      "get" : {
        "tags" : [ "Data Provision" ],
        "summary" : "Gets connection configuration option for supported types.",
        "description" : "Gets connection configuration option for supported types.",
        "parameters" : [ {
          "name" : "type",
          "in" : "path",
          "description" : "Connection type.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Connection configuration options.",
            "schema" : {
              "$ref" : "#/definitions/InfaCloudConnection"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/provision/connections" : {
      "get" : {
        "tags" : [ "Data Provision" ],
        "summary" : "Gets connections configured in ICS org.",
        "description" : "Connections configured in ICS org.",
        "parameters" : [ {
          "name" : "icsUsername",
          "in" : "query",
          "description" : "ICS org username of which credentials to be used.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "runTimeEnvId",
          "in" : "query",
          "description" : "Filter connections by run time environment id.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "connType",
          "in" : "query",
          "description" : "Filter connections by ICS connection type.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "List of Informatica Cloud Connections.",
            "schema" : {
              "$ref" : "#/definitions/InfaCloudConnectionsInfoResponse"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/provision/connections/{id}" : {
      "get" : {
        "tags" : [ "Data Provision" ],
        "summary" : "Gets connection configured in ICS org by connection Id.",
        "description" : "Connection configured in ICS org by connection Id.",
        "parameters" : [ {
          "name" : "icsUsername",
          "in" : "query",
          "description" : "ICS org username of which credentials to be used.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "List of Informatica Cloud Connections.",
            "schema" : {
              "$ref" : "#/definitions/InfaCloudConnection"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/provision/connections/{id}/test" : {
      "post" : {
        "tags" : [ "Data Provision" ],
        "summary" : "Tests connection.",
        "description" : "Test connection.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "testRequest",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ProvisionTestConnectionRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK."
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/provision/task" : {
      "get" : {
        "tags" : [ "Data Provision" ],
        "summary" : "Gets all provisioned tasks.",
        "description" : "Gets all provisioned tasks.",
        "parameters" : [ {
          "name" : "objectId",
          "in" : "query",
          "description" : "Filter provisioned tasks by object id.",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "resourceName",
          "in" : "query",
          "description" : "Filter provisioned tasks by resources they belong to. Ignored if objectId is present.",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "List of Provision Tasks.",
            "schema" : {
              "$ref" : "#/definitions/ProvisionTasksResponse"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Data Provision" ],
        "summary" : "Submits the provision task.",
        "description" : "Submits the provision task.",
        "parameters" : [ {
          "in" : "body",
          "name" : "provisionTask",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ProvisionRequest"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Task Submitted.",
            "schema" : {
              "$ref" : "#/definitions/ProvisionTask"
            },
            "headers" : {
              "ETag" : {
                "type" : "string",
                "description" : "Send as If-Match value"
              }
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/provision/task/{id}" : {
      "get" : {
        "tags" : [ "Data Provision" ],
        "summary" : "Gets provisioned task by Id.",
        "description" : "Gets provisioned task by Id.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Provisioned Task for given task Id.",
            "schema" : {
              "$ref" : "#/definitions/ProvisionTask"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "404" : {
            "description" : "Requested object not found",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Data Provision" ],
        "summary" : "Deletes provisioned task.",
        "description" : "Deletes provisioned task entry.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Provisioned task entry deleted."
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/provision/preview" : {
      "get" : {
        "tags" : [ "Data Provision" ],
        "summary" : "Gets preview data of a data object.",
        "description" : "Preview data of a data object.",
        "parameters" : [ {
          "name" : "icsUsername",
          "in" : "query",
          "description" : "ICS username of which credentials to be used.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "objectId",
          "in" : "query",
          "description" : "Data set object Id for the data preview.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "connectionId",
          "in" : "query",
          "description" : "ICS connection Id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "configOpt",
          "in" : "query",
          "description" : "Required config option Id and value pair(s) as key:value, Refer /catalog/provision/connections/config.",
          "required" : true,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "Preview Data.",
            "schema" : {
              "$ref" : "#/definitions/DataPreviewResponse"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/provision/provisionableResources" : {
      "get" : {
        "tags" : [ "Data Provision" ],
        "summary" : "Gets supported resources by Data Provisioning.",
        "description" : "Gets supported resources by Data Provisioning.",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Gets supported resources by Data Provisioning.",
            "schema" : {
              "$ref" : "#/definitions/ProvisionableResources"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/provision/info" : {
      "get" : {
        "tags" : [ "Data Provision" ],
        "summary" : "Provides Data Provisioning information.",
        "description" : "Provides Data Provisioning information.",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Provides Data Provisioning information.",
            "schema" : {
              "$ref" : "#/definitions/ProvisionInfoResponse"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/data/productInformation" : {
      "get" : {
        "tags" : [ "Catalog", "Product Info" ],
        "summary" : "Get EDC Product Information.",
        "description" : "Use this API to fetch the product information like release version, build version and build date.",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "EDC Product Information.",
            "schema" : {
              "$ref" : "#/definitions/ProductInfoResponse"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/events" : {
      "get" : {
        "tags" : [ "Catalog" ],
        "summary" : "Get events",
        "description" : "Use this API to fetch events of all types",
        "parameters" : [ {
          "name" : "resumeAfterId",
          "in" : "query",
          "description" : "fetch events starting after the given id",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "Results per page",
          "required" : false,
          "type" : "integer",
          "default" : 20,
          "minimum" : 1
        }, {
          "name" : "eventType",
          "in" : "query",
          "description" : "Filter for specific event types",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "List of events",
            "schema" : {
              "$ref" : "#/definitions/BaseEvents"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/events/logins" : {
      "get" : {
        "tags" : [ "Catalog" ],
        "summary" : "Get user login events",
        "description" : "Use this API to receive user login events. Events are returned sorted by time.",
        "parameters" : [ {
          "name" : "resumeAfterId",
          "in" : "query",
          "description" : "fetch events starting after the given id",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "Results per page",
          "required" : false,
          "type" : "integer",
          "default" : 20,
          "minimum" : 1
        } ],
        "responses" : {
          "200" : {
            "description" : "Recent user logins",
            "schema" : {
              "$ref" : "#/definitions/UserLoginEvents"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Catalog" ],
        "summary" : "Fire user login events",
        "description" : "Fire user login events",
        "parameters" : [ {
          "in" : "body",
          "name" : "events",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/UserLoginEventsRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Events created"
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/events/searches" : {
      "get" : {
        "tags" : [ "Catalog" ],
        "summary" : "Get user search events",
        "description" : "Use this API to receive user search events. Events are returned sorted by time.",
        "parameters" : [ {
          "name" : "resumeAfterId",
          "in" : "query",
          "description" : "fetch events starting after the given id",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "Results per page",
          "required" : false,
          "type" : "integer",
          "default" : 20,
          "minimum" : 1
        } ],
        "responses" : {
          "200" : {
            "description" : "Recent user searches",
            "schema" : {
              "$ref" : "#/definitions/SearchEvents"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Catalog" ],
        "summary" : "Fire user search events",
        "description" : "Fire user search events",
        "parameters" : [ {
          "in" : "body",
          "name" : "events",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SearchEventsRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Events created"
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/events/assetUsages" : {
      "get" : {
        "tags" : [ "Catalog" ],
        "summary" : "Get asset usage events",
        "description" : "Use this API to receive asset usage events. Events are returned sorted by time.",
        "parameters" : [ {
          "name" : "resumeAfterId",
          "in" : "query",
          "description" : "fetch events starting after the given id",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "Results per page",
          "required" : false,
          "type" : "integer",
          "default" : 20,
          "minimum" : 1
        } ],
        "responses" : {
          "200" : {
            "description" : "Recent asset usages",
            "schema" : {
              "$ref" : "#/definitions/AssetUsageEvents"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Catalog" ],
        "summary" : "Fire asset usage events",
        "description" : "Fire asset usage events",
        "parameters" : [ {
          "in" : "body",
          "name" : "events",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AssetUsageEventsRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Events created"
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/events/scanTriggers" : {
      "get" : {
        "tags" : [ "Catalog" ],
        "summary" : "Get scan trigger events",
        "description" : "Use this API to receive scan trigger events. Events are returned sorted by time.",
        "parameters" : [ {
          "name" : "resumeAfterId",
          "in" : "query",
          "description" : "fetch events starting after the given id",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "Results per page",
          "required" : false,
          "type" : "integer",
          "default" : 20,
          "minimum" : 1
        } ],
        "responses" : {
          "200" : {
            "description" : "Recent scan triggers",
            "schema" : {
              "$ref" : "#/definitions/ScanTriggerEvents"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Catalog" ],
        "summary" : "Fire scan trigger events",
        "description" : "Fire scan trigger events",
        "parameters" : [ {
          "in" : "body",
          "name" : "events",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ScanTriggerEventsRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Events created"
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/events/modifiedObjects" : {
      "get" : {
        "tags" : [ "Catalog" ],
        "summary" : "Get object modification events",
        "description" : "Use this API to receive object modification events. Events are returned sorted by time.",
        "parameters" : [ {
          "name" : "resumeAfterId",
          "in" : "query",
          "description" : "fetch events starting after the given id",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "Results per page",
          "required" : false,
          "type" : "integer",
          "default" : 20,
          "minimum" : 1
        } ],
        "responses" : {
          "200" : {
            "description" : "Object modified events",
            "schema" : {
              "$ref" : "#/definitions/ObjectModifiedEvents"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/events/modifiedObjects/config" : {
      "get" : {
        "tags" : [ "Catalog" ],
        "summary" : "Get modified object config.",
        "description" : "View details of the object modification config.",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Object modified events config",
            "schema" : {
              "$ref" : "#/definitions/ObjectModifiedEventConfig"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Catalog" ],
        "summary" : "Change object modification event config",
        "description" : "Use this API to configure details that are present in object modification events. Changes to this config only effect future events. Config changes may not take effect until after one minute or service restart.",
        "parameters" : [ {
          "in" : "body",
          "name" : "config",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ObjectModifiedEventConfig"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Config updated"
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/events/deletedObjects" : {
      "get" : {
        "tags" : [ "Catalog" ],
        "summary" : "Get object deletion events",
        "description" : "Use this API to receive object deletion events. Events are returned sorted by time.",
        "parameters" : [ {
          "name" : "resumeAfterId",
          "in" : "query",
          "description" : "fetch events starting after the given id",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "Results per page",
          "required" : false,
          "type" : "integer",
          "default" : 20,
          "minimum" : 1
        } ],
        "responses" : {
          "200" : {
            "description" : "Object deleted events",
            "schema" : {
              "$ref" : "#/definitions/ObjectDeletedEvents"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    },
    "/catalog/events/deletedResources" : {
      "get" : {
        "tags" : [ "Catalog" ],
        "summary" : "Get resource deletion events",
        "description" : "Use this API to receive resource deletion events. Events are returned sorted by time.",
        "parameters" : [ {
          "name" : "resumeAfterId",
          "in" : "query",
          "description" : "fetch events starting after the given id",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "Results per page",
          "required" : false,
          "type" : "integer",
          "default" : 20,
          "minimum" : 1
        } ],
        "responses" : {
          "200" : {
            "description" : "Recent user logins",
            "schema" : {
              "$ref" : "#/definitions/ResourceDeletedEvents"
            }
          },
          "400" : {
            "description" : "Missing or invalid parameter",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "401" : {
            "description" : "Missing credentials",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "403" : {
            "description" : "User does not have access permission",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          },
          "429" : {
            "description" : "Rate limit for requests",
            "schema" : {
              "$ref" : "#/definitions/Error"
            },
            "headers" : {
              "Retry-After" : {
                "type" : "number",
                "format" : "integer",
                "description" : "Retry after X seconds"
              }
            }
          },
          "default" : {
            "description" : "Unexpected error",
            "schema" : {
              "$ref" : "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "securityDefinitions" : {
    "apiKey" : {
      "type" : "apiKey",
      "name" : "isp_key",
      "in" : "header"
    },
    "basic" : {
      "type" : "basic"
    }
  },
  "definitions" : {
    "keyValue" : {
      "type" : "object",
      "properties" : {
        "key" : {
          "type" : "string"
        },
        "value" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "MapResponse" : {
      "allOf" : [ {
        "type" : "object",
        "properties" : {
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/keyValue"
            }
          }
        }
      } ]
    },
    "SuggestResult" : {
      "type" : "object",
      "properties" : {
        "suggestions" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "SearchResult" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CollectionResponse"
      }, {
        "$ref" : "#/definitions/SearchInfo"
      }, {
        "type" : "object",
        "properties" : {
          "facetResults" : {
            "type" : "array",
            "description" : "The facet results of the query. Only present on the first page.",
            "items" : {
              "$ref" : "#/definitions/FacetResult"
            }
          },
          "hits" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/SearchHit"
            }
          }
        }
      } ],
      "description" : "The result of a search"
    },
    "SearchHit" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ResourceResponse"
      }, {
        "type" : "object",
        "properties" : {
          "nativeId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Internal id of object"
          },
          "values" : {
            "type" : "array",
            "description" : "Matches on the object",
            "items" : {
              "$ref" : "#/definitions/PropertyMatch"
            }
          },
          "subHits" : {
            "type" : "array",
            "description" : "Matches on child objects joined to the current search hit",
            "items" : {
              "$ref" : "#/definitions/SubHit"
            }
          }
        }
      } ],
      "description" : "A query match to an object"
    },
    "SubHit" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ResourceResponse"
      }, {
        "type" : "object",
        "properties" : {
          "associations" : {
            "type" : "array",
            "description" : "The association ids that joined the sub object to the main SearchHit",
            "items" : {
              "type" : "string"
            }
          },
          "values" : {
            "type" : "array",
            "description" : "Matches on the sub object",
            "items" : {
              "$ref" : "#/definitions/PropertyMatch"
            }
          },
          "hitType" : {
            "type" : "string",
            "enum" : [ "ROOT", "RELATED" ]
          }
        }
      } ],
      "description" : "A query match on a sub object joined to a SearchHit"
    },
    "PropertyMatch" : {
      "type" : "object",
      "properties" : {
        "attributeId" : {
          "type" : "string",
          "description" : "The property attribute id"
        },
        "label" : {
          "type" : "string",
          "description" : "The property attribute label"
        },
        "value" : {
          "type" : "string",
          "description" : "The value of the property"
        },
        "highlights" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "A match on a property to a query"
    },
    "SearchTabQueryFilterRequest" : {
      "type" : "object",
      "required" : [ "facetId" ],
      "properties" : {
        "facetId" : {
          "type" : "string"
        }
      }
    },
    "SearchTabQueryFilterResponse" : {
      "allOf" : [ {
        "$ref" : "#/definitions/SearchTabQueryFilterRequest"
      }, {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "groupLabel" : {
            "type" : "string"
          },
          "fq" : {
            "type" : "string"
          }
        }
      } ]
    },
    "SearchTabFieldFilterRequest" : {
      "allOf" : [ {
        "$ref" : "#/definitions/SearchTabQueryFilterRequest"
      }, {
        "type" : "object",
        "required" : [ "value" ],
        "properties" : {
          "value" : {
            "type" : "string"
          }
        }
      } ]
    },
    "SearchTabFieldFilterResponse" : {
      "allOf" : [ {
        "$ref" : "#/definitions/SearchTabQueryFilterResponse"
      }, {
        "$ref" : "#/definitions/SearchTabFieldFilterRequest"
      } ]
    },
    "SearchTabSliderFilterRequest" : {
      "allOf" : [ {
        "$ref" : "#/definitions/SearchTabQueryFilterRequest"
      }, {
        "type" : "object",
        "required" : [ "max", "min" ],
        "properties" : {
          "min" : {
            "type" : "string"
          },
          "max" : {
            "type" : "string"
          }
        }
      } ]
    },
    "SearchTabSliderFilterResponse" : {
      "allOf" : [ {
        "$ref" : "#/definitions/SearchTabQueryFilterResponse"
      }, {
        "$ref" : "#/definitions/SearchTabSliderFilterRequest"
      } ]
    },
    "SearchTabRequestCommon" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Name"
      }, {
        "type" : "object",
        "properties" : {
          "rootTo" : {
            "type" : "string",
            "description" : "If the results should be rooted to a parent level.",
            "enum" : [ "NONE", "RESOURCE", "DATA_SET" ],
            "default" : "NONE"
          },
          "global" : {
            "type" : "boolean",
            "description" : "If true, users and groups is ignored and everyone can see this tab",
            "default" : false
          },
          "users" : {
            "type" : "array",
            "description" : "Users that can use the search tab",
            "items" : {
              "type" : "string"
            }
          },
          "groups" : {
            "type" : "array",
            "description" : "Groups that can use the search tab",
            "items" : {
              "type" : "string"
            }
          },
          "owner" : {
            "type" : "string",
            "description" : "The creator of the facet."
          },
          "isDefault" : {
            "type" : "boolean",
            "description" : "True if this is the default search tab",
            "default" : false
          },
          "order" : {
            "type" : "integer",
            "description" : "The order the tab should be displayed",
            "minimum" : 0
          }
        }
      } ]
    },
    "SearchTabRequest" : {
      "allOf" : [ {
        "$ref" : "#/definitions/SearchTabRequestCommon"
      }, {
        "type" : "object",
        "properties" : {
          "sliderFilters" : {
            "type" : "array",
            "description" : "Slider filters to apply to the tab",
            "items" : {
              "$ref" : "#/definitions/SearchTabSliderFilterRequest"
            }
          },
          "queryFilters" : {
            "type" : "array",
            "description" : "Query filters to apply to the tab",
            "items" : {
              "$ref" : "#/definitions/SearchTabQueryFilterRequest"
            }
          },
          "fieldFilters" : {
            "type" : "array",
            "description" : "Field filters to apply to the tab",
            "items" : {
              "$ref" : "#/definitions/SearchTabFieldFilterRequest"
            }
          }
        }
      } ]
    },
    "SearchTab" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ResourceResponse"
      }, {
        "$ref" : "#/definitions/SearchTabRequestCommon"
      }, {
        "type" : "object",
        "properties" : {
          "sliderFilters" : {
            "type" : "array",
            "description" : "Slider filters to apply to the tab",
            "items" : {
              "$ref" : "#/definitions/SearchTabSliderFilterResponse"
            }
          },
          "queryFilters" : {
            "type" : "array",
            "description" : "Query filters to apply to the tab",
            "items" : {
              "$ref" : "#/definitions/SearchTabQueryFilterResponse"
            }
          },
          "fieldFilters" : {
            "type" : "array",
            "description" : "Field filters to apply to the tab",
            "items" : {
              "$ref" : "#/definitions/SearchTabFieldFilterResponse"
            }
          },
          "isSystem" : {
            "type" : "boolean",
            "description" : "True if this is a system tab. Only position and isDefault may be modified for a system tab. System tabs may not be deleted."
          },
          "readOnly" : {
            "type" : "boolean",
            "description" : "True if this is a read only tab for the current user. Only position and isDefault may be changed for a read only tab."
          }
        }
      } ]
    },
    "SearchTabOrder" : {
      "type" : "object",
      "properties" : {
        "items" : {
          "type" : "array",
          "description" : "All defined tabs and their order",
          "items" : {
            "$ref" : "#/definitions/SearchTabOrder_items"
          }
        }
      },
      "description" : "The order that search tabs should be displayed in the UI"
    },
    "SearchTabs" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CollectionResponse"
      }, {
        "type" : "object",
        "properties" : {
          "items" : {
            "type" : "array",
            "description" : "All defined tabs",
            "items" : {
              "$ref" : "#/definitions/SearchTab"
            }
          }
        }
      } ]
    },
    "FacetResult" : {
      "type" : "object",
      "properties" : {
        "facetHref" : {
          "type" : "string",
          "description" : "URL to facet details"
        },
        "facetId" : {
          "type" : "string",
          "description" : "The id of the facet given by the user"
        },
        "facetType" : {
          "type" : "string",
          "description" : "The type of the facet",
          "enum" : [ "QueryFacet", "FieldFacet", "SliderFacet" ]
        },
        "groupLabel" : {
          "type" : "string",
          "description" : "The label for this group of buckets"
        },
        "buckets" : {
          "type" : "array",
          "description" : "Facet result buckets",
          "items" : {
            "$ref" : "#/definitions/FacetResult_buckets"
          }
        }
      },
      "description" : "The result of a facet query"
    },
    "LineageFilterRequest" : {
      "type" : "object",
      "required" : [ "filterId" ],
      "properties" : {
        "filterId" : {
          "type" : "string"
        }
      }
    },
    "LineageFilter" : {
      "type" : "object",
      "properties" : {
        "classes" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "LineageFilterModelRequest" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Name"
      }, {
        "type" : "object",
        "properties" : {
          "filterByDefault" : {
            "type" : "boolean",
            "description" : "If true this facet will be applied by default to all lineage queries",
            "default" : false
          },
          "global" : {
            "type" : "boolean",
            "description" : "If true, users is ignored and everyone can see this filter.",
            "default" : false
          },
          "excludeTypeFilter" : {
            "description" : "Classes to exclude",
            "$ref" : "#/definitions/LineageFilter"
          },
          "passThroughFilter" : {
            "description" : "Classes to exclude",
            "$ref" : "#/definitions/LineageFilter"
          },
          "leafFilter" : {
            "description" : "Classes to exclude",
            "$ref" : "#/definitions/LineageFilter"
          },
          "owner" : {
            "type" : "string",
            "description" : "The creator of the lineage filter."
          }
        },
        "description" : "Common parent of facet models"
      } ]
    },
    "FacetModelRequest" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Name"
      }, {
        "type" : "object",
        "properties" : {
          "group" : {
            "type" : "string",
            "description" : "The group the facet belongs to. Facets belonging to the same group will have multi-select behavior. This means that multiple facet filters from the same group can be selected and all results matching any selected filter will be returned. In addition, even if a filter from the group is selected, counts will still be shown from the un-selected facets as if no facet from that group was selected.",
            "pattern" : "[a-zA-Z0-9_]*"
          },
          "groupLabel" : {
            "type" : "string",
            "description" : "Group display name"
          },
          "facetByDefault" : {
            "type" : "boolean",
            "description" : "If true this facet will be applied by default to all basic queries",
            "default" : false
          },
          "global" : {
            "type" : "boolean",
            "description" : "If true, users and groups is ignored and everyone can see this facet",
            "default" : false
          },
          "users" : {
            "type" : "array",
            "description" : "Users that can use this facet",
            "items" : {
              "type" : "string"
            }
          },
          "groups" : {
            "type" : "array",
            "description" : "Groups that can use this facet",
            "items" : {
              "type" : "string"
            }
          },
          "owner" : {
            "type" : "string",
            "description" : "The creator of the facet."
          }
        },
        "description" : "Common parent of facet models"
      } ]
    },
    "FacetModelResponse" : {
      "allOf" : [ {
        "$ref" : "#/definitions/FacetModelRequest"
      }, {
        "$ref" : "#/definitions/ResourceResponse"
      }, {
        "type" : "object",
        "properties" : {
          "facetType" : {
            "type" : "string",
            "description" : "The type of the facet",
            "enum" : [ "QueryFacet", "FieldFacet", "SliderFacet" ]
          }
        }
      } ]
    },
    "FacetsModelResponse" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CollectionResponse"
      }, {
        "type" : "object",
        "properties" : {
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/FacetModelResponse"
            }
          }
        }
      } ]
    },
    "LineageFilterModelResponse" : {
      "allOf" : [ {
        "$ref" : "#/definitions/LineageFilterModelRequest"
      }, {
        "$ref" : "#/definitions/ResourceResponse"
      } ]
    },
    "LineageFiltersModelResponse" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CollectionResponse"
      }, {
        "type" : "object",
        "properties" : {
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/LineageFilterModelResponse"
            }
          }
        }
      } ]
    },
    "BaseQueryFacet" : {
      "type" : "object",
      "required" : [ "q" ],
      "properties" : {
        "q" : {
          "type" : "string",
          "description" : "Search query to match objects. Return order undefined. [Lucene Query Syntax](https://lucene.apache.org/core/2_9_4/queryparsersyntax.html)"
        },
        "groupOrder" : {
          "type" : "integer",
          "description" : "If set, query facets within the same groupLabel should be displayed in the given order"
        }
      }
    },
    "QueryFacet" : {
      "allOf" : [ {
        "$ref" : "#/definitions/FacetModelRequest"
      }, {
        "$ref" : "#/definitions/BaseQueryFacet"
      } ]
    },
    "QueryFacetResponse" : {
      "allOf" : [ {
        "$ref" : "#/definitions/FacetModelResponse"
      }, {
        "$ref" : "#/definitions/BaseQueryFacet"
      } ]
    },
    "QueryFacetsResponse" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CollectionResponse"
      }, {
        "type" : "object",
        "properties" : {
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/QueryFacetResponse"
            }
          }
        }
      } ]
    },
    "BaseFieldFacet" : {
      "type" : "object",
      "required" : [ "field" ],
      "properties" : {
        "field" : {
          "type" : "string",
          "description" : "The field to facet"
        },
        "limit" : {
          "type" : "integer",
          "description" : "Limit the number of buckets.",
          "minimum" : 1
        },
        "mincount" : {
          "type" : "integer",
          "description" : "Only return buckets with at least this number.",
          "minimum" : 1
        },
        "prefix" : {
          "type" : "string",
          "description" : "Only produce buckets for terms starting with this prefix."
        }
      }
    },
    "FieldFacet" : {
      "allOf" : [ {
        "$ref" : "#/definitions/FacetModelRequest"
      }, {
        "$ref" : "#/definitions/BaseFieldFacet"
      } ]
    },
    "FieldFacetResponse" : {
      "allOf" : [ {
        "$ref" : "#/definitions/FacetModelResponse"
      }, {
        "$ref" : "#/definitions/BaseFieldFacet"
      } ]
    },
    "FieldFacetsModelResponse" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CollectionResponse"
      }, {
        "type" : "object",
        "properties" : {
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/FieldFacetResponse"
            }
          }
        }
      } ]
    },
    "BaseSliderFacet" : {
      "type" : "object",
      "required" : [ "field" ],
      "properties" : {
        "field" : {
          "type" : "string",
          "description" : "The field to facet"
        }
      }
    },
    "SliderFacet" : {
      "allOf" : [ {
        "$ref" : "#/definitions/FacetModelRequest"
      }, {
        "$ref" : "#/definitions/BaseSliderFacet"
      } ]
    },
    "SliderFacetResponse" : {
      "allOf" : [ {
        "$ref" : "#/definitions/FacetModelResponse"
      }, {
        "$ref" : "#/definitions/BaseSliderFacet"
      } ]
    },
    "SliderFacetsModelResponse" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CollectionResponse"
      }, {
        "type" : "object",
        "properties" : {
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/SliderFacetResponse"
            }
          }
        }
      } ]
    },
    "ProductInfoResponse" : {
      "type" : "object",
      "properties" : {
        "releaseVersion" : {
          "type" : "string",
          "description" : "Release version of EDC"
        },
        "buildVersion" : {
          "type" : "string",
          "description" : "Build version of EDC"
        },
        "buildDate" : {
          "type" : "string",
          "description" : "Build date of EDC"
        }
      }
    },
    "JobResponses" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CollectionResponse"
      }, {
        "type" : "object",
        "properties" : {
          "jobs" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/JobResponse"
            }
          }
        }
      } ],
      "description" : "Job Responses"
    },
    "JobResponse" : {
      "type" : "object",
      "properties" : {
        "jobId" : {
          "type" : "string",
          "description" : "Job Id"
        },
        "jobType" : {
          "type" : "string",
          "description" : "Job Type"
        },
        "createdTime" : {
          "type" : "number",
          "format" : "long",
          "description" : "Time when job is created"
        },
        "startTime" : {
          "type" : "number",
          "format" : "long",
          "description" : "Time when job started execution"
        },
        "endTime" : {
          "type" : "number",
          "format" : "long",
          "description" : "Time when job finished execution"
        },
        "logHref" : {
          "type" : "string",
          "description" : "href to logs of the job"
        },
        "resultHref" : {
          "type" : "string",
          "description" : "href to result"
        },
        "configHref" : {
          "type" : "string",
          "description" : "configuration of a job"
        },
        "status" : {
          "type" : "string",
          "enum" : [ "RUNNING", "COMPLETED", "FAILED", "SUBMITTED", "CANCELLED" ]
        }
      },
      "description" : "Job Response"
    },
    "SearchExportApiResponses" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CollectionResponse"
      }, {
        "type" : "object",
        "properties" : {
          "SearchExportJobs" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/SearchExportApiResponse"
            }
          }
        }
      } ],
      "description" : "search export responses"
    },
    "SearchExportApiResponse" : {
      "type" : "object",
      "properties" : {
        "jobId" : {
          "type" : "string",
          "description" : "Job Id"
        },
        "createdTime" : {
          "type" : "number",
          "format" : "long",
          "description" : "Time when job is created"
        },
        "startTime" : {
          "type" : "number",
          "format" : "long",
          "description" : "Time when job started execution"
        },
        "endTime" : {
          "type" : "number",
          "format" : "long",
          "description" : "Time when job finished execution"
        },
        "logHref" : {
          "type" : "string",
          "description" : "Download Logs href"
        },
        "resultHref" : {
          "type" : "string",
          "description" : "Download csv href"
        },
        "configHref" : {
          "type" : "string",
          "description" : "Search export config"
        },
        "status" : {
          "type" : "string",
          "enum" : [ "RUNNING", "COMPLETED", "FAILED", "SUBMITTED", "CANCELLED" ]
        }
      },
      "description" : "search export response."
    },
    "ObjectExportApiResponses" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CollectionResponse"
      }, {
        "type" : "object",
        "properties" : {
          "ObjectExportJobs" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ObjectExportApiResponse"
            }
          }
        }
      } ],
      "description" : "object export responses"
    },
    "ObjectExportApiResponse" : {
      "type" : "object",
      "properties" : {
        "jobId" : {
          "type" : "string",
          "description" : "Job Id"
        },
        "createdTime" : {
          "type" : "number",
          "format" : "long",
          "description" : "Time when job is created"
        },
        "startTime" : {
          "type" : "number",
          "format" : "long",
          "description" : "Time when job started execution"
        },
        "endTime" : {
          "type" : "number",
          "format" : "long",
          "description" : "Time when job finished execution"
        },
        "logHref" : {
          "type" : "string",
          "description" : "Download Logs href"
        },
        "resultHref" : {
          "type" : "string",
          "description" : "Download csv href"
        },
        "configHref" : {
          "type" : "string",
          "description" : "Search export config"
        },
        "status" : {
          "type" : "string",
          "enum" : [ "RUNNING", "COMPLETED", "FAILED", "SUBMITTED", "CANCELLED" ]
        }
      },
      "description" : "object export response."
    },
    "ResourceExportApiResponses" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CollectionResponse"
      }, {
        "type" : "object",
        "properties" : {
          "ResourceExportJobs" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ResourceExportApiResponse"
            }
          }
        }
      } ]
    },
    "ResourceExportApiResponse" : {
      "type" : "object",
      "properties" : {
        "jobId" : {
          "type" : "string",
          "description" : "Job Id"
        },
        "createdTime" : {
          "type" : "number",
          "format" : "long",
          "description" : "Time when job is created"
        },
        "startTime" : {
          "type" : "number",
          "format" : "long",
          "description" : "Time when job started execution"
        },
        "endTime" : {
          "type" : "number",
          "format" : "long",
          "description" : "Time when job finished execution"
        },
        "logHref" : {
          "type" : "string",
          "description" : "Download Logs href"
        },
        "resultHref" : {
          "type" : "string",
          "description" : "Download csv href"
        },
        "configHref" : {
          "type" : "string",
          "description" : "Search export config"
        },
        "status" : {
          "type" : "string",
          "enum" : [ "RUNNING", "COMPLETED", "FAILED", "SUBMITTED", "CANCELLED" ]
        }
      },
      "description" : "Reosurce export response."
    },
    "ObjectImportApiResponses" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CollectionResponse"
      }, {
        "type" : "object",
        "properties" : {
          "ImportJobs" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ObjectImportApiResponse"
            }
          }
        }
      } ],
      "description" : "Import Responses"
    },
    "ObjectImportApiResponse" : {
      "type" : "object",
      "properties" : {
        "jobId" : {
          "type" : "string",
          "description" : "Job Id"
        },
        "createdTime" : {
          "type" : "number",
          "format" : "long",
          "description" : "Time when job is created"
        },
        "startTime" : {
          "type" : "number",
          "format" : "long",
          "description" : "Time when job started execution"
        },
        "endTime" : {
          "type" : "number",
          "format" : "long",
          "description" : "Time when job finished execution"
        },
        "logHref" : {
          "type" : "string",
          "description" : "Download log"
        },
        "configHref" : {
          "type" : "string",
          "description" : "Object import config"
        },
        "status" : {
          "type" : "string",
          "enum" : [ "RUNNING", "COMPLETED", "FAILED", "SUBMITTED", "CANCELLED" ]
        }
      },
      "description" : "Import response."
    },
    "ObjectExportConfig" : {
      "type" : "object",
      "required" : [ "attributeIds", "objectId" ],
      "properties" : {
        "objectId" : {
          "type" : "string",
          "description" : "Object Id"
        },
        "attributeIds" : {
          "type" : "array",
          "description" : "Attributes to be exported",
          "items" : {
            "type" : "string"
          }
        },
        "excludeChildren" : {
          "type" : "boolean",
          "description" : "Exclude children in the result",
          "default" : false
        },
        "includeReferenceObjects" : {
          "type" : "boolean",
          "description" : "Exclude reference objects in the result",
          "default" : false
        }
      },
      "description" : "object export configuration."
    },
    "SearchExportConfig" : {
      "type" : "object",
      "required" : [ "attributeIds" ],
      "properties" : {
        "q" : {
          "type" : "string",
          "description" : "Search query to match objects. Return order undefined. [Lucene Query Syntax](https://lucene.apache.org/core/2_9_4/queryparsersyntax.html)"
        },
        "basicQuery" : {
          "type" : "string",
          "description" : "EDC query string"
        },
        "tabId" : {
          "type" : "string",
          "description" : "Tab Id"
        },
        "rootTo" : {
          "type" : "string",
          "enum" : [ "RESOURCE", "DATA_SET" ]
        },
        "relatedId" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "qf" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "fq" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "attributeIds" : {
          "type" : "array",
          "description" : "Attributes to be exported",
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "Search export config."
    },
    "ResourceExportConfig" : {
      "type" : "object",
      "required" : [ "attributeIds", "classType", "resourceName" ],
      "properties" : {
        "resourceName" : {
          "type" : "string",
          "description" : "Resource Name"
        },
        "classType" : {
          "type" : "array",
          "description" : "class types to be exported",
          "items" : {
            "type" : "string"
          }
        },
        "attributeIds" : {
          "type" : "array",
          "description" : "Attributes to be exported",
          "items" : {
            "type" : "string"
          }
        },
        "includeReferenceObjects" : {
          "type" : "boolean",
          "description" : "export reference object in the csv",
          "default" : false
        }
      },
      "description" : "Resource export config."
    },
    "ObjectImportConfig" : {
      "type" : "object",
      "required" : [ "packages" ],
      "properties" : {
        "packages" : {
          "type" : "string",
          "description" : "packages"
        },
        "emailId" : {
          "type" : "string",
          "description" : "emailId"
        }
      },
      "description" : "object import config."
    },
    "JobStatus" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "type" : "string",
          "enum" : [ "RUNNING", "COMPLETED", "FAILED", "SUBMITTED", "CANCELLED" ]
        }
      }
    },
    "AvailableLogsResponse" : {
      "type" : "object",
      "properties" : {
        "jobs" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AvailableLogResponse"
          }
        }
      }
    },
    "AvailableLogResponse" : {
      "type" : "object",
      "properties" : {
        "logId" : {
          "type" : "string"
        },
        "logHref" : {
          "type" : "string"
        },
        "logType" : {
          "type" : "string"
        }
      }
    },
    "ResourceResponse" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "Unique id"
        },
        "href" : {
          "type" : "string",
          "description" : "Link to resource. Relative to the base path."
        }
      },
      "description" : "Common properties returned in resource responses."
    },
    "CollectionResponseMetadata" : {
      "type" : "object",
      "properties" : {
        "totalCount" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Total number of results",
          "readOnly" : true
        },
        "nextCursorMark" : {
          "type" : "string",
          "description" : "If the request supports cursor pagination this will be populated. Deep pagination using cursors can be more efficient."
        },
        "partialResults" : {
          "type" : "boolean",
          "description" : "If true, he returned response does not contain results from all the appropriate shards."
        }
      }
    },
    "CollectionResponse" : {
      "type" : "object",
      "properties" : {
        "metadata" : {
          "$ref" : "#/definitions/CollectionResponseMetadata"
        }
      },
      "description" : "A response from the API returning multiple items"
    },
    "AppliedFilter" : {
      "type" : "object",
      "properties" : {
        "fq" : {
          "type" : "string",
          "description" : "filter query"
        },
        "value" : {
          "type" : "string",
          "description" : "asset type."
        }
      }
    },
    "SearchInfo" : {
      "type" : "object",
      "properties" : {
        "tabRedirect" : {
          "type" : "string"
        },
        "appliedFilters" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AppliedFilter"
          }
        }
      },
      "description" : "A response from the API returning multiple items"
    },
    "Error" : {
      "type" : "object",
      "properties" : {
        "code" : {
          "type" : "integer",
          "format" : "int32"
        },
        "message" : {
          "type" : "string"
        }
      }
    },
    "Name" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "maxLength" : 100,
          "pattern" : "^[^.~ \t\n\r][^.~\n\r]*$"
        }
      }
    },
    "EmbeddedFact" : {
      "allOf" : [ {
        "$ref" : "#/definitions/FactRequest"
      }, {
        "type" : "object",
        "properties" : {
          "label" : {
            "type" : "string",
            "description" : "Attribute label"
          }
        }
      } ],
      "description" : "A lightweight fact to be embedded in a linked object"
    },
    "EmbeddedObject" : {
      "type" : "object",
      "properties" : {
        "facts" : {
          "type" : "array",
          "description" : "Facts about the object",
          "items" : {
            "$ref" : "#/definitions/EmbeddedFact"
          }
        },
        "businessTerms" : {
          "type" : "array",
          "description" : "Associated business terms",
          "items" : {
            "$ref" : "#/definitions/ObjectRefResponse"
          }
        }
      },
      "description" : "Details about a linked object"
    },
    "Link" : {
      "type" : "object",
      "properties" : {
        "associationId" : {
          "type" : "string",
          "description" : "The type of the link"
        },
        "outResource" : {
          "type" : "string",
          "description" : "The name of the resource out belongs to."
        },
        "outId" : {
          "type" : "string",
          "description" : "The id of the object for which this link is outgoing. The source."
        },
        "inResource" : {
          "type" : "string",
          "description" : "The name of the resource in belongs to."
        },
        "inId" : {
          "type" : "string",
          "description" : "The id of the object for which this link is incoming. The destination."
        },
        "properties" : {
          "type" : "array",
          "description" : "Properties that have been set on the link.",
          "items" : {
            "$ref" : "#/definitions/LinkPropertyResponse"
          }
        },
        "outEmbedded" : {
          "$ref" : "#/definitions/EmbeddedObject"
        },
        "inEmbedded" : {
          "$ref" : "#/definitions/EmbeddedObject"
        }
      },
      "description" : "A relationship between two objects"
    },
    "Links" : {
      "type" : "object",
      "properties" : {
        "items" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Link"
          }
        }
      }
    },
    "FactRequest" : {
      "type" : "object",
      "required" : [ "attributeId" ],
      "properties" : {
        "attributeId" : {
          "type" : "string",
          "description" : "Attribute id",
          "pattern" : "[^.]+[.].+"
        },
        "value" : {
          "type" : "string",
          "description" : "Fact value"
        },
        "projectedFrom" : {
          "type" : "string",
          "description" : "Id of object from which this fact was projected. Value is ignored if this is supplied.",
          "pattern" : ".+://.+"
        },
        "readOnly" : {
          "type" : "boolean",
          "description" : "Certain facts cannot be modified. These fact need not be included in any requests to the server."
        }
      },
      "description" : "A piece of information about an object to be used in requests"
    },
    "FactResponse" : {
      "allOf" : [ {
        "$ref" : "#/definitions/FactRequest"
      }, {
        "type" : "object",
        "properties" : {
          "label" : {
            "type" : "string",
            "description" : "Attribute label"
          },
          "description" : {
            "type" : "string",
            "description" : "Attribute description"
          },
          "providerId" : {
            "type" : "string",
            "description" : "Asserter of the fact"
          },
          "xid" : {
            "type" : "string",
            "description" : "Exchange document containing the fact"
          },
          "modifiedBy" : {
            "type" : "string",
            "description" : "User that has modified the fact"
          },
          "projectedFrom" : {
            "type" : "string",
            "description" : "Object id the fact value was projected from"
          }
        }
      } ],
      "description" : "A piece of information about an object"
    },
    "LinkPropertyRequest" : {
      "type" : "object",
      "required" : [ "attributeId" ],
      "properties" : {
        "attributeId" : {
          "type" : "string",
          "description" : "Attribute id",
          "pattern" : "[^.]+[.].+"
        },
        "value" : {
          "type" : "string",
          "description" : "Property value"
        }
      },
      "description" : "A property set on a link"
    },
    "LinkPropertyResponse" : {
      "allOf" : [ {
        "$ref" : "#/definitions/LinkPropertyRequest"
      }, {
        "type" : "object",
        "properties" : {
          "label" : {
            "type" : "string",
            "description" : "Attribute label"
          }
        }
      } ],
      "description" : "A property set on a link"
    },
    "LinkedObjectRequest" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ObjectRefRequest"
      }, {
        "type" : "object",
        "required" : [ "association" ],
        "properties" : {
          "association" : {
            "type" : "string",
            "description" : "Association id",
            "pattern" : "[^.]+[.].+"
          },
          "linkProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/LinkPropertyRequest"
            }
          },
          "readOnly" : {
            "type" : "boolean",
            "description" : "If true the link cannot be modified and it should not be included in requests."
          }
        }
      } ],
      "description" : "An object related to another object"
    },
    "LinkedObjectResponse" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ResourceResponse"
      }, {
        "$ref" : "#/definitions/LinkedObjectRequest"
      }, {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "classType" : {
            "type" : "string"
          },
          "providerId" : {
            "type" : "string",
            "description" : "Asserter of the link"
          },
          "xid" : {
            "type" : "string",
            "description" : "Exchange document containing the link"
          },
          "modifiedBy" : {
            "type" : "string",
            "description" : "User that has modified the link"
          },
          "linkProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/LinkPropertyResponse"
            }
          }
        },
        "description" : "An object related to another object"
      } ]
    },
    "ModelRefRequest" : {
      "type" : "object",
      "required" : [ "id" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "Id of model resource",
          "pattern" : "[^.]+[.].+"
        }
      },
      "description" : "A reference to a model resource"
    },
    "AttributeResourceConfig" : {
      "type" : "object",
      "properties" : {
        "assignmentType" : {
          "type" : "string",
          "description" : "assignment type",
          "enum" : [ "ALL", "NONE", "LIST" ],
          "default" : "ALL"
        },
        "values" : {
          "type" : "array",
          "description" : "list of resources, applicable only for LIST assignment type",
          "items" : {
            "type" : "string",
            "pattern" : "^[^.~\n\r]+$"
          }
        }
      },
      "description" : "resource configurations for attributes"
    },
    "ObjectRefRequest" : {
      "type" : "object",
      "required" : [ "id" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "Id of object resource",
          "pattern" : ".+://.+"
        },
        "readOnly" : {
          "type" : "boolean",
          "description" : "If true the reference cannot be modified and it should not be included in requests."
        }
      },
      "description" : "A reference to an object resource"
    },
    "ObjectRefResponse" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ObjectRefRequest"
      }, {
        "type" : "object",
        "properties" : {
          "href" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "classType" : {
            "type" : "string"
          }
        }
      } ],
      "description" : "A reference to an object resource"
    },
    "ObjectIdRequest" : {
      "type" : "object",
      "properties" : {
        "facts" : {
          "type" : "array",
          "description" : "List of facts applying to this object",
          "items" : {
            "$ref" : "#/definitions/FactRequest"
          }
        },
        "srcLinks" : {
          "type" : "array",
          "description" : "Upstream objects",
          "items" : {
            "$ref" : "#/definitions/LinkedObjectRequest"
          }
        },
        "businessTerms" : {
          "type" : "array",
          "description" : "Associated business terms",
          "items" : {
            "$ref" : "#/definitions/ObjectRefRequest"
          }
        }
      },
      "description" : "An object contains facts and links to other objects"
    },
    "ObjectRequest" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ObjectIdRequest"
      }, {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Id of object resource",
            "pattern" : ".+://.+"
          }
        }
      } ],
      "description" : "An object contains facts and links to other objects"
    },
    "ObjectResponse" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ResourceResponse"
      }, {
        "type" : "object",
        "properties" : {
          "nativeId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Internal id of object"
          },
          "seeAlsoHref" : {
            "type" : "string",
            "description" : "Certain objects maybe managed from an alternative endpoint (for instance Data Domains). In this case this link will point to that location."
          },
          "facts" : {
            "type" : "array",
            "description" : "List of facts applying to this object",
            "items" : {
              "$ref" : "#/definitions/FactResponse"
            }
          },
          "srcLinks" : {
            "type" : "array",
            "description" : "Upstream objects",
            "items" : {
              "$ref" : "#/definitions/LinkedObjectResponse"
            }
          },
          "dstLinks" : {
            "type" : "array",
            "description" : "Downstream objects",
            "items" : {
              "$ref" : "#/definitions/LinkedObjectResponse"
            }
          },
          "businessTerms" : {
            "type" : "array",
            "description" : "Associated business terms",
            "items" : {
              "$ref" : "#/definitions/ObjectRefResponse"
            }
          },
          "commentHref" : {
            "type" : "string",
            "description" : "Associated Comments on object"
          }
        }
      } ]
    },
    "ObjectsRequest" : {
      "type" : "object",
      "properties" : {
        "items" : {
          "type" : "array",
          "description" : "Page of objects",
          "items" : {
            "$ref" : "#/definitions/ObjectRequest"
          }
        }
      }
    },
    "ObjectsResponse" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CollectionResponse"
      }, {
        "type" : "object",
        "properties" : {
          "items" : {
            "type" : "array",
            "description" : "Page of objects",
            "items" : {
              "$ref" : "#/definitions/ObjectResponse"
            }
          }
        }
      } ]
    },
    "InferredTermResponse" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ObjectRefResponse"
      }, {
        "type" : "object",
        "properties" : {
          "confidenceScore" : {
            "type" : "string"
          }
        }
      } ]
    },
    "InferredTermsResponse" : {
      "type" : "object",
      "properties" : {
        "items" : {
          "type" : "array",
          "description" : "Inferred Business Terms",
          "items" : {
            "$ref" : "#/definitions/InferredTermResponse"
          }
        }
      }
    },
    "RejectedTermsRequest" : {
      "type" : "object",
      "properties" : {
        "items" : {
          "type" : "array",
          "description" : "Page of object references",
          "items" : {
            "$ref" : "#/definitions/ObjectRefRequest"
          }
        }
      }
    },
    "RejectedTermsResponse" : {
      "type" : "object",
      "properties" : {
        "items" : {
          "type" : "array",
          "description" : "Rejected Business Terms",
          "items" : {
            "$ref" : "#/definitions/ObjectRefResponse"
          }
        }
      }
    },
    "UserDetails" : {
      "type" : "object",
      "properties" : {
        "userId" : {
          "type" : "string",
          "description" : "userId for the user."
        }
      }
    },
    "CreateCommentRequest" : {
      "allOf" : [ {
        "properties" : {
          "text" : {
            "type" : "string",
            "description" : "Comment text."
          },
          "type" : {
            "type" : "string",
            "description" : "Type of the comment.",
            "enum" : [ "QUESTION", "ANSWER", "OTHERS" ]
          }
        }
      } ],
      "description" : "Comment details"
    },
    "CreateReplyRequest" : {
      "type" : "object",
      "properties" : {
        "text" : {
          "type" : "string",
          "description" : "Comment text."
        }
      },
      "description" : "Comment details"
    },
    "ReplyResponse" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ResourceResponse"
      }, {
        "$ref" : "#/definitions/CreateReplyRequest"
      }, {
        "properties" : {
          "creationTime" : {
            "type" : "number",
            "description" : "Comment creation Time."
          },
          "createdBy" : {
            "type" : "string",
            "description" : "Comments Owner."
          },
          "lastModificationTime" : {
            "type" : "number",
            "description" : "Comment modification Time."
          },
          "voteCount" : {
            "type" : "number",
            "description" : "Total Vote Count"
          },
          "voteDetails" : {
            "$ref" : "#/definitions/VoteResponse"
          }
        }
      } ]
    },
    "CommentResponse" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ResourceResponse"
      }, {
        "$ref" : "#/definitions/CreateCommentRequest"
      }, {
        "properties" : {
          "creationTime" : {
            "type" : "number",
            "description" : "Comment creation Time."
          },
          "createdBy" : {
            "type" : "string",
            "description" : "Comments Owner."
          },
          "lastModificationTime" : {
            "type" : "number",
            "description" : "Comment modification Time."
          },
          "voteCount" : {
            "type" : "number",
            "description" : "Total Vote Count"
          },
          "voteDetails" : {
            "$ref" : "#/definitions/VoteResponse"
          },
          "replyCount" : {
            "type" : "number",
            "description" : "Total count of replies on object"
          },
          "replies" : {
            "type" : "array",
            "description" : "Top level Comment for the object.",
            "items" : {
              "$ref" : "#/definitions/ReplyResponse"
            }
          }
        }
      } ]
    },
    "TopComment" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CommentResponse"
      }, {
        "type" : "object"
      }, {
        "properties" : {
          "replyHref" : {
            "type" : "string",
            "description" : "href to browse reply for the comment"
          },
          "replies" : {
            "type" : "array",
            "description" : "Top level Comment for the object.",
            "items" : {
              "$ref" : "#/definitions/ReplyResponse"
            }
          }
        }
      } ]
    },
    "ObjectComments" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CollectionResponse"
      }, {
        "type" : "object",
        "properties" : {
          "items" : {
            "type" : "array",
            "description" : "All top comments on object.",
            "items" : {
              "$ref" : "#/definitions/TopComment"
            }
          }
        }
      } ]
    },
    "ObjectRating" : {
      "allOf" : [ {
        "type" : "object",
        "properties" : {
          "ratings" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/Rating"
            }
          }
        }
      } ]
    },
    "Rating" : {
      "type" : "object",
      "properties" : {
        "ratingValue" : {
          "type" : "number",
          "description" : "Rating on scale of 1 to 5.",
          "minimum" : 1,
          "maximum" : 5
        },
        "ratingType" : {
          "type" : "string",
          "description" : "Type of the Rating."
        }
      }
    },
    "CreateReviewRequest" : {
      "allOf" : [ {
        "properties" : {
          "reviewText" : {
            "type" : "string",
            "description" : "Review text."
          }
        }
      }, {
        "$ref" : "#/definitions/ObjectRating"
      } ],
      "description" : "Create Rating on Object with comment"
    },
    "ObjectReviewsResponse" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CollectionResponse"
      }, {
        "type" : "object",
        "properties" : {
          "aggregatedReview" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/AggregatedReview"
            }
          },
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ReviewResponse"
            }
          }
        },
        "description" : "All the ratings on the object."
      } ]
    },
    "AggregatedReview" : {
      "type" : "object",
      "properties" : {
        "ratingValue" : {
          "type" : "number",
          "description" : "Existing rating on scale of 1 to 5.",
          "minimum" : 1,
          "maximum" : 5
        },
        "count" : {
          "type" : "number",
          "description" : "Aggregated count per rating."
        }
      }
    },
    "ReviewResponse" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ResourceResponse"
      }, {
        "properties" : {
          "creationTime" : {
            "type" : "number",
            "description" : "Review creation Time."
          },
          "lastModificationTime" : {
            "type" : "number",
            "description" : "Review modification Time."
          },
          "text" : {
            "type" : "string",
            "description" : "Review text."
          },
          "createdBy" : {
            "type" : "string",
            "description" : "Review text."
          },
          "voteCount" : {
            "type" : "number",
            "description" : "Total Vote Count"
          },
          "voteDetails" : {
            "$ref" : "#/definitions/VoteResponse"
          }
        }
      }, {
        "$ref" : "#/definitions/ObjectRating"
      } ],
      "description" : "Review details"
    },
    "CommentsReply" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CollectionResponse"
      }, {
        "type" : "object",
        "properties" : {
          "items" : {
            "type" : "array",
            "description" : "All top comments on object.",
            "items" : {
              "$ref" : "#/definitions/ReplyResponse"
            }
          }
        }
      } ]
    },
    "VoteRequest" : {
      "allOf" : [ {
        "properties" : {
          "voteKind" : {
            "type" : "string",
            "description" : "Review text.",
            "enum" : [ "HELPFUL", "NOT_HELPFUL" ]
          }
        }
      } ],
      "description" : "Vote request on the comments"
    },
    "AggregatedVote" : {
      "allOf" : [ {
        "properties" : {
          "voteKind" : {
            "type" : "string"
          },
          "users" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/UserDetails"
            }
          }
        }
      } ],
      "description" : "Vote response over the comments"
    },
    "VoteResponse" : {
      "allOf" : [ {
        "properties" : {
          "aggregatedVotes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/AggregatedVote"
            }
          }
        }
      } ],
      "description" : "Vote response over the comments"
    },
    "CertifyObjectRequest" : {
      "allOf" : [ {
        "properties" : {
          "certifyText" : {
            "type" : "string",
            "description" : "Certify text."
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags on certified object.",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ],
      "description" : "Certify Object with comment"
    },
    "CertifyObjectResponse" : {
      "allOf" : [ {
        "properties" : {
          "certifyText" : {
            "type" : "string",
            "description" : "Certify text."
          },
          "tags" : {
            "type" : "array",
            "description" : "List of tags on certified object.",
            "items" : {
              "type" : "string"
            }
          }
        }
      }, {
        "$ref" : "#/definitions/UserDetails"
      } ],
      "description" : "Certify Object with comment"
    },
    "AbstractDataTypeResponse" : {
      "type" : "object",
      "required" : [ "constraintType" ],
      "discriminator" : "constraintType",
      "properties" : {
        "constraintType" : {
          "type" : "string",
          "enum" : [ "RangeDtResponse", "ListDtResponse", "RegexDtResponse", "NoneDtResponse" ]
        }
      }
    },
    "DataTypeResponse" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AbstractDataTypeResponse"
      }, {
        "$ref" : "#/definitions/ResourceResponse"
      }, {
        "$ref" : "#/definitions/Name"
      }, {
        "type" : "object",
        "properties" : {
          "custom" : {
            "type" : "boolean",
            "description" : "True if this is a custom attribute"
          }
        }
      } ]
    },
    "NoneDtResponse" : {
      "allOf" : [ {
        "$ref" : "#/definitions/DataTypeResponse"
      }, {
        "type" : "object",
        "required" : [ "coreType" ],
        "properties" : {
          "coreType" : {
            "type" : "string",
            "description" : "Core type of this data type",
            "enum" : [ "STRING", "DATE", "INTEGER", "BOOLEAN", "DECIMAL", "PATH", "CSV", "RICH_TEXT" ]
          },
          "availableAnalyzers" : {
            "type" : "array",
            "description" : "Valid analyzers for this data type",
            "items" : {
              "type" : "string"
            }
          },
          "defaultAnalyzer" : {
            "type" : "string",
            "description" : "The default analyzer used for this type if none is selected"
          }
        }
      } ]
    },
    "RangeDtResponse" : {
      "allOf" : [ {
        "$ref" : "#/definitions/NoneDtResponse"
      }, {
        "type" : "object",
        "required" : [ "from", "to" ],
        "properties" : {
          "from" : {
            "type" : "string"
          },
          "to" : {
            "type" : "string"
          }
        }
      } ]
    },
    "ListDtResponse" : {
      "allOf" : [ {
        "$ref" : "#/definitions/NoneDtResponse"
      }, {
        "type" : "object",
        "properties" : {
          "values" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "RegexDtResponse" : {
      "allOf" : [ {
        "$ref" : "#/definitions/NoneDtResponse"
      }, {
        "type" : "object",
        "required" : [ "regex" ],
        "properties" : {
          "regex" : {
            "type" : "string"
          }
        }
      } ]
    },
    "DataTypesResponse" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CollectionResponse"
      }, {
        "type" : "object",
        "properties" : {
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/AbstractDataTypeResponse"
            }
          }
        }
      } ]
    },
    "RefDataTypeResponse" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ResourceResponse"
      }, {
        "$ref" : "#/definitions/Name"
      }, {
        "type" : "object",
        "properties" : {
          "defaultAssociationId" : {
            "type" : "string",
            "description" : "By default, reference attributes using this data type will create this association when a value is assigned."
          },
          "defaultAssociationHref" : {
            "type" : "string",
            "description" : "Link to association indiciated by defaultAssociationId"
          },
          "classId" : {
            "type" : "string",
            "description" : "Class selected by this reference data type."
          },
          "classHref" : {
            "type" : "string",
            "description" : "URL of class selected by this reference data type."
          },
          "attributeId" : {
            "type" : "string",
            "description" : "Attribute to be projected from the source class."
          },
          "attributeHref" : {
            "type" : "string",
            "description" : "URL of attribute to be projected from the source class."
          }
        }
      } ],
      "description" : "A reference data type describes a property that is projected from a class. It is then used by reference attributes which give the destination of that property."
    },
    "RefDataTypesResponse" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CollectionResponse"
      }, {
        "type" : "object",
        "properties" : {
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/RefDataTypeResponse"
            }
          }
        }
      } ]
    },
    "RefAttributePost" : {
      "type" : "object",
      "required" : [ "name", "refDataTypeId" ],
      "properties" : {
        "refDataTypeId" : {
          "type" : "string",
          "description" : "Id of reference data type.",
          "pattern" : "[^.]+[.].+"
        },
        "boost" : {
          "type" : "string",
          "description" : "LOWEST, LOWER, MEDIUM values are deprecated. They will be removed in the next major release.",
          "enum" : [ "LOWEST", "LOWER", "LOW", "MEDIUM", "HIGH" ],
          "default" : "LOW"
        },
        "name" : {
          "type" : "string",
          "maxLength" : 200,
          "pattern" : "^[^.~\n\r]+$"
        },
        "description" : {
          "type" : "string"
        },
        "multivalued" : {
          "type" : "boolean"
        },
        "suggestable" : {
          "type" : "boolean",
          "description" : "True if this attribute is a candidate for suggestion",
          "default" : false
        },
        "sortable" : {
          "type" : "boolean",
          "description" : "True if this attribute is a candidate for sorting",
          "default" : false
        },
        "searchable" : {
          "type" : "boolean",
          "description" : "True if this attribute is a candidate for search",
          "default" : false
        },
        "facetable" : {
          "type" : "boolean",
          "description" : "True if this attribute is a candidate for faceting",
          "default" : false
        },
        "sorted" : {
          "type" : "boolean",
          "description" : "True if this attribute may be used for sorting. Defaults to value of sortable."
        },
        "searched" : {
          "type" : "boolean",
          "description" : "True if this attribute is searched. If true indexed property is ignored. Defaults to value of searchable."
        },
        "indexed" : {
          "type" : "boolean",
          "description" : "If true this attribute should still be indexed even though it should not be searched by default. Defaults to value of searched."
        },
        "suggested" : {
          "type" : "boolean",
          "description" : "True if this attribute is included in suggestions. Defaults to value of suggestable."
        },
        "faceted" : {
          "type" : "boolean",
          "description" : "True if this attribute is used in facets. Defaults to value of facetable."
        },
        "analyzer" : {
          "type" : "string",
          "enum" : [ "INT", "LONG", "FLOAT", "DOUBLE", "BOOLEAN", "DATE", "STRING", "TEXT_GENERAL", "TEXT_TECHNICAL", "PATH_HEIRARCHY" ]
        },
        "classes" : {
          "type" : "array",
          "description" : "Classes that may have this attribute.",
          "items" : {
            "$ref" : "#/definitions/ModelRefRequest"
          }
        },
        "resources" : {
          "$ref" : "#/definitions/RefAttributePost_resources"
        }
      }
    },
    "RefAttributePut" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "boost" : {
          "type" : "string",
          "description" : "LOWEST, LOWER, MEDIUM values are deprecated. They will be removed in the next major release.",
          "enum" : [ "LOWEST", "LOWER", "LOW", "MEDIUM", "HIGH" ],
          "default" : "LOW"
        },
        "name" : {
          "type" : "string",
          "maxLength" : 200,
          "pattern" : "^[^.~\n\r]+$"
        },
        "suggested" : {
          "type" : "boolean",
          "description" : "True if this attribute is included in suggestions"
        },
        "sorted" : {
          "type" : "boolean",
          "description" : "True if this attribute may be used for sorting"
        },
        "searched" : {
          "type" : "boolean",
          "description" : "True if this attribute is searched. If true indexed property is ignored."
        },
        "indexed" : {
          "type" : "boolean",
          "description" : "If true this attribute should still be indexed even though it should not be searched by default."
        },
        "faceted" : {
          "type" : "boolean",
          "description" : "True if this attribute is used in facets"
        },
        "analyzer" : {
          "type" : "string",
          "enum" : [ "INT", "LONG", "FLOAT", "DOUBLE", "BOOLEAN", "DATE", "STRING", "TEXT_GENERAL", "TEXT_TECHNICAL", "PATH_HEIRARCHY" ]
        },
        "description" : {
          "type" : "string"
        },
        "classes" : {
          "type" : "array",
          "description" : "Classes that may have this attribute.",
          "items" : {
            "$ref" : "#/definitions/ModelRefRequest"
          }
        },
        "resources" : {
          "$ref" : "#/definitions/RefAttributePost_resources"
        }
      }
    },
    "RefAttributesPost" : {
      "type" : "object",
      "properties" : {
        "items" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/RefAttributePost"
          }
        }
      }
    },
    "RefAttributeResponse" : {
      "allOf" : [ {
        "$ref" : "#/definitions/RefAttributePost"
      }, {
        "$ref" : "#/definitions/ResourceResponse"
      }, {
        "type" : "object",
        "properties" : {
          "associationHref" : {
            "type" : "string",
            "description" : "Link to association indicated by associationId"
          },
          "associationId" : {
            "type" : "string",
            "description" : "Type of association to be created when assigning a value to this attribute."
          },
          "refDataTypeHref" : {
            "type" : "string",
            "description" : "Link to the reference data type."
          },
          "classes" : {
            "type" : "array",
            "description" : "Classes that may have this attribute.",
            "items" : {
              "$ref" : "#/definitions/ObjectRefResponse"
            }
          },
          "resources" : {
            "$ref" : "#/definitions/RefAttributeResponse_resources"
          }
        }
      } ]
    },
    "RefAttributesResponse" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CollectionResponse"
      }, {
        "type" : "object",
        "properties" : {
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/RefAttributeResponse"
            }
          }
        }
      } ]
    },
    "AttributePostRequest" : {
      "type" : "object",
      "required" : [ "dataTypeId" ],
      "properties" : {
        "boost" : {
          "type" : "string",
          "description" : "LOWEST, LOWER, MEDIUM values are deprecated. They will be removed in the next major release.",
          "enum" : [ "LOWEST", "LOWER", "LOW", "MEDIUM", "HIGH" ],
          "default" : "LOW"
        },
        "name" : {
          "type" : "string",
          "maxLength" : 200,
          "pattern" : "^[^.~\n\r]+$"
        },
        "description" : {
          "type" : "string"
        },
        "dataTypeId" : {
          "type" : "string",
          "pattern" : "[^.]+[.].+"
        },
        "multivalued" : {
          "type" : "boolean",
          "default" : false
        },
        "suggestable" : {
          "type" : "boolean",
          "description" : "True if this attribute is a candidate for suggestion",
          "default" : false
        },
        "sortable" : {
          "type" : "boolean",
          "description" : "True if this attribute is a candidate for sorting",
          "default" : false
        },
        "searchable" : {
          "type" : "boolean",
          "description" : "True if this attribute is a candidate for search",
          "default" : false
        },
        "facetable" : {
          "type" : "boolean",
          "description" : "True if this attribute is a candidate for faceting",
          "default" : false
        },
        "sorted" : {
          "type" : "boolean",
          "description" : "True if this attribute may be used for sorting. Defaults to value of sortable."
        },
        "searched" : {
          "type" : "boolean",
          "description" : "True if this attribute is searched. If true indexed property is ignored. Defaults to value of searchable."
        },
        "indexed" : {
          "type" : "boolean",
          "description" : "If true this attribute should still be indexed even though it should not be searched by default. Defaults to value of searched."
        },
        "suggested" : {
          "type" : "boolean",
          "description" : "True if this attribute is included in suggestions. Defaults to value of suggestable."
        },
        "faceted" : {
          "type" : "boolean",
          "description" : "True if this attribute is used in facets. Defaults to value of facetable."
        },
        "analyzer" : {
          "type" : "string",
          "enum" : [ "INT", "LONG", "FLOAT", "DOUBLE", "BOOLEAN", "DATE", "STRING", "TEXT_GENERAL", "TEXT_TECHNICAL", "PATH_HEIRARCHY" ]
        },
        "classes" : {
          "type" : "array",
          "description" : "Classes that may have this attribute.",
          "items" : {
            "$ref" : "#/definitions/ModelRefRequest"
          }
        },
        "resources" : {
          "$ref" : "#/definitions/RefAttributePost_resources"
        }
      }
    },
    "ClassPutRequest" : {
      "type" : "object",
      "properties" : {
        "searched" : {
          "type" : "boolean",
          "description" : "True if this class is searched. If false indexed value is ignored."
        },
        "indexed" : {
          "type" : "boolean",
          "description" : "If true this class should still be indexed even though it should not be searched by default."
        }
      }
    },
    "AttributePutRequest" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "boost" : {
          "type" : "string",
          "description" : "LOWEST, LOWER, MEDIUM values are deprecated. They will be removed in the next major release.",
          "enum" : [ "LOWEST", "LOWER", "LOW", "MEDIUM", "HIGH" ],
          "default" : "LOW"
        },
        "name" : {
          "type" : "string",
          "maxLength" : 200,
          "pattern" : "^[^~\n\r]+$"
        },
        "suggested" : {
          "type" : "boolean",
          "description" : "True if this attribute is included in suggestions"
        },
        "sorted" : {
          "type" : "boolean",
          "description" : "True if this attribute may be used for sorting"
        },
        "searched" : {
          "type" : "boolean",
          "description" : "True if this attribute is searched. If true indexed value is ignored."
        },
        "indexed" : {
          "type" : "boolean",
          "description" : "If true this attribute should still be indexed even though it should not be searched by default."
        },
        "faceted" : {
          "type" : "boolean",
          "description" : "True if this attribute is used in facets"
        },
        "analyzer" : {
          "type" : "string",
          "enum" : [ "INT", "LONG", "FLOAT", "DOUBLE", "BOOLEAN", "DATE", "STRING", "TEXT_GENERAL", "TEXT_TECHNICAL", "PATH_HEIRARCHY" ]
        },
        "description" : {
          "type" : "string"
        },
        "classes" : {
          "type" : "array",
          "description" : "Classes that may have this attribute.",
          "items" : {
            "$ref" : "#/definitions/ModelRefRequest"
          }
        },
        "resources" : {
          "$ref" : "#/definitions/RefAttributePost_resources"
        }
      }
    },
    "AttributeResponse" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ResourceResponse"
      }, {
        "$ref" : "#/definitions/AttributePostRequest"
      }, {
        "type" : "object",
        "properties" : {
          "dataTypeHref" : {
            "type" : "string"
          },
          "classes" : {
            "type" : "array",
            "description" : "Classes that may have this attribute.",
            "items" : {
              "$ref" : "#/definitions/ObjectRefResponse"
            }
          },
          "system" : {
            "type" : "boolean",
            "description" : "true if the attribute is system-defined.",
            "default" : false
          },
          "resources" : {
            "$ref" : "#/definitions/RefAttributeResponse_resources"
          }
        }
      } ]
    },
    "Boost" : {
      "type" : "object",
      "properties" : {
        "boost" : {
          "type" : "string",
          "description" : "LOWEST, LOWER, MEDIUM values are deprecated. They will be removed in the next major release.",
          "enum" : [ "LOWEST", "LOWER", "LOW", "MEDIUM", "HIGH" ],
          "default" : "LOW"
        }
      }
    },
    "AttributesRequest" : {
      "type" : "object",
      "properties" : {
        "items" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AttributePostRequest"
          }
        }
      }
    },
    "AttributesResponse" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CollectionResponse"
      }, {
        "type" : "object",
        "properties" : {
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/AttributeResponse"
            }
          }
        }
      } ]
    },
    "AssociationResponse" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ResourceResponse"
      }, {
        "$ref" : "#/definitions/Name"
      }, {
        "type" : "object",
        "properties" : {
          "fromClass" : {
            "$ref" : "#/definitions/ObjectRefResponse"
          },
          "toClass" : {
            "$ref" : "#/definitions/ObjectRefResponse"
          },
          "associationKinds" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ObjectRefResponse"
            }
          },
          "aggregate" : {
            "type" : "boolean",
            "description" : "Aggregate associations are implied by links between child objects. Aggregate associations can be duplicated, setting removeDuplicateAggregateLinks to true will suppress duplicates.",
            "default" : false
          },
          "unidirectional" : {
            "type" : "boolean",
            "default" : false
          }
        }
      } ]
    },
    "AssociationsResponse" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CollectionResponse"
      }, {
        "type" : "object",
        "properties" : {
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/AssociationResponse"
            }
          }
        }
      } ]
    },
    "AssociationKindResponse" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ResourceResponse"
      }, {
        "$ref" : "#/definitions/Name"
      } ]
    },
    "AssociationKindsResponse" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CollectionResponse"
      }, {
        "type" : "object",
        "properties" : {
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/AssociationKindResponse"
            }
          }
        }
      } ]
    },
    "AssociationConfig" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "Name of the cluster group of objects that are related to the current object with the given association"
        },
        "incomingName" : {
          "type" : "string",
          "description" : "Represents a specific relationship Type between the objects. Creates a sub cluster group with this name that contains all the incoming objects related to the current object with this association"
        },
        "outgoingName" : {
          "type" : "string",
          "description" : "Represents a specific relationship Type between the objects. Creates a sub cluster group with this name that contains all the outgoing objects related to the current object with this association"
        },
        "type" : {
          "type" : "string",
          "description" : "Specific classtype to be shown for the association, when this is specified only objects of this classType for this association"
        },
        "classTypes" : {
          "type" : "object",
          "description" : "This helps in defining separate cluster groups with different names for different class types.",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    },
    "ViewConfiguration" : {
      "type" : "object",
      "properties" : {
        "associationConfigs" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/AssociationConfig"
          }
        }
      }
    },
    "ClassResponse" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ResourceResponse"
      }, {
        "$ref" : "#/definitions/Name"
      }, {
        "$ref" : "#/definitions/Boost"
      }, {
        "type" : "object",
        "properties" : {
          "label" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "firstClass" : {
            "type" : "boolean",
            "default" : false
          },
          "searched" : {
            "type" : "boolean",
            "description" : "True if objects of this type should be included in search results. If true indexed property is ignored.",
            "default" : true
          },
          "indexed" : {
            "type" : "boolean",
            "description" : "If true this class should still be indexed even though it should not be returned by basic search."
          },
          "superClasses" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "$ref" : "#/definitions/ObjectRefResponse"
            }
          },
          "viewConfiguration" : {
            "$ref" : "#/definitions/ViewConfiguration"
          },
          "classTypeTags" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "ClassesResponse" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CollectionResponse"
      }, {
        "type" : "object",
        "properties" : {
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ClassResponse"
            }
          }
        }
      } ]
    },
    "JobPostRequest" : {
      "type" : "object",
      "required" : [ "resourceName" ],
      "properties" : {
        "resourceName" : {
          "type" : "string",
          "description" : "The name given to the resource"
        }
      }
    },
    "Status" : {
      "type" : "string",
      "description" : "Status of a job or task (NOT SUBMITTED- yet to submit, QUEUED- in the execution queue, RUNNING- execution in progress, CANCEL REQUESTED- user requested for cancel, PAUSE REQUESTED- user requested for pause, COMPLETED- completed successfully, FAILED- failed with some error, CANCELED- cancel request successful, PAUSED- pause request successful)",
      "enum" : [ "NOT SUBMITTED", "QUEUED", "RUNNING", "CANCEL REQUESTED", "PAUSE REQUESTED", "COMPLETED", "FAILED", "CANCELED", "PAUSED" ]
    },
    "JobMonitor" : {
      "type" : "object",
      "properties" : {
        "resourceName" : {
          "type" : "string",
          "description" : "The name given to the resource"
        },
        "jobId" : {
          "type" : "string",
          "description" : "Id of the job"
        },
        "status" : {
          "$ref" : "#/definitions/Status"
        },
        "jobType" : {
          "type" : "string",
          "description" : "Type of the job"
        },
        "startTime" : {
          "type" : "number",
          "format" : "long",
          "description" : "Time when job started execution"
        },
        "endTime" : {
          "type" : "number",
          "format" : "long",
          "description" : "Time when job finished execution"
        },
        "jobHref" : {
          "type" : "string",
          "description" : "Link to job monitoring Api"
        },
        "errorMessage" : {
          "type" : "string",
          "description" : "Reason for the job failure"
        },
        "logUrl" : {
          "type" : "string",
          "description" : "Log location for the job"
        }
      },
      "description" : "Job monitor details"
    },
    "ChangeType" : {
      "type" : "string",
      "enum" : [ "SOURCE", "INFERENCES_ANNOTATIONS", "COLLABORATION", "RESOURCE" ]
    },
    "Subscription" : {
      "allOf" : [ {
        "type" : "object",
        "properties" : {
          "objectId" : {
            "type" : "string"
          },
          "classType" : {
            "type" : "string"
          },
          "resourceName" : {
            "type" : "string"
          },
          "changeTypes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ChangeType"
            }
          }
        }
      }, {
        "$ref" : "#/definitions/ResourceResponse"
      } ],
      "description" : "Subscription for notifications on an object."
    },
    "SubscriptionRequest" : {
      "type" : "object",
      "required" : [ "changeTypes", "objectId" ],
      "properties" : {
        "objectId" : {
          "type" : "string"
        },
        "changeTypes" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ChangeType"
          }
        }
      },
      "description" : "Subscription request for subscribing notifications on an object."
    },
    "SubscriptionsRequest" : {
      "type" : "object",
      "properties" : {
        "items" : {
          "type" : "array",
          "description" : "Page of subscriptions.",
          "items" : {
            "$ref" : "#/definitions/SubscriptionRequest"
          }
        }
      }
    },
    "SubscriptionsResponse" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CollectionResponse"
      }, {
        "type" : "object",
        "properties" : {
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/Subscription"
            }
          }
        }
      } ]
    },
    "SubscribersResponse" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CollectionResponse"
      }, {
        "type" : "object",
        "properties" : {
          "items" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "ObjectDefinitionEvent" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "classType" : {
          "type" : "string"
        },
        "label" : {
          "type" : "string"
        },
        "subType" : {
          "type" : "string",
          "enum" : [ "ADD_OBJECT", "DELETE_OBJECT" ]
        }
      }
    },
    "FactEvent" : {
      "type" : "object",
      "properties" : {
        "attributeId" : {
          "type" : "string"
        },
        "label" : {
          "type" : "string"
        },
        "previousValue" : {
          "type" : "string"
        },
        "currentValue" : {
          "type" : "string"
        },
        "custom" : {
          "type" : "boolean"
        },
        "subType" : {
          "type" : "string",
          "enum" : [ "ADD_FACT", "DELETE_FACT", "UPDATE_FACT" ]
        }
      }
    },
    "LinkEvent" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "label" : {
          "type" : "string"
        },
        "association" : {
          "type" : "string"
        },
        "subType" : {
          "type" : "string",
          "enum" : [ "ACCEPT_DATADOMAIN", "REJECT_DATADOMAIN", "INFER_DATADOMAIN", "ACCEPT_COMPOSITE_DATADOMAIN", "REJECT_COMPOSITE_DATADOMAIN", "INFER_COMPOSITE_DATADOMAIN", "ASSIGN_GLOSSARY", "UNASSIGN_GLOSSARY" ]
        }
      }
    },
    "CollaborationEvent" : {
      "type" : "object",
      "properties" : {
        "subType" : {
          "type" : "string",
          "enum" : [ "CERTIFY", "UNCERTIFY", "UPDATE_CERTIFY_COMMENT", "UPDATE_CERTIFY_TAG", "ADD_QUESTION", "DELETE_QUESTION", "UPDATE_QUESTION", "ADD_ANSWER", "DELETE_ANSWER", "UPDATE_ANSWER", "ANSWER_HELPFUL", "ADD_REVIEW", "DELETE_REVIEW", "UPDATE_REVIEW", "REVIEW_HELPFUL" ]
        }
      },
      "description" : "collaboration change."
    },
    "ObjectOperation" : {
      "type" : "string",
      "enum" : [ "ADD", "DELETE", "PURGE", "UPDATE", "PROPAGATE" ]
    },
    "RunSummary" : {
      "type" : "object",
      "properties" : {
        "items" : {
          "type" : "array",
          "description" : "summary of a run per classtype",
          "items" : {
            "$ref" : "#/definitions/ClassTypeRunSummary"
          }
        }
      },
      "description" : "summary of a run."
    },
    "ClassTypeRunSummary" : {
      "type" : "object",
      "properties" : {
        "classType" : {
          "type" : "string"
        },
        "label" : {
          "type" : "string"
        },
        "count" : {
          "type" : "integer",
          "format" : "int64"
        },
        "operation" : {
          "$ref" : "#/definitions/ObjectOperation"
        }
      },
      "description" : "run summary for an class type"
    },
    "Event" : {
      "allOf" : [ {
        "type" : "object",
        "properties" : {
          "createdOn" : {
            "type" : "integer",
            "format" : "int64"
          },
          "objectId" : {
            "type" : "string"
          },
          "eventCount" : {
            "type" : "integer"
          },
          "objectName" : {
            "type" : "string"
          },
          "objectLabel" : {
            "type" : "string"
          },
          "objectPath" : {
            "type" : "string"
          },
          "classType" : {
            "type" : "string"
          },
          "resourceName" : {
            "type" : "string"
          },
          "providerId" : {
            "type" : "string"
          },
          "changeType" : {
            "$ref" : "#/definitions/ChangeType"
          },
          "operation" : {
            "$ref" : "#/definitions/ObjectOperation"
          },
          "modifiedBy" : {
            "type" : "string"
          },
          "objects" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ObjectDefinitionEvent"
            }
          },
          "facts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/FactEvent"
            }
          },
          "links" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/LinkEvent"
            }
          },
          "collaboration" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/CollaborationEvent"
            }
          },
          "runSummary" : {
            "$ref" : "#/definitions/RunSummary"
          }
        }
      } ],
      "description" : "Event that has occurred"
    },
    "EventsResponse" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CollectionResponse"
      }, {
        "type" : "object",
        "properties" : {
          "items" : {
            "type" : "array",
            "description" : "Page of events",
            "items" : {
              "$ref" : "#/definitions/Event"
            }
          },
          "since" : {
            "type" : "integer",
            "format" : "int64"
          },
          "until" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      } ]
    },
    "EventsCountResponse" : {
      "type" : "object",
      "properties" : {
        "since" : {
          "type" : "integer",
          "format" : "int64"
        },
        "until" : {
          "type" : "integer",
          "format" : "int64"
        },
        "count" : {
          "type" : "integer",
          "format" : "int64"
        }
      },
      "description" : "Count of events"
    },
    "EventsEmailConfiguration" : {
      "type" : "object",
      "properties" : {
        "frequency" : {
          "type" : "string",
          "description" : "frequency on which email needs to be sent.",
          "enum" : [ "EVERY_CHANGE", "DAILY", "WEEKLY", "MONTHLY", "NONE" ]
        }
      },
      "description" : "Configuration for emails."
    },
    "EventsAppConfiguration" : {
      "type" : "object",
      "properties" : {
        "until" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Read events until what time"
        }
      },
      "description" : "Configuration for application."
    },
    "CloudUserInfo" : {
      "type" : "object",
      "properties" : {
        "icsUsername" : {
          "type" : "string",
          "description" : "Informatica Cloud user name."
        },
        "password" : {
          "type" : "string",
          "description" : "Informatica Cloud password."
        },
        "orgId" : {
          "type" : "string",
          "description" : "Informatica Cloud Organisation Id."
        },
        "orgName" : {
          "type" : "string",
          "description" : "Informatica Cloud Organisation Name."
        },
        "href" : {
          "type" : "string",
          "description" : "Link to resource. Relative to the base path."
        }
      },
      "description" : "Informatica Cloud User Details"
    },
    "CloudUsersInfoRequest" : {
      "type" : "object",
      "properties" : {
        "items" : {
          "type" : "array",
          "description" : "Page of ICS org users.",
          "items" : {
            "$ref" : "#/definitions/CloudUserInfo"
          }
        }
      }
    },
    "CloudUsersInfoResponse" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CollectionResponse"
      }, {
        "type" : "object",
        "properties" : {
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/CloudUserInfo"
            }
          }
        }
      } ]
    },
    "ProvisionRequest" : {
      "type" : "object",
      "properties" : {
        "objectId" : {
          "type" : "string",
          "description" : "Source Data Set object Id."
        },
        "orgId" : {
          "type" : "string",
          "description" : "Informatica Cloud Organisation Id."
        },
        "icsUsername" : {
          "type" : "string",
          "description" : "Informatica Cloud user name."
        },
        "srcDetails" : {
          "$ref" : "#/definitions/InfaCloudConnection"
        },
        "tgtDetails" : {
          "$ref" : "#/definitions/InfaCloudConnection"
        },
        "createTarget" : {
          "type" : "boolean",
          "description" : "Target needs to be created."
        },
        "truncateTarget" : {
          "type" : "boolean",
          "description" : "Target needs to be truncated."
        },
        "targetName" : {
          "type" : "string",
          "description" : "target object name, if not provided source object name is used."
        }
      },
      "description" : "Provision Task Request"
    },
    "ProvisionTask" : {
      "type" : "object",
      "properties" : {
        "taskId" : {
          "type" : "string",
          "description" : "Provisioned Task Id."
        },
        "objectId" : {
          "type" : "string",
          "description" : "Provisioned Data Set object Id."
        },
        "orgId" : {
          "type" : "string",
          "description" : "Informatica Cloud Organisation Id."
        },
        "provisionedBy" : {
          "type" : "string",
          "description" : "Catalog user who initiated provisioning."
        },
        "provisionedOn" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Provision task start time."
        },
        "completedOn" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Provision task finish time."
        },
        "status" : {
          "type" : "string",
          "description" : "Status of provisioned task.",
          "enum" : [ "FAILED", "RUNNING", "SUCCESS", "SUCCESS_WITH_ERROR" ]
        },
        "activityURL" : {
          "type" : "string",
          "description" : "Job activity URL to see success/failure after provision task has completed."
        },
        "monitoringURL" : {
          "type" : "string",
          "description" : "Job monitoring URL of running provision task."
        },
        "targetType" : {
          "type" : "string",
          "description" : "Type of the target system."
        },
        "href" : {
          "type" : "string",
          "description" : "Link to resource. Relative to the base path."
        },
        "errorMsg" : {
          "type" : "string",
          "description" : "Error message in case of failure/ success with error."
        }
      },
      "description" : "Provisioned Task."
    },
    "ProvisionTasksResponse" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CollectionResponse"
      }, {
        "type" : "object",
        "properties" : {
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ProvisionTask"
            }
          }
        }
      } ]
    },
    "ConnectionConfigOption" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "Configuration ID."
        },
        "label" : {
          "type" : "string",
          "description" : "User friendly name."
        },
        "description" : {
          "type" : "string",
          "description" : "User friendly description."
        },
        "value" : {
          "type" : "string",
          "description" : "Configuration value."
        },
        "defaultValue" : {
          "type" : "string",
          "description" : "Default values."
        },
        "supportedValues" : {
          "type" : "string",
          "description" : "Enum Values."
        },
        "isEditable" : {
          "type" : "boolean",
          "description" : "Is Editable."
        },
        "isRuntimeAttr" : {
          "type" : "boolean",
          "description" : "Is a runtime attribute."
        },
        "isRequired" : {
          "type" : "boolean",
          "description" : "Is Required."
        },
        "isSensitive" : {
          "type" : "boolean",
          "description" : "Configuration value is sensitive."
        }
      },
      "description" : "Informatica Cloud Connection details."
    },
    "InfaCloudConnection" : {
      "type" : "object",
      "properties" : {
        "orgId" : {
          "type" : "string",
          "description" : "Organization ID."
        },
        "id" : {
          "type" : "string",
          "description" : "Connection ID."
        },
        "name" : {
          "type" : "string",
          "description" : "Connection name."
        },
        "type" : {
          "type" : "string",
          "description" : "Connection type"
        },
        "isCreatable" : {
          "type" : "boolean",
          "description" : "If allowed to create new target."
        },
        "isAppendable" : {
          "type" : "boolean",
          "description" : "If allowed to create append target."
        },
        "runtimeEnvironmentId" : {
          "type" : "string",
          "description" : "Runtime environment used by the connection."
        },
        "href" : {
          "type" : "string",
          "description" : "Link to resource. Relative to the base path."
        },
        "configOptions" : {
          "type" : "array",
          "description" : "Connection configuration options.",
          "items" : {
            "$ref" : "#/definitions/ConnectionConfigOption"
          }
        }
      },
      "description" : "Informatica Cloud Connection details."
    },
    "InfaCloudConnectionsInfoResponse" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CollectionResponse"
      }, {
        "type" : "object",
        "properties" : {
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/InfaCloudConnection"
            }
          }
        }
      } ]
    },
    "ProvisionTestConnectionRequest" : {
      "type" : "object",
      "properties" : {
        "icsUsername" : {
          "type" : "string",
          "description" : "ICS username."
        },
        "connDetails" : {
          "$ref" : "#/definitions/InfaCloudConnection"
        }
      },
      "description" : "Provision test connection request."
    },
    "ProvisionableResources" : {
      "type" : "object",
      "properties" : {
        "provisionableResourceTypes" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "provisionableClassTypes" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "previewableResourceTypes" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "Get resources supported by Data Provisioning."
    },
    "ProvisionInfoResponse" : {
      "type" : "object",
      "properties" : {
        "isProvisionEnabled" : {
          "type" : "boolean"
        }
      },
      "description" : "Provision Info Response."
    },
    "ResourceICSConnectionConf" : {
      "type" : "object",
      "properties" : {
        "resourceName" : {
          "type" : "string",
          "description" : "Resource Name."
        },
        "connectionId" : {
          "type" : "string",
          "description" : "ICS Connection Id."
        },
        "icsUsername" : {
          "type" : "string",
          "description" : "ICS username."
        },
        "orgId" : {
          "type" : "string",
          "description" : "ICS Org Id"
        },
        "orgName" : {
          "type" : "string",
          "description" : "ICS Org Name"
        },
        "href" : {
          "type" : "string",
          "description" : "Link to resource conf. Relative to the base path."
        }
      },
      "description" : "Resource ICS connection configuration."
    },
    "ResourceICSConnectionConfsResponse" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CollectionResponse"
      }, {
        "type" : "object",
        "properties" : {
          "items" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ResourceICSConnectionConf"
            }
          }
        }
      } ]
    },
    "DataPreviewEntry" : {
      "type" : "array",
      "items" : {
        "type" : "string"
      }
    },
    "DataPreviewResponse" : {
      "type" : "object",
      "properties" : {
        "connId" : {
          "type" : "string",
          "description" : "Connection Id used for the data preview."
        },
        "objectName" : {
          "type" : "string",
          "description" : "Data Preview object."
        },
        "fieldNames" : {
          "type" : "array",
          "description" : "Data preview field names.",
          "items" : {
            "type" : "string"
          }
        },
        "rows" : {
          "type" : "array",
          "description" : "Data preview data rows.",
          "items" : {
            "$ref" : "#/definitions/DataPreviewEntry"
          }
        }
      },
      "description" : "Data Preview Response."
    },
    "BaseEvent" : {
      "type" : "object",
      "required" : [ "eventType", "time" ],
      "discriminator" : "eventType",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "The id of the event. Ignored when POSTing new events."
        },
        "time" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Time when event occured. The difference, measured in milliseconds, between the current time and midnight, January 1, 1970 UTC."
        },
        "eventType" : {
          "type" : "string",
          "enum" : [ "UserLoginEvent", "ObjectModifiedEvent", "ObjectDeletedEvent", "ResourceDeletedEvent", "SearchEvent", "AssetUsageEvent", "ScanTriggerEvent" ]
        }
      },
      "description" : "Base type for all events"
    },
    "BaseEvents" : {
      "type" : "object",
      "properties" : {
        "items" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/BaseEvent"
          }
        }
      },
      "description" : "List of generic events"
    },
    "UserLoginEventRequest" : {
      "type" : "object",
      "required" : [ "appName", "securityDomain", "username" ],
      "properties" : {
        "username" : {
          "type" : "string",
          "description" : "The name of the user"
        },
        "securityDomain" : {
          "type" : "string",
          "description" : "The security domain the user belongs to"
        },
        "appName" : {
          "type" : "string",
          "description" : "The name of the application the user is logging into",
          "enum" : [ "CATALOG", "ADMIN" ]
        }
      },
      "description" : "Notify subscribers of user login"
    },
    "UserLoginEvent" : {
      "allOf" : [ {
        "$ref" : "#/definitions/BaseEvent"
      }, {
        "$ref" : "#/definitions/UserLoginEventRequest"
      } ],
      "description" : "Notify subscribers of user login"
    },
    "UserLoginEvents" : {
      "type" : "object",
      "properties" : {
        "items" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/UserLoginEvent"
          }
        }
      },
      "description" : "List of user logins"
    },
    "UserLoginEventsRequest" : {
      "type" : "object",
      "properties" : {
        "items" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/UserLoginEventRequest"
          }
        }
      },
      "description" : "List of user logins"
    },
    "SearchEventRequest" : {
      "type" : "object",
      "required" : [ "query", "securityDomain", "tabId", "username" ],
      "properties" : {
        "username" : {
          "type" : "string",
          "description" : "The name of the user doing the search"
        },
        "securityDomain" : {
          "type" : "string",
          "description" : "The security domain the user belongs to"
        },
        "query" : {
          "type" : "string",
          "description" : "The search query"
        },
        "tabId" : {
          "type" : "string",
          "description" : "The tab id the query is being performed on"
        },
        "filterQueries" : {
          "type" : "array",
          "description" : "Additional filter queries (if any) being applied to the search",
          "items" : {
            "type" : "string"
          }
        },
        "sort" : {
          "type" : "string",
          "description" : "sort clause (if any)"
        }
      },
      "description" : "Notify subscribers of searches"
    },
    "SearchEvent" : {
      "allOf" : [ {
        "$ref" : "#/definitions/BaseEvent"
      }, {
        "$ref" : "#/definitions/SearchEventRequest"
      } ],
      "description" : "Notify subscribers of searches"
    },
    "SearchEvents" : {
      "type" : "object",
      "properties" : {
        "items" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/SearchEvent"
          }
        }
      },
      "description" : "List of user searches"
    },
    "SearchEventsRequest" : {
      "type" : "object",
      "properties" : {
        "items" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/SearchEventRequest"
          }
        }
      },
      "description" : "List of user searches"
    },
    "BaseAssetUsageEvent" : {
      "type" : "object",
      "required" : [ "edcCapability", "securityDomain", "username" ],
      "properties" : {
        "username" : {
          "type" : "string",
          "description" : "The name of the user using the capability"
        },
        "securityDomain" : {
          "type" : "string",
          "description" : "The security domain the user belongs to"
        },
        "edcCapability" : {
          "type" : "string",
          "description" : "The type of capability being used",
          "enum" : [ "TABLE_OVERVIEW", "TABLE_COLUMNS", "TABLE_KEYS_AND_JOINS", "TABLE_LINEAGE_AND_IMPACT", "TABLE_RELATIONSHIPS", "TABLE_REVIEWS", "TABLE_QUESTIONS", "TABLE_DATA_QUALITY", "TABLE_DATA_PREVIEW", "TABLE_DATA_PROVISIONING", "COLUMN_OVERVIEW", "COLUMN_LINEAGE_AND_IMPACT", "COLUMN_RELATIONSHIPS", "RESOURCE_OVERVIEW", "RESOURCE_LINEAGE_AND_IMPACT", "RESOURCE_RELATIONSHIPS", "RESOURCE_CHANGE_SUMMARY" ]
        }
      },
      "description" : "Event fired when the user uses an asset"
    },
    "AssetUsageEventRequest" : {
      "allOf" : [ {
        "$ref" : "#/definitions/BaseAssetUsageEvent"
      }, {
        "type" : "object",
        "required" : [ "objectId" ],
        "properties" : {
          "objectId" : {
            "type" : "string",
            "description" : "The id of the asset."
          }
        }
      } ],
      "description" : "Event fired when the user uses an asset"
    },
    "AssetUsageEvent" : {
      "allOf" : [ {
        "$ref" : "#/definitions/BaseEvent"
      }, {
        "$ref" : "#/definitions/BaseAssetUsageEvent"
      }, {
        "type" : "object",
        "properties" : {
          "nativeId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The native id of the asset."
          }
        }
      } ],
      "description" : "Event fired when the user uses an asset"
    },
    "AssetUsageEvents" : {
      "type" : "object",
      "properties" : {
        "items" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AssetUsageEvent"
          }
        }
      },
      "description" : "List of asset usages"
    },
    "AssetUsageEventsRequest" : {
      "type" : "object",
      "properties" : {
        "items" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AssetUsageEventRequest"
          }
        }
      },
      "description" : "List of asset usages"
    },
    "ScanTriggerEventRequest" : {
      "type" : "object",
      "required" : [ "resourceName", "resourceType", "securityDomain", "username" ],
      "properties" : {
        "resourceName" : {
          "type" : "string",
          "description" : "The name of the resource being scanned."
        },
        "resourceType" : {
          "type" : "string",
          "description" : "The type of the resource being scanned."
        },
        "username" : {
          "type" : "string",
          "description" : "The name of the user triggering the scan."
        },
        "securityDomain" : {
          "type" : "string",
          "description" : "The security domain the user belongs to."
        },
        "isMetadataEnabled" : {
          "type" : "boolean",
          "description" : "True if metadata extraction is enabled.",
          "default" : false
        },
        "isCompositeDiscoveryEnabled" : {
          "type" : "boolean",
          "description" : "True if composite discovery is enabled.",
          "default" : false
        },
        "isDataDiscoveryEnabled" : {
          "type" : "boolean",
          "description" : "True if data discovery is enabled.",
          "default" : false
        },
        "isBusinessTermAssociationEnabled" : {
          "type" : "boolean",
          "description" : "True if business term association is enabled.",
          "default" : false
        },
        "isDataProvisioningEnabled" : {
          "type" : "boolean",
          "description" : "True if data provisioning is enabled.",
          "default" : false
        }
      },
      "description" : "Event fired when a scan is triggered"
    },
    "ScanTriggerEvent" : {
      "allOf" : [ {
        "$ref" : "#/definitions/BaseEvent"
      }, {
        "$ref" : "#/definitions/ScanTriggerEventRequest"
      } ],
      "description" : "Event fired when a scan is triggered"
    },
    "ScanTriggerEvents" : {
      "type" : "object",
      "properties" : {
        "items" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ScanTriggerEvent"
          }
        }
      },
      "description" : "List of scan triggers"
    },
    "ScanTriggerEventsRequest" : {
      "type" : "object",
      "properties" : {
        "items" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ScanTriggerEventRequest"
          }
        }
      },
      "description" : "List of scan triggers"
    },
    "ObjectEventBaseProp" : {
      "type" : "object",
      "required" : [ "attrId", "value" ],
      "properties" : {
        "attrId" : {
          "type" : "string",
          "description" : "The attribute id of the property"
        },
        "isRefAttr" : {
          "type" : "boolean",
          "description" : "True if this attribute is a reference attribute"
        },
        "userFacingAttrId" : {
          "type" : "string",
          "description" : "If isRefAttr is true, then this will be set to the set to the attribute id that the user should see when viewing the attribute."
        },
        "value" : {
          "type" : "string",
          "description" : "The value of the attribute in string format"
        }
      },
      "description" : "Base for properties used in object modified events"
    },
    "ObjectEventBaseElement" : {
      "type" : "object",
      "properties" : {
        "resourceName" : {
          "type" : "string",
          "description" : "The name of the resource that asserted this element"
        },
        "providerId" : {
          "type" : "string",
          "description" : "The name of the provider that asserted this element"
        },
        "modifiedBy" : {
          "type" : "string",
          "description" : "The username of the person who asserted this element"
        },
        "runId" : {
          "type" : "string",
          "description" : "The scanner runId that created this element"
        },
        "since" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The time that this element was created"
        }
      },
      "description" : "Base for object properties, links, and objects"
    },
    "ObjectEventObjectProp" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ObjectEventBaseProp"
      }, {
        "$ref" : "#/definitions/ObjectEventBaseElement"
      } ],
      "description" : "A property set on an object fired by an object modification event"
    },
    "ObjectEventLink" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ObjectEventBaseElement"
      }, {
        "type" : "object",
        "properties" : {
          "assocId" : {
            "type" : "string",
            "description" : "The id of the association type"
          },
          "nativeId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The nativeId of the object that contains this link"
          },
          "otherNativeId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The nativeId of the object on the other side of this link"
          },
          "properties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ObjectEventBaseProp"
            }
          }
        }
      } ],
      "description" : "A link between two objects fired by an object modification event"
    },
    "ObjectModifiedEvent" : {
      "allOf" : [ {
        "$ref" : "#/definitions/BaseEvent"
      }, {
        "$ref" : "#/definitions/ObjectEventBaseElement"
      }, {
        "type" : "object",
        "properties" : {
          "nativeId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The nativeId of the object"
          },
          "objectId" : {
            "type" : "string",
            "description" : "The id of the object"
          },
          "classType" : {
            "type" : "string",
            "description" : "The class of this object"
          },
          "srcLinks" : {
            "type" : "array",
            "description" : "List of incoming links to the object",
            "items" : {
              "$ref" : "#/definitions/ObjectEventLink"
            }
          },
          "dstLinks" : {
            "type" : "array",
            "description" : "List of outgoing links from the object",
            "items" : {
              "$ref" : "#/definitions/ObjectEventLink"
            }
          },
          "properties" : {
            "type" : "array",
            "description" : "List of properties set on the object",
            "items" : {
              "$ref" : "#/definitions/ObjectEventObjectProp"
            }
          }
        }
      } ],
      "description" : "Notify subscribers of object modification. All links and properties are included in the event, even if they have not changed"
    },
    "ObjectModifiedEvents" : {
      "type" : "object",
      "properties" : {
        "items" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ObjectModifiedEvent"
          }
        }
      },
      "description" : "List of objects that have been modified"
    },
    "ObjectDeletedEvent" : {
      "allOf" : [ {
        "$ref" : "#/definitions/BaseEvent"
      }, {
        "type" : "object",
        "properties" : {
          "objectId" : {
            "type" : "string",
            "description" : "The id of the object that was deleted"
          },
          "nativeId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The nativeId of the object"
          }
        }
      } ],
      "description" : "Notify subscribers that an object has been deleted."
    },
    "ObjectDeletedEvents" : {
      "type" : "object",
      "properties" : {
        "items" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ObjectDeletedEvent"
          }
        }
      },
      "description" : "List of objects that have been deleted"
    },
    "ResourceDeletedEvent" : {
      "allOf" : [ {
        "$ref" : "#/definitions/BaseEvent"
      }, {
        "type" : "object",
        "properties" : {
          "resourceName" : {
            "type" : "string",
            "description" : "Name of the resource that was deleted"
          },
          "purgeResourceObject" : {
            "type" : "boolean",
            "description" : "True if the resource object should be deleted along with all contents of the resource"
          }
        }
      } ],
      "description" : "Notify subscribers that a resource has been deleted"
    },
    "ResourceDeletedEvents" : {
      "type" : "object",
      "properties" : {
        "items" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ResourceDeletedEvent"
          }
        }
      },
      "description" : "List of resources that have been deleted."
    },
    "ObjectModifiedEventConfig" : {
      "type" : "object",
      "properties" : {
        "srcAssocs" : {
          "type" : "array",
          "description" : "Source association and association kind ids that should be returned",
          "items" : {
            "type" : "string"
          }
        },
        "dstAssocs" : {
          "type" : "array",
          "description" : "Destination association and association kind ids that should be returned",
          "items" : {
            "type" : "string"
          }
        },
        "attrPackages" : {
          "type" : "array",
          "description" : "All reference and normal attributes from the given packages will be returned.",
          "items" : {
            "type" : "string"
          }
        },
        "attrIds" : {
          "type" : "array",
          "description" : "Reference and normal attribute ids that should be returned",
          "items" : {
            "type" : "string"
          }
        },
        "attrCategories" : {
          "type" : "array",
          "description" : "Search category of attributes that should be returned.",
          "items" : {
            "type" : "string",
            "enum" : [ "TITLE", "DESCRIPTION" ]
          }
        }
      },
      "description" : "Configuration for object modified events"
    },
    "SearchTabOrder_items" : {
      "required" : [ "order", "tabId" ],
      "properties" : {
        "tabId" : {
          "type" : "string",
          "description" : "The id of the search tab"
        },
        "order" : {
          "type" : "integer",
          "description" : "The order in which the tab should be displayed",
          "minimum" : 0
        }
      }
    },
    "FacetResult_buckets" : {
      "properties" : {
        "fq" : {
          "type" : "string",
          "description" : "The filter to apply to select this facet."
        },
        "value" : {
          "type" : "string",
          "description" : "The value of the bucket. This will depend on the type of facet."
        },
        "count" : {
          "type" : "integer",
          "description" : "The number of entries in the bucket."
        }
      }
    },
    "RefAttributePost_resources" : {
      "properties" : {
        "assignmentType" : {
          "type" : "string",
          "description" : "assignment type",
          "enum" : [ "ALL", "NONE", "LIST" ],
          "default" : "ALL"
        },
        "values" : {
          "type" : "array",
          "description" : "list of resources, applicable only for LIST assignment type",
          "items" : {
            "type" : "string",
            "pattern" : "^[^\n\r]+$"
          }
        }
      },
      "description" : "configuration settings for resources"
    },
    "RefAttributeResponse_resources" : {
      "properties" : {
        "assignmentType" : {
          "type" : "string",
          "description" : "assignment type",
          "enum" : [ "ALL", "NONE", "LIST" ],
          "default" : "ALL"
        },
        "values" : {
          "type" : "array",
          "description" : "list of resources, applicable only for LIST assignment type",
          "items" : {
            "type" : "string",
            "pattern" : "^[^\n\r]+$"
          }
        }
      },
      "description" : "resources that have been assigned to this attribute."
    }
  },
  "parameters" : {
    "cursor" : {
      "name" : "cursor",
      "in" : "query",
      "description" : "As an alternative to offset, this can provide faster paginated results when deep paging",
      "required" : false,
      "type" : "string"
    },
    "jobStatus" : {
      "name" : "jobStatus",
      "in" : "query",
      "description" : "fetch jobs with status.",
      "required" : false,
      "type" : "string",
      "enum" : [ "RUNNING", "COMPLETED", "SUBMITTED", "CANCELLED", "FAILED" ]
    },
    "fl" : {
      "name" : "fl",
      "in" : "query",
      "description" : "The fl parameter limits the information included in a query response to a specified list of fields.",
      "required" : false,
      "type" : "array",
      "items" : {
        "type" : "string"
      },
      "collectionFormat" : "multi"
    },
    "includeRefObjects" : {
      "name" : "includeRefObjects",
      "in" : "query",
      "description" : "Whether to include reference objects or not.",
      "required" : false,
      "type" : "boolean",
      "default" : false
    },
    "pageSize" : {
      "name" : "pageSize",
      "in" : "query",
      "description" : "Results per page",
      "required" : false,
      "type" : "integer",
      "default" : 20,
      "minimum" : 1
    },
    "pathId" : {
      "name" : "id",
      "in" : "path",
      "required" : true,
      "type" : "string"
    },
    "fq" : {
      "name" : "fq",
      "in" : "query",
      "description" : "Filter queries to apply on top of q. Useful for applying facets.",
      "required" : false,
      "type" : "array",
      "items" : {
        "type" : "string"
      },
      "collectionFormat" : "multi"
    },
    "queryId" : {
      "name" : "id",
      "in" : "query",
      "required" : false,
      "type" : "array",
      "items" : {
        "type" : "string"
      },
      "collectionFormat" : "multi"
    },
    "ifMatch" : {
      "name" : "If-Match",
      "in" : "header",
      "description" : "Do not update if etag for resource has changed",
      "required" : false,
      "type" : "string"
    },
    "termId" : {
      "name" : "termId",
      "in" : "path",
      "description" : "Id of business term",
      "required" : true,
      "type" : "string"
    },
    "upvoteId" : {
      "name" : "upvoteId",
      "in" : "path",
      "required" : true,
      "type" : "string"
    },
    "responseType" : {
      "name" : "responseType",
      "in" : "query",
      "required" : false,
      "type" : "string",
      "default" : "SIMPLE",
      "enum" : [ "SIMPLE", "DETAILED", "EXPORT" ]
    },
    "modelPathId" : {
      "name" : "id",
      "in" : "path",
      "required" : true,
      "type" : "string"
    },
    "qf" : {
      "name" : "qf",
      "in" : "query",
      "description" : "The qf parameter specifies the fields in the index on which to perform the query. The parameter should only reference the index attributes having index=\"true\" in the view model. Searching on non-indexed attributes will returns no hits.",
      "required" : false,
      "type" : "array",
      "items" : {
        "type" : "string"
      },
      "collectionFormat" : "multi"
    },
    "replyId" : {
      "name" : "replyId",
      "in" : "path",
      "description" : "ID for the comment reply.",
      "required" : true,
      "type" : "string"
    },
    "modelQueryId" : {
      "name" : "id",
      "in" : "query",
      "required" : false,
      "type" : "array",
      "items" : {
        "type" : "string",
        "pattern" : "[^.]+[.].*[^.]"
      },
      "collectionFormat" : "multi"
    },
    "from" : {
      "name" : "From",
      "in" : "header",
      "description" : "User id in format (namespace\\userid), if namespace is not known default it to Native.",
      "required" : false,
      "type" : "string"
    },
    "sortBy" : {
      "name" : "sortBy",
      "in" : "query",
      "description" : "Sort by this column name.",
      "required" : false,
      "type" : "string"
    },
    "sortJobs" : {
      "name" : "sortBy",
      "in" : "query",
      "description" : "sort jobs on creation, start or end job time.",
      "required" : false,
      "type" : "string",
      "default" : "CREATED_TIME",
      "enum" : [ "CREATED_TIME", "STARTED_TIME", "END_TIME" ]
    },
    "objectId" : {
      "name" : "objectId",
      "in" : "query",
      "description" : "Filter events by object id.",
      "required" : false,
      "type" : "string"
    },
    "direction" : {
      "name" : "direction",
      "in" : "query",
      "description" : "Direction to traverse. Valid values BOTH, IN, OUT",
      "required" : false,
      "type" : "string",
      "default" : "BOTH",
      "enum" : [ "IN", "OUT", "BOTH" ]
    },
    "resumeAfterId" : {
      "name" : "resumeAfterId",
      "in" : "query",
      "description" : "fetch events starting after the given id",
      "required" : false,
      "type" : "string"
    },
    "offset" : {
      "name" : "offset",
      "in" : "query",
      "description" : "Starting from result",
      "required" : false,
      "type" : "integer",
      "default" : 0,
      "minimum" : 0
    },
    "changeType" : {
      "name" : "changeType",
      "in" : "query",
      "description" : "Filter events by change types.",
      "required" : false,
      "type" : "array",
      "items" : {
        "type" : "string"
      },
      "collectionFormat" : "multi",
      "enum" : [ "SOURCE", "INFERENCES_ANNOTATIONS", "COLLABORATION", "RESOURCE" ]
    },
    "resourceName" : {
      "name" : "resourceName",
      "in" : "query",
      "description" : "Filter events by resource.",
      "required" : false,
      "type" : "string"
    },
    "sort" : {
      "name" : "sort",
      "in" : "query",
      "description" : "Field on which results to be sorted from search. Default is relevance(score). Usage core.name_sort asc/desc",
      "required" : false,
      "type" : "string"
    },
    "ascending" : {
      "name" : "ascending",
      "in" : "query",
      "description" : "Ascending or not",
      "required" : false,
      "type" : "boolean",
      "default" : false
    },
    "userId" : {
      "name" : "userId",
      "in" : "path",
      "description" : "ID for the comment reply.",
      "required" : true,
      "type" : "string"
    },
    "relatedId" : {
      "name" : "relatedId",
      "in" : "query",
      "description" : "Results can be joined to objects that are related to the given id(s)",
      "required" : false,
      "type" : "array",
      "items" : {
        "type" : "string"
      },
      "collectionFormat" : "multi"
    },
    "jobId" : {
      "name" : "id",
      "in" : "path",
      "description" : "Id of the job",
      "required" : true,
      "type" : "string"
    },
    "shards" : {
      "name" : "shards",
      "in" : "query",
      "description" : "Advanced option. List of search shards to query. By default all shards are queried.",
      "required" : false,
      "type" : "array",
      "items" : {
        "type" : "string"
      },
      "collectionFormat" : "multi"
    },
    "scanJobId" : {
      "name" : "jobId",
      "in" : "query",
      "description" : "Filter events by job id.",
      "required" : false,
      "type" : "string"
    },
    "removeDuplicateAggregateLinks" : {
      "name" : "removeDuplicateAggregateLinks",
      "in" : "query",
      "description" : "Duplicate aggregate links are somtimes created by scanners, when set to true they will not be displayed in responses.",
      "required" : false,
      "type" : "boolean",
      "default" : true
    },
    "sortOrder" : {
      "name" : "sortOrder",
      "in" : "query",
      "description" : "sorting order",
      "required" : false,
      "type" : "string",
      "default" : "DESC",
      "enum" : [ "DESC", "ASC" ]
    },
    "commentId" : {
      "name" : "commentId",
      "in" : "path",
      "description" : "ID for the comment.",
      "required" : true,
      "type" : "string"
    },
    "objectName" : {
      "name" : "objectName",
      "in" : "query",
      "description" : "Filter events by object name.",
      "required" : false,
      "type" : "string"
    },
    "until" : {
      "name" : "until",
      "in" : "query",
      "description" : "Time until which the events needs to be returned. If the value is not provided, assumed value is current time.",
      "required" : false,
      "type" : "integer",
      "format" : "int64"
    },
    "reviewId" : {
      "name" : "reviewId",
      "in" : "path",
      "description" : "ID for the review.",
      "required" : true,
      "type" : "string"
    },
    "classType" : {
      "name" : "classType",
      "in" : "query",
      "description" : "Filter events by class types.",
      "required" : false,
      "type" : "array",
      "items" : {
        "type" : "string"
      },
      "collectionFormat" : "multi"
    },
    "since" : {
      "name" : "since",
      "in" : "query",
      "description" : "Time from which the events needs to be returned. If the value is not provided, assumed value is user's last read point.",
      "required" : false,
      "type" : "integer",
      "format" : "int64"
    }
  },
  "responses" : {
    "BadRequest" : {
      "description" : "Missing or invalid parameter",
      "schema" : {
        "$ref" : "#/definitions/Error"
      }
    },
    "Forbidden" : {
      "description" : "User does not have access permission",
      "schema" : {
        "$ref" : "#/definitions/Error"
      }
    },
    "NotFound" : {
      "description" : "Requested object not found",
      "schema" : {
        "$ref" : "#/definitions/Error"
      }
    },
    "PreconditionFailed" : {
      "description" : "Conflicting edit detected",
      "schema" : {
        "$ref" : "#/definitions/Error"
      }
    },
    "TooManyRequests" : {
      "description" : "Rate limit for requests",
      "schema" : {
        "$ref" : "#/definitions/Error"
      },
      "headers" : {
        "Retry-After" : {
          "type" : "number",
          "format" : "integer",
          "description" : "Retry after X seconds"
        }
      }
    },
    "Unauthorized" : {
      "description" : "Missing credentials",
      "schema" : {
        "$ref" : "#/definitions/Error"
      }
    }
  }
}