{
  "swagger": "2.0",
  "info": {
    "version": "V1",
    "title": "Digital Twins Service Management APIs",
    "description": "\r\nThe Digital Twins Service allows for managing IoT devices within spaces on Microsoft Azure.\r\n\r\nThis guide describes the REST APIs to manage these devices.\r\n\r\nFor more documentation, please follow [this link](https://docs.microsoft.com/azure/digital-twins/).\r\n\r\n##"
  },
  "host": "docs.westcentralus.azuresmartspaces.net",
  "basePath": "/management",
  "schemes": [
    "https"
  ],
  "paths": {
    "/api/v1.0/devices": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Gets a list of devices",
        "operationId": "Devices_Retrieve",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "Optional ';' or ',' delimited list of ids to filter by",
            "required": false,
            "type": "string"
          },
          {
            "name": "hardwareIds",
            "in": "query",
            "description": "Optional ';' or ',' delimited list of hardware ids (such as MAC addresses) to filter by",
            "required": false,
            "type": "string"
          },
          {
            "name": "names",
            "in": "query",
            "description": "Optional ';' or ',' delimited list of names to filter by",
            "required": false,
            "type": "string"
          },
          {
            "name": "types",
            "in": "query",
            "description": "Optional ';' or ',' delimited list of device types to filter by.",
            "required": false,
            "type": "string"
          },
          {
            "name": "subtypes",
            "in": "query",
            "description": "Optional ';' or ',' delimited list of device subtypes to filter by.",
            "required": false,
            "type": "string"
          },
          {
            "name": "gateways",
            "in": "query",
            "description": "Optional ';' or ',' delimited list of gateway ids to filter by",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Optional ';' or ',' delimited list of status to filter by. E.g: status=Disabled,Offline",
            "required": false,
            "type": "string"
          },
          {
            "name": "includes",
            "in": "query",
            "description": "Comma separated list of what to include, for example \"Sensors,SasToken\". Defaults to None",
            "required": false,
            "type": "string",
            "enum": [
              "None",
              "ConnectionString",
              "DeviceKey",
              "DeviceConnectionState",
              "Description",
              "FullPath",
              "Location",
              "IoTHub",
              "Properties",
              "RoleAssignments",
              "SasToken",
              "Sensors",
              "SensorsFullPath",
              "SensorsProperties",
              "SensorsSpace",
              "SensorsTypes",
              "SensorsValues",
              "Space",
              "Types",
              "SpaceTypes"
            ]
          },
          {
            "name": "propertyKey",
            "in": "query",
            "description": "Optional filter on objects that have the given property key defined",
            "required": false,
            "type": "string"
          },
          {
            "name": "propertyValue",
            "in": "query",
            "description": "Optional filter on the value of the given property key",
            "required": false,
            "type": "string"
          },
          {
            "name": "propertyValueSearchType",
            "in": "query",
            "description": "Optional type of search on property value. Contains or Equals. Defaults to Equals",
            "required": false,
            "type": "string",
            "enum": [
              "Equals",
              "Contains"
            ]
          },
          {
            "name": "spaceId",
            "in": "query",
            "description": "Optionally filter on objects based on their location in the topology relative to the specified spaceId",
            "required": false,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "traverse",
            "in": "query",
            "description": "None (the default) for the specified spaceId only, Down for space and descendants, Up for spaceId and ancestors, Any for both",
            "required": false,
            "type": "string",
            "enum": [
              "None",
              "Down",
              "Up",
              "Span"
            ]
          },
          {
            "name": "minLevel",
            "in": "query",
            "description": "Optional filter on minimum level, inclusive",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxLevel",
            "in": "query",
            "description": "Optional filter on maximum level, inclusive",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "minRelative",
            "in": "query",
            "description": "Specify if min level is absolute or relative",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "maxRelative",
            "in": "query",
            "description": "Specify if max level is absolute or relative",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DeviceRetrieve"
              },
              "xml": {
                "name": "DeviceRetrieve",
                "wrapped": true
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Devices"
        ],
        "summary": "Creates or updates a device using Name and SpaceId as the unique key",
        "operationId": "Devices_CreateOrUpdate",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "The device information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeviceCreate"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "201": {
            "description": "OK",
            "schema": {
              "format": "uuid",
              "type": "string",
              "example": "00000000-0000-0000-0000-000000000000"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Devices"
        ],
        "summary": "Creates a device",
        "operationId": "Devices_Create",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "The device information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeviceCreate"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "201": {
            "description": "OK",
            "schema": {
              "format": "uuid",
              "type": "string",
              "example": "00000000-0000-0000-0000-000000000000"
            }
          }
        }
      }
    },
    "/api/v1.0/devices/{id}": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Gets a specific device",
        "operationId": "Devices_RetrieveById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Device Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "includes",
            "in": "query",
            "description": "Comma separated list of what to include, for example \"Sensors,SasToken\". Defaults to None",
            "required": false,
            "type": "string",
            "enum": [
              "None",
              "ConnectionString",
              "DeviceKey",
              "DeviceConnectionState",
              "Description",
              "FullPath",
              "Location",
              "IoTHub",
              "Properties",
              "RoleAssignments",
              "SasToken",
              "Sensors",
              "SensorsFullPath",
              "SensorsProperties",
              "SensorsSpace",
              "SensorsTypes",
              "SensorsValues",
              "Space",
              "Types",
              "SpaceTypes"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeviceRetrieve"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Devices"
        ],
        "summary": "Deletes a device and its children such as sensors, blobs, ...",
        "operationId": "Devices_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Device Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "204": {
            "description": "No content"
          }
        }
      },
      "patch": {
        "tags": [
          "Devices"
        ],
        "summary": "Updates a device",
        "operationId": "Devices_Update",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Device Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "data",
            "in": "body",
            "description": "The device information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeviceUpdate"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "204": {
            "description": "No content"
          }
        }
      }
    },
    "/api/v1.0/devices/{id}/keystore": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Gets the first keystore by walking up the spaces hierarchy",
        "operationId": "Devices_RetrieveKeyStore",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Device Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "includes",
            "in": "query",
            "description": "Comma separated list of what to include, for example \"Space,Keys\". Defaults to None",
            "required": false,
            "type": "string",
            "enum": [
              "None",
              "Description",
              "FullPath",
              "Keys",
              "Space"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/KeyStoreRetrieve"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          }
        }
      }
    },
    "/api/v1.0/devices/{id}/register": {
      "patch": {
        "tags": [
          "Devices"
        ],
        "summary": "Registers a device to its parent space's IoT Hub resource",
        "operationId": "Devices_Register",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Device Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "204": {
            "description": "No content"
          }
        }
      }
    },
    "/api/v1.0/devices/{id}/unregister": {
      "patch": {
        "tags": [
          "Devices"
        ],
        "summary": "Unregisters a device from its parent space's IoT Hub resource",
        "operationId": "Devices_Unregister",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Device Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "204": {
            "description": "No content"
          }
        }
      }
    },
    "/api/v1.0/devices/{id}/resources/{type}": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Gets the first resource of the given type by walking up the spaces hierarchy",
        "operationId": "Devices_GetResource",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Device Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "type",
            "in": "path",
            "description": "The resource type",
            "required": true,
            "type": "string",
            "enum": [
              "IotHub"
            ]
          },
          {
            "name": "includes",
            "in": "query",
            "description": "Comma separated list of what to include, for example \"Space,DependentChildren\". Defaults to None",
            "required": false,
            "type": "string",
            "enum": [
              "None",
              "DependentAncestors",
              "DependentChildren",
              "FullPath",
              "Space"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SpaceResourceRetrieve"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          }
        }
      }
    },
    "/api/v1.0/devices/blobs": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Gets a list of blobs",
        "operationId": "Devices_RetrieveBlobMetadata",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "names",
            "in": "query",
            "description": "Optional ';' or ',' delimited list of blob names to filter by",
            "required": false,
            "type": "string"
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Optional ';' or ',' delimited list of ids to filter by",
            "required": false,
            "type": "string"
          },
          {
            "name": "sharings",
            "in": "query",
            "description": "Optional ';' or ',' delimited list of Sharing modes to filter by",
            "required": false,
            "type": "string"
          },
          {
            "name": "types",
            "in": "query",
            "description": "Optional ';' or ',' delimited list of types to filter by",
            "required": false,
            "type": "string"
          },
          {
            "name": "subtypes",
            "in": "query",
            "description": "Optional ';' or ',' delimited list of subtypes to filter by",
            "required": false,
            "type": "string"
          },
          {
            "name": "includes",
            "in": "query",
            "description": "Comma separated list of what to include, for example \"ContentInfo,Description\". Defaults to None",
            "required": false,
            "type": "string",
            "enum": [
              "None",
              "ContentInfo",
              "Description",
              "FullPath",
              "Types"
            ]
          },
          {
            "name": "spaceId",
            "in": "query",
            "description": "Optionally filter on objects based on their location in the topology relative to the specified spaceId",
            "required": false,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "traverse",
            "in": "query",
            "description": "None (the default) for the specified spaceId only, Down for space and descendants, Up for spaceId and ancestors, Any for both",
            "required": false,
            "type": "string",
            "enum": [
              "None",
              "Down",
              "Up",
              "Span"
            ]
          },
          {
            "name": "minLevel",
            "in": "query",
            "description": "Optional filter on minimum level, inclusive",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxLevel",
            "in": "query",
            "description": "Optional filter on maximum level, inclusive",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "minRelative",
            "in": "query",
            "description": "Specify if min level is absolute or relative",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "maxRelative",
            "in": "query",
            "description": "Specify if max level is absolute or relative",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BlobMetadataRetrieve"
              },
              "xml": {
                "name": "BlobMetadataRetrieve",
                "wrapped": true
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Devices"
        ],
        "summary": "Creates a blob",
        "description": "This is a multi-part request. For more information, see sample app or doc examples.\r\nKey value pairs specified in the Content-Disposition header in the blob-chunk of the multipart request will be preserved as meta-data on the stored blob.",
        "operationId": "Devices_CreateBlob",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "metadata",
            "in": "formData",
            "description": "The mime type of this parameter is \"application/json\" and its schema is #/definitions/BlobMetadataCreate",
            "required": true,
            "type": "string"
          },
          {
            "name": "contents",
            "in": "formData",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "201": {
            "description": "OK",
            "schema": {
              "format": "uuid",
              "type": "string",
              "example": "00000000-0000-0000-0000-000000000000"
            }
          }
        }
      }
    },
    "/api/v1.0/devices/blobs/{id}": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Gets a blob",
        "operationId": "Devices_RetrieveBlobMetadataById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Blob Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "includes",
            "in": "query",
            "description": "Comma separated list of what to include, for example \"ContentInfo,Description\". Defaults to None",
            "required": false,
            "type": "string",
            "enum": [
              "None",
              "ContentInfo",
              "Description",
              "FullPath",
              "Types"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BlobMetadataRetrieve"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Devices"
        ],
        "summary": "Deletes a blob",
        "description": "Deleting a blob will delete its metadata, its content (all versions) and its associations",
        "operationId": "Devices_DeleteBlob",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Blob Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "204": {
            "description": "No content"
          }
        }
      },
      "patch": {
        "tags": [
          "Devices"
        ],
        "summary": "Updates a blob",
        "description": "This is a multi-part request. For more information, see sample app or doc examples.",
        "operationId": "Devices_UpdateBlob",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "blob Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "metadata",
            "in": "formData",
            "description": "The mime type of this parameter is \"application/json\" and its schema is #/definitions/BlobMetadataUpdate",
            "required": true,
            "type": "string"
          },
          {
            "name": "contents",
            "in": "formData",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "204": {
            "description": "No content"
          }
        }
      }
    },
    "/api/v1.0/devices/blobs/{id}/contents/{version}": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Gets the contents of the given version of the given blob",
        "operationId": "Devices_GetBlobContents",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "blob id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "version",
            "in": "path",
            "description": "blob content version",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Devices"
        ],
        "summary": "Delete the contents of the given version of the given blob",
        "description": "Delete will fail if this version has any associations",
        "operationId": "Devices_DeleteBlobContents",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "blob id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "version",
            "in": "path",
            "description": "blob version",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "204": {
            "description": "No content"
          }
        }
      }
    },
    "/api/v1.0/devices/blobs/{id}/contents/latest": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Gets the contents of the latest version of the given blob",
        "operationId": "Devices_GetLatestBlobContents",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "blob id",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          }
        }
      }
    },
    "/api/v1.0/devices/{id}/properties/{name}": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Gets the value of a property",
        "operationId": "Devices_RetrieveProperty",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parent Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Property name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Devices"
        ],
        "summary": "Deletes the given property value",
        "operationId": "Devices_DeleteProperty",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parent Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Property name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "204": {
            "description": "No content"
          }
        }
      }
    },
    "/api/v1.0/devices/{id}/properties": {
      "put": {
        "tags": [
          "Devices"
        ],
        "summary": "Creates or updates property values",
        "operationId": "Devices_UpdateProperties",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parent Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "data",
            "in": "body",
            "description": "The properties",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExtendedPropertyCreate"
              },
              "xml": {
                "name": "ExtendedPropertyCreate",
                "wrapped": true
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "201": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Devices"
        ],
        "summary": "Creates a property value",
        "operationId": "Devices_CreateProperty",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parent Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "data",
            "in": "body",
            "description": "Extended property data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExtendedPropertyCreate"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "201": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Devices"
        ],
        "summary": "Deletes all property values",
        "operationId": "Devices_DeleteProperties",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parent Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "204": {
            "description": "No content"
          }
        }
      }
    },
    "/api/v1.0/endpoints": {
      "get": {
        "tags": [
          "Endpoints"
        ],
        "summary": "Gets a list of endpoints",
        "operationId": "Endpoints_Retrieve",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "timeUpdated",
            "in": "query",
            "description": "Minimum last updated UTC time",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "types",
            "in": "query",
            "description": "Endpoint types",
            "required": false,
            "type": "string"
          },
          {
            "name": "eventTypes",
            "in": "query",
            "description": "Types of event",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EndpointRetrieve"
              },
              "xml": {
                "name": "EndpointRetrieve",
                "wrapped": true
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Endpoints"
        ],
        "summary": "Creates an endpoint",
        "operationId": "Endpoints_Create",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "The endpoint information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EndpointCreate"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "201": {
            "description": "OK",
            "schema": {
              "format": "uuid",
              "type": "string",
              "example": "00000000-0000-0000-0000-000000000000"
            }
          }
        }
      }
    },
    "/api/v1.0/endpoints/{id}": {
      "get": {
        "tags": [
          "Endpoints"
        ],
        "summary": "Gets a specific endpoint",
        "operationId": "Endpoints_RetrieveById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Endpoint Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EndpointRetrieve"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Endpoints"
        ],
        "summary": "Modifies an existing endpoint. Does not create if it doesn't exist.",
        "operationId": "Endpoints_Modify",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Endpoint id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "data",
            "in": "body",
            "description": "Update payload",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EndpointCreate"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "201": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Endpoints"
        ],
        "summary": "Deletes the specified endpoint",
        "operationId": "Endpoints_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Endpoint Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "204": {
            "description": "No content"
          }
        }
      }
    },
    "/api/v1.0/keystores": {
      "get": {
        "tags": [
          "KeyStores"
        ],
        "summary": "Retrieves key stores",
        "operationId": "KeyStores_Retrieve",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "spaceId",
            "in": "query",
            "description": "Optional filter on parent space id",
            "required": false,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "includes",
            "in": "query",
            "description": "Comma separated list of what to include, for example \"Space,Keys\". Defaults to None",
            "required": false,
            "type": "string",
            "enum": [
              "None",
              "Description",
              "FullPath",
              "Keys",
              "Space"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/KeyStoreRetrieve"
              },
              "xml": {
                "name": "KeyStoreRetrieve",
                "wrapped": true
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          }
        }
      },
      "post": {
        "tags": [
          "KeyStores"
        ],
        "summary": "Creates a key store",
        "operationId": "KeyStores_Create",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "The store information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KeyStoreCreate"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "201": {
            "description": "OK",
            "schema": {
              "format": "uuid",
              "type": "string",
              "example": "00000000-0000-0000-0000-000000000000"
            }
          }
        }
      }
    },
    "/api/v1.0/keystores/{id}": {
      "get": {
        "tags": [
          "KeyStores"
        ],
        "summary": "Retrieves a key store",
        "operationId": "KeyStores_RetrieveById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "includes",
            "in": "query",
            "description": "Comma separated list of what to include, for example \"Space,Keys\". Defaults to None",
            "required": false,
            "type": "string",
            "enum": [
              "None",
              "Description",
              "FullPath",
              "Keys",
              "Space"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/KeyStoreRetrieve"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "KeyStores"
        ],
        "summary": "Deletes a key store",
        "operationId": "KeyStores_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "204": {
            "description": "No content"
          }
        }
      },
      "patch": {
        "tags": [
          "KeyStores"
        ],
        "summary": "Updates a key store",
        "operationId": "KeyStores_Update",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "data",
            "in": "body",
            "description": "The store information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KeyStoreUpdate"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "204": {
            "description": "No content"
          }
        }
      }
    },
    "/api/v1.0/keystores/{id}/keys": {
      "get": {
        "tags": [
          "KeyStores"
        ],
        "summary": "Retrieves the store's keys",
        "operationId": "KeyStores_RetrieveKeys",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SecurityKeyRetrieve"
              },
              "xml": {
                "name": "SecurityKeyRetrieve",
                "wrapped": true
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          }
        }
      },
      "post": {
        "tags": [
          "KeyStores"
        ],
        "summary": "Creates a new key",
        "operationId": "KeyStores_CreateKey",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The key store identifier",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "201": {
            "description": "OK",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        }
      }
    },
    "/api/v1.0/keystores/{id}/keys/{key}": {
      "get": {
        "tags": [
          "KeyStores"
        ],
        "summary": "Retrieves the given key",
        "operationId": "KeyStores_RetrieveKeyById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The key store identifier",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "key",
            "in": "path",
            "description": "The key identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SecurityKeyRetrieve"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "KeyStores"
        ],
        "summary": "Deletes the given key",
        "operationId": "KeyStores_DeleteKey",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The store identifier",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "key",
            "in": "path",
            "description": "The key identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "204": {
            "description": "No content"
          }
        }
      },
      "patch": {
        "tags": [
          "KeyStores"
        ],
        "summary": "Updates the given key",
        "operationId": "KeyStores_UpdateKey",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The store identifier",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "key",
            "in": "path",
            "description": "The key identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "data",
            "in": "body",
            "description": "The key data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SecurityKeyUpdate"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "204": {
            "description": "No content"
          }
        }
      }
    },
    "/api/v1.0/keystores/{id}/keys/last": {
      "get": {
        "tags": [
          "KeyStores"
        ],
        "summary": "Retrieves the most recent valid key from the key store",
        "operationId": "KeyStores_RetrieveKeysLast",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SecurityKeyRetrieve"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          }
        }
      }
    },
    "/api/v1.0/keystores/{id}/keys/{key}/token": {
      "get": {
        "tags": [
          "KeyStores"
        ],
        "summary": "Gets a token for the specified device using the specified key",
        "operationId": "KeyStores_GenerateTokenFromKeyById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The key store identifier",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "key",
            "in": "path",
            "description": "The key identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "deviceMac",
            "in": "query",
            "description": "The device to generate the token for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          }
        }
      }
    },
    "/api/v1.0/keystores/{id}/keys/last/token": {
      "get": {
        "tags": [
          "KeyStores"
        ],
        "summary": "Gets a token for the specified device for the last valid key.",
        "operationId": "KeyStores_GenerateTokenFromLastKey",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "deviceMac",
            "in": "query",
            "description": "The device to generate the token for",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          }
        }
      }
    },
    "/api/v1.0/matchers": {
      "get": {
        "tags": [
          "Matchers"
        ],
        "summary": "Retrieves matchers",
        "operationId": "Matchers_Retrieve",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "Optional ';' delimited list of ids",
            "required": false,
            "type": "string"
          },
          {
            "name": "names",
            "in": "query",
            "description": "Optional ';' delimited list of names",
            "required": false,
            "type": "string"
          },
          {
            "name": "includes",
            "in": "query",
            "description": "Comma separated list of what to include, for example \"Space,Condition\". Defaults to None",
            "required": false,
            "type": "string",
            "enum": [
              "None",
              "Description",
              "FullPath",
              "Space",
              "Conditions",
              "UserDefinedFunctions"
            ]
          },
          {
            "name": "spaceId",
            "in": "query",
            "description": "Optionally filter on objects based on their location in the topology relative to the specified spaceId",
            "required": false,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "traverse",
            "in": "query",
            "description": "None (the default) for the specified spaceId only, Down for space and descendants, Up for spaceId and ancestors, Any for both",
            "required": false,
            "type": "string",
            "enum": [
              "None",
              "Down",
              "Up",
              "Span"
            ]
          },
          {
            "name": "minLevel",
            "in": "query",
            "description": "Optional filter on minimum level, inclusive",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxLevel",
            "in": "query",
            "description": "Optional filter on maximum level, inclusive",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "minRelative",
            "in": "query",
            "description": "Specify if min level is absolute or relative",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "maxRelative",
            "in": "query",
            "description": "Specify if max level is absolute or relative",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MatcherRetrieve"
              },
              "xml": {
                "name": "MatcherRetrieve",
                "wrapped": true
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Matchers"
        ],
        "summary": "Creates a matcher",
        "operationId": "Matchers_Create",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "The matcher information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MatcherCreate"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "201": {
            "description": "OK",
            "schema": {
              "format": "uuid",
              "type": "string",
              "example": "00000000-0000-0000-0000-000000000000"
            }
          }
        }
      }
    },
    "/api/v1.0/matchers/{id}": {
      "get": {
        "tags": [
          "Matchers"
        ],
        "summary": "Retrieves a matcher",
        "operationId": "Matchers_RetrieveById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Matcher identifier",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "includes",
            "in": "query",
            "description": "Comma separated list of what to include",
            "required": false,
            "type": "string",
            "enum": [
              "None",
              "Description",
              "FullPath",
              "Space",
              "Conditions",
              "UserDefinedFunctions"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MatcherRetrieve"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Matchers"
        ],
        "summary": "Deletes the given matcher",
        "operationId": "Matchers_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Matcher identifier",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "204": {
            "description": "No content"
          }
        }
      },
      "patch": {
        "tags": [
          "Matchers"
        ],
        "summary": "Update a matcher",
        "operationId": "Matchers_Update",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Matcher identifier",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "data",
            "in": "body",
            "description": "The matcher information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MatcherUpdate"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "204": {
            "description": "No content"
          }
        }
      }
    },
    "/api/v1.0/matchers/{id}/evaluate/{sensorId}": {
      "get": {
        "tags": [
          "Matchers"
        ],
        "summary": "Evaluates the matcher for a sensor",
        "operationId": "Matchers_Evaluate",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Matcher identifier",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "sensorId",
            "in": "path",
            "description": "Sensor identifier",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "enableLogging",
            "in": "query",
            "description": "If true, return verbose logs for the evaluation",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MatcherEvaluationResults"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          }
        }
      }
    },
    "/api/v1.0/ontologies": {
      "get": {
        "tags": [
          "Ontologies"
        ],
        "summary": "Gets a list of ontologies",
        "operationId": "Ontologies_Retrieve",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "names",
            "in": "query",
            "description": "Optional ';' or ',' delimited list of names to filter by",
            "required": false,
            "type": "string"
          },
          {
            "name": "loaded",
            "in": "query",
            "description": "Optional filter on the loaded flag",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "includes",
            "in": "query",
            "description": "Comma separated list of what to include, for example \"Types\". Defaults to None",
            "required": false,
            "type": "string",
            "enum": [
              "None",
              "Description",
              "Types"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OntologyRetrieve"
              },
              "xml": {
                "name": "OntologyRetrieve",
                "wrapped": true
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          }
        }
      }
    },
    "/api/v1.0/ontologies/{id}": {
      "get": {
        "tags": [
          "Ontologies"
        ],
        "summary": "Gets a specific ontology",
        "operationId": "Ontologies_RetrieveById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Ontology id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "includes",
            "in": "query",
            "description": "Comma separated list of what to include, for example \"Types\". Defaults to None",
            "required": false,
            "type": "string",
            "enum": [
              "None",
              "Description",
              "Types"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OntologyRetrieve"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Ontologies"
        ],
        "summary": "Updates an ontology",
        "operationId": "Ontologies_Update",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Ontology id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "data",
            "in": "body",
            "description": "Update payload",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OntologyUpdate"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "204": {
            "description": "No content"
          }
        }
      }
    },
    "/api/v1.0/propertykeys": {
      "get": {
        "tags": [
          "PropertyKeys"
        ],
        "summary": "Retrieves property keys",
        "operationId": "PropertyKeys_Retrieve",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "scope",
            "in": "query",
            "description": "Optional scope filter",
            "required": false,
            "type": "string",
            "enum": [
              "Spaces",
              "Sensors",
              "Users",
              "Devices"
            ]
          },
          {
            "name": "category",
            "in": "query",
            "description": "Optional category filter",
            "required": false,
            "type": "string"
          },
          {
            "name": "includes",
            "in": "query",
            "description": "Comma separated list of what to include, for example \"Space\". Defaults to None",
            "required": false,
            "type": "string",
            "enum": [
              "None",
              "Description",
              "FullPath",
              "Space"
            ]
          },
          {
            "name": "spaceId",
            "in": "query",
            "description": "Optionally filter on objects based on their location in the topology relative to the specified spaceId",
            "required": false,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "traverse",
            "in": "query",
            "description": "None (the default) for the specified spaceId only, Down for space and descendants, Up for spaceId and ancestors, Any for both",
            "required": false,
            "type": "string",
            "enum": [
              "None",
              "Down",
              "Up",
              "Span"
            ]
          },
          {
            "name": "minLevel",
            "in": "query",
            "description": "Optional filter on minimum level, inclusive",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxLevel",
            "in": "query",
            "description": "Optional filter on maximum level, inclusive",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "minRelative",
            "in": "query",
            "description": "Specify if min level is absolute or relative",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "maxRelative",
            "in": "query",
            "description": "Specify if max level is absolute or relative",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExtendedPropertyKeyRetrieve"
              },
              "xml": {
                "name": "ExtendedPropertyKeyRetrieve",
                "wrapped": true
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          }
        }
      },
      "put": {
        "tags": [
          "PropertyKeys"
        ],
        "summary": "Adds or updates a property key using SpaceId, Name and Scope as lookup keys",
        "operationId": "PropertyKeys_CreateOrUpdate",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "The property key information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExtendedPropertyKeyCreate"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "201": {
            "description": "OK",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        }
      },
      "post": {
        "tags": [
          "PropertyKeys"
        ],
        "summary": "Creates a property key",
        "operationId": "PropertyKeys_Create",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "The property key information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExtendedPropertyKeyCreate"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "201": {
            "description": "OK",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PropertyKeys"
        ],
        "summary": "Deletes property keys for child objects of the given space",
        "operationId": "PropertyKeys_DeleteBySpace",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "spaceId",
            "in": "query",
            "description": "Space Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "scope",
            "in": "query",
            "description": "Scope for the property keys",
            "required": true,
            "type": "string",
            "enum": [
              "Spaces",
              "Sensors",
              "Users",
              "Devices"
            ]
          },
          {
            "name": "keys",
            "in": "query",
            "description": "';' delimited list of names of property keys to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "204": {
            "description": "No content"
          }
        }
      }
    },
    "/api/v1.0/propertykeys/{id}": {
      "get": {
        "tags": [
          "PropertyKeys"
        ],
        "summary": "Retrieves a property key",
        "operationId": "PropertyKeys_RetrieveById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Key identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "includes",
            "in": "query",
            "description": "Comma separated list of what to include, for example \"Space\". Defaults to None",
            "required": false,
            "type": "string",
            "enum": [
              "None",
              "Description",
              "FullPath",
              "Space"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ExtendedPropertyKeyRetrieve"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PropertyKeys"
        ],
        "summary": "Deletes the given property key",
        "operationId": "PropertyKeys_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Key identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "204": {
            "description": "No content"
          }
        }
      },
      "patch": {
        "tags": [
          "PropertyKeys"
        ],
        "summary": "Updates a property key",
        "operationId": "PropertyKeys_Update",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The property key Id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "data",
            "in": "body",
            "description": "The property key information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExtendedPropertyKeyUpdate"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "204": {
            "description": "No content"
          }
        }
      }
    },
    "/api/v1.0/resources": {
      "get": {
        "tags": [
          "Resources"
        ],
        "summary": "Retrieves resources",
        "operationId": "Resources_Retrieve",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "Optional resource type filter",
            "required": false,
            "type": "string",
            "enum": [
              "IotHub"
            ]
          },
          {
            "name": "isExternallyCreated",
            "in": "query",
            "description": "Optional externally created filter",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "includes",
            "in": "query",
            "description": "Comma separated list of what to include, for example \"Space,DependentChildren\". Defaults to None",
            "required": false,
            "type": "string",
            "enum": [
              "None",
              "DependentAncestors",
              "DependentChildren",
              "FullPath",
              "Space"
            ]
          },
          {
            "name": "spaceId",
            "in": "query",
            "description": "Optionally filter on objects based on their location in the topology relative to the specified spaceId",
            "required": false,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "traverse",
            "in": "query",
            "description": "None (the default) for the specified spaceId only, Down for space and descendants, Up for spaceId and ancestors, Any for both",
            "required": false,
            "type": "string",
            "enum": [
              "None",
              "Down",
              "Up",
              "Span"
            ]
          },
          {
            "name": "minLevel",
            "in": "query",
            "description": "Optional filter on minimum level, inclusive",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxLevel",
            "in": "query",
            "description": "Optional filter on maximum level, inclusive",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "minRelative",
            "in": "query",
            "description": "Specify if min level is absolute or relative",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "maxRelative",
            "in": "query",
            "description": "Specify if max level is absolute or relative",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SpaceResourceRetrieve"
              },
              "xml": {
                "name": "SpaceResourceRetrieve",
                "wrapped": true
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Resources"
        ],
        "summary": "Creates a resource",
        "operationId": "Resources_Create",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "The resource information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SpaceResourceCreate"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "201": {
            "description": "OK",
            "schema": {
              "format": "uuid",
              "type": "string",
              "example": "00000000-0000-0000-0000-000000000000"
            }
          }
        }
      }
    },
    "/api/v1.0/resources/{id}": {
      "get": {
        "tags": [
          "Resources"
        ],
        "summary": "Retrieves the specified resource",
        "operationId": "Resources_RetrieveById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Resource Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "includes",
            "in": "query",
            "description": "Comma separated list of what to include, for example \"Space,DependentChildren\". Defaults to None",
            "required": false,
            "type": "string",
            "enum": [
              "None",
              "DependentAncestors",
              "DependentChildren",
              "FullPath",
              "Space"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SpaceResourceRetrieve"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Resources"
        ],
        "summary": "Deletes the specified resource",
        "operationId": "Resources_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Resource Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "204": {
            "description": "No content"
          }
        }
      },
      "patch": {
        "tags": [
          "Resources"
        ],
        "summary": "Updates the specified resource",
        "operationId": "Resources_Update",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Resource Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "data",
            "in": "body",
            "description": "The resource information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SpaceResourceUpdate"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "204": {
            "description": "No content"
          }
        }
      }
    },
    "/api/v1.0/roleassignments/check": {
      "get": {
        "tags": [
          "RoleAssignments"
        ],
        "summary": "Checks permissions for a given path, user, domain, tenant id, accessType and resource type",
        "operationId": "RoleAssignments_Check",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "description": "The path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "query",
            "description": "The AAD user ObjectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "accessType",
            "in": "query",
            "description": "The access type",
            "required": true,
            "type": "string",
            "enum": [
              "None",
              "Read",
              "Create",
              "Update",
              "Delete"
            ]
          },
          {
            "name": "resourceType",
            "in": "query",
            "description": "The resource type",
            "required": true,
            "type": "string",
            "enum": [
              "None",
              "Device",
              "DeviceBlobMetadata",
              "DeviceExtendedProperty",
              "ExtendedPropertyKey",
              "ExtendedType",
              "Endpoint",
              "KeyStore",
              "Matcher",
              "Ontology",
              "Report",
              "RoleDefinition",
              "Sensor",
              "SensorExtendedProperty",
              "Space",
              "SpaceBlobMetadata",
              "SpaceExtendedProperty",
              "SpaceResource",
              "SpaceRoleAssignment",
              "System",
              "UserDefinedFunction",
              "User",
              "UserBlobMetadata",
              "UserExtendedProperty"
            ]
          },
          {
            "name": "domain",
            "in": "query",
            "description": "The domain to check preceded by the '@' character, or the upn that belongs to the user. Examples: `user@example.com`, `@example.com`",
            "required": false,
            "type": "string",
            "default": ""
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "The AAD tenantId of the user, disallowed for GatewayDevice role assignments",
            "required": false,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "boolean"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          }
        }
      }
    },
    "/api/v1.0/roleassignments": {
      "get": {
        "tags": [
          "RoleAssignments"
        ],
        "summary": "Gets role assignments under a given path",
        "operationId": "RoleAssignments_Retrieve",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "description": "The path under which role assignments are searched",
            "required": true,
            "type": "string"
          },
          {
            "name": "objectId",
            "in": "query",
            "description": "Optional object id filter. This corresponds to an object id used in a role assignment creation.",
            "required": false,
            "type": "string"
          },
          {
            "name": "personal",
            "in": "query",
            "description": "Optionally make the search return only the role assignments that are applicable to the user sending the request",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "traverse",
            "in": "query",
            "description": "Optionally specify if you want to recursively include children (Down) of the specified path. Other traversal directions are not supported.",
            "required": false,
            "type": "string",
            "enum": [
              "None",
              "Down",
              "Up",
              "Span"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RoleAssignmentRetrieve"
              },
              "xml": {
                "name": "RoleAssignmentRetrieve",
                "wrapped": true
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          }
        }
      },
      "post": {
        "tags": [
          "RoleAssignments"
        ],
        "summary": "Creates a role assignment",
        "operationId": "RoleAssignments_Create",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "The role assignment information.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RoleAssignmentCreate"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "201": {
            "description": "OK",
            "schema": {
              "format": "uuid",
              "type": "string",
              "example": "00000000-0000-0000-0000-000000000000"
            }
          }
        }
      }
    },
    "/api/v1.0/roleassignments/{id}": {
      "delete": {
        "tags": [
          "RoleAssignments"
        ],
        "summary": "Deletes a role assignment",
        "operationId": "RoleAssignments_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Role assignment id",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "204": {
            "description": "No content"
          }
        }
      }
    },
    "/api/v1.0/sensors": {
      "get": {
        "tags": [
          "Sensors"
        ],
        "summary": "Gets a list of sensors",
        "operationId": "Sensors_Retrieve",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "Optional ';' or ',' delimited list of ids to filter by",
            "required": false,
            "type": "string"
          },
          {
            "name": "deviceIds",
            "in": "query",
            "description": "Optionally filter on sensors that belong to the given devices",
            "required": false,
            "type": "string"
          },
          {
            "name": "types",
            "in": "query",
            "description": "Optionally filter on types",
            "required": false,
            "type": "string"
          },
          {
            "name": "portTypes",
            "in": "query",
            "description": "Optionally on port types",
            "required": false,
            "type": "string"
          },
          {
            "name": "dataTypes",
            "in": "query",
            "description": "Optionally on data subtypes",
            "required": false,
            "type": "string"
          },
          {
            "name": "dataSubtypes",
            "in": "query",
            "description": "Optionally on data types",
            "required": false,
            "type": "string"
          },
          {
            "name": "dataUnitTypes",
            "in": "query",
            "description": "Optionally on data unit types",
            "required": false,
            "type": "string"
          },
          {
            "name": "hardwareIds",
            "in": "query",
            "description": "Optionally on hardwareIds",
            "required": false,
            "type": "string"
          },
          {
            "name": "includes",
            "in": "query",
            "description": "What to include",
            "required": false,
            "type": "string",
            "enum": [
              "None",
              "Properties",
              "Device",
              "FullPath",
              "Location",
              "Space",
              "Types",
              "Value",
              "SpaceTypes",
              "DeviceTypes"
            ]
          },
          {
            "name": "propertyKey",
            "in": "query",
            "description": "Optional filter on objects that have the given property key defined",
            "required": false,
            "type": "string"
          },
          {
            "name": "propertyValue",
            "in": "query",
            "description": "Optional filter on the value of the given property key",
            "required": false,
            "type": "string"
          },
          {
            "name": "propertyValueSearchType",
            "in": "query",
            "description": "Optional type of search on property value. Contains or Equals. Defaults to Equals",
            "required": false,
            "type": "string",
            "enum": [
              "Equals",
              "Contains"
            ]
          },
          {
            "name": "spaceId",
            "in": "query",
            "description": "Optionally filter on objects based on their location in the topology relative to the specified spaceId",
            "required": false,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "traverse",
            "in": "query",
            "description": "None (the default) for the specified spaceId only, Down for space and descendants, Up for spaceId and ancestors, Any for both",
            "required": false,
            "type": "string",
            "enum": [
              "None",
              "Down",
              "Up",
              "Span"
            ]
          },
          {
            "name": "minLevel",
            "in": "query",
            "description": "Optional filter on minimum level, inclusive",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxLevel",
            "in": "query",
            "description": "Optional filter on maximum level, inclusive",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "minRelative",
            "in": "query",
            "description": "Specify if min level is absolute or relative",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "maxRelative",
            "in": "query",
            "description": "Specify if max level is absolute or relative",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SensorRetrieve"
              },
              "xml": {
                "name": "SensorRetrieve",
                "wrapped": true
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Sensors"
        ],
        "summary": "Creates a sensor",
        "operationId": "Sensors_Create",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "The sensor information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SensorCreate"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "201": {
            "description": "OK",
            "schema": {
              "format": "uuid",
              "type": "string",
              "example": "00000000-0000-0000-0000-000000000000"
            }
          }
        }
      }
    },
    "/api/v1.0/sensors/{id}": {
      "get": {
        "tags": [
          "Sensors"
        ],
        "summary": "Gets a sensor",
        "operationId": "Sensors_RetrieveById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "includes",
            "in": "query",
            "description": "What to include",
            "required": false,
            "type": "string",
            "enum": [
              "None",
              "Properties",
              "Device",
              "FullPath",
              "Location",
              "Space",
              "Types",
              "Value",
              "SpaceTypes",
              "DeviceTypes"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SensorRetrieve"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Sensors"
        ],
        "summary": "Deletes a sensor",
        "operationId": "Sensors_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The sensor Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "204": {
            "description": "No content"
          }
        }
      },
      "patch": {
        "tags": [
          "Sensors"
        ],
        "summary": "Updates a sensor",
        "operationId": "Sensors_Update",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The sensor Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "data",
            "in": "body",
            "description": "The sensor information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SensorUpdate"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "204": {
            "description": "No content"
          }
        }
      }
    },
    "/api/v1.0/sensors/{id}/matchers": {
      "get": {
        "tags": [
          "Sensors"
        ],
        "summary": "Gets the matchers that match the given sensor",
        "operationId": "Sensors_Matchers",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Sensor identifier",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "includes",
            "in": "query",
            "description": "What to include",
            "required": false,
            "type": "string",
            "enum": [
              "None",
              "Description",
              "FullPath",
              "Space",
              "Conditions",
              "UserDefinedFunctions"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MatcherRetrieve"
              },
              "xml": {
                "name": "MatcherRetrieve",
                "wrapped": true
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          }
        }
      }
    },
    "/api/v1.0/sensors/{id}/value": {
      "get": {
        "tags": [
          "Sensors"
        ],
        "summary": "Gets a sensor's value",
        "operationId": "Sensors_GetValue",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SensorValue"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          }
        }
      }
    },
    "/api/v1.0/sensors/{id}/properties/{name}": {
      "get": {
        "tags": [
          "Sensors"
        ],
        "summary": "Gets the value of a property",
        "operationId": "Sensors_RetrieveProperty",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parent Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Property name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Sensors"
        ],
        "summary": "Deletes the given property value",
        "operationId": "Sensors_DeleteProperty",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parent Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Property name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "204": {
            "description": "No content"
          }
        }
      }
    },
    "/api/v1.0/sensors/{id}/properties": {
      "put": {
        "tags": [
          "Sensors"
        ],
        "summary": "Creates or updates property values",
        "operationId": "Sensors_UpdateProperties",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parent Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "data",
            "in": "body",
            "description": "The properties",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExtendedPropertyCreate"
              },
              "xml": {
                "name": "ExtendedPropertyCreate",
                "wrapped": true
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "201": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Sensors"
        ],
        "summary": "Creates a property value",
        "operationId": "Sensors_CreateProperty",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parent Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "data",
            "in": "body",
            "description": "Extended property data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExtendedPropertyCreate"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "201": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Sensors"
        ],
        "summary": "Deletes all property values",
        "operationId": "Sensors_DeleteProperties",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parent Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "204": {
            "description": "No content"
          }
        }
      }
    },
    "/api/v1.0/spaces": {
      "get": {
        "tags": [
          "Spaces"
        ],
        "summary": "Gets a list of spaces",
        "operationId": "Spaces_Retrieve",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "Optional ';' or ',' delimited list of ids to filter by",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Optional name filter",
            "required": false,
            "type": "string"
          },
          {
            "name": "types",
            "in": "query",
            "description": "Optional ';' or ',' delimited list of space types to filter by.",
            "required": false,
            "type": "string"
          },
          {
            "name": "subtypes",
            "in": "query",
            "description": "Optional ';' or ',' delimited list of space subtypes to filter by.",
            "required": false,
            "type": "string"
          },
          {
            "name": "statuses",
            "in": "query",
            "description": "Optional ';' or ',' delimited list of space statuses to filter by.",
            "required": false,
            "type": "string"
          },
          {
            "name": "useParentSpace",
            "in": "query",
            "description": "If true, spaceId represents the space's parent. Defaults to false.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "userUpn",
            "in": "query",
            "description": "Optional filter for spaces associated with the given user",
            "required": false,
            "type": "string"
          },
          {
            "name": "sensorDataTypes",
            "in": "query",
            "description": "Optional ';' or ',' list of types of values to retrieve when specifying Values for includes, for example \"Temperature, Motion\"",
            "required": false,
            "type": "string"
          },
          {
            "name": "includes",
            "in": "query",
            "description": "Comma separated list of what to include, for example \"Sensors,Devices\". Defaults to None",
            "required": false,
            "type": "string",
            "enum": [
              "None",
              "ChildSpaces",
              "ChildSpacesDescription",
              "ChildSpacesProperties",
              "ChildSpacesTypes",
              "Description",
              "Devices",
              "DevicesDescription",
              "DevicesProperties",
              "DevicesSensors",
              "DevicesSensorsFullPath",
              "DevicesSensorsProperties",
              "DevicesSensorsTypes",
              "DevicesSensorsValues",
              "DevicesTypes",
              "FullPath",
              "Location",
              "Parent",
              "Properties",
              "Resources",
              "ResourcesDependentAncestors",
              "ResourcesDependentChildren",
              "Sensors",
              "SensorsFullPath",
              "SensorsProperties",
              "SensorsTypes",
              "SensorsValues",
              "TimeZone",
              "Types",
              "Users",
              "UsersProperties",
              "Values",
              "ParentTypes"
            ]
          },
          {
            "name": "propertyKey",
            "in": "query",
            "description": "Optional filter on objects that have the given property key defined",
            "required": false,
            "type": "string"
          },
          {
            "name": "propertyValue",
            "in": "query",
            "description": "Optional filter on the value of the given property key",
            "required": false,
            "type": "string"
          },
          {
            "name": "propertyValueSearchType",
            "in": "query",
            "description": "Optional type of search on property value. Contains or Equals. Defaults to Equals",
            "required": false,
            "type": "string",
            "enum": [
              "Equals",
              "Contains"
            ]
          },
          {
            "name": "spaceId",
            "in": "query",
            "description": "Optionally filter on objects based on their location in the topology relative to the specified spaceId",
            "required": false,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "traverse",
            "in": "query",
            "description": "None (the default) for the specified spaceId only, Down for space and descendants, Up for spaceId and ancestors, Any for both",
            "required": false,
            "type": "string",
            "enum": [
              "None",
              "Down",
              "Up",
              "Span"
            ]
          },
          {
            "name": "minLevel",
            "in": "query",
            "description": "Optional filter on minimum level, inclusive",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxLevel",
            "in": "query",
            "description": "Optional filter on maximum level, inclusive",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "minRelative",
            "in": "query",
            "description": "Specify if min level is absolute or relative",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "maxRelative",
            "in": "query",
            "description": "Specify if max level is absolute or relative",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SpaceRetrieveWithChildren"
              },
              "xml": {
                "name": "SpaceRetrieveWithChildren",
                "wrapped": true
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Spaces"
        ],
        "summary": "Creates a space",
        "operationId": "Spaces_Create",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "The space information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SpaceCreate"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "201": {
            "description": "OK",
            "schema": {
              "format": "uuid",
              "type": "string",
              "example": "00000000-0000-0000-0000-000000000000"
            }
          }
        }
      }
    },
    "/api/v1.0/spaces/{id}": {
      "get": {
        "tags": [
          "Spaces"
        ],
        "summary": "Gets a specific space",
        "operationId": "Spaces_RetrieveById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Space Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "includes",
            "in": "query",
            "description": "Comma separated list of what to include, for example \"Sensors,Devices\". Defaults to None",
            "required": false,
            "type": "string",
            "enum": [
              "None",
              "ChildSpaces",
              "ChildSpacesDescription",
              "ChildSpacesProperties",
              "ChildSpacesTypes",
              "Description",
              "Devices",
              "DevicesDescription",
              "DevicesProperties",
              "DevicesSensors",
              "DevicesSensorsFullPath",
              "DevicesSensorsProperties",
              "DevicesSensorsTypes",
              "DevicesSensorsValues",
              "DevicesTypes",
              "FullPath",
              "Location",
              "Parent",
              "Properties",
              "Resources",
              "ResourcesDependentAncestors",
              "ResourcesDependentChildren",
              "Sensors",
              "SensorsFullPath",
              "SensorsProperties",
              "SensorsTypes",
              "SensorsValues",
              "TimeZone",
              "Types",
              "Users",
              "UsersProperties",
              "Values",
              "ParentTypes"
            ]
          },
          {
            "name": "sensorDataTypes",
            "in": "query",
            "description": "Optional ';' or ',' list of types of values to retrieve when specifying Values for includes, for example \"Temperature, Motion\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SpaceRetrieveWithChildren"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Spaces"
        ],
        "summary": "Deletes a space and its children, such as devices, sensors, users, ...",
        "description": "Deleting a space will fail if one of these objects belongs in the space tree about to be deleted:\r\n            - Space resource: These need to be deleted first.\r\n            - Sensors attached to devices that do **not** belong in the space tree about to be deleted: these (or their parent device) need to be deleted first.",
        "operationId": "Spaces_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Space Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "204": {
            "description": "No content"
          }
        }
      },
      "patch": {
        "tags": [
          "Spaces"
        ],
        "summary": "Updates a space",
        "operationId": "Spaces_Update",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Space Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "data",
            "in": "body",
            "description": "The space information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SpaceUpdate"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "204": {
            "description": "No content"
          }
        }
      }
    },
    "/api/v1.0/spaces/{id}/parent": {
      "get": {
        "tags": [
          "Spaces"
        ],
        "summary": "Gets the first space of the given type by walking up the spaces hierarchy",
        "operationId": "Spaces_RetrieveParent",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Space Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "spaceType",
            "in": "query",
            "description": "The parent space type",
            "required": true,
            "type": "string"
          },
          {
            "name": "includes",
            "in": "query",
            "description": "Comma separated list of what to include, for example \"Sensors,Devices\". Defaults to None",
            "required": false,
            "type": "string",
            "enum": [
              "None",
              "ChildSpaces",
              "ChildSpacesDescription",
              "ChildSpacesProperties",
              "ChildSpacesTypes",
              "Description",
              "Devices",
              "DevicesDescription",
              "DevicesProperties",
              "DevicesSensors",
              "DevicesSensorsFullPath",
              "DevicesSensorsProperties",
              "DevicesSensorsTypes",
              "DevicesSensorsValues",
              "DevicesTypes",
              "FullPath",
              "Location",
              "Parent",
              "Properties",
              "Resources",
              "ResourcesDependentAncestors",
              "ResourcesDependentChildren",
              "Sensors",
              "SensorsFullPath",
              "SensorsProperties",
              "SensorsTypes",
              "SensorsValues",
              "TimeZone",
              "Types",
              "Users",
              "UsersProperties",
              "Values",
              "ParentTypes"
            ]
          },
          {
            "name": "sensorDataTypes",
            "in": "query",
            "description": "Optional ';' or ',' list of types of values to retrieve when specifying Values for includes, for example \"Temperature, Motion\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SpaceRetrieveWithChildren"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          }
        }
      }
    },
    "/api/v1.0/spaces/{id}/keystore": {
      "get": {
        "tags": [
          "Spaces"
        ],
        "summary": "Gets the first keystore by walking up the spaces hierarchy",
        "operationId": "Spaces_RetrieveKeyStore",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Space Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "includes",
            "in": "query",
            "description": "Comma separated list of what to include, for example \"Space,Keys\". Defaults to None",
            "required": false,
            "type": "string",
            "enum": [
              "None",
              "Description",
              "FullPath",
              "Keys",
              "Space"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/KeyStoreRetrieve"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          }
        }
      }
    },
    "/api/v1.0/spaces/{id}/users": {
      "get": {
        "tags": [
          "Spaces"
        ],
        "summary": "Gets the list of users associated with the given space",
        "operationId": "Spaces_RetrieveUsers",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Space Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "traverse",
            "in": "query",
            "description": "Optionally specify if you want to recursively include children (Down) or ancestors (Up) of the specified space Id",
            "required": false,
            "type": "string",
            "enum": [
              "None",
              "Down",
              "Up",
              "Span"
            ]
          },
          {
            "name": "unmapped",
            "in": "query",
            "description": "Optionally filter on mapped or unmapped users",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "firstName",
            "in": "query",
            "description": "Optional filter on first name",
            "required": false,
            "type": "string"
          },
          {
            "name": "lastName",
            "in": "query",
            "description": "Optional filter on last name",
            "required": false,
            "type": "string"
          },
          {
            "name": "includes",
            "in": "query",
            "description": "Comma separated list of what to include, for example \"Space\". Defaults to None",
            "required": false,
            "type": "string",
            "enum": [
              "None",
              "FullPath",
              "Location",
              "Properties",
              "RoleAssignments",
              "Space"
            ]
          },
          {
            "name": "propertyKey",
            "in": "query",
            "description": "Optional filter on objects that have the given property key defined",
            "required": false,
            "type": "string"
          },
          {
            "name": "propertyValue",
            "in": "query",
            "description": "Optional filter on the value of the given property key",
            "required": false,
            "type": "string"
          },
          {
            "name": "propertyValueSearchType",
            "in": "query",
            "description": "Optional type of search on property value. Contains or Equals. Defaults to Equals",
            "required": false,
            "type": "string",
            "enum": [
              "Equals",
              "Contains"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserRetrieve"
              },
              "xml": {
                "name": "UserRetrieve",
                "wrapped": true
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Spaces"
        ],
        "summary": "Adds or updates a user associated to the given space",
        "operationId": "Spaces_CreateOrUpdateUser",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Space Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "data",
            "in": "body",
            "description": "The user's data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserCreate"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "201": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/api/v1.0/spaces/{id}/users/move": {
      "post": {
        "tags": [
          "Spaces"
        ],
        "summary": "Moves the users with provided UPNs from one space to another",
        "operationId": "Spaces_MoveUsersToSpace",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Space Id where the users are currently associated",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "toSpaceId",
            "in": "query",
            "description": "Space Id where the users have to be moved to",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "users",
            "in": "body",
            "description": "List of users who need to be re-assigned",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserCreate"
              },
              "xml": {
                "name": "UserCreate",
                "wrapped": true
              }
            }
          },
          {
            "name": "resetLocation",
            "in": "query",
            "description": "If true reset locations not defined in payload",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "201": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1.0/spaces/{id}/users/{upn}": {
      "get": {
        "tags": [
          "Spaces"
        ],
        "summary": "Get a user in the given space",
        "operationId": "Spaces_RetrieveUserByUpn",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Space Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "upn",
            "in": "path",
            "description": "The user's UPN",
            "required": true,
            "type": "string"
          },
          {
            "name": "includes",
            "in": "query",
            "description": "Comma separated list of what to include, for example \"Space\". Defaults to None",
            "required": false,
            "type": "string",
            "enum": [
              "None",
              "FullPath",
              "Location",
              "Properties",
              "RoleAssignments",
              "Space"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserRetrieve"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Spaces"
        ],
        "summary": "Removes a user from the given space",
        "operationId": "Spaces_DeleteUser",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Space Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "upn",
            "in": "path",
            "description": "The user's UPN",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "204": {
            "description": "No content"
          }
        }
      }
    },
    "/api/v1.0/spaces/{id}/resources/{type}": {
      "get": {
        "tags": [
          "Spaces"
        ],
        "summary": "Gets the first resource of the given type by walking up the spaces hierarchy",
        "operationId": "Spaces_RetrieveResource",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The space id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "type",
            "in": "path",
            "description": "The resource type",
            "required": true,
            "type": "string",
            "enum": [
              "IotHub"
            ]
          },
          {
            "name": "includes",
            "in": "query",
            "description": "Comma separated list of what to include, for example \"Space,DependentChildren\". Defaults to None",
            "required": false,
            "type": "string",
            "enum": [
              "None",
              "DependentAncestors",
              "DependentChildren",
              "FullPath",
              "Space"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SpaceResourceRetrieve"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          }
        }
      }
    },
    "/api/v1.0/spaces/{id}/values": {
      "get": {
        "tags": [
          "Spaces"
        ],
        "summary": "Gets the aggregate of the values of the child sensors of the given type",
        "operationId": "Spaces_GetValue",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "sensorDataTypes",
            "in": "query",
            "description": "Optional ';' or ',' list of types of values to retrieve when specifying Values for includes, for example \"Temperature, Motion\"",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SensorValue"
              },
              "xml": {
                "name": "SensorValue",
                "wrapped": true
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          }
        }
      }
    },
    "/api/v1.0/spaces/blobs": {
      "get": {
        "tags": [
          "Spaces"
        ],
        "summary": "Gets a list of blobs",
        "operationId": "Spaces_RetrieveBlobMetadata",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "names",
            "in": "query",
            "description": "Optional ';' or ',' delimited list of blob names to filter by",
            "required": false,
            "type": "string"
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Optional ';' or ',' delimited list of ids to filter by",
            "required": false,
            "type": "string"
          },
          {
            "name": "sharings",
            "in": "query",
            "description": "Optional ';' or ',' delimited list of Sharing modes to filter by",
            "required": false,
            "type": "string"
          },
          {
            "name": "types",
            "in": "query",
            "description": "Optional ';' or ',' delimited list of types to filter by",
            "required": false,
            "type": "string"
          },
          {
            "name": "subtypes",
            "in": "query",
            "description": "Optional ';' or ',' delimited list of subtypes to filter by",
            "required": false,
            "type": "string"
          },
          {
            "name": "includes",
            "in": "query",
            "description": "Comma separated list of what to include, for example \"ContentInfo,Description\". Defaults to None",
            "required": false,
            "type": "string",
            "enum": [
              "None",
              "ContentInfo",
              "Description",
              "FullPath",
              "Types"
            ]
          },
          {
            "name": "spaceId",
            "in": "query",
            "description": "Optionally filter on objects based on their location in the topology relative to the specified spaceId",
            "required": false,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "traverse",
            "in": "query",
            "description": "None (the default) for the specified spaceId only, Down for space and descendants, Up for spaceId and ancestors, Any for both",
            "required": false,
            "type": "string",
            "enum": [
              "None",
              "Down",
              "Up",
              "Span"
            ]
          },
          {
            "name": "minLevel",
            "in": "query",
            "description": "Optional filter on minimum level, inclusive",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxLevel",
            "in": "query",
            "description": "Optional filter on maximum level, inclusive",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "minRelative",
            "in": "query",
            "description": "Specify if min level is absolute or relative",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "maxRelative",
            "in": "query",
            "description": "Specify if max level is absolute or relative",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BlobMetadataRetrieve"
              },
              "xml": {
                "name": "BlobMetadataRetrieve",
                "wrapped": true
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Spaces"
        ],
        "summary": "Creates a blob",
        "description": "This is a multi-part request. For more information, see sample app or doc examples.\r\nKey value pairs specified in the Content-Disposition header in the blob-chunk of the multipart request will be preserved as meta-data on the stored blob.",
        "operationId": "Spaces_CreateBlob",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "metadata",
            "in": "formData",
            "description": "The mime type of this parameter is \"application/json\" and its schema is #/definitions/BlobMetadataCreate",
            "required": true,
            "type": "string"
          },
          {
            "name": "contents",
            "in": "formData",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "201": {
            "description": "OK",
            "schema": {
              "format": "uuid",
              "type": "string",
              "example": "00000000-0000-0000-0000-000000000000"
            }
          }
        }
      }
    },
    "/api/v1.0/spaces/blobs/{id}": {
      "get": {
        "tags": [
          "Spaces"
        ],
        "summary": "Gets a blob",
        "operationId": "Spaces_RetrieveBlobMetadataById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Blob Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "includes",
            "in": "query",
            "description": "Comma separated list of what to include, for example \"ContentInfo,Description\". Defaults to None",
            "required": false,
            "type": "string",
            "enum": [
              "None",
              "ContentInfo",
              "Description",
              "FullPath",
              "Types"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BlobMetadataRetrieve"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Spaces"
        ],
        "summary": "Deletes a blob",
        "description": "Deleting a blob will delete its metadata, its content (all versions) and its associations",
        "operationId": "Spaces_DeleteBlob",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Blob Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "204": {
            "description": "No content"
          }
        }
      },
      "patch": {
        "tags": [
          "Spaces"
        ],
        "summary": "Updates a blob",
        "description": "This is a multi-part request. For more information, see sample app or doc examples.",
        "operationId": "Spaces_UpdateBlob",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "blob Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "metadata",
            "in": "formData",
            "description": "The mime type of this parameter is \"application/json\" and its schema is #/definitions/BlobMetadataUpdate",
            "required": true,
            "type": "string"
          },
          {
            "name": "contents",
            "in": "formData",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "204": {
            "description": "No content"
          }
        }
      }
    },
    "/api/v1.0/spaces/blobs/{id}/contents/{version}": {
      "get": {
        "tags": [
          "Spaces"
        ],
        "summary": "Gets the contents of the given version of the given blob",
        "operationId": "Spaces_GetBlobContents",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "blob id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "version",
            "in": "path",
            "description": "blob content version",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Spaces"
        ],
        "summary": "Delete the contents of the given version of the given blob",
        "description": "Delete will fail if this version has any associations",
        "operationId": "Spaces_DeleteBlobContents",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "blob id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "version",
            "in": "path",
            "description": "blob version",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "204": {
            "description": "No content"
          }
        }
      }
    },
    "/api/v1.0/spaces/blobs/{id}/contents/latest": {
      "get": {
        "tags": [
          "Spaces"
        ],
        "summary": "Gets the contents of the latest version of the given blob",
        "operationId": "Spaces_GetLatestBlobContents",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "blob id",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          }
        }
      }
    },
    "/api/v1.0/spaces/{id}/properties/{name}": {
      "get": {
        "tags": [
          "Spaces"
        ],
        "summary": "Gets the value of a property",
        "operationId": "Spaces_RetrieveProperty",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parent Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Property name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Spaces"
        ],
        "summary": "Deletes the given property value",
        "operationId": "Spaces_DeleteProperty",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parent Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Property name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "204": {
            "description": "No content"
          }
        }
      }
    },
    "/api/v1.0/spaces/{id}/properties": {
      "put": {
        "tags": [
          "Spaces"
        ],
        "summary": "Creates or updates property values",
        "operationId": "Spaces_UpdateProperties",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parent Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "data",
            "in": "body",
            "description": "The properties",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExtendedPropertyCreate"
              },
              "xml": {
                "name": "ExtendedPropertyCreate",
                "wrapped": true
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "201": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Spaces"
        ],
        "summary": "Creates a property value",
        "operationId": "Spaces_CreateProperty",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parent Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "data",
            "in": "body",
            "description": "Extended property data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExtendedPropertyCreate"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "201": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Spaces"
        ],
        "summary": "Deletes all property values",
        "operationId": "Spaces_DeleteProperties",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parent Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "204": {
            "description": "No content"
          }
        }
      }
    },
    "/api/v1.0/system/devices/statuses": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "Retrieve all supported device statuses",
        "operationId": "System_RetrieveDeviceStatuses",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/IEnumEntity"
              },
              "xml": {
                "name": "IEnumEntity",
                "wrapped": true
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          }
        }
      }
    },
    "/api/v1.0/system/extendedpropertykeys/scopes": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "Retrieve all extended property key scopes",
        "operationId": "System_RetrievePropertyKeyScopes",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/IEnumEntity"
              },
              "xml": {
                "name": "IEnumEntity",
                "wrapped": true
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          }
        }
      }
    },
    "/api/v1.0/system/extendedtypes/categories": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "Retrieve all extended type categories",
        "operationId": "System_RetrieveExtendedTypeCategories",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/IEnumEntity"
              },
              "xml": {
                "name": "IEnumEntity",
                "wrapped": true
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          }
        }
      }
    },
    "/api/v1.0/system/matchers/conditions/targets": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "Retrieve all supported targets for matcher's conditions",
        "operationId": "System_RetrieveMatcherConditionTargets",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/IEnumEntity"
              },
              "xml": {
                "name": "IEnumEntity",
                "wrapped": true
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          }
        }
      }
    },
    "/api/v1.0/system/matchers/conditions/comparisons": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "Retrieve all supported comparisons for matcher's conditions",
        "operationId": "System_RetrieveMatcherConditionComparisons",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/IEnumEntity"
              },
              "xml": {
                "name": "IEnumEntity",
                "wrapped": true
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          }
        }
      }
    },
    "/api/v1.0/system/roles": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "Retrieve all supported roles",
        "operationId": "System_RetrieveRoles",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RoleDefinitionRetrieve"
              },
              "xml": {
                "name": "RoleDefinitionRetrieve",
                "wrapped": true
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          }
        }
      }
    },
    "/api/v1.0/system/spacesresources/regions": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "Retrieve all supported space resource regions",
        "operationId": "System_RetrieveSpaceResourceRegions",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/IEnumEntity"
              },
              "xml": {
                "name": "IEnumEntity",
                "wrapped": true
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          }
        }
      }
    },
    "/api/v1.0/system/spacesresources/sizes": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "Retrieve all supported space resource sizes",
        "operationId": "System_RetrieveSpaceResourceSizes",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/IEnumEntity"
              },
              "xml": {
                "name": "IEnumEntity",
                "wrapped": true
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          }
        }
      }
    },
    "/api/v1.0/system/spacesresources/statuses": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "Retrieve all supported space resource statuses",
        "operationId": "System_RetrieveSpaceResourceStatuses",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/IEnumEntity"
              },
              "xml": {
                "name": "IEnumEntity",
                "wrapped": true
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          }
        }
      }
    },
    "/api/v1.0/system/timezones": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "Retrieve all supported timezones",
        "operationId": "System_RetrieveTimeZones",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/IEnumEntity"
              },
              "xml": {
                "name": "IEnumEntity",
                "wrapped": true
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          }
        }
      }
    },
    "/api/v1.0/types": {
      "get": {
        "tags": [
          "Types"
        ],
        "summary": "Gets a list of extended types",
        "operationId": "Types_Retrieve",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "Optional ';' or ',' delimited list of ids to filter by",
            "required": false,
            "type": "string"
          },
          {
            "name": "categories",
            "in": "query",
            "description": "Optional ';' or ',' delimited list of categories to filter by",
            "required": false,
            "type": "string"
          },
          {
            "name": "names",
            "in": "query",
            "description": "Optional ';' or ',' delimited list of names to filter by",
            "required": false,
            "type": "string"
          },
          {
            "name": "system",
            "in": "query",
            "description": "Optionally filter on objects that have a parent space. If true, only return unparented (system) types. If false, only return parented (custom) types.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "disabled",
            "in": "query",
            "description": "Optional filter on the disabled flag",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "includes",
            "in": "query",
            "description": "Comma separated list of what to include, for example \"Space\". Defaults to None",
            "required": false,
            "type": "string",
            "enum": [
              "None",
              "Description",
              "FullPath",
              "Ontologies",
              "Space"
            ]
          },
          {
            "name": "spaceId",
            "in": "query",
            "description": "Optionally filter on objects based on their location in the topology relative to the specified spaceId",
            "required": false,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "traverse",
            "in": "query",
            "description": "None (the default) for the specified spaceId only, Down for space and descendants, Up for spaceId and ancestors, Any for both",
            "required": false,
            "type": "string",
            "enum": [
              "None",
              "Down",
              "Up",
              "Span"
            ]
          },
          {
            "name": "minLevel",
            "in": "query",
            "description": "Optional filter on minimum level, inclusive",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxLevel",
            "in": "query",
            "description": "Optional filter on maximum level, inclusive",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "minRelative",
            "in": "query",
            "description": "Specify if min level is absolute or relative",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "maxRelative",
            "in": "query",
            "description": "Specify if max level is absolute or relative",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExtendedTypeRetrieve"
              },
              "xml": {
                "name": "ExtendedTypeRetrieve",
                "wrapped": true
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Types"
        ],
        "summary": "Creates an extended type",
        "operationId": "Types_Create",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "The type information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExtendedTypeCreate"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "201": {
            "description": "OK",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        }
      }
    },
    "/api/v1.0/types/{id}": {
      "get": {
        "tags": [
          "Types"
        ],
        "summary": "Gets a specific extended type",
        "operationId": "Types_RetrieveById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Extended type id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "includes",
            "in": "query",
            "description": "Comma separated list of what to include, for example \"Space\". Defaults to None",
            "required": false,
            "type": "string",
            "enum": [
              "None",
              "Description",
              "FullPath",
              "Ontologies",
              "Space"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ExtendedTypeRetrieve"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Types"
        ],
        "summary": "Deletes an extended type",
        "operationId": "Types_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Extended type id",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "204": {
            "description": "No content"
          }
        }
      },
      "patch": {
        "tags": [
          "Types"
        ],
        "summary": "Updates an extended type",
        "operationId": "Types_Update",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Extended type id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "data",
            "in": "body",
            "description": "Update payload",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExtendedTypeUpdate"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "204": {
            "description": "No content"
          }
        }
      }
    },
    "/api/v1.0/userdefinedfunctions": {
      "get": {
        "tags": [
          "UserDefinedFunctions"
        ],
        "summary": "Gets a list of udfs",
        "operationId": "UserDefinedFunctions_Retrieve",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "names",
            "in": "query",
            "description": "Optional ';' or ',' delimited list of udf names to filter by",
            "required": false,
            "type": "string"
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Optional ';' or ',' delimited list of ids to filter by",
            "required": false,
            "type": "string"
          },
          {
            "name": "includes",
            "in": "query",
            "description": "Comma separated list of what to include, for example \"ContentInfo,Description\". Defaults to None",
            "required": false,
            "type": "string",
            "enum": [
              "None",
              "Description",
              "FullPath",
              "Matchers",
              "Space",
              "ContentInfo"
            ]
          },
          {
            "name": "spaceId",
            "in": "query",
            "description": "Optionally filter on objects based on their location in the topology relative to the specified spaceId",
            "required": false,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "traverse",
            "in": "query",
            "description": "None (the default) for the specified spaceId only, Down for space and descendants, Up for spaceId and ancestors, Any for both",
            "required": false,
            "type": "string",
            "enum": [
              "None",
              "Down",
              "Up",
              "Span"
            ]
          },
          {
            "name": "minLevel",
            "in": "query",
            "description": "Optional filter on minimum level, inclusive",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxLevel",
            "in": "query",
            "description": "Optional filter on maximum level, inclusive",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "minRelative",
            "in": "query",
            "description": "Specify if min level is absolute or relative",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "maxRelative",
            "in": "query",
            "description": "Specify if max level is absolute or relative",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserDefinedFunctionRetrieve"
              },
              "xml": {
                "name": "UserDefinedFunctionRetrieve",
                "wrapped": true
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          }
        }
      },
      "post": {
        "tags": [
          "UserDefinedFunctions"
        ],
        "summary": "Creates a udf",
        "description": "This is a multi-part request. For more information, see doc examples.\r\nKey value pairs specified in the Content-Disposition header in the udf-chunk of the multipart request will be preserved as meta-data on the stored udf.",
        "operationId": "UserDefinedFunctions_Create",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "metadata",
            "in": "formData",
            "description": "The mime type of this parameter is \"application/json\" and its schema is #/definitions/UserDefinedFunctionCreate",
            "required": true,
            "type": "string"
          },
          {
            "name": "contents",
            "in": "formData",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "201": {
            "description": "OK",
            "schema": {
              "format": "uuid",
              "type": "string",
              "example": "00000000-0000-0000-0000-000000000000"
            }
          }
        }
      }
    },
    "/api/v1.0/userdefinedfunctions/{id}": {
      "get": {
        "tags": [
          "UserDefinedFunctions"
        ],
        "summary": "Gets a udf",
        "operationId": "UserDefinedFunctions_RetrieveById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Udf Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "includes",
            "in": "query",
            "description": "Comma separated list of what to include, for example \"ContentInfo,Description\". Defaults to None",
            "required": false,
            "type": "string",
            "enum": [
              "None",
              "Description",
              "FullPath",
              "Matchers",
              "Space",
              "ContentInfo"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserDefinedFunctionRetrieve"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "UserDefinedFunctions"
        ],
        "summary": "Deletes a udf",
        "operationId": "UserDefinedFunctions_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Udf Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "204": {
            "description": "No content"
          }
        }
      },
      "patch": {
        "tags": [
          "UserDefinedFunctions"
        ],
        "summary": "Updates a udf",
        "description": "This is a multi-part request. For more information, see doc examples.",
        "operationId": "UserDefinedFunctions_Update",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Udf Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "metadata",
            "in": "formData",
            "description": "The mime type of this parameter is \"application/json\" and its schema is #/definitions/UserDefinedFunctionUpdate",
            "required": true,
            "type": "string"
          },
          {
            "name": "contents",
            "in": "formData",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "204": {
            "description": "No content"
          }
        }
      }
    },
    "/api/v1.0/userdefinedfunctions/{id}/contents": {
      "get": {
        "tags": [
          "UserDefinedFunctions"
        ],
        "summary": "Gets the contents of a udf",
        "operationId": "UserDefinedFunctions_GetBlobContents",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Udf id",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          }
        }
      }
    },
    "/api/v1.0/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Gets a list of users",
        "operationId": "Users_Retrieve",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "upn",
            "in": "query",
            "description": "Optional filter on user UPN",
            "required": false,
            "type": "string"
          },
          {
            "name": "firstName",
            "in": "query",
            "description": "Optional filter on first name",
            "required": false,
            "type": "string"
          },
          {
            "name": "lastName",
            "in": "query",
            "description": "Optional filter on last name",
            "required": false,
            "type": "string"
          },
          {
            "name": "includes",
            "in": "query",
            "description": "Comma separated list of what to include, for example \"Space\". Defaults to None. A user can request their own RoleAssignments by passing in the \"RoleAssigments\" include parameter, but they cannot request the role assignments of others",
            "required": false,
            "type": "string",
            "enum": [
              "None",
              "FullPath",
              "Location",
              "Properties",
              "RoleAssignments",
              "Space"
            ]
          },
          {
            "name": "propertyKey",
            "in": "query",
            "description": "Optional filter on objects that have the given property key defined",
            "required": false,
            "type": "string"
          },
          {
            "name": "propertyValue",
            "in": "query",
            "description": "Optional filter on the value of the given property key",
            "required": false,
            "type": "string"
          },
          {
            "name": "propertyValueSearchType",
            "in": "query",
            "description": "Optional type of search on property value. Contains or Equals. Defaults to Equals",
            "required": false,
            "type": "string",
            "enum": [
              "Equals",
              "Contains"
            ]
          },
          {
            "name": "spaceId",
            "in": "query",
            "description": "Optionally filter on objects based on their location in the topology relative to the specified spaceId",
            "required": false,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "traverse",
            "in": "query",
            "description": "None (the default) for the specified spaceId only, Down for space and descendants, Up for spaceId and ancestors, Any for both",
            "required": false,
            "type": "string",
            "enum": [
              "None",
              "Down",
              "Up",
              "Span"
            ]
          },
          {
            "name": "minLevel",
            "in": "query",
            "description": "Optional filter on minimum level, inclusive",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxLevel",
            "in": "query",
            "description": "Optional filter on maximum level, inclusive",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "minRelative",
            "in": "query",
            "description": "Specify if min level is absolute or relative",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "maxRelative",
            "in": "query",
            "description": "Specify if max level is absolute or relative",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserRetrieve"
              },
              "xml": {
                "name": "UserRetrieve",
                "wrapped": true
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Creates or updates a user, using SpaceId and upn as lookup keys",
        "operationId": "Users_CreateOrUpdate",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "User settings",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserCreateWithSpace"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "201": {
            "description": "OK",
            "schema": {
              "format": "uuid",
              "type": "string",
              "example": "00000000-0000-0000-0000-000000000000"
            }
          }
        }
      }
    },
    "/api/v1.0/users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Gets a specific user",
        "operationId": "Users_RetrieveById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User identifier",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "includes",
            "in": "query",
            "description": "Comma separated list of what to include, for example \"Space\". Defaults to None. A user can request their own RoleAssignments by passing in the \"RoleAssigments\" include parameter, but they cannot request the role assignments of others",
            "required": false,
            "type": "string",
            "enum": [
              "None",
              "FullPath",
              "Location",
              "Properties",
              "RoleAssignments",
              "Space"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserRetrieve"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Deletes a user",
        "operationId": "Users_Delete",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "204": {
            "description": "No content"
          }
        }
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Updates a user",
        "operationId": "Users_Update",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User identifier",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "data",
            "in": "body",
            "description": "User settings",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserUpdate"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "204": {
            "description": "No content"
          }
        }
      }
    },
    "/api/v1.0/users/blobs": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Gets a list of blobs",
        "operationId": "Users_RetrieveBlobMetadata",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "names",
            "in": "query",
            "description": "Optional ';' or ',' delimited list of blob names to filter by",
            "required": false,
            "type": "string"
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Optional ';' or ',' delimited list of ids to filter by",
            "required": false,
            "type": "string"
          },
          {
            "name": "sharings",
            "in": "query",
            "description": "Optional ';' or ',' delimited list of Sharing modes to filter by",
            "required": false,
            "type": "string"
          },
          {
            "name": "types",
            "in": "query",
            "description": "Optional ';' or ',' delimited list of types to filter by",
            "required": false,
            "type": "string"
          },
          {
            "name": "subtypes",
            "in": "query",
            "description": "Optional ';' or ',' delimited list of subtypes to filter by",
            "required": false,
            "type": "string"
          },
          {
            "name": "includes",
            "in": "query",
            "description": "Comma separated list of what to include, for example \"ContentInfo,Description\". Defaults to None",
            "required": false,
            "type": "string",
            "enum": [
              "None",
              "ContentInfo",
              "Description",
              "FullPath",
              "Types"
            ]
          },
          {
            "name": "spaceId",
            "in": "query",
            "description": "Optionally filter on objects based on their location in the topology relative to the specified spaceId",
            "required": false,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "traverse",
            "in": "query",
            "description": "None (the default) for the specified spaceId only, Down for space and descendants, Up for spaceId and ancestors, Any for both",
            "required": false,
            "type": "string",
            "enum": [
              "None",
              "Down",
              "Up",
              "Span"
            ]
          },
          {
            "name": "minLevel",
            "in": "query",
            "description": "Optional filter on minimum level, inclusive",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxLevel",
            "in": "query",
            "description": "Optional filter on maximum level, inclusive",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "minRelative",
            "in": "query",
            "description": "Specify if min level is absolute or relative",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "maxRelative",
            "in": "query",
            "description": "Specify if max level is absolute or relative",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BlobMetadataRetrieve"
              },
              "xml": {
                "name": "BlobMetadataRetrieve",
                "wrapped": true
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Creates a blob",
        "description": "This is a multi-part request. For more information, see sample app or doc examples.\r\nKey value pairs specified in the Content-Disposition header in the blob-chunk of the multipart request will be preserved as meta-data on the stored blob.",
        "operationId": "Users_CreateBlob",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "metadata",
            "in": "formData",
            "description": "The mime type of this parameter is \"application/json\" and its schema is #/definitions/BlobMetadataCreate",
            "required": true,
            "type": "string"
          },
          {
            "name": "contents",
            "in": "formData",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "201": {
            "description": "OK",
            "schema": {
              "format": "uuid",
              "type": "string",
              "example": "00000000-0000-0000-0000-000000000000"
            }
          }
        }
      }
    },
    "/api/v1.0/users/blobs/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Gets a blob",
        "operationId": "Users_RetrieveBlobMetadataById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Blob Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "includes",
            "in": "query",
            "description": "Comma separated list of what to include, for example \"ContentInfo,Description\". Defaults to None",
            "required": false,
            "type": "string",
            "enum": [
              "None",
              "ContentInfo",
              "Description",
              "FullPath",
              "Types"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BlobMetadataRetrieve"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Deletes a blob",
        "description": "Deleting a blob will delete its metadata, its content (all versions) and its associations",
        "operationId": "Users_DeleteBlob",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Blob Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "204": {
            "description": "No content"
          }
        }
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Updates a blob",
        "description": "This is a multi-part request. For more information, see sample app or doc examples.",
        "operationId": "Users_UpdateBlob",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "blob Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "metadata",
            "in": "formData",
            "description": "The mime type of this parameter is \"application/json\" and its schema is #/definitions/BlobMetadataUpdate",
            "required": true,
            "type": "string"
          },
          {
            "name": "contents",
            "in": "formData",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "204": {
            "description": "No content"
          }
        }
      }
    },
    "/api/v1.0/users/blobs/{id}/contents/{version}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Gets the contents of the given version of the given blob",
        "operationId": "Users_GetBlobContents",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "blob id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "version",
            "in": "path",
            "description": "blob content version",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete the contents of the given version of the given blob",
        "description": "Delete will fail if this version has any associations",
        "operationId": "Users_DeleteBlobContents",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "blob id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "version",
            "in": "path",
            "description": "blob version",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "204": {
            "description": "No content"
          }
        }
      }
    },
    "/api/v1.0/users/blobs/{id}/contents/latest": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Gets the contents of the latest version of the given blob",
        "operationId": "Users_GetLatestBlobContents",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "blob id",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          }
        }
      }
    },
    "/api/v1.0/users/{id}/properties/{name}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Gets the value of a property",
        "operationId": "Users_RetrieveProperty",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parent Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Property name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Deletes the given property value",
        "operationId": "Users_DeleteProperty",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parent Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Property name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "204": {
            "description": "No content"
          }
        }
      }
    },
    "/api/v1.0/users/{id}/properties": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Creates or updates property values",
        "operationId": "Users_UpdateProperties",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parent Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "data",
            "in": "body",
            "description": "The properties",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExtendedPropertyCreate"
              },
              "xml": {
                "name": "ExtendedPropertyCreate",
                "wrapped": true
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "201": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Creates a property value",
        "operationId": "Users_CreateProperty",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parent Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "data",
            "in": "body",
            "description": "Extended property data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExtendedPropertyCreate"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "201": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Deletes all property values",
        "operationId": "Users_DeleteProperties",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parent Id",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorInformation"
            }
          },
          "204": {
            "description": "No content"
          }
        }
      }
    }
  },
  "definitions": {
    "ODataQueryOptions[Device]": {
      "type": "object",
      "properties": {
        "ifMatch": {
          "type": "object",
          "readOnly": true
        },
        "ifNoneMatch": {
          "type": "object",
          "readOnly": true
        },
        "context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "request": {
          "type": "object",
          "readOnly": true
        },
        "rawValues": {
          "$ref": "#/definitions/ODataRawQueryOptions",
          "readOnly": true
        },
        "selectExpand": {
          "$ref": "#/definitions/SelectExpandQueryOption",
          "readOnly": true
        },
        "filter": {
          "$ref": "#/definitions/FilterQueryOption",
          "readOnly": true
        },
        "orderBy": {
          "$ref": "#/definitions/OrderByQueryOption",
          "readOnly": true
        },
        "skip": {
          "$ref": "#/definitions/SkipQueryOption",
          "readOnly": true
        },
        "top": {
          "$ref": "#/definitions/TopQueryOption",
          "readOnly": true
        },
        "inlineCount": {
          "$ref": "#/definitions/InlineCountQueryOption",
          "readOnly": true
        },
        "validator": {
          "$ref": "#/definitions/ODataQueryValidator"
        }
      },
      "xml": {
        "name": "ODataQueryOptions`1"
      }
    },
    "ODataQueryContext": {
      "type": "object",
      "properties": {
        "model": {
          "$ref": "#/definitions/IEdmModel",
          "readOnly": true
        },
        "elementType": {
          "$ref": "#/definitions/IEdmType",
          "readOnly": true
        },
        "elementClrType": {
          "type": "string",
          "readOnly": true
        }
      },
      "xml": {
        "name": "ODataQueryContext"
      }
    },
    "ODataRawQueryOptions": {
      "type": "object",
      "properties": {
        "filter": {
          "type": "string",
          "readOnly": true
        },
        "orderBy": {
          "type": "string",
          "readOnly": true
        },
        "top": {
          "type": "string",
          "readOnly": true
        },
        "skip": {
          "type": "string",
          "readOnly": true
        },
        "select": {
          "type": "string",
          "readOnly": true
        },
        "expand": {
          "type": "string",
          "readOnly": true
        },
        "inlineCount": {
          "type": "string",
          "readOnly": true
        },
        "format": {
          "type": "string",
          "readOnly": true
        },
        "skipToken": {
          "type": "string",
          "readOnly": true
        }
      },
      "xml": {
        "name": "ODataRawQueryOptions"
      }
    },
    "SelectExpandQueryOption": {
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "rawSelect": {
          "type": "string",
          "readOnly": true
        },
        "rawExpand": {
          "type": "string",
          "readOnly": true
        },
        "validator": {
          "$ref": "#/definitions/SelectExpandQueryValidator"
        },
        "selectExpandClause": {
          "$ref": "#/definitions/SelectExpandClause",
          "readOnly": true
        }
      },
      "xml": {
        "name": "SelectExpandQueryOption"
      }
    },
    "FilterQueryOption": {
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "validator": {
          "$ref": "#/definitions/FilterQueryValidator"
        },
        "filterClause": {
          "$ref": "#/definitions/FilterClause",
          "readOnly": true
        },
        "rawValue": {
          "type": "string",
          "readOnly": true
        }
      },
      "xml": {
        "name": "FilterQueryOption"
      }
    },
    "OrderByQueryOption": {
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "orderByNodes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderByNode"
          },
          "readOnly": true,
          "xml": {
            "name": "OrderByNode",
            "wrapped": true
          }
        },
        "rawValue": {
          "type": "string",
          "readOnly": true
        },
        "validator": {
          "$ref": "#/definitions/OrderByQueryValidator"
        },
        "orderByClause": {
          "$ref": "#/definitions/OrderByClause",
          "readOnly": true
        }
      },
      "xml": {
        "name": "OrderByQueryOption"
      }
    },
    "SkipQueryOption": {
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "rawValue": {
          "type": "string",
          "readOnly": true
        },
        "value": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "validator": {
          "$ref": "#/definitions/SkipQueryValidator"
        }
      },
      "xml": {
        "name": "SkipQueryOption"
      }
    },
    "TopQueryOption": {
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "rawValue": {
          "type": "string",
          "readOnly": true
        },
        "value": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "validator": {
          "$ref": "#/definitions/TopQueryValidator"
        }
      },
      "xml": {
        "name": "TopQueryOption"
      }
    },
    "InlineCountQueryOption": {
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "rawValue": {
          "type": "string",
          "readOnly": true
        },
        "value": {
          "format": "int32",
          "enum": [
            0,
            1
          ],
          "type": "integer",
          "readOnly": true
        }
      },
      "xml": {
        "name": "InlineCountQueryOption"
      }
    },
    "ODataQueryValidator": {
      "type": "object",
      "properties": {},
      "xml": {
        "name": "ODataQueryValidator"
      }
    },
    "IEdmModel": {
      "type": "object",
      "properties": {
        "schemaElements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IEdmSchemaElement"
          },
          "readOnly": true,
          "xml": {
            "name": "IEdmSchemaElement",
            "wrapped": true
          }
        },
        "vocabularyAnnotations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IEdmVocabularyAnnotation"
          },
          "readOnly": true,
          "xml": {
            "name": "IEdmVocabularyAnnotation",
            "wrapped": true
          }
        },
        "referencedModels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IEdmModel"
          },
          "readOnly": true,
          "xml": {
            "name": "IEdmModel",
            "wrapped": true
          }
        },
        "directValueAnnotationsManager": {
          "$ref": "#/definitions/IEdmDirectValueAnnotationsManager",
          "readOnly": true
        }
      },
      "xml": {
        "name": "IEdmModel"
      }
    },
    "IEdmType": {
      "type": "object",
      "properties": {
        "typeKind": {
          "format": "int32",
          "enum": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7
          ],
          "type": "integer",
          "readOnly": true
        }
      },
      "xml": {
        "name": "IEdmType"
      }
    },
    "SelectExpandQueryValidator": {
      "type": "object",
      "properties": {},
      "xml": {
        "name": "SelectExpandQueryValidator"
      }
    },
    "SelectExpandClause": {
      "type": "object",
      "properties": {
        "selectedItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SelectItem"
          },
          "readOnly": true,
          "xml": {
            "name": "SelectItem",
            "wrapped": true
          }
        },
        "allSelected": {
          "type": "boolean",
          "readOnly": true
        }
      },
      "xml": {
        "name": "SelectExpandClause"
      }
    },
    "FilterQueryValidator": {
      "type": "object",
      "properties": {},
      "xml": {
        "name": "FilterQueryValidator"
      }
    },
    "FilterClause": {
      "type": "object",
      "properties": {
        "expression": {
          "$ref": "#/definitions/SingleValueNode",
          "readOnly": true
        },
        "rangeVariable": {
          "$ref": "#/definitions/RangeVariable",
          "readOnly": true
        },
        "itemType": {
          "$ref": "#/definitions/IEdmTypeReference",
          "readOnly": true
        }
      },
      "xml": {
        "name": "FilterClause"
      }
    },
    "OrderByNode": {
      "type": "object",
      "properties": {
        "direction": {
          "format": "int32",
          "enum": [
            0,
            1
          ],
          "type": "integer",
          "readOnly": true
        }
      },
      "xml": {
        "name": "OrderByNode"
      }
    },
    "OrderByQueryValidator": {
      "type": "object",
      "properties": {},
      "xml": {
        "name": "OrderByQueryValidator"
      }
    },
    "OrderByClause": {
      "type": "object",
      "properties": {
        "thenBy": {
          "$ref": "#/definitions/OrderByClause",
          "readOnly": true
        },
        "expression": {
          "$ref": "#/definitions/SingleValueNode",
          "readOnly": true
        },
        "direction": {
          "format": "int32",
          "enum": [
            0,
            1
          ],
          "type": "integer",
          "readOnly": true
        },
        "rangeVariable": {
          "$ref": "#/definitions/RangeVariable",
          "readOnly": true
        },
        "itemType": {
          "$ref": "#/definitions/IEdmTypeReference",
          "readOnly": true
        }
      },
      "xml": {
        "name": "OrderByClause"
      }
    },
    "SkipQueryValidator": {
      "type": "object",
      "properties": {},
      "xml": {
        "name": "SkipQueryValidator"
      }
    },
    "TopQueryValidator": {
      "type": "object",
      "properties": {},
      "xml": {
        "name": "TopQueryValidator"
      }
    },
    "IEdmSchemaElement": {
      "type": "object",
      "properties": {
        "schemaElementKind": {
          "format": "int32",
          "enum": [
            0,
            1,
            2,
            3,
            4
          ],
          "type": "integer",
          "readOnly": true
        },
        "namespace": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "readOnly": true
        }
      },
      "xml": {
        "name": "IEdmSchemaElement"
      }
    },
    "IEdmVocabularyAnnotation": {
      "type": "object",
      "properties": {
        "qualifier": {
          "type": "string",
          "readOnly": true
        },
        "term": {
          "$ref": "#/definitions/IEdmTerm",
          "readOnly": true
        },
        "target": {
          "$ref": "#/definitions/IEdmVocabularyAnnotatable",
          "readOnly": true
        }
      },
      "xml": {
        "name": "IEdmVocabularyAnnotation"
      }
    },
    "IEdmDirectValueAnnotationsManager": {
      "type": "object",
      "properties": {},
      "xml": {
        "name": "IEdmDirectValueAnnotationsManager"
      }
    },
    "SelectItem": {
      "type": "object",
      "properties": {},
      "xml": {
        "name": "SelectItem"
      }
    },
    "SingleValueNode": {
      "type": "object",
      "properties": {
        "typeReference": {
          "$ref": "#/definitions/IEdmTypeReference",
          "readOnly": true
        },
        "kind": {
          "format": "int32",
          "enum": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20
          ],
          "type": "integer",
          "readOnly": true
        }
      },
      "xml": {
        "name": "SingleValueNode"
      }
    },
    "RangeVariable": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "readOnly": true
        },
        "typeReference": {
          "$ref": "#/definitions/IEdmTypeReference",
          "readOnly": true
        },
        "kind": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        }
      },
      "xml": {
        "name": "RangeVariable"
      }
    },
    "IEdmTypeReference": {
      "type": "object",
      "properties": {
        "isNullable": {
          "type": "boolean",
          "readOnly": true
        },
        "definition": {
          "$ref": "#/definitions/IEdmType",
          "readOnly": true
        }
      },
      "xml": {
        "name": "IEdmTypeReference"
      }
    },
    "IEdmTerm": {
      "type": "object",
      "properties": {
        "termKind": {
          "format": "int32",
          "enum": [
            0,
            1,
            2
          ],
          "type": "integer",
          "readOnly": true
        },
        "schemaElementKind": {
          "format": "int32",
          "enum": [
            0,
            1,
            2,
            3,
            4
          ],
          "type": "integer",
          "readOnly": true
        },
        "namespace": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "readOnly": true
        }
      },
      "xml": {
        "name": "IEdmTerm"
      }
    },
    "IEdmVocabularyAnnotatable": {
      "type": "object",
      "properties": {},
      "xml": {
        "name": "IEdmVocabularyAnnotatable"
      }
    },
    "PropertiesAndTreeFiltersModel": {
      "description": "Due to a bug in swagger generation, cannot have two [FromUri] classes on the same API, therefore must combine both classes",
      "type": "object",
      "properties": {
        "propertyKey": {
          "description": "Optional filter on objects that have the given property key defined",
          "type": "string"
        },
        "propertyValue": {
          "description": "Optional filter on the value of the given property key",
          "type": "string"
        },
        "propertyValueSearchType": {
          "description": "Optional type of search on property value. Contains or Equals. Defaults to Equals",
          "enum": [
            "Equals",
            "Contains"
          ],
          "type": "string"
        },
        "spaceId": {
          "format": "uuid",
          "description": "Optionally filter on objects based on their location in the topology relative to the specified spaceId",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "traverse": {
          "description": "None (the default) for the specified spaceId only, Down for space and descendants, Up for spaceId and ancestors, Any for both",
          "enum": [
            "None",
            "Down",
            "Up",
            "Span"
          ],
          "type": "string"
        },
        "minLevel": {
          "format": "int32",
          "description": "Optional filter on minimum level, inclusive",
          "type": "integer"
        },
        "maxLevel": {
          "format": "int32",
          "description": "Optional filter on maximum level, inclusive",
          "type": "integer"
        },
        "minRelative": {
          "description": "Specify if min level is absolute or relative",
          "type": "boolean"
        },
        "maxRelative": {
          "description": "Specify if max level is absolute or relative",
          "type": "boolean"
        }
      },
      "xml": {
        "name": "PropertiesAndTreeFiltersModel"
      }
    },
    "DeviceRetrieve": {
      "description": "Device retrieve model",
      "required": [
        "name",
        "typeId",
        "subtypeId",
        "hardwareId",
        "spaceId",
        "status",
        "id"
      ],
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "friendlyName": {
          "description": "Optional friendly name",
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "type": {
          "description": "Device type",
          "type": "string"
        },
        "subtype": {
          "description": "Device subtype",
          "type": "string"
        },
        "typeId": {
          "format": "int32",
          "description": "Device type identifier",
          "type": "integer"
        },
        "subtypeId": {
          "format": "int32",
          "description": "Device subtype identifier",
          "type": "integer"
        },
        "hardwareId": {
          "description": "Hardware unique identifier, such as MAC address.",
          "type": "string"
        },
        "gatewayId": {
          "description": "Optional free-form gateway identifier",
          "type": "string"
        },
        "spaceId": {
          "format": "uuid",
          "description": "Parent space id",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "status": {
          "description": "The status",
          "enum": [
            "Provisioned",
            "Active",
            "Offline",
            "Disabled"
          ],
          "type": "string"
        },
        "location": {
          "$ref": "#/definitions/Location"
        },
        "id": {
          "format": "uuid",
          "description": "The identifier",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "connectionState": {
          "description": "The connection state of the device",
          "enum": [
            "Connected",
            "Disconnected"
          ],
          "type": "string"
        },
        "connectionStateUpdatedTime": {
          "format": "date-time",
          "description": "The time when {ModernIoT.Data.DataModel.DeviceRetrieve.ConnectionState} was last updated.",
          "type": "string"
        },
        "ioTHubUrl": {
          "description": "The IoT hub url",
          "type": "string"
        },
        "deviceKey": {
          "description": "The IoT hub device key",
          "type": "string"
        },
        "sasToken": {
          "description": "The IoT hub SAS token",
          "type": "string"
        },
        "connectionString": {
          "description": "The device connection string",
          "type": "string"
        },
        "space": {
          "$ref": "#/definitions/SpaceRetrieve",
          "description": "Parent space"
        },
        "sensors": {
          "description": "Child sensors",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SensorRetrieve"
          },
          "xml": {
            "name": "SensorRetrieve",
            "wrapped": true
          }
        },
        "fullName": {
          "type": "string"
        },
        "spacePaths": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "effectiveLocation": {
          "$ref": "#/definitions/Location"
        },
        "properties": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExtendedPropertyRetrieve"
          },
          "xml": {
            "name": "ExtendedPropertyRetrieve",
            "wrapped": true
          }
        },
        "iotHubResource": {
          "$ref": "#/definitions/SpaceResourceRetrieve",
          "description": "IoT hub resource"
        },
        "roleAssignments": {
          "description": "The role assignments associated with the device.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RoleAssignmentRetrieve"
          },
          "xml": {
            "name": "RoleAssignmentRetrieve",
            "wrapped": true
          }
        }
      },
      "xml": {
        "name": "DeviceRetrieve"
      }
    },
    "Location": {
      "required": [
        "longitude",
        "latitude"
      ],
      "type": "object",
      "properties": {
        "longitude": {
          "format": "double",
          "description": "Longitude coordinate",
          "type": "number"
        },
        "latitude": {
          "format": "double",
          "description": "Latitude coordinate",
          "type": "number"
        },
        "elevation": {
          "format": "double",
          "description": "Optional elevation, in meters",
          "type": "number"
        },
        "measure": {
          "format": "double",
          "description": "Optional measure, in meters",
          "type": "number"
        }
      },
      "xml": {
        "name": "Location"
      }
    },
    "SpaceRetrieve": {
      "description": "Space retrieve without child objects",
      "required": [
        "id",
        "name",
        "typeId",
        "subtypeId",
        "statusId"
      ],
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "description": "The identifier",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "friendlyName": {
          "description": "Optional friendly name",
          "type": "string"
        },
        "type": {
          "description": "Primary space type",
          "type": "string"
        },
        "typeId": {
          "format": "int32",
          "description": "Type identifier",
          "type": "integer"
        },
        "parentSpaceId": {
          "format": "uuid",
          "description": "The space's parent space",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "subtype": {
          "description": "Space subtype",
          "type": "string"
        },
        "subtypeId": {
          "format": "int32",
          "description": "Subtype identifier",
          "type": "integer"
        },
        "location": {
          "$ref": "#/definitions/Location",
          "description": "Optional physical location for the space"
        },
        "timeZoneId": {
          "format": "int32",
          "description": "Optional time zone identifier for the space",
          "type": "integer"
        },
        "status": {
          "description": "The status",
          "type": "string"
        },
        "statusId": {
          "format": "int32",
          "description": "Status identifier",
          "type": "integer"
        },
        "fullName": {
          "type": "string"
        },
        "spacePaths": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "effectiveLocation": {
          "$ref": "#/definitions/Location"
        },
        "effectiveTimeZoneId": {
          "format": "int32",
          "description": "Same as TimeZoneId, if defined. Otherwise same as EffectiveTimeZoneId of parent space",
          "type": "integer"
        }
      },
      "xml": {
        "name": "SpaceRetrieve"
      }
    },
    "SensorRetrieve": {
      "description": "Sensor retrieve model",
      "required": [
        "pollRate",
        "spaceId",
        "deviceId",
        "id",
        "portTypeId",
        "dataUnitTypeId",
        "dataTypeId",
        "typeId"
      ],
      "type": "object",
      "properties": {
        "port": {
          "description": "Serial port the sensor connects to on the device",
          "type": "string"
        },
        "pollRate": {
          "format": "int32",
          "description": "Poll rate for data collection from the sensor",
          "type": "integer"
        },
        "dataType": {
          "description": "Type of data reported by the sensor",
          "type": "string"
        },
        "dataSubtype": {
          "description": "Subtype for the data",
          "type": "string"
        },
        "type": {
          "description": "Type of sensor",
          "type": "string"
        },
        "portType": {
          "description": "Type of port; for example AnalogInput. Defaults to None",
          "type": "string"
        },
        "dataUnitType": {
          "description": "Type of unit; for example CelsiusTemperature if DataType is set to Temperature. Defaults to None",
          "type": "string"
        },
        "spaceId": {
          "format": "uuid",
          "description": "Parent space Id",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "location": {
          "$ref": "#/definitions/Location"
        },
        "deviceId": {
          "format": "uuid",
          "description": "Parent device id",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "id": {
          "format": "uuid",
          "description": "Unique identifier",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "portTypeId": {
          "format": "int32",
          "description": "Port type identifier",
          "type": "integer"
        },
        "dataUnitTypeId": {
          "format": "int32",
          "description": "Data type unit identifier",
          "type": "integer"
        },
        "dataTypeId": {
          "format": "int32",
          "description": "Data type identifier",
          "type": "integer"
        },
        "dataSubtypeId": {
          "format": "int32",
          "description": "Data subtype identifier",
          "type": "integer"
        },
        "typeId": {
          "format": "int32",
          "description": "Type identifier",
          "type": "integer"
        },
        "device": {
          "$ref": "#/definitions/DeviceRetrieve",
          "description": "Parent device"
        },
        "space": {
          "$ref": "#/definitions/SpaceRetrieve",
          "description": "Parent space"
        },
        "properties": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExtendedPropertyRetrieve"
          },
          "xml": {
            "name": "ExtendedPropertyRetrieve",
            "wrapped": true
          }
        },
        "effectiveLocation": {
          "$ref": "#/definitions/Location"
        },
        "fullName": {
          "type": "string"
        },
        "spacePaths": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "value": {
          "$ref": "#/definitions/SensorValue",
          "description": "Last recorded value",
          "readOnly": true
        },
        "hardwareId": {
          "description": "Hardware unique identifier, such as a MAC address.",
          "type": "string"
        }
      },
      "xml": {
        "name": "SensorRetrieve"
      }
    },
    "ExtendedPropertyRetrieve": {
      "type": "object",
      "properties": {
        "name": {
          "description": "Property key name",
          "type": "string"
        },
        "value": {
          "description": "The property's value",
          "type": "string"
        },
        "dataType": {
          "description": "The declared datatype of the property key",
          "type": "string"
        }
      },
      "xml": {
        "name": "ExtendedPropertyRetrieve"
      }
    },
    "SpaceResourceRetrieve": {
      "required": [
        "id",
        "spaceId",
        "type",
        "status",
        "lastUpdatedUtc",
        "instanceNum"
      ],
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "description": "The identifier",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "spaceId": {
          "format": "uuid",
          "description": "Parent space",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "type": {
          "description": "Resource type",
          "enum": [
            "IotHub"
          ],
          "type": "string"
        },
        "size": {
          "description": "Resource size",
          "enum": [
            "XS",
            "S",
            "M",
            "L",
            "XL",
            "XXL"
          ],
          "type": "string"
        },
        "region": {
          "description": "Resource region",
          "enum": [
            "WestUS",
            "WestUS2",
            "CentralUSEUAP",
            "EastUS",
            "EastUS2",
            "CentralUS",
            "SouthCentralUS",
            "WestCentralUS",
            "CanadaEast",
            "CanadaCentral",
            "BrazilSouth",
            "AustraliaEast",
            "AustraliaSoutheast",
            "SoutheastAsia",
            "EastAsia",
            "CentralIndia",
            "SouthIndia",
            "JapanEast",
            "JapanWest",
            "KoreaCentral",
            "KoreaSouth",
            "NorthEurope",
            "WestEurope",
            "UKWest",
            "UKSouth",
            "GermanyCentral",
            "GermanyNortheast"
          ],
          "type": "string"
        },
        "isExternallyCreated": {
          "description": "If the resource was created externally",
          "type": "boolean"
        },
        "parameters": {
          "description": "Resource-type-dependent template parameters",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "space": {
          "$ref": "#/definitions/SpaceRetrieve",
          "description": "Parent space"
        },
        "status": {
          "description": "Resource status",
          "enum": [
            "None",
            "Provisioning",
            "Running",
            "Stopped",
            "Failed",
            "Deleting"
          ],
          "type": "string"
        },
        "fullName": {
          "type": "string"
        },
        "spacePaths": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "lastLog": {
          "description": "Last line of log entry",
          "type": "string"
        },
        "lastUpdatedUtc": {
          "format": "date-time",
          "description": "Last time the record was updated",
          "type": "string"
        },
        "properties": {
          "description": "Resource properties",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "dependentChildren": {
          "description": "List of resources the current resource is dependending on",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SpaceResourceRetrieve"
          },
          "xml": {
            "name": "SpaceResourceRetrieve",
            "wrapped": true
          }
        },
        "dependentAncestors": {
          "description": "List of resources that are depending on the current resource",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SpaceResourceRetrieve"
          },
          "xml": {
            "name": "SpaceResourceRetrieve",
            "wrapped": true
          }
        },
        "instanceNum": {
          "format": "int32",
          "description": "Numeric resource identifier",
          "type": "integer"
        }
      },
      "xml": {
        "name": "SpaceResourceRetrieve"
      }
    },
    "RoleAssignmentRetrieve": {
      "required": [
        "id",
        "roleId",
        "objectId",
        "path"
      ],
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "description": "The Role Assignment identifier.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "roleId": {
          "format": "uuid",
          "description": "The role definition identifier. Role definitions and their identifiers can be found by querying the system API.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "objectId": {
          "description": "The object id for the role assignment that must be formatted according to its associated type.\r\nFor the DomainName ObjectIdType, ObjectId must begin with the \"@\" character.",
          "type": "string"
        },
        "objectIdType": {
          "description": "The type of the role assignment. With the exception of the DeviceId type, the types correspond to properties of an AAD object. The DeviceId type corresponds to\r\nthe device id in the topology.\r\nThe UserId type assigns a role to a user.\r\nThe DeviceId type assigns a role to a device.\r\nThe DomainName type assigns a role to a domain name. Each user with the specified domain name will have the access rights of the corresponding role.\r\nThe TenantId type assigns a role to a tenant. Each user belonging to the specified tenant id will have the access rights of the corresponding role.\r\nThe ServicePrincipalId type assigns a role to a service principal object id.",
          "enum": [
            "UserId",
            "DeviceId",
            "DomainName",
            "TenantId",
            "ServicePrincipalId",
            "UserDefinedFunctionId"
          ],
          "type": "string"
        },
        "tenantId": {
          "format": "uuid",
          "description": "The tenant identifier.\r\nDisallowed for DeviceId and TenantId ObjectIdTypes.\r\nRequired for UserId and ServicePrincipalId ObjectIdTypes.\r\nOptional for the DomainName ObjectIdType.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "path": {
          "description": "The access path.",
          "type": "string"
        }
      },
      "xml": {
        "name": "RoleAssignmentRetrieve"
      }
    },
    "SensorValue": {
      "type": "object",
      "properties": {
        "type": {
          "description": "Value type, for example motion or temperature. Maps to Sensor.DataType\r\nTODO: should we rename to dataType?",
          "type": "string"
        },
        "value": {
          "description": "Value measure",
          "type": "string"
        },
        "timestamp": {
          "format": "date-time",
          "description": "Last updated date and time in UTC.",
          "type": "string"
        },
        "historicalValues": {
          "description": "Historical values of the sensor.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SensorHistoryValue"
          },
          "xml": {
            "name": "SensorHistoryValue",
            "wrapped": true
          }
        }
      },
      "xml": {
        "name": "SensorValue"
      }
    },
    "SensorHistoryValue": {
      "description": "Historical entry for a sensor's value.",
      "type": "object",
      "properties": {
        "value": {
          "description": "Historical value measure.",
          "type": "string"
        }
      },
      "xml": {
        "name": "SensorHistoryValue"
      }
    },
    "ErrorInformation": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "target": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ErrorInformation"
          },
          "xml": {
            "name": "ErrorInformation",
            "wrapped": true
          }
        },
        "innererror": {
          "$ref": "#/definitions/ErrorInformation"
        },
        "exception": {
          "type": "object"
        }
      },
      "xml": {
        "name": "ErrorInformation"
      }
    },
    "DeviceCreate": {
      "description": "Device create model",
      "required": [
        "name",
        "hardwareId",
        "spaceId"
      ],
      "type": "object",
      "properties": {
        "name": {
          "maxLength": 64,
          "minLength": 3,
          "type": "string"
        },
        "friendlyName": {
          "description": "Optional friendly name",
          "maxLength": 64,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "maxLength": 4000,
          "minLength": 0,
          "type": "string"
        },
        "type": {
          "description": "Device type. Defaults to None",
          "type": "string"
        },
        "typeId": {
          "format": "int32",
          "description": "Device type identifier. Cannot specify both Type and TypeId",
          "type": "integer"
        },
        "subtype": {
          "description": "Device subtype. Defaults to None",
          "type": "string"
        },
        "subtypeId": {
          "format": "int32",
          "description": "Device subtype identifier. Cannot specify both Subtype and SubtypeId",
          "type": "integer"
        },
        "hardwareId": {
          "description": "Hardware unique identifier, such as MAC address.",
          "maxLength": 36,
          "minLength": 0,
          "type": "string"
        },
        "gatewayId": {
          "description": "Optional free-form gateway identifier",
          "maxLength": 36,
          "minLength": 0,
          "type": "string"
        },
        "spaceId": {
          "format": "uuid",
          "description": "Parent space id",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "status": {
          "description": "The status",
          "enum": [
            "Provisioned",
            "Active",
            "Offline",
            "Disabled"
          ],
          "type": "string"
        },
        "location": {
          "$ref": "#/definitions/Location"
        },
        "sensors": {
          "description": "Children sensors",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SensorCreateNoParent"
          },
          "xml": {
            "name": "SensorCreateNoParent",
            "wrapped": true
          }
        },
        "createIoTHubDevice": {
          "description": "Flag to specify that corresponding IoT Hub device should be created at the same\r\ntime as the SBS device. IoT Hub device can be created later by requesting the\r\nIoT Hub URL, IoT Hub connection string, or device key for the device.\r\nDefaults to true.",
          "type": "boolean"
        },
        "parentDeviceType": {
          "description": "If specified, automatically set the device’s GatewayId to a device of the given type.\r\nMust include both ParentDeviceType and ParentDeviceSubtype with a null GatewayId",
          "type": "string"
        },
        "parentDeviceSubtype": {
          "description": "If specified, automatically set the device’s GatewayId to a device of the given type.\r\nMust include both ParentDeviceType and ParentDeviceSubtype with a null GatewayId",
          "type": "string"
        },
        "properties": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExtendedPropertyCreate"
          },
          "xml": {
            "name": "ExtendedPropertyCreate",
            "wrapped": true
          }
        }
      },
      "xml": {
        "name": "DeviceCreate"
      }
    },
    "SensorCreateNoParent": {
      "type": "object",
      "properties": {
        "port": {
          "description": "Serial port the sensor connects to on the device",
          "maxLength": 20,
          "minLength": 0,
          "type": "string"
        },
        "pollRate": {
          "format": "int32",
          "description": "Poll rate for data collection from the sensor",
          "type": "integer"
        },
        "dataType": {
          "description": "Type of data reported by the sensor",
          "type": "string"
        },
        "type": {
          "description": "Type of sensor",
          "type": "string"
        },
        "portType": {
          "description": "Type of port; for example AnalogInput. Defaults to None",
          "type": "string"
        },
        "dataUnitType": {
          "description": "Type of unit; for example CelsiusTemperature if DataType is set to Temperature. Defaults to None",
          "type": "string"
        },
        "dataSubtype": {
          "description": "Subtype for the data; for example OutsideTemperature if DataType is set to Temperature. Defaults to None",
          "type": "string"
        },
        "spaceId": {
          "format": "uuid",
          "description": "Parent space Id. If not specified, the device's parent space is used",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "location": {
          "$ref": "#/definitions/Location"
        },
        "portTypeId": {
          "format": "int32",
          "description": "Port type identifier. Cannot specify both PortType and PortTypeId",
          "type": "integer"
        },
        "dataUnitTypeId": {
          "format": "int32",
          "description": "Data type unit identifier. Cannot specify both DataUnitType and DataUnitTypeId",
          "type": "integer"
        },
        "typeId": {
          "format": "int32",
          "description": "Type identifier. Cannot specify both Type and TypeId",
          "type": "integer"
        },
        "dataTypeId": {
          "format": "int32",
          "description": "Data type identifier. Cannot specify both DataType and DataTypeId",
          "type": "integer"
        },
        "dataSubtypeId": {
          "format": "int32",
          "description": "Data subtype identifier. Cannot specify both DataSubtype and DataSubtypeId",
          "type": "integer"
        },
        "hardwareId": {
          "description": "Hardware unique identifier, such as MAC address. If left unspecified, set to a random Guid string.",
          "maxLength": 72,
          "minLength": 0,
          "type": "string"
        },
        "properties": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExtendedPropertyCreate"
          },
          "xml": {
            "name": "ExtendedPropertyCreate",
            "wrapped": true
          }
        }
      },
      "xml": {
        "name": "SensorCreateNoParent"
      }
    },
    "ExtendedPropertyCreate": {
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of an already defined property key",
          "maxLength": 50,
          "minLength": 5,
          "type": "string"
        },
        "value": {
          "description": "The property's value",
          "maxLength": 450,
          "minLength": 0,
          "type": "string"
        }
      },
      "xml": {
        "name": "ExtendedPropertyCreate"
      }
    },
    "DeviceUpdate": {
      "description": "Device update model",
      "type": "object",
      "properties": {
        "name": {
          "maxLength": 64,
          "minLength": 3,
          "type": "string"
        },
        "friendlyName": {
          "description": "Optional friendly name",
          "maxLength": 64,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "maxLength": 4000,
          "minLength": 0,
          "type": "string"
        },
        "hardwareId": {
          "description": "Hardware unique identifier, such as MAC address.",
          "maxLength": 36,
          "minLength": 0,
          "type": "string"
        },
        "gatewayId": {
          "description": "Optional free-form gateway identifier",
          "maxLength": 36,
          "minLength": 0,
          "type": "string"
        },
        "spaceId": {
          "format": "uuid",
          "description": "Parent space id",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "status": {
          "description": "The status",
          "enum": [
            "Provisioned",
            "Active",
            "Offline",
            "Disabled"
          ],
          "type": "string"
        },
        "location": {
          "$ref": "#/definitions/Location",
          "description": "Optional physical location, or a location of (0,0) to reset to no location"
        },
        "type": {
          "description": "Device type",
          "type": "string"
        },
        "typeId": {
          "format": "int32",
          "description": "Device type identifier. Cannot specify both Type and TypeId",
          "type": "integer"
        },
        "subtype": {
          "description": "Device subtype",
          "type": "string"
        },
        "subtypeId": {
          "format": "int32",
          "description": "Device subtype identifier. Cannot specify both Subtype and SubtypeId",
          "type": "integer"
        }
      },
      "xml": {
        "name": "DeviceUpdate"
      }
    },
    "KeyStoreRetrieve": {
      "description": "Payload when retrieving a key store",
      "required": [
        "id",
        "name",
        "spaceId"
      ],
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "description": "Unique identifier",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "spaceId": {
          "format": "uuid",
          "description": "Id of the parent space container",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "fullName": {
          "type": "string"
        },
        "spacePaths": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "keys": {
          "description": "Security keys",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SecurityKeyRetrieve"
          },
          "xml": {
            "name": "SecurityKeyRetrieve",
            "wrapped": true
          }
        },
        "space": {
          "$ref": "#/definitions/SpaceRetrieve",
          "description": "Parent space"
        }
      },
      "xml": {
        "name": "KeyStoreRetrieve"
      }
    },
    "SecurityKeyRetrieve": {
      "description": "Payload when retrieving a security key",
      "type": "object",
      "properties": {
        "value": {
          "description": "Key value",
          "type": "string"
        },
        "keyStoreId": {
          "format": "uuid",
          "description": "Parent key store",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "id": {
          "format": "int32",
          "description": "Unique identifier",
          "type": "integer"
        },
        "createdDateTimeUtc": {
          "format": "date-time",
          "description": "Datetime the key was created",
          "type": "string"
        },
        "status": {
          "description": "Key status",
          "enum": [
            "Disabled",
            "Active"
          ],
          "type": "string"
        }
      },
      "xml": {
        "name": "SecurityKeyRetrieve"
      }
    },
    "ODataQueryOptions[DeviceBlobMetadata]": {
      "type": "object",
      "properties": {
        "ifMatch": {
          "type": "object",
          "readOnly": true
        },
        "ifNoneMatch": {
          "type": "object",
          "readOnly": true
        },
        "context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "request": {
          "type": "object",
          "readOnly": true
        },
        "rawValues": {
          "$ref": "#/definitions/ODataRawQueryOptions",
          "readOnly": true
        },
        "selectExpand": {
          "$ref": "#/definitions/SelectExpandQueryOption",
          "readOnly": true
        },
        "filter": {
          "$ref": "#/definitions/FilterQueryOption",
          "readOnly": true
        },
        "orderBy": {
          "$ref": "#/definitions/OrderByQueryOption",
          "readOnly": true
        },
        "skip": {
          "$ref": "#/definitions/SkipQueryOption",
          "readOnly": true
        },
        "top": {
          "$ref": "#/definitions/TopQueryOption",
          "readOnly": true
        },
        "inlineCount": {
          "$ref": "#/definitions/InlineCountQueryOption",
          "readOnly": true
        },
        "validator": {
          "$ref": "#/definitions/ODataQueryValidator"
        }
      },
      "xml": {
        "name": "ODataQueryOptions`1"
      }
    },
    "TreeFilterModel": {
      "type": "object",
      "properties": {
        "spaceId": {
          "format": "uuid",
          "description": "Optionally filter on objects based on their location in the topology relative to the specified spaceId",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "traverse": {
          "description": "None (the default) for the specified spaceId only, Down for space and descendants, Up for spaceId and ancestors, Any for both",
          "enum": [
            "None",
            "Down",
            "Up",
            "Span"
          ],
          "type": "string"
        },
        "minLevel": {
          "format": "int32",
          "description": "Optional filter on minimum level, inclusive",
          "type": "integer"
        },
        "maxLevel": {
          "format": "int32",
          "description": "Optional filter on maximum level, inclusive",
          "type": "integer"
        },
        "minRelative": {
          "description": "Specify if min level is absolute or relative",
          "type": "boolean"
        },
        "maxRelative": {
          "description": "Specify if max level is absolute or relative",
          "type": "boolean"
        }
      },
      "xml": {
        "name": "TreeFilterModel"
      }
    },
    "BlobMetadataRetrieve": {
      "required": [
        "id",
        "name",
        "parentId",
        "typeId",
        "subtypeId",
        "sharing"
      ],
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "name": {
          "type": "string"
        },
        "parentId": {
          "format": "uuid",
          "description": "Parent id",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "type": {
          "description": "Primary type",
          "type": "string"
        },
        "subtype": {
          "description": "Blob subtype",
          "type": "string"
        },
        "typeId": {
          "format": "int32",
          "description": "Type identifier",
          "type": "integer"
        },
        "subtypeId": {
          "format": "int32",
          "description": "Subtype identifier",
          "type": "integer"
        },
        "sharing": {
          "description": "Level of sharing",
          "enum": [
            "None",
            "Tree",
            "Global"
          ],
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "contentInfos": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BlobMetadataContentInfo"
          },
          "xml": {
            "name": "BlobMetadataContentInfo",
            "wrapped": true
          }
        },
        "fullName": {
          "type": "string"
        },
        "spacePaths": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "xml": {
        "name": "BlobMetadataRetrieve"
      }
    },
    "BlobMetadataContentInfo": {
      "type": "object",
      "properties": {
        "type": {
          "description": "Content type",
          "type": "string"
        },
        "sizeBytes": {
          "format": "int64",
          "description": "Content size",
          "type": "integer"
        },
        "mD5": {
          "description": "Content MD5",
          "type": "string"
        },
        "version": {
          "description": "Content version",
          "type": "string",
          "readOnly": true
        },
        "lastModifiedUtc": {
          "format": "date-time",
          "description": "Content last modified",
          "type": "string"
        },
        "metadata": {
          "description": "Content metadata",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "xml": {
        "name": "BlobMetadataContentInfo"
      }
    },
    "BlobMetadataCreate": {
      "required": [
        "name",
        "parentId"
      ],
      "type": "object",
      "properties": {
        "name": {
          "maxLength": 64,
          "minLength": 0,
          "type": "string"
        },
        "parentId": {
          "format": "uuid",
          "description": "Parent id",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "type": {
          "description": "Primary type",
          "type": "string"
        },
        "subtype": {
          "description": "Blob subtype",
          "type": "string"
        },
        "typeId": {
          "format": "int32",
          "description": "Type identifier. Cannot specify both Type and TypeId",
          "type": "integer"
        },
        "subtypeId": {
          "format": "int32",
          "description": "Subtype identifier. Cannot specify both Subtype and SubtypeId",
          "type": "integer"
        },
        "sharing": {
          "description": "Level of sharing",
          "enum": [
            "None",
            "Tree",
            "Global"
          ],
          "type": "string"
        },
        "description": {
          "maxLength": 4000,
          "minLength": 0,
          "type": "string"
        }
      },
      "xml": {
        "name": "BlobMetadataCreate"
      }
    },
    "BlobMetadataUpdate": {
      "type": "object",
      "properties": {
        "name": {
          "maxLength": 64,
          "minLength": 0,
          "type": "string"
        },
        "sharing": {
          "description": "Level of sharing",
          "enum": [
            "None",
            "Tree",
            "Global"
          ],
          "type": "string"
        },
        "description": {
          "maxLength": 4000,
          "minLength": 0,
          "type": "string"
        },
        "deleteOlderVersions": {
          "type": "boolean"
        }
      },
      "xml": {
        "name": "BlobMetadataUpdate"
      }
    },
    "EndpointRetrieve": {
      "required": [
        "id",
        "lastUpdatedUtc",
        "status",
        "type",
        "eventTypes"
      ],
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "description": "The identifier",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "lastUpdatedUtc": {
          "format": "date-time",
          "description": "Last UTC date and time the endpoint was updated",
          "type": "string"
        },
        "status": {
          "description": "Endpoint status",
          "enum": [
            "Provisioning",
            "Ready",
            "Stopped",
            "Failed",
            "Deleting"
          ],
          "type": "string"
        },
        "type": {
          "description": "Endpoint type",
          "enum": [
            "ServiceBus",
            "EventGrid",
            "EventHub"
          ],
          "type": "string"
        },
        "eventTypes": {
          "description": "Type of events to send to this endpoint",
          "type": "array",
          "items": {
            "enum": [
              "SensorChange",
              "SpaceChange",
              "TopologyOperation",
              "DeviceMessage",
              "UdfCustom"
            ],
            "type": "string"
          },
          "xml": {
            "name": "EventType",
            "wrapped": true
          }
        },
        "connectionString": {
          "description": "Endpoint's primary key or primary connection string",
          "type": "string"
        },
        "secondaryConnectionString": {
          "description": "Endpoint's secondary key or secondary connection string",
          "type": "string"
        },
        "path": {
          "description": "Path to the endpoint, for example TopicName or EventHubName",
          "type": "string"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "xml": {
        "name": "EndpointRetrieve"
      }
    },
    "EndpointCreate": {
      "required": [
        "type",
        "eventTypes",
        "connectionString"
      ],
      "type": "object",
      "properties": {
        "type": {
          "description": "Endpoint type",
          "enum": [
            "ServiceBus",
            "EventGrid",
            "EventHub"
          ],
          "type": "string"
        },
        "eventTypes": {
          "description": "Type of events to send to this endpoint",
          "type": "array",
          "items": {
            "enum": [
              "SensorChange",
              "SpaceChange",
              "TopologyOperation",
              "DeviceMessage",
              "UdfCustom"
            ],
            "type": "string"
          },
          "xml": {
            "name": "EventType",
            "wrapped": true
          }
        },
        "connectionString": {
          "description": "Endpoint's primary key or primary connection string",
          "type": "string"
        },
        "secondaryConnectionString": {
          "description": "Endpoint's secondary key or secondary connection string",
          "type": "string"
        },
        "path": {
          "description": "Path to the endpoint, for example TopicName or EventHubName",
          "type": "string"
        }
      },
      "xml": {
        "name": "EndpointCreate"
      }
    },
    "KeyStoreCreate": {
      "description": "Payload for creating a key store",
      "required": [
        "name",
        "spaceId"
      ],
      "type": "object",
      "properties": {
        "name": {
          "maxLength": 40,
          "minLength": 5,
          "type": "string"
        },
        "description": {
          "maxLength": 4000,
          "minLength": 0,
          "type": "string"
        },
        "spaceId": {
          "format": "uuid",
          "description": "Id of the parent space container",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        }
      },
      "xml": {
        "name": "KeyStoreCreate"
      }
    },
    "ODataQueryOptions[KeyStore]": {
      "type": "object",
      "properties": {
        "ifMatch": {
          "type": "object",
          "readOnly": true
        },
        "ifNoneMatch": {
          "type": "object",
          "readOnly": true
        },
        "context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "request": {
          "type": "object",
          "readOnly": true
        },
        "rawValues": {
          "$ref": "#/definitions/ODataRawQueryOptions",
          "readOnly": true
        },
        "selectExpand": {
          "$ref": "#/definitions/SelectExpandQueryOption",
          "readOnly": true
        },
        "filter": {
          "$ref": "#/definitions/FilterQueryOption",
          "readOnly": true
        },
        "orderBy": {
          "$ref": "#/definitions/OrderByQueryOption",
          "readOnly": true
        },
        "skip": {
          "$ref": "#/definitions/SkipQueryOption",
          "readOnly": true
        },
        "top": {
          "$ref": "#/definitions/TopQueryOption",
          "readOnly": true
        },
        "inlineCount": {
          "$ref": "#/definitions/InlineCountQueryOption",
          "readOnly": true
        },
        "validator": {
          "$ref": "#/definitions/ODataQueryValidator"
        }
      },
      "xml": {
        "name": "ODataQueryOptions`1"
      }
    },
    "KeyStoreUpdate": {
      "description": "Payload for updating a key store.\r\nTODO: should we allow moving to a different SpaceId during updates?",
      "type": "object",
      "properties": {
        "name": {
          "maxLength": 40,
          "minLength": 5,
          "type": "string"
        },
        "description": {
          "maxLength": 4000,
          "minLength": 0,
          "type": "string"
        }
      },
      "xml": {
        "name": "KeyStoreUpdate"
      }
    },
    "SecurityKeyUpdate": {
      "description": "Payload for updating a security key",
      "type": "object",
      "properties": {
        "status": {
          "description": "Key status",
          "enum": [
            "Disabled",
            "Active"
          ],
          "type": "string"
        }
      },
      "xml": {
        "name": "SecurityKeyUpdate"
      }
    },
    "MatcherCreate": {
      "required": [
        "name",
        "spaceId"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "The name",
          "maxLength": 64,
          "minLength": 3,
          "type": "string"
        },
        "description": {
          "description": "Optional description",
          "maxLength": 4000,
          "minLength": 0,
          "type": "string"
        },
        "friendlyName": {
          "description": "Optional friendly name",
          "maxLength": 64,
          "minLength": 0,
          "type": "string"
        },
        "conditions": {
          "description": "List of conditions that all need to evaluate to true for a given sensor to match",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConditionCreate"
          },
          "xml": {
            "name": "ConditionCreate",
            "wrapped": true
          }
        },
        "spaceId": {
          "format": "uuid",
          "description": "Parent space",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        }
      },
      "xml": {
        "name": "MatcherCreate"
      }
    },
    "ConditionCreate": {
      "type": "object",
      "properties": {
        "target": {
          "description": "What object the condition applies to: the sensor, its parent device or its parent space",
          "enum": [
            "Sensor",
            "SensorDevice",
            "SensorSpace"
          ],
          "type": "string"
        },
        "path": {
          "description": "Case sensitive JSON path which is evaluated against the target",
          "type": "string"
        },
        "value": {
          "description": "Value to compare against",
          "type": "string"
        },
        "comparison": {
          "description": "Type of comparison to perform",
          "enum": [
            "Equals",
            "NotEquals",
            "Contains"
          ],
          "type": "string"
        }
      },
      "xml": {
        "name": "ConditionCreate"
      }
    },
    "ODataQueryOptions[Matcher]": {
      "type": "object",
      "properties": {
        "ifMatch": {
          "type": "object",
          "readOnly": true
        },
        "ifNoneMatch": {
          "type": "object",
          "readOnly": true
        },
        "context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "request": {
          "type": "object",
          "readOnly": true
        },
        "rawValues": {
          "$ref": "#/definitions/ODataRawQueryOptions",
          "readOnly": true
        },
        "selectExpand": {
          "$ref": "#/definitions/SelectExpandQueryOption",
          "readOnly": true
        },
        "filter": {
          "$ref": "#/definitions/FilterQueryOption",
          "readOnly": true
        },
        "orderBy": {
          "$ref": "#/definitions/OrderByQueryOption",
          "readOnly": true
        },
        "skip": {
          "$ref": "#/definitions/SkipQueryOption",
          "readOnly": true
        },
        "top": {
          "$ref": "#/definitions/TopQueryOption",
          "readOnly": true
        },
        "inlineCount": {
          "$ref": "#/definitions/InlineCountQueryOption",
          "readOnly": true
        },
        "validator": {
          "$ref": "#/definitions/ODataQueryValidator"
        }
      },
      "xml": {
        "name": "ODataQueryOptions`1"
      }
    },
    "MatcherRetrieve": {
      "required": [
        "id",
        "name"
      ],
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "description": "The identifier",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "name": {
          "description": "The name",
          "type": "string"
        },
        "spaceId": {
          "format": "uuid",
          "description": "Parent space Id",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "space": {
          "$ref": "#/definitions/SpaceRetrieve",
          "description": "Parent space"
        },
        "description": {
          "description": "Optional description",
          "type": "string"
        },
        "friendlyName": {
          "description": "Optional friendly name",
          "type": "string"
        },
        "fullName": {
          "type": "string"
        },
        "spacePaths": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "conditions": {
          "description": "List of conditions that all need to evaluate to true for a given sensor to match",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConditionRetrieve"
          },
          "xml": {
            "name": "ConditionRetrieve",
            "wrapped": true
          }
        },
        "userDefinedFunctions": {
          "description": "List of UDFs that are associated with this matcher",
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserDefinedFunctionRetrieve"
          },
          "xml": {
            "name": "UserDefinedFunctionRetrieve",
            "wrapped": true
          }
        }
      },
      "xml": {
        "name": "MatcherRetrieve"
      }
    },
    "ConditionRetrieve": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "description": "The identifier",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "target": {
          "description": "What object the condition applies to: the sensor, its parent device or its parent space",
          "enum": [
            "Sensor",
            "SensorDevice",
            "SensorSpace"
          ],
          "type": "string"
        },
        "path": {
          "description": "Case sensitive JSON path which is evaluated against the target",
          "type": "string"
        },
        "value": {
          "description": "Value to compare against",
          "type": "string"
        },
        "comparison": {
          "description": "Type of comparison to perform",
          "enum": [
            "Equals",
            "NotEquals",
            "Contains"
          ],
          "type": "string"
        }
      },
      "xml": {
        "name": "ConditionRetrieve"
      }
    },
    "UserDefinedFunctionRetrieve": {
      "required": [
        "id",
        "name",
        "disabled"
      ],
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "description": "Udf identifier",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "spaceId": {
          "format": "uuid",
          "description": "Parent space Id.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "space": {
          "$ref": "#/definitions/SpaceRetrieve",
          "description": "Parent space"
        },
        "name": {
          "type": "string"
        },
        "disabled": {
          "description": "If disabled, the UDF will not be considered for execution",
          "type": "boolean"
        },
        "friendlyName": {
          "description": "Optional friendly name",
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "fullName": {
          "type": "string"
        },
        "spacePaths": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "matchers": {
          "description": "List of matchers that can trigger execution",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MatcherRetrieve"
          },
          "xml": {
            "name": "MatcherRetrieve",
            "wrapped": true
          }
        },
        "contentInfo": {
          "$ref": "#/definitions/BlobMetadataContentInfo",
          "description": "UDF content info"
        }
      },
      "xml": {
        "name": "UserDefinedFunctionRetrieve"
      }
    },
    "MatcherUpdate": {
      "type": "object",
      "properties": {
        "name": {
          "description": "The name",
          "maxLength": 64,
          "minLength": 3,
          "type": "string"
        },
        "description": {
          "description": "Optional description",
          "maxLength": 4000,
          "minLength": 0,
          "type": "string"
        },
        "friendlyName": {
          "description": "Optional friendly name",
          "maxLength": 64,
          "minLength": 0,
          "type": "string"
        },
        "conditions": {
          "description": "List of conditions that all need to evaluate to true for a given sensor to match",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConditionUpdate"
          },
          "xml": {
            "name": "ConditionUpdate",
            "wrapped": true
          }
        }
      },
      "xml": {
        "name": "MatcherUpdate"
      }
    },
    "ConditionUpdate": {
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "description": "If specified, Id of the condition to update or delete.\r\nIf not specified, condition is created",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "target": {
          "description": "What object the condition applies to: the sensor, its parent device or its parent space",
          "enum": [
            "Sensor",
            "SensorDevice",
            "SensorSpace"
          ],
          "type": "string"
        },
        "path": {
          "description": "If specified and not empty, case sensitive JSON path which is evaluated against the target.\r\nIf specified and empty, the corresponding Condition is deleted",
          "type": "string"
        },
        "value": {
          "description": "Value to compare against",
          "type": "string"
        },
        "comparison": {
          "description": "Type of comparison to perform",
          "enum": [
            "Equals",
            "NotEquals",
            "Contains"
          ],
          "type": "string"
        }
      },
      "xml": {
        "name": "ConditionUpdate"
      }
    },
    "MatcherEvaluationResults": {
      "type": "object",
      "properties": {
        "success": {
          "description": "Matcher evaluation result",
          "type": "boolean"
        },
        "logs": {
          "description": "Evaluation logs",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "xml": {
        "name": "MatcherEvaluationResults"
      }
    },
    "ODataQueryOptions[Ontology]": {
      "type": "object",
      "properties": {
        "ifMatch": {
          "type": "object",
          "readOnly": true
        },
        "ifNoneMatch": {
          "type": "object",
          "readOnly": true
        },
        "context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "request": {
          "type": "object",
          "readOnly": true
        },
        "rawValues": {
          "$ref": "#/definitions/ODataRawQueryOptions",
          "readOnly": true
        },
        "selectExpand": {
          "$ref": "#/definitions/SelectExpandQueryOption",
          "readOnly": true
        },
        "filter": {
          "$ref": "#/definitions/FilterQueryOption",
          "readOnly": true
        },
        "orderBy": {
          "$ref": "#/definitions/OrderByQueryOption",
          "readOnly": true
        },
        "skip": {
          "$ref": "#/definitions/SkipQueryOption",
          "readOnly": true
        },
        "top": {
          "$ref": "#/definitions/TopQueryOption",
          "readOnly": true
        },
        "inlineCount": {
          "$ref": "#/definitions/InlineCountQueryOption",
          "readOnly": true
        },
        "validator": {
          "$ref": "#/definitions/ODataQueryValidator"
        }
      },
      "xml": {
        "name": "ODataQueryOptions`1"
      }
    },
    "OntologyRetrieve": {
      "required": [
        "id",
        "name",
        "loaded"
      ],
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "description": "The identifier",
          "type": "integer"
        },
        "name": {
          "description": "Ontology name",
          "maxLength": 20,
          "minLength": 3,
          "type": "string"
        },
        "loaded": {
          "description": "If true, new extended types associated with this ontology are automatically enabled",
          "type": "boolean"
        },
        "description": {
          "description": "Optional description",
          "maxLength": 4000,
          "minLength": 0,
          "type": "string"
        },
        "types": {
          "description": "Associated extended types",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExtendedTypeRetrieve"
          },
          "xml": {
            "name": "ExtendedTypeRetrieve",
            "wrapped": true
          }
        }
      },
      "xml": {
        "name": "OntologyRetrieve"
      }
    },
    "ExtendedTypeRetrieve": {
      "required": [
        "id",
        "category",
        "name",
        "disabled",
        "logicalOrder"
      ],
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "description": "Type identifier",
          "type": "integer"
        },
        "spaceId": {
          "format": "uuid",
          "description": "Parent space Id.\r\nIf specified, the type is available to this space topology (custom type).\r\nIf not, the type is available to all spaces (system type).",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "space": {
          "$ref": "#/definitions/SpaceRetrieve",
          "description": "Parent space"
        },
        "category": {
          "description": "The type's category, for example SensorPortType",
          "enum": [
            "DeviceSubtype",
            "DeviceType",
            "DeviceBlobSubtype",
            "DeviceBlobType",
            "SensorDataSubtype",
            "SensorDataType",
            "SensorDataUnitType",
            "SensorPortType",
            "SensorType",
            "SpaceBlobSubtype",
            "SpaceBlobType",
            "SpaceStatus",
            "SpaceSubtype",
            "SpaceType",
            "UserBlobSubtype",
            "UserBlobType"
          ],
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "disabled": {
          "description": "If disabled, a type cannot be be referenced.\r\nThis can be used to remove types from loaded ontologies or to prevent \"wrong\" type names from being created.\r\nFor example, creating a disabled type called 'Temp' will enforce using Temperature instead",
          "type": "boolean"
        },
        "logicalOrder": {
          "format": "int32",
          "description": "Display logical ordering",
          "type": "integer"
        },
        "friendlyName": {
          "description": "Optional friendly name",
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "fullName": {
          "type": "string"
        },
        "spacePaths": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ontologies": {
          "description": "List of ontologies this type belongs to",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OntologyRetrieve"
          },
          "xml": {
            "name": "OntologyRetrieve",
            "wrapped": true
          }
        }
      },
      "xml": {
        "name": "ExtendedTypeRetrieve"
      }
    },
    "OntologyUpdate": {
      "type": "object",
      "properties": {
        "loaded": {
          "description": "Switching an ontology from loaded false to true switches all its associated extended types to not Disabled unless they are also associated with another not loaded ontology.\r\nSwitching an ontology from loaded true to false switches all its associated extended types to Disabled unless they are also associated with another loaded ontology.",
          "type": "boolean"
        }
      },
      "xml": {
        "name": "OntologyUpdate"
      }
    },
    "ExtendedPropertyKeyCreate": {
      "required": [
        "name",
        "spaceId",
        "scope"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "Key name. Must be unique for a given space. Can only contain alphanumeric or underscore characters",
          "maxLength": 50,
          "minLength": 3,
          "type": "string"
        },
        "primitiveDataType": {
          "description": "Primitive data type used for validation. Defaults to None if not specified",
          "enum": [
            "None",
            "String",
            "Bool",
            "Int",
            "UInt",
            "Long",
            "DateTime",
            "Json",
            "Set",
            "Enum"
          ],
          "type": "string"
        },
        "category": {
          "description": "Category. Used for permissioning and filtering. Automatically set to 'None' if not specified",
          "maxLength": 15,
          "minLength": 4,
          "type": "string"
        },
        "description": {
          "maxLength": 4000,
          "minLength": 0,
          "type": "string"
        },
        "spaceId": {
          "format": "uuid",
          "description": "Parent space",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "scope": {
          "description": "The scope the property key applies to",
          "enum": [
            "Spaces",
            "Sensors",
            "Users",
            "Devices"
          ],
          "type": "string"
        },
        "validationData": {
          "description": "Optional field used to validate property values.\r\n- For string: an optional regular expression\r\n- For enum or set: a ';' delimited list of possible alphanumeric values\r\n- For JSON: an optional JSON schema",
          "maxLength": 2000,
          "minLength": 0,
          "type": "string"
        },
        "min": {
          "description": "Optional field used to limit the range of property values.\r\n- For value types (int, long, datetime) the boundary value.\r\n- For string and JSON the number of characters.\r\n- For Set the number of elements.",
          "maxLength": 20,
          "minLength": 0,
          "type": "string"
        },
        "max": {
          "description": "Optional field used to limit the range of property values.\r\n- For value types (int, long, datetime) the boundary value.\r\n- For string and JSON the number of characters.\r\n- For Set the number of elements.",
          "maxLength": 20,
          "minLength": 0,
          "type": "string"
        }
      },
      "xml": {
        "name": "ExtendedPropertyKeyCreate"
      }
    },
    "ODataQueryOptions[ExtendedPropertyKey]": {
      "type": "object",
      "properties": {
        "ifMatch": {
          "type": "object",
          "readOnly": true
        },
        "ifNoneMatch": {
          "type": "object",
          "readOnly": true
        },
        "context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "request": {
          "type": "object",
          "readOnly": true
        },
        "rawValues": {
          "$ref": "#/definitions/ODataRawQueryOptions",
          "readOnly": true
        },
        "selectExpand": {
          "$ref": "#/definitions/SelectExpandQueryOption",
          "readOnly": true
        },
        "filter": {
          "$ref": "#/definitions/FilterQueryOption",
          "readOnly": true
        },
        "orderBy": {
          "$ref": "#/definitions/OrderByQueryOption",
          "readOnly": true
        },
        "skip": {
          "$ref": "#/definitions/SkipQueryOption",
          "readOnly": true
        },
        "top": {
          "$ref": "#/definitions/TopQueryOption",
          "readOnly": true
        },
        "inlineCount": {
          "$ref": "#/definitions/InlineCountQueryOption",
          "readOnly": true
        },
        "validator": {
          "$ref": "#/definitions/ODataQueryValidator"
        }
      },
      "xml": {
        "name": "ODataQueryOptions`1"
      }
    },
    "ExtendedPropertyKeyRetrieve": {
      "required": [
        "id",
        "name",
        "category",
        "spaceId",
        "scope"
      ],
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "description": "Unique identifier",
          "type": "integer"
        },
        "name": {
          "description": "Key name.",
          "type": "string"
        },
        "category": {
          "description": "Category. Used for permissioning and filtering",
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "spaceId": {
          "format": "uuid",
          "description": "Parent space",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "scope": {
          "description": "The scope the property key applies to",
          "enum": [
            "Spaces",
            "Sensors",
            "Users",
            "Devices"
          ],
          "type": "string"
        },
        "fullName": {
          "type": "string"
        },
        "spacePaths": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "space": {
          "$ref": "#/definitions/SpaceRetrieve"
        },
        "primitiveDataType": {
          "description": "Primitive data type used for validation.",
          "enum": [
            "None",
            "String",
            "Bool",
            "Int",
            "UInt",
            "Long",
            "DateTime",
            "Json",
            "Set",
            "Enum"
          ],
          "type": "string"
        },
        "validationData": {
          "description": "Optional field used to validate property values.\r\n- For string: an optional regular expression\r\n- For enum or set: a ';' delimited list of possible alphanumeric values\r\n- For JSON: an optional JSON schema",
          "maxLength": 2000,
          "minLength": 0,
          "type": "string"
        },
        "min": {
          "description": "Optional field used to limit the range of property values.\r\n- For value types (int, long, datetime) the boundary value.\r\n- For string and JSON the number of characters.\r\n- For Set the number of elements.",
          "maxLength": 20,
          "minLength": 0,
          "type": "string"
        },
        "max": {
          "description": "Optional field used to limit the range of property values.\r\n- For value types (int, long, datetime) the boundary value.\r\n- For string and JSON the number of characters.\r\n- For Set the number of elements.",
          "maxLength": 20,
          "minLength": 0,
          "type": "string"
        }
      },
      "xml": {
        "name": "ExtendedPropertyKeyRetrieve"
      }
    },
    "ExtendedPropertyKeyUpdate": {
      "type": "object",
      "properties": {
        "name": {
          "description": "Key name. Must be unique for a given space. Can only contain alphanumeric or underscore characters",
          "maxLength": 50,
          "minLength": 3,
          "type": "string"
        },
        "category": {
          "description": "Category used for permissioning and filtering",
          "maxLength": 15,
          "minLength": 4,
          "type": "string"
        },
        "description": {
          "maxLength": 4000,
          "minLength": 0,
          "type": "string"
        },
        "spaceId": {
          "format": "uuid",
          "description": "Parent space",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "validationData": {
          "description": "Optional field used to validate property values.\r\n- For string: an optional regular expression\r\n- For enum or set: a ';' delimited list of possible alphanumeric values\r\n- For JSON: an optional JSON schema",
          "maxLength": 2000,
          "minLength": 0,
          "type": "string"
        },
        "min": {
          "description": "Optional field used to limit the range of property values.\r\n- For value types (int, long, datetime) the boundary value.\r\n- For string and JSON the number of characters.\r\n- For Set the number of elements.",
          "maxLength": 20,
          "minLength": 0,
          "type": "string"
        },
        "max": {
          "description": "Optional field used to limit the range of property values.\r\n- For value types (int, long, datetime) the boundary value.\r\n- For string and JSON the number of characters.\r\n- For Set the number of elements.",
          "maxLength": 20,
          "minLength": 0,
          "type": "string"
        }
      },
      "xml": {
        "name": "ExtendedPropertyKeyUpdate"
      }
    },
    "SpaceResourceCreate": {
      "required": [
        "spaceId",
        "type"
      ],
      "type": "object",
      "properties": {
        "spaceId": {
          "format": "uuid",
          "description": "Parent space",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "type": {
          "description": "Resource type",
          "enum": [
            "IotHub"
          ],
          "type": "string"
        },
        "size": {
          "description": "Resource size",
          "enum": [
            "XS",
            "S",
            "M",
            "L",
            "XL",
            "XXL"
          ],
          "type": "string"
        },
        "region": {
          "description": "Resource region",
          "enum": [
            "WestUS",
            "WestUS2",
            "CentralUSEUAP",
            "EastUS",
            "EastUS2",
            "CentralUS",
            "SouthCentralUS",
            "WestCentralUS",
            "CanadaEast",
            "CanadaCentral",
            "BrazilSouth",
            "AustraliaEast",
            "AustraliaSoutheast",
            "SoutheastAsia",
            "EastAsia",
            "CentralIndia",
            "SouthIndia",
            "JapanEast",
            "JapanWest",
            "KoreaCentral",
            "KoreaSouth",
            "NorthEurope",
            "WestEurope",
            "UKWest",
            "UKSouth",
            "GermanyCentral",
            "GermanyNortheast"
          ],
          "type": "string"
        },
        "isExternallyCreated": {
          "description": "If the resource was created externally",
          "type": "boolean"
        },
        "parameters": {
          "description": "Resource-type-dependent template parameters",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "resourceDependencies": {
          "description": "List of resources the current resource is depending on",
          "type": "array",
          "items": {
            "format": "uuid",
            "type": "string",
            "example": "00000000-0000-0000-0000-000000000000"
          }
        },
        "status": {
          "description": "Resource status",
          "enum": [
            "None",
            "Provisioning",
            "Running",
            "Stopped",
            "Failed",
            "Deleting"
          ],
          "type": "string"
        }
      },
      "xml": {
        "name": "SpaceResourceCreate"
      }
    },
    "ODataQueryOptions[SpaceResource]": {
      "type": "object",
      "properties": {
        "ifMatch": {
          "type": "object",
          "readOnly": true
        },
        "ifNoneMatch": {
          "type": "object",
          "readOnly": true
        },
        "context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "request": {
          "type": "object",
          "readOnly": true
        },
        "rawValues": {
          "$ref": "#/definitions/ODataRawQueryOptions",
          "readOnly": true
        },
        "selectExpand": {
          "$ref": "#/definitions/SelectExpandQueryOption",
          "readOnly": true
        },
        "filter": {
          "$ref": "#/definitions/FilterQueryOption",
          "readOnly": true
        },
        "orderBy": {
          "$ref": "#/definitions/OrderByQueryOption",
          "readOnly": true
        },
        "skip": {
          "$ref": "#/definitions/SkipQueryOption",
          "readOnly": true
        },
        "top": {
          "$ref": "#/definitions/TopQueryOption",
          "readOnly": true
        },
        "inlineCount": {
          "$ref": "#/definitions/InlineCountQueryOption",
          "readOnly": true
        },
        "validator": {
          "$ref": "#/definitions/ODataQueryValidator"
        }
      },
      "xml": {
        "name": "ODataQueryOptions`1"
      }
    },
    "SpaceResourceUpdate": {
      "type": "object",
      "properties": {
        "spaceId": {
          "format": "uuid",
          "description": "Parent space",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "size": {
          "description": "Resource size",
          "enum": [
            "XS",
            "S",
            "M",
            "L",
            "XL",
            "XXL"
          ],
          "type": "string"
        },
        "parameters": {
          "description": "Resource-type-dependent template parameters.\r\nSpecifying a value creates or updates the given key. Specifying null for value deletes the corresponding key.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "status": {
          "description": "Resource status",
          "enum": [
            "None",
            "Provisioning",
            "Running",
            "Stopped",
            "Failed",
            "Deleting"
          ],
          "type": "string"
        }
      },
      "xml": {
        "name": "SpaceResourceUpdate"
      }
    },
    "RoleAssignmentCreate": {
      "required": [
        "roleId",
        "objectId",
        "objectIdType",
        "path"
      ],
      "type": "object",
      "properties": {
        "roleId": {
          "format": "uuid",
          "description": "The role definition identifier. Role definitions and their identifiers can be found by querying the system API.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "objectId": {
          "description": "The object id for the role assignment that must be formatted according to its associated type.\r\nFor the DomainName ObjectIdType, ObjectId must begin with the \"@\" character.",
          "type": "string"
        },
        "objectIdType": {
          "description": "The type of the role assignment. With the exception of the DeviceId type, the types correspond to properties of an AAD object. The DeviceId type corresponds to\r\nthe device id in the topology.\r\nThe UserId type assigns a role to a user.\r\nThe DeviceId type assigns a role to a device.\r\nThe DomainName type assigns a role to a domain name. Each user with the specified domain name will have the access rights of the corresponding role.\r\nThe TenantId type assigns a role to a tenant. Each user belonging to the specified tenant id will have the access rights of the corresponding role.\r\nThe ServicePrincipalId type assigns a role to a service principal object id.",
          "enum": [
            "UserId",
            "DeviceId",
            "DomainName",
            "TenantId",
            "ServicePrincipalId",
            "UserDefinedFunctionId"
          ],
          "type": "string"
        },
        "tenantId": {
          "format": "uuid",
          "description": "The tenant identifier.\r\nDisallowed for DeviceId and TenantId ObjectIdTypes.\r\nRequired for UserId and ServicePrincipalId ObjectIdTypes.\r\nOptional for the DomainName ObjectIdType.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "path": {
          "description": "The access path.",
          "type": "string"
        }
      },
      "xml": {
        "name": "RoleAssignmentCreate"
      }
    },
    "ODataQueryOptions[RoleAssignmentRetrieve]": {
      "type": "object",
      "properties": {
        "ifMatch": {
          "type": "object",
          "readOnly": true
        },
        "ifNoneMatch": {
          "type": "object",
          "readOnly": true
        },
        "context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "request": {
          "type": "object",
          "readOnly": true
        },
        "rawValues": {
          "$ref": "#/definitions/ODataRawQueryOptions",
          "readOnly": true
        },
        "selectExpand": {
          "$ref": "#/definitions/SelectExpandQueryOption",
          "readOnly": true
        },
        "filter": {
          "$ref": "#/definitions/FilterQueryOption",
          "readOnly": true
        },
        "orderBy": {
          "$ref": "#/definitions/OrderByQueryOption",
          "readOnly": true
        },
        "skip": {
          "$ref": "#/definitions/SkipQueryOption",
          "readOnly": true
        },
        "top": {
          "$ref": "#/definitions/TopQueryOption",
          "readOnly": true
        },
        "inlineCount": {
          "$ref": "#/definitions/InlineCountQueryOption",
          "readOnly": true
        },
        "validator": {
          "$ref": "#/definitions/ODataQueryValidator"
        }
      },
      "xml": {
        "name": "ODataQueryOptions`1"
      }
    },
    "ODataQueryOptions[Sensor]": {
      "type": "object",
      "properties": {
        "ifMatch": {
          "type": "object",
          "readOnly": true
        },
        "ifNoneMatch": {
          "type": "object",
          "readOnly": true
        },
        "context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "request": {
          "type": "object",
          "readOnly": true
        },
        "rawValues": {
          "$ref": "#/definitions/ODataRawQueryOptions",
          "readOnly": true
        },
        "selectExpand": {
          "$ref": "#/definitions/SelectExpandQueryOption",
          "readOnly": true
        },
        "filter": {
          "$ref": "#/definitions/FilterQueryOption",
          "readOnly": true
        },
        "orderBy": {
          "$ref": "#/definitions/OrderByQueryOption",
          "readOnly": true
        },
        "skip": {
          "$ref": "#/definitions/SkipQueryOption",
          "readOnly": true
        },
        "top": {
          "$ref": "#/definitions/TopQueryOption",
          "readOnly": true
        },
        "inlineCount": {
          "$ref": "#/definitions/InlineCountQueryOption",
          "readOnly": true
        },
        "validator": {
          "$ref": "#/definitions/ODataQueryValidator"
        }
      },
      "xml": {
        "name": "ODataQueryOptions`1"
      }
    },
    "SensorCreate": {
      "description": "Sensor create model",
      "required": [
        "deviceId"
      ],
      "type": "object",
      "properties": {
        "deviceId": {
          "format": "uuid",
          "description": "Parent device id",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "port": {
          "description": "Serial port the sensor connects to on the device",
          "maxLength": 20,
          "minLength": 0,
          "type": "string"
        },
        "pollRate": {
          "format": "int32",
          "description": "Poll rate for data collection from the sensor",
          "type": "integer"
        },
        "dataType": {
          "description": "Type of data reported by the sensor",
          "type": "string"
        },
        "type": {
          "description": "Type of sensor",
          "type": "string"
        },
        "portType": {
          "description": "Type of port; for example AnalogInput. Defaults to None",
          "type": "string"
        },
        "dataUnitType": {
          "description": "Type of unit; for example CelsiusTemperature if DataType is set to Temperature. Defaults to None",
          "type": "string"
        },
        "dataSubtype": {
          "description": "Subtype for the data; for example OutsideTemperature if DataType is set to Temperature. Defaults to None",
          "type": "string"
        },
        "spaceId": {
          "format": "uuid",
          "description": "Parent space Id. If not specified, the device's parent space is used",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "location": {
          "$ref": "#/definitions/Location"
        },
        "portTypeId": {
          "format": "int32",
          "description": "Port type identifier. Cannot specify both PortType and PortTypeId",
          "type": "integer"
        },
        "dataUnitTypeId": {
          "format": "int32",
          "description": "Data type unit identifier. Cannot specify both DataUnitType and DataUnitTypeId",
          "type": "integer"
        },
        "typeId": {
          "format": "int32",
          "description": "Type identifier. Cannot specify both Type and TypeId",
          "type": "integer"
        },
        "dataTypeId": {
          "format": "int32",
          "description": "Data type identifier. Cannot specify both DataType and DataTypeId",
          "type": "integer"
        },
        "dataSubtypeId": {
          "format": "int32",
          "description": "Data subtype identifier. Cannot specify both DataSubtype and DataSubtypeId",
          "type": "integer"
        },
        "hardwareId": {
          "description": "Hardware unique identifier, such as MAC address. If left unspecified, set to a random Guid string.",
          "maxLength": 72,
          "minLength": 0,
          "type": "string"
        },
        "properties": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExtendedPropertyCreate"
          },
          "xml": {
            "name": "ExtendedPropertyCreate",
            "wrapped": true
          }
        }
      },
      "xml": {
        "name": "SensorCreate"
      }
    },
    "SensorUpdate": {
      "description": "Sensor update model",
      "type": "object",
      "properties": {
        "port": {
          "description": "Serial port the sensor connects to on the device",
          "maxLength": 20,
          "minLength": 0,
          "type": "string"
        },
        "pollRate": {
          "format": "int32",
          "description": "Poll rate for data collection from the sensor",
          "type": "integer"
        },
        "dataType": {
          "description": "Type of data reported by the sensor",
          "type": "string"
        },
        "dataSubtype": {
          "description": "Subtype for the data; for example OutsideTemperature if DataType is set to Temperature",
          "type": "string"
        },
        "type": {
          "description": "Type of sensor",
          "type": "string"
        },
        "deviceId": {
          "format": "uuid",
          "description": "Parent device id",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "spaceId": {
          "format": "uuid",
          "description": "Parent space Id",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "location": {
          "$ref": "#/definitions/Location"
        },
        "portType": {
          "description": "Type of port; for example AnalogInput",
          "type": "string"
        },
        "dataUnitType": {
          "description": "Type of unit; for example CelsiusTemperature if DataType is set to Temperature",
          "type": "string"
        },
        "portTypeId": {
          "format": "int32",
          "description": "Port type identifier. Cannot specify both PortType and PortTypeId",
          "type": "integer"
        },
        "dataUnitTypeId": {
          "format": "int32",
          "description": "Data type unit identifier. Cannot specify both DataUnitType and DataUnitTypeId",
          "type": "integer"
        },
        "dataSubtypeId": {
          "format": "int32",
          "description": "Data subtype identifier. Cannot specify both DataSubtype and DataSubtypeId",
          "type": "integer"
        },
        "typeId": {
          "format": "int32",
          "description": "Type identifier. Cannot specify both Type and TypeId",
          "type": "integer"
        },
        "dataTypeId": {
          "format": "int32",
          "description": "DataType identifier. Cannot specify both DataType and DataTypeId",
          "type": "integer"
        },
        "hardwareId": {
          "description": "Hardware unique identifier, such as MAC address.",
          "maxLength": 72,
          "minLength": 0,
          "type": "string"
        }
      },
      "xml": {
        "name": "SensorUpdate"
      }
    },
    "ODataQueryOptions[Space]": {
      "type": "object",
      "properties": {
        "ifMatch": {
          "type": "object",
          "readOnly": true
        },
        "ifNoneMatch": {
          "type": "object",
          "readOnly": true
        },
        "context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "request": {
          "type": "object",
          "readOnly": true
        },
        "rawValues": {
          "$ref": "#/definitions/ODataRawQueryOptions",
          "readOnly": true
        },
        "selectExpand": {
          "$ref": "#/definitions/SelectExpandQueryOption",
          "readOnly": true
        },
        "filter": {
          "$ref": "#/definitions/FilterQueryOption",
          "readOnly": true
        },
        "orderBy": {
          "$ref": "#/definitions/OrderByQueryOption",
          "readOnly": true
        },
        "skip": {
          "$ref": "#/definitions/SkipQueryOption",
          "readOnly": true
        },
        "top": {
          "$ref": "#/definitions/TopQueryOption",
          "readOnly": true
        },
        "inlineCount": {
          "$ref": "#/definitions/InlineCountQueryOption",
          "readOnly": true
        },
        "validator": {
          "$ref": "#/definitions/ODataQueryValidator"
        }
      },
      "xml": {
        "name": "ODataQueryOptions`1"
      }
    },
    "SpaceRetrieveWithChildren": {
      "description": "Space retrieve with child objects",
      "required": [
        "id",
        "name",
        "typeId",
        "subtypeId",
        "statusId"
      ],
      "type": "object",
      "properties": {
        "children": {
          "description": "Child spaces",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SpaceRetrieveWithProperties"
          },
          "xml": {
            "name": "SpaceRetrieveWithProperties",
            "wrapped": true
          }
        },
        "sensors": {
          "description": "Child sensors",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SensorRetrieve"
          },
          "xml": {
            "name": "SensorRetrieve",
            "wrapped": true
          }
        },
        "devices": {
          "description": "Child devices",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeviceRetrieve"
          },
          "xml": {
            "name": "DeviceRetrieve",
            "wrapped": true
          }
        },
        "resources": {
          "description": "Space resources",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SpaceResourceRetrieve"
          },
          "xml": {
            "name": "SpaceResourceRetrieve",
            "wrapped": true
          }
        },
        "timeZone": {
          "$ref": "#/definitions/TimeZone",
          "description": "Time zone information"
        },
        "effectiveTimeZone": {
          "$ref": "#/definitions/TimeZone",
          "description": "Same as TimeZone, if defined. Otherwise same as EffectiveTimeZone of parent space"
        },
        "users": {
          "description": "Associated users",
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserRetrieve"
          },
          "xml": {
            "name": "UserRetrieve",
            "wrapped": true
          }
        },
        "parent": {
          "$ref": "#/definitions/SpaceRetrieve",
          "description": "Parent space"
        },
        "values": {
          "description": "Aggregate of associated sensor values",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SensorValue"
          },
          "xml": {
            "name": "SensorValue",
            "wrapped": true
          }
        },
        "properties": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExtendedPropertyRetrieve"
          },
          "xml": {
            "name": "ExtendedPropertyRetrieve",
            "wrapped": true
          }
        },
        "id": {
          "format": "uuid",
          "description": "The identifier",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "friendlyName": {
          "description": "Optional friendly name",
          "type": "string"
        },
        "type": {
          "description": "Primary space type",
          "type": "string"
        },
        "typeId": {
          "format": "int32",
          "description": "Type identifier",
          "type": "integer"
        },
        "parentSpaceId": {
          "format": "uuid",
          "description": "The space's parent space",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "subtype": {
          "description": "Space subtype",
          "type": "string"
        },
        "subtypeId": {
          "format": "int32",
          "description": "Subtype identifier",
          "type": "integer"
        },
        "location": {
          "$ref": "#/definitions/Location",
          "description": "Optional physical location for the space"
        },
        "timeZoneId": {
          "format": "int32",
          "description": "Optional time zone identifier for the space",
          "type": "integer"
        },
        "status": {
          "description": "The status",
          "type": "string"
        },
        "statusId": {
          "format": "int32",
          "description": "Status identifier",
          "type": "integer"
        },
        "fullName": {
          "type": "string"
        },
        "spacePaths": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "effectiveLocation": {
          "$ref": "#/definitions/Location"
        },
        "effectiveTimeZoneId": {
          "format": "int32",
          "description": "Same as TimeZoneId, if defined. Otherwise same as EffectiveTimeZoneId of parent space",
          "type": "integer"
        }
      },
      "xml": {
        "name": "SpaceRetrieveWithChildren"
      }
    },
    "SpaceRetrieveWithProperties": {
      "required": [
        "id",
        "name",
        "typeId",
        "subtypeId",
        "statusId"
      ],
      "type": "object",
      "properties": {
        "properties": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExtendedPropertyRetrieve"
          },
          "xml": {
            "name": "ExtendedPropertyRetrieve",
            "wrapped": true
          }
        },
        "id": {
          "format": "uuid",
          "description": "The identifier",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "friendlyName": {
          "description": "Optional friendly name",
          "type": "string"
        },
        "type": {
          "description": "Primary space type",
          "type": "string"
        },
        "typeId": {
          "format": "int32",
          "description": "Type identifier",
          "type": "integer"
        },
        "parentSpaceId": {
          "format": "uuid",
          "description": "The space's parent space",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "subtype": {
          "description": "Space subtype",
          "type": "string"
        },
        "subtypeId": {
          "format": "int32",
          "description": "Subtype identifier",
          "type": "integer"
        },
        "location": {
          "$ref": "#/definitions/Location",
          "description": "Optional physical location for the space"
        },
        "timeZoneId": {
          "format": "int32",
          "description": "Optional time zone identifier for the space",
          "type": "integer"
        },
        "status": {
          "description": "The status",
          "type": "string"
        },
        "statusId": {
          "format": "int32",
          "description": "Status identifier",
          "type": "integer"
        },
        "fullName": {
          "type": "string"
        },
        "spacePaths": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "effectiveLocation": {
          "$ref": "#/definitions/Location"
        },
        "effectiveTimeZoneId": {
          "format": "int32",
          "description": "Same as TimeZoneId, if defined. Otherwise same as EffectiveTimeZoneId of parent space",
          "type": "integer"
        }
      },
      "xml": {
        "name": "SpaceRetrieveWithProperties"
      }
    },
    "TimeZone": {
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "maxLength": 40,
          "minLength": 0,
          "type": "string"
        },
        "accessControlPath": {
          "type": "string",
          "readOnly": true
        },
        "friendlyPath": {
          "type": "string",
          "readOnly": true
        },
        "accessControlType": {
          "enum": [
            "None",
            "Device",
            "DeviceBlobMetadata",
            "DeviceExtendedProperty",
            "ExtendedPropertyKey",
            "ExtendedType",
            "Endpoint",
            "KeyStore",
            "Matcher",
            "Ontology",
            "Report",
            "RoleDefinition",
            "Sensor",
            "SensorExtendedProperty",
            "Space",
            "SpaceBlobMetadata",
            "SpaceExtendedProperty",
            "SpaceResource",
            "SpaceRoleAssignment",
            "System",
            "UserDefinedFunction",
            "User",
            "UserBlobMetadata",
            "UserExtendedProperty"
          ],
          "type": "string",
          "readOnly": true
        }
      },
      "xml": {
        "name": "TimeZone"
      }
    },
    "UserRetrieve": {
      "required": [
        "id",
        "upn",
        "spaceId"
      ],
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "description": "The identifier",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "upn": {
          "description": "User Principal Name, e.g. user@domain",
          "type": "string"
        },
        "location": {
          "$ref": "#/definitions/Location"
        },
        "firstName": {
          "description": "First name",
          "type": "string"
        },
        "lastName": {
          "description": "Last Name",
          "type": "string"
        },
        "managerName": {
          "description": "Manager name",
          "type": "string"
        },
        "metadata": {
          "description": "User metadata such as skills, interests, etc.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "effectiveLocation": {
          "$ref": "#/definitions/Location"
        },
        "spaceId": {
          "format": "uuid",
          "description": "Parent space Id",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "space": {
          "$ref": "#/definitions/SpaceRetrieve",
          "description": "Parent space"
        },
        "photoUri": {
          "description": "Uri to the user's picture thumbnail",
          "type": "string"
        },
        "fullName": {
          "type": "string"
        },
        "spacePaths": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "properties": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExtendedPropertyRetrieve"
          },
          "xml": {
            "name": "ExtendedPropertyRetrieve",
            "wrapped": true
          }
        },
        "roleAssignments": {
          "description": "The role assignments associated with the user.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RoleAssignmentRetrieve"
          },
          "xml": {
            "name": "RoleAssignmentRetrieve",
            "wrapped": true
          }
        }
      },
      "xml": {
        "name": "UserRetrieve"
      }
    },
    "SpaceCreate": {
      "description": "Space create model",
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "name": {
          "maxLength": 64,
          "minLength": 1,
          "type": "string"
        },
        "description": {
          "maxLength": 4000,
          "minLength": 0,
          "type": "string"
        },
        "friendlyName": {
          "description": "Optional friendly name",
          "maxLength": 64,
          "minLength": 0,
          "type": "string"
        },
        "type": {
          "description": "Primary space type. Defaults to None if not specified",
          "type": "string"
        },
        "typeId": {
          "format": "int32",
          "description": "Type identifier. Cannot specify both Type and TypeId",
          "type": "integer"
        },
        "parentSpaceId": {
          "format": "uuid",
          "description": "The space's parent space",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "subtype": {
          "description": "Space subtype. Defaults to None if not specified",
          "type": "string"
        },
        "subtypeId": {
          "format": "int32",
          "description": "Subtype identifier. Cannot specify both Subtype and SubtypeId",
          "type": "integer"
        },
        "location": {
          "$ref": "#/definitions/Location",
          "description": "Optional physical location for the space"
        },
        "timeZoneId": {
          "format": "int32",
          "description": "Optional time zone identifier for the space",
          "type": "integer"
        },
        "status": {
          "description": "Optional status. Defaults to None if not specified",
          "type": "string"
        },
        "statusId": {
          "format": "int32",
          "description": "Status identifier. Cannot specify both Status and StatusId",
          "type": "integer"
        },
        "properties": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExtendedPropertyCreate"
          },
          "xml": {
            "name": "ExtendedPropertyCreate",
            "wrapped": true
          }
        },
        "timeZoneName": {
          "description": "Optional time zone name. Cannot specify both TimeZoneId and TimeZoneName.",
          "type": "string"
        },
        "children": {
          "description": "Child spaces",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SpaceCreate"
          },
          "xml": {
            "name": "SpaceCreate",
            "wrapped": true
          }
        },
        "users": {
          "description": "Associated users",
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserCreate"
          },
          "xml": {
            "name": "UserCreate",
            "wrapped": true
          }
        }
      },
      "xml": {
        "name": "SpaceCreate"
      }
    },
    "UserCreate": {
      "required": [
        "upn"
      ],
      "type": "object",
      "properties": {
        "upn": {
          "description": "User Principal Name, e.g. user@domain",
          "maxLength": 50,
          "minLength": 5,
          "type": "string"
        },
        "location": {
          "$ref": "#/definitions/Location"
        },
        "firstName": {
          "description": "First name",
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "lastName": {
          "description": "Last Name",
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "managerName": {
          "description": "Manager name",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "metadata": {
          "description": "User metadata such as skills, interests, etc.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExtendedPropertyCreate"
          },
          "xml": {
            "name": "ExtendedPropertyCreate",
            "wrapped": true
          }
        }
      },
      "xml": {
        "name": "UserCreate"
      }
    },
    "SpaceUpdate": {
      "description": "Space update model",
      "type": "object",
      "properties": {
        "name": {
          "maxLength": 64,
          "minLength": 1,
          "type": "string"
        },
        "description": {
          "maxLength": 4000,
          "minLength": 0,
          "type": "string"
        },
        "friendlyName": {
          "description": "Optional friendly name",
          "maxLength": 64,
          "minLength": 0,
          "type": "string"
        },
        "type": {
          "description": "Primary space type",
          "type": "string"
        },
        "typeId": {
          "format": "int32",
          "description": "Type identifier. Cannot specify both Type and TypeId",
          "type": "integer"
        },
        "parentSpaceId": {
          "format": "uuid",
          "description": "The space's parent space",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "subtype": {
          "description": "Space subtype",
          "type": "string"
        },
        "subtypeId": {
          "format": "int32",
          "description": "Subtype identifier. Cannot specify both Subtype and SubtypeId",
          "type": "integer"
        },
        "location": {
          "$ref": "#/definitions/Location",
          "description": "Optional physical location, or a location of (0,0) to reset to no location"
        },
        "timeZoneId": {
          "format": "int32",
          "description": "Optional time zone identifier for the space\r\nCannot specify both TimeZoneId and TimeZoneName",
          "type": "integer"
        },
        "timeZoneName": {
          "description": "Optional time zone name, or \"None\" to reset to no timezone\r\nCannot specify both TimeZoneId and TimeZoneName",
          "type": "string"
        },
        "status": {
          "description": "The status",
          "type": "string"
        },
        "statusId": {
          "format": "int32",
          "description": "Status identifier. Cannot specify both Status and StatusId",
          "type": "integer"
        }
      },
      "xml": {
        "name": "SpaceUpdate"
      }
    },
    "ODataQueryOptions[User]": {
      "type": "object",
      "properties": {
        "ifMatch": {
          "type": "object",
          "readOnly": true
        },
        "ifNoneMatch": {
          "type": "object",
          "readOnly": true
        },
        "context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "request": {
          "type": "object",
          "readOnly": true
        },
        "rawValues": {
          "$ref": "#/definitions/ODataRawQueryOptions",
          "readOnly": true
        },
        "selectExpand": {
          "$ref": "#/definitions/SelectExpandQueryOption",
          "readOnly": true
        },
        "filter": {
          "$ref": "#/definitions/FilterQueryOption",
          "readOnly": true
        },
        "orderBy": {
          "$ref": "#/definitions/OrderByQueryOption",
          "readOnly": true
        },
        "skip": {
          "$ref": "#/definitions/SkipQueryOption",
          "readOnly": true
        },
        "top": {
          "$ref": "#/definitions/TopQueryOption",
          "readOnly": true
        },
        "inlineCount": {
          "$ref": "#/definitions/InlineCountQueryOption",
          "readOnly": true
        },
        "validator": {
          "$ref": "#/definitions/ODataQueryValidator"
        }
      },
      "xml": {
        "name": "ODataQueryOptions`1"
      }
    },
    "ExtendedPropertyFilters": {
      "type": "object",
      "properties": {
        "propertyKey": {
          "description": "Optional filter on objects that have the given property key defined",
          "type": "string"
        },
        "propertyValue": {
          "description": "Optional filter on the value of the given property key",
          "type": "string"
        },
        "propertyValueSearchType": {
          "description": "Optional type of search on property value. Contains or Equals. Defaults to Equals",
          "enum": [
            "Equals",
            "Contains"
          ],
          "type": "string"
        }
      },
      "xml": {
        "name": "ExtendedPropertyFilters"
      }
    },
    "ODataQueryOptions[SpaceBlobMetadata]": {
      "type": "object",
      "properties": {
        "ifMatch": {
          "type": "object",
          "readOnly": true
        },
        "ifNoneMatch": {
          "type": "object",
          "readOnly": true
        },
        "context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "request": {
          "type": "object",
          "readOnly": true
        },
        "rawValues": {
          "$ref": "#/definitions/ODataRawQueryOptions",
          "readOnly": true
        },
        "selectExpand": {
          "$ref": "#/definitions/SelectExpandQueryOption",
          "readOnly": true
        },
        "filter": {
          "$ref": "#/definitions/FilterQueryOption",
          "readOnly": true
        },
        "orderBy": {
          "$ref": "#/definitions/OrderByQueryOption",
          "readOnly": true
        },
        "skip": {
          "$ref": "#/definitions/SkipQueryOption",
          "readOnly": true
        },
        "top": {
          "$ref": "#/definitions/TopQueryOption",
          "readOnly": true
        },
        "inlineCount": {
          "$ref": "#/definitions/InlineCountQueryOption",
          "readOnly": true
        },
        "validator": {
          "$ref": "#/definitions/ODataQueryValidator"
        }
      },
      "xml": {
        "name": "ODataQueryOptions`1"
      }
    },
    "IEnumEntity": {
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        }
      },
      "xml": {
        "name": "IEnumEntity"
      }
    },
    "RoleDefinitionRetrieve": {
      "description": "Role definition retrieve.",
      "type": "object",
      "properties": {
        "id": {
          "format": "uuid",
          "description": "The role definition identifier.",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "name": {
          "description": "The role definition name.",
          "type": "string"
        },
        "permissions": {
          "description": "The role definition permissions.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Permission"
          },
          "xml": {
            "name": "Permission",
            "wrapped": true
          }
        },
        "accessControlPath": {
          "type": "string",
          "readOnly": true
        },
        "friendlyPath": {
          "type": "string",
          "readOnly": true
        },
        "accessControlType": {
          "enum": [
            "None",
            "Device",
            "DeviceBlobMetadata",
            "DeviceExtendedProperty",
            "ExtendedPropertyKey",
            "ExtendedType",
            "Endpoint",
            "KeyStore",
            "Matcher",
            "Ontology",
            "Report",
            "RoleDefinition",
            "Sensor",
            "SensorExtendedProperty",
            "Space",
            "SpaceBlobMetadata",
            "SpaceExtendedProperty",
            "SpaceResource",
            "SpaceRoleAssignment",
            "System",
            "UserDefinedFunction",
            "User",
            "UserBlobMetadata",
            "UserExtendedProperty"
          ],
          "type": "string",
          "readOnly": true
        }
      },
      "xml": {
        "name": "RoleDefinitionRetrieve"
      }
    },
    "Permission": {
      "type": "object",
      "properties": {
        "notActions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "actions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "condition": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Permission"
      }
    },
    "ExtendedTypeCreate": {
      "required": [
        "category",
        "spaceId",
        "name"
      ],
      "type": "object",
      "properties": {
        "category": {
          "description": "The type's category, for example SensorPortType",
          "enum": [
            "DeviceSubtype",
            "DeviceType",
            "DeviceBlobSubtype",
            "DeviceBlobType",
            "SensorDataSubtype",
            "SensorDataType",
            "SensorDataUnitType",
            "SensorPortType",
            "SensorType",
            "SpaceBlobSubtype",
            "SpaceBlobType",
            "SpaceStatus",
            "SpaceSubtype",
            "SpaceType",
            "UserBlobSubtype",
            "UserBlobType"
          ],
          "type": "string"
        },
        "spaceId": {
          "format": "uuid",
          "description": "Parent space Id. An extended type is available to all spaces within the specified space topology",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "name": {
          "description": "Type name. Must be unique for the given space and category. Can only contain alphanumeric or underscore characters.",
          "maxLength": 50,
          "minLength": 3,
          "type": "string"
        },
        "friendlyName": {
          "description": "Optional friendly name",
          "maxLength": 64,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "description": "Optional description",
          "maxLength": 4000,
          "minLength": 0,
          "type": "string"
        },
        "disabled": {
          "description": "If disabled, a type cannot be be referenced.\r\nThis can be used to remove types from loaded ontologies or to prevent \"wrong\" type names from being created.\r\nFor example, creating a disabled type called 'Temp' will enforce using Temperature instead",
          "type": "boolean"
        },
        "logicalOrder": {
          "format": "int32",
          "description": "Display logical ordering",
          "type": "integer"
        }
      },
      "xml": {
        "name": "ExtendedTypeCreate"
      }
    },
    "ODataQueryOptions[ExtendedType]": {
      "type": "object",
      "properties": {
        "ifMatch": {
          "type": "object",
          "readOnly": true
        },
        "ifNoneMatch": {
          "type": "object",
          "readOnly": true
        },
        "context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "request": {
          "type": "object",
          "readOnly": true
        },
        "rawValues": {
          "$ref": "#/definitions/ODataRawQueryOptions",
          "readOnly": true
        },
        "selectExpand": {
          "$ref": "#/definitions/SelectExpandQueryOption",
          "readOnly": true
        },
        "filter": {
          "$ref": "#/definitions/FilterQueryOption",
          "readOnly": true
        },
        "orderBy": {
          "$ref": "#/definitions/OrderByQueryOption",
          "readOnly": true
        },
        "skip": {
          "$ref": "#/definitions/SkipQueryOption",
          "readOnly": true
        },
        "top": {
          "$ref": "#/definitions/TopQueryOption",
          "readOnly": true
        },
        "inlineCount": {
          "$ref": "#/definitions/InlineCountQueryOption",
          "readOnly": true
        },
        "validator": {
          "$ref": "#/definitions/ODataQueryValidator"
        }
      },
      "xml": {
        "name": "ODataQueryOptions`1"
      }
    },
    "ExtendedTypeUpdate": {
      "type": "object",
      "properties": {
        "spaceId": {
          "format": "uuid",
          "description": "Parent space Id. An extended type is available to all spaces within the specified space topology",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "name": {
          "description": "Type name. Must be unique for the given space and category. Can only contain alphanumeric or underscore characters.",
          "maxLength": 50,
          "minLength": 3,
          "type": "string"
        },
        "friendlyName": {
          "description": "Optional friendly name",
          "maxLength": 64,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "description": "Optional description",
          "maxLength": 4000,
          "minLength": 0,
          "type": "string"
        },
        "disabled": {
          "description": "If disabled, a type cannot be be referenced.\r\nThis can be used to remove types from loaded ontologies or to prevent \"wrong\" type names from being created.\r\nFor example, creating a disabled type called 'Temp' will enforce using Temperature instead",
          "type": "boolean"
        },
        "logicalOrder": {
          "format": "int32",
          "description": "Display logical ordering",
          "type": "integer"
        }
      },
      "xml": {
        "name": "ExtendedTypeUpdate"
      }
    },
    "ODataQueryOptions[UserDefinedFunction]": {
      "type": "object",
      "properties": {
        "ifMatch": {
          "type": "object",
          "readOnly": true
        },
        "ifNoneMatch": {
          "type": "object",
          "readOnly": true
        },
        "context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "request": {
          "type": "object",
          "readOnly": true
        },
        "rawValues": {
          "$ref": "#/definitions/ODataRawQueryOptions",
          "readOnly": true
        },
        "selectExpand": {
          "$ref": "#/definitions/SelectExpandQueryOption",
          "readOnly": true
        },
        "filter": {
          "$ref": "#/definitions/FilterQueryOption",
          "readOnly": true
        },
        "orderBy": {
          "$ref": "#/definitions/OrderByQueryOption",
          "readOnly": true
        },
        "skip": {
          "$ref": "#/definitions/SkipQueryOption",
          "readOnly": true
        },
        "top": {
          "$ref": "#/definitions/TopQueryOption",
          "readOnly": true
        },
        "inlineCount": {
          "$ref": "#/definitions/InlineCountQueryOption",
          "readOnly": true
        },
        "validator": {
          "$ref": "#/definitions/ODataQueryValidator"
        }
      },
      "xml": {
        "name": "ODataQueryOptions`1"
      }
    },
    "UserDefinedFunctionCreate": {
      "required": [
        "spaceId",
        "name"
      ],
      "type": "object",
      "properties": {
        "spaceId": {
          "format": "uuid",
          "description": "Parent space Id. A UDF is available to all sensors within the specified space topology that match one of its linked matchers",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "name": {
          "description": "Name must be unique for the given space hierarchy. Can only contain alphanumeric or underscore characters.",
          "maxLength": 50,
          "minLength": 3,
          "type": "string"
        },
        "friendlyName": {
          "description": "Optional friendly name",
          "maxLength": 64,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "description": "Optional description",
          "maxLength": 4000,
          "minLength": 0,
          "type": "string"
        },
        "disabled": {
          "description": "If disabled, the UDF will not be considered for execution",
          "type": "boolean"
        },
        "matchers": {
          "description": "Linked matchers",
          "type": "array",
          "items": {
            "format": "uuid",
            "type": "string",
            "example": "00000000-0000-0000-0000-000000000000"
          }
        }
      },
      "xml": {
        "name": "UserDefinedFunctionCreate"
      }
    },
    "UserDefinedFunctionUpdate": {
      "type": "object",
      "properties": {
        "spaceId": {
          "format": "uuid",
          "description": "Parent space Id. A UDF is available to all sensors within the specified space topology that match one of its linked matchers",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "name": {
          "description": "Name must be unique for the given space hierarchy. Can only contain alphanumeric or underscore characters.",
          "maxLength": 50,
          "minLength": 3,
          "type": "string"
        },
        "friendlyName": {
          "description": "Optional friendly name",
          "maxLength": 64,
          "minLength": 0,
          "type": "string"
        },
        "description": {
          "description": "Optional description",
          "maxLength": 4000,
          "minLength": 0,
          "type": "string"
        },
        "disabled": {
          "description": "If disabled, the UDF will not be considered for execution",
          "type": "boolean"
        },
        "matchers": {
          "description": "Linked matchers",
          "type": "array",
          "items": {
            "format": "uuid",
            "type": "string",
            "example": "00000000-0000-0000-0000-000000000000"
          }
        }
      },
      "xml": {
        "name": "UserDefinedFunctionUpdate"
      }
    },
    "UserCreateWithSpace": {
      "required": [
        "spaceId",
        "upn"
      ],
      "type": "object",
      "properties": {
        "spaceId": {
          "format": "uuid",
          "description": "Parent space Id",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "upn": {
          "description": "User Principal Name, e.g. user@domain",
          "maxLength": 50,
          "minLength": 5,
          "type": "string"
        },
        "location": {
          "$ref": "#/definitions/Location"
        },
        "firstName": {
          "description": "First name",
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "lastName": {
          "description": "Last Name",
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "managerName": {
          "description": "Manager name",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "metadata": {
          "description": "User metadata such as skills, interests, etc.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExtendedPropertyCreate"
          },
          "xml": {
            "name": "ExtendedPropertyCreate",
            "wrapped": true
          }
        }
      },
      "xml": {
        "name": "UserCreateWithSpace"
      }
    },
    "UserUpdate": {
      "type": "object",
      "properties": {
        "spaceId": {
          "format": "uuid",
          "description": "Parent space Id",
          "type": "string",
          "example": "00000000-0000-0000-0000-000000000000"
        },
        "upn": {
          "description": "User Principal Name, e.g. user@domain",
          "maxLength": 50,
          "minLength": 5,
          "type": "string"
        },
        "location": {
          "$ref": "#/definitions/Location"
        },
        "firstName": {
          "description": "First name",
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "lastName": {
          "description": "Last Name",
          "maxLength": 50,
          "minLength": 0,
          "type": "string"
        },
        "managerName": {
          "description": "Manager name",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "metadata": {
          "description": "User metadata such as skills, interests, etc.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExtendedPropertyCreate"
          },
          "xml": {
            "name": "ExtendedPropertyCreate",
            "wrapped": true
          }
        }
      },
      "xml": {
        "name": "UserUpdate"
      }
    },
    "ODataQueryOptions[UserBlobMetadata]": {
      "type": "object",
      "properties": {
        "ifMatch": {
          "type": "object",
          "readOnly": true
        },
        "ifNoneMatch": {
          "type": "object",
          "readOnly": true
        },
        "context": {
          "$ref": "#/definitions/ODataQueryContext",
          "readOnly": true
        },
        "request": {
          "type": "object",
          "readOnly": true
        },
        "rawValues": {
          "$ref": "#/definitions/ODataRawQueryOptions",
          "readOnly": true
        },
        "selectExpand": {
          "$ref": "#/definitions/SelectExpandQueryOption",
          "readOnly": true
        },
        "filter": {
          "$ref": "#/definitions/FilterQueryOption",
          "readOnly": true
        },
        "orderBy": {
          "$ref": "#/definitions/OrderByQueryOption",
          "readOnly": true
        },
        "skip": {
          "$ref": "#/definitions/SkipQueryOption",
          "readOnly": true
        },
        "top": {
          "$ref": "#/definitions/TopQueryOption",
          "readOnly": true
        },
        "inlineCount": {
          "$ref": "#/definitions/InlineCountQueryOption",
          "readOnly": true
        },
        "validator": {
          "$ref": "#/definitions/ODataQueryValidator"
        }
      },
      "xml": {
        "name": "ODataQueryOptions`1"
      }
    }
  },
  "securityDefinitions": {
    "oauth2": {
      "type": "oauth2",
      "description": "OAuth2 Grant",
      "flow": "application",
      "tokenUrl": "https://login.windows.net/common/oauth2/token",
      "scopes": {}
    }
  }
}