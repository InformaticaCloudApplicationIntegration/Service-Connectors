{
  "swagger": "2.0",
  "info": {
    "version": "1.0",
    "title": "SCIM",
    "description": "TODO: Add Description",
    "contact": {}
  },
  "host": "api.getgo.com",
  "basePath": "/identity/v1",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/users": {
      "get": {
        "description": "Without a filter, all users in a user domain are returned. The filter parameter must be a properly formed SCIM filter using either the operator eq (equals) or the operator sw (starts with). The filter works for userName, displayName, name.givenName, and name.familyName attributes. For example, /Users?filter=name.familyName%20eq%20%%22Smith%22",
        "summary": "Users",
        "tags": [
          "Users"
        ],
        "operationId": "UsersGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      },
      "post": {
        "summary": "User",
        "tags": [
          "Users"
        ],
        "operationId": "UsersPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/UserRequest"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      },
      "patch": {
        "summary": "Me (partial)",
        "tags": [
          "Users"
        ],
        "operationId": "UsersPatch",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/Me(partial)Request"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      },
      "put": {
        "summary": "Me (partial) copy",
        "tags": [
          "Users"
        ],
        "operationId": "UsersPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/Me(partial)copyRequest"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      }
    },
    "/users/{userKey}": {
      "get": {
        "description": "Without a filter, all users in a user domain are returned. The filter parameter must be a properly formed SCIM filter using either the operator eq (equals) or the operator sw (starts with). The filter works for userName, displayName, name.givenName, and name.familyName attributes. For example, /Users?filter=name.familyName%20eq%20%%22Smith%22",
        "summary": "User",
        "tags": [
          "Users"
        ],
        "operationId": "UsersByUserKeyGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      },
      "delete": {
        "summary": "User",
        "tags": [
          "Users"
        ],
        "operationId": "UsersByUserKeyDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      },
      "patch": {
        "summary": "User (partial)",
        "tags": [
          "Users"
        ],
        "operationId": "UsersByUserKeyPatch",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/User(partial)Request"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      },
      "put": {
        "summary": "User",
        "tags": [
          "Users"
        ],
        "operationId": "UsersByUserKeyPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/UserRequest"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "userKey",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      }
    },
    "/groups": {
      "get": {
        "description": "Without a filter, all users in a user domain are returned. The filter parameter must be a properly formed SCIM filter using either the operator eq (equals) or the operator sw (starts with). The filter works for userName, displayName, name.givenName, and name.familyName attributes. For example, /Users?filter=name.familyName%20eq%20%%22Smith%22",
        "summary": "Groups",
        "tags": [
          "Groups"
        ],
        "operationId": "GroupsGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      },
      "post": {
        "summary": "Group",
        "tags": [
          "Groups"
        ],
        "operationId": "GroupsPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/GroupRequest"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      }
    },
    "/groups/{groupKey}": {
      "get": {
        "description": "Without a filter, all users in a user domain are returned. The filter parameter must be a properly formed SCIM filter using either the operator eq (equals) or the operator sw (starts with). The filter works for userName, displayName, name.givenName, and name.familyName attributes. For example, /Users?filter=name.familyName%20eq%20%%22Smith%22",
        "summary": "Group",
        "tags": [
          "Groups"
        ],
        "operationId": "GroupsByGroupKeyGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "groupKey",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      },
      "delete": {
        "summary": "Group",
        "tags": [
          "Groups"
        ],
        "operationId": "GroupsByGroupKeyDelete",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "groupKey",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      },
      "patch": {
        "summary": "Group (partial)",
        "tags": [
          "Groups"
        ],
        "operationId": "GroupsByGroupKeyPatch",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/Group(partial)Request"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "groupKey",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      },
      "put": {
        "summary": "Group",
        "tags": [
          "Groups"
        ],
        "operationId": "GroupsByGroupKeyPut",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/GroupRequest"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "groupKey",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      }
    },
    "/schemas/users": {
      "get": {
        "description": "Without a filter, all users in a user domain are returned. The filter parameter must be a properly formed SCIM filter using either the operator eq (equals) or the operator sw (starts with). The filter works for userName, displayName, name.givenName, and name.familyName attributes. For example, /Users?filter=name.familyName%20eq%20%%22Smith%22",
        "summary": "Schemas",
        "tags": [
          "Schemas"
        ],
        "operationId": "SchemasUsersGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      }
    },
    "/serviceProviderConfigs": {
      "get": {
        "description": "Without a filter, all users in a user domain are returned. The filter parameter must be a properly formed SCIM filter using either the operator eq (equals) or the operator sw (starts with). The filter works for userName, displayName, name.givenName, and name.familyName attributes. For example, /Users?filter=name.familyName%20eq%20%%22Smith%22",
        "summary": "Service provider configs",
        "tags": [
          "Schemas"
        ],
        "operationId": "ServiceProviderConfigsGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      }
    }
  },
  "definitions": {
    "UserRequest": {
      "title": "UserRequest",
      "example": {
        "name": {
          "familyName": "string",
          "givenName": "string"
        },
        "displayName": "string",
        "locale": "string",
        "timezone": "string",
        "userName": "string",
        "password": "string"
      },
      "type": "object",
      "properties": {
        "name": {
          "$ref": "#/definitions/Name"
        },
        "displayName": {
          "type": "string"
        },
        "locale": {
          "type": "string"
        },
        "timezone": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "displayName",
        "locale",
        "timezone",
        "userName",
        "password"
      ]
    },
    "Name": {
      "title": "Name",
      "type": "object",
      "properties": {
        "familyName": {
          "type": "string"
        },
        "givenName": {
          "type": "string"
        }
      },
      "required": [
        "familyName",
        "givenName"
      ]
    },
    "User(partial)Request": {
      "title": "User(partial)Request",
      "example": {
        "name": {
          "familyName": "string",
          "givenName": "string"
        },
        "displayName": "string",
        "locale": "string",
        "timezone": "string",
        "userName": "string",
        "password": "string"
      },
      "type": "object",
      "properties": {
        "name": {
          "$ref": "#/definitions/Name"
        },
        "displayName": {
          "type": "string"
        },
        "locale": {
          "type": "string"
        },
        "timezone": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "displayName",
        "locale",
        "timezone",
        "userName",
        "password"
      ]
    },
    "Me(partial)Request": {
      "title": "Me(partial)Request",
      "example": {
        "name": {
          "familyName": "string",
          "givenName": "string"
        },
        "displayName": "string",
        "locale": "string",
        "timezone": "string",
        "userName": "string",
        "password": "string"
      },
      "type": "object",
      "properties": {
        "name": {
          "$ref": "#/definitions/Name"
        },
        "displayName": {
          "type": "string"
        },
        "locale": {
          "type": "string"
        },
        "timezone": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "displayName",
        "locale",
        "timezone",
        "userName",
        "password"
      ]
    },
    "Me(partial)copyRequest": {
      "title": "Me(partial)copyRequest",
      "example": {
        "name": {
          "familyName": "string",
          "givenName": "string"
        },
        "displayName": "string",
        "locale": "string",
        "timezone": "string",
        "userName": "string",
        "password": "string"
      },
      "type": "object",
      "properties": {
        "name": {
          "$ref": "#/definitions/Name"
        },
        "displayName": {
          "type": "string"
        },
        "locale": {
          "type": "string"
        },
        "timezone": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "displayName",
        "locale",
        "timezone",
        "userName",
        "password"
      ]
    },
    "GroupRequest": {
      "title": "GroupRequest",
      "example": {
        "displayName": "string",
        "members": [
          {
            "type": "group",
            "value": "string"
          }
        ]
      },
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string"
        },
        "members": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Member"
          }
        }
      },
      "required": [
        "displayName",
        "members"
      ]
    },
    "Member": {
      "title": "Member",
      "type": "object",
      "properties": {
        "type": {
          "example": "group",
          "type": "string"
        },
        "value": {
          "example": "string",
          "type": "string"
        }
      },
      "required": [
        "type",
        "value"
      ]
    },
    "Group(partial)Request": {
      "title": "Group(partial)Request",
      "example": {
        "displayName": "string",
        "members": [
          {
            "type": "group",
            "value": "string"
          }
        ]
      },
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string"
        },
        "members": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Member"
          }
        }
      },
      "required": [
        "displayName",
        "members"
      ]
    }
  },
  "tags": [
    {
      "name": "Users",
      "description": ""
    },
    {
      "name": "Groups",
      "description": ""
    },
    {
      "name": "Schemas",
      "description": ""
    }
  ]
}