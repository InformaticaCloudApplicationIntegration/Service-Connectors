{
  "swagger": "2.0",
  "info": {
    "version": "v2",
    "title": "Stackdriver Trace API",
    "description": "Sends application trace data to Stackdriver Trace for viewing. Trace data is collected for all App Engine applications by default. Trace data from other applications can be provided using this API. This library is used to interact with the Trace API directly. If you are looking to instrument your application for Stackdriver Trace, we recommend using OpenCensus.\n",
    "contact": {}
  },
  "host": "cloudtrace.googleapis.com",
  "basePath": "/",
  "securityDefinitions": {
    "auth": {
      "type": "oauth2",
      "flow": "implicit",
      "authorizationUrl": "https://cloudtrace.googleapis.com/",
      "scopes": {
        "https://www.googleapis.com/auth/trace.append": "Write Trace data for a project or application",
        "https://www.googleapis.com/auth/cloud-platform": "View and manage your data across Google Cloud Platform services"
      }
    }
  },
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v2/{+name}": {
      "post": {
        "description": "Creates a new span.",
        "summary": "CreateSpanV2ByName",
        "tags": [
          "spans"
        ],
        "operationId": "V2ByNamePost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/Span"
            }
          },
          {
            "name": "key",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          {
            "name": "access_token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "OAuth access token."
          },
          {
            "name": "upload_protocol",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          },
          {
            "name": "prettyPrint",
            "in": "query",
            "required": false,
            "default": true,
            "type": "boolean",
            "description": "Returns response with indentations and line breaks."
          },
          {
            "name": "quotaUser",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          },
          {
            "name": "uploadType",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          {
            "name": "$.xgafv",
            "in": "query",
            "required": false,
            "default": "1",
            "type": "string",
            "description": "V1 error format. (Acceptable values are: \"1\", \"2\")"
          },
          {
            "name": "oauth_token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          {
            "name": "callback",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "JSONP"
          },
          {
            "name": "alt",
            "in": "query",
            "required": false,
            "default": "json",
            "type": "string",
            "description": "Data format for response. (Acceptable values are: \"json\", \"media\", \"proto\")"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Span"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "auth": [
              "https://www.googleapis.com/auth/cloud-platform",
              "https://www.googleapis.com/auth/trace.append"
            ]
          }
        ]
      }
    },
    "/v2/{+name}/traces:batchWrite": {
      "post": {
        "description": "Sends new spans to new or existing traces. You cannot update\nexisting spans.",
        "summary": "BatchWriteV2TracesBatchWriteByName",
        "tags": [
          "traces"
        ],
        "operationId": "V2TracesBatchWriteByNamePost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/BatchWriteSpansRequest"
            }
          },
          {
            "name": "key",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          {
            "name": "access_token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "OAuth access token."
          },
          {
            "name": "upload_protocol",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          },
          {
            "name": "prettyPrint",
            "in": "query",
            "required": false,
            "default": true,
            "type": "boolean",
            "description": "Returns response with indentations and line breaks."
          },
          {
            "name": "quotaUser",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          },
          {
            "name": "uploadType",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          {
            "name": "$.xgafv",
            "in": "query",
            "required": false,
            "default": "1",
            "type": "string",
            "description": "V1 error format. (Acceptable values are: \"1\", \"2\")"
          },
          {
            "name": "oauth_token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          {
            "name": "callback",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "JSONP"
          },
          {
            "name": "alt",
            "in": "query",
            "required": false,
            "default": "json",
            "type": "string",
            "description": "Data format for response. (Acceptable values are: \"json\", \"media\", \"proto\")"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "auth": [
              "https://www.googleapis.com/auth/cloud-platform",
              "https://www.googleapis.com/auth/trace.append"
            ]
          }
        ]
      }
    }
  },
  "definitions": {
    "Links": {
      "title": "Links",
      "description": "A collection of links, which are references from this span to a span\nin the same or different trace.",
      "type": "object",
      "properties": {
        "droppedLinksCount": {
          "description": "The number of dropped links after the maximum size was enforced. If\nthis value is 0, then no links were dropped.",
          "type": "integer",
          "format": "int32"
        },
        "link": {
          "description": "A collection of links.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "TruncatableString": {
      "title": "TruncatableString",
      "description": "Represents a string that might be shortened to a specified length.",
      "type": "object",
      "properties": {
        "truncatedByteCount": {
          "description": "The number of bytes removed from the original string. If this\nvalue is 0, then the string was not shortened.",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "description": "The shortened string. For example, if the original string is 500\nbytes long and the limit of the string is 128 bytes, then\n`value` contains the first 128 bytes of the 500-byte string.\n\nTruncation always happens on a UTF8 character boundary. If there\nare multi-byte characters in the string, then the length of the\nshortened string might be less than the size limit.",
          "type": "string"
        }
      }
    },
    "StackTrace": {
      "title": "StackTrace",
      "description": "A call stack appearing in a trace.",
      "type": "object",
      "properties": {
        "stackFrames": {
          "$ref": "#/definitions/StackFrames"
        },
        "stackTraceHashId": {
          "description": "The hash ID is used to conserve network bandwidth for duplicate\nstack traces within a single trace.\n\nOften multiple spans will have identical stack traces.\nThe first occurrence of a stack trace should contain both the\n`stackFrame` content and a value in `stackTraceHashId`.\n\nSubsequent spans within the same request can refer\nto that stack trace by only setting `stackTraceHashId`.",
          "type": "string"
        }
      }
    },
    "TimeEvent": {
      "title": "TimeEvent",
      "description": "A time-stamped annotation or message event in the Span.",
      "type": "object",
      "properties": {
        "messageEvent": {
          "$ref": "#/definitions/MessageEvent"
        },
        "time": {
          "description": "The timestamp indicating the time the event occurred.",
          "type": "string"
        },
        "annotation": {
          "$ref": "#/definitions/Annotation"
        }
      }
    },
    "MessageEvent": {
      "title": "MessageEvent",
      "description": "An event describing a message sent/received between Spans.",
      "type": "object",
      "properties": {
        "uncompressedSizeBytes": {
          "description": "The number of uncompressed bytes sent or received.",
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/Type1"
        },
        "id": {
          "description": "An identifier for the MessageEvent's message that can be used to match\nSENT and RECEIVED MessageEvents. It is recommended to be unique within\na Span.",
          "type": "string"
        },
        "compressedSizeBytes": {
          "description": "The number of compressed bytes sent or received. If missing assumed to\nbe the same size as uncompressed.",
          "type": "string"
        }
      }
    },
    "StackFrame": {
      "title": "StackFrame",
      "description": "Represents a single stack frame in a stack trace.",
      "type": "object",
      "properties": {
        "columnNumber": {
          "description": "The column number where the function call appears, if available.\nThis is important in JavaScript because of its anonymous functions.",
          "type": "string"
        },
        "fileName": {
          "$ref": "#/definitions/TruncatableString"
        },
        "sourceVersion": {
          "$ref": "#/definitions/TruncatableString"
        },
        "originalFunctionName": {
          "$ref": "#/definitions/TruncatableString"
        },
        "functionName": {
          "$ref": "#/definitions/TruncatableString"
        },
        "lineNumber": {
          "description": "The line number in `file_name` where the function call appears.",
          "type": "string"
        },
        "loadModule": {
          "$ref": "#/definitions/Module"
        }
      }
    },
    "Link": {
      "title": "Link",
      "description": "A pointer from the current span to another span in the same trace or in a\ndifferent trace. For example, this can be used in batching operations,\nwhere a single batch handler processes multiple requests from different\ntraces or when the handler receives a request from a different project.",
      "type": "object",
      "properties": {
        "traceId": {
          "description": "The [TRACE_ID] for a trace within a project.",
          "type": "string"
        },
        "attributes": {
          "description": "A set of attributes on the link. You have have up to  32 attributes per\nlink.",
          "type": "object"
        },
        "spanId": {
          "description": "The [SPAN_ID] for a span within a trace.",
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/Type"
        }
      }
    },
    "Annotation": {
      "title": "Annotation",
      "description": "Text annotation with a set of attributes.",
      "type": "object",
      "properties": {
        "description": {
          "description": "A user-supplied message describing the event. The maximum length for\nthe description is 256 bytes.",
          "type": "object"
        },
        "attributes": {
          "description": "A set of attributes on the annotation. You can have up to 4 attributes\nper Annotation.",
          "type": "object"
        }
      }
    },
    "StackFrames": {
      "title": "StackFrames",
      "description": "Stack frames in this stack trace. A maximum of 128 frames are allowed.",
      "type": "object",
      "properties": {
        "droppedFramesCount": {
          "description": "The number of stack frames that were dropped because there\nwere too many stack frames.\nIf this value is 0, then no stack frames were dropped.",
          "type": "integer",
          "format": "int32"
        },
        "frame": {
          "description": "Stack frames in this call stack.",
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      }
    },
    "TimeEvents": {
      "title": "TimeEvents",
      "description": "A collection of `TimeEvent`s. A `TimeEvent` is a time-stamped annotation\non the span, consisting of either user-supplied key:value pairs, or\ndetails of a message sent/received between Spans.",
      "type": "object",
      "properties": {
        "droppedAnnotationsCount": {
          "description": "The number of dropped annotations in all the included time events.\nIf the value is 0, then no annotations were dropped.",
          "type": "integer",
          "format": "int32"
        },
        "droppedMessageEventsCount": {
          "description": "The number of dropped message events in all the included time events.\nIf the value is 0, then no message events were dropped.",
          "type": "integer",
          "format": "int32"
        },
        "timeEvent": {
          "description": "A collection of `TimeEvent`s.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TimeEvent"
          }
        }
      }
    },
    "Module": {
      "title": "Module",
      "description": "The binary module from where the code was loaded.",
      "type": "object",
      "properties": {
        "module": {
          "description": "For example: main binary, kernel modules, and dynamic libraries\nsuch as libc.so, sharedlib.so (up to 256 bytes).",
          "type": "object"
        },
        "buildId": {
          "description": "A unique identifier for the module, usually a hash of its\ncontents (up to 128 bytes).",
          "type": "object"
        }
      }
    },
    "Status": {
      "title": "Status",
      "description": "The `Status` type defines a logical error model that is suitable for different\nprogramming environments, including REST APIs and RPC APIs. It is used by\n[gRPC](https://github.com/grpc). The error model is designed to be:\n\n- Simple to use and understand for most users\n- Flexible enough to meet unexpected needs\n\n# Overview\n\nThe `Status` message contains three pieces of data: error code, error message,\nand error details. The error code should be an enum value of\ngoogle.rpc.Code, but it may accept additional error codes if needed.  The\nerror message should be a developer-facing English message that helps\ndevelopers *understand* and *resolve* the error. If a localized user-facing\nerror message is needed, put the localized message in the error details or\nlocalize it in the client. The optional error details may contain arbitrary\ninformation about the error. There is a predefined set of error detail types\nin the package `google.rpc` that can be used for common error conditions.\n\n# Language mapping\n\nThe `Status` message is the logical representation of the error model, but it\nis not necessarily the actual wire format. When the `Status` message is\nexposed in different client libraries and different wire protocols, it can be\nmapped differently. For example, it will likely be mapped to some exceptions\nin Java, but more likely mapped to some error codes in C.\n\n# Other uses\n\nThe error model and the `Status` message can be used in a variety of\nenvironments, either with or without APIs, to provide a\nconsistent developer experience across different environments.\n\nExample uses of this error model include:\n\n- Partial errors. If a service needs to return partial errors to the client,\n    it may embed the `Status` in the normal response to indicate the partial\n    errors.\n\n- Workflow errors. A typical workflow has multiple steps. Each step may\n    have a `Status` message for error reporting.\n\n- Batch operations. If a client uses batch request and batch response, the\n    `Status` message should be used directly inside batch response, one for\n    each error sub-response.\n\n- Asynchronous operations. If an API call embeds asynchronous operation\n    results in its response, the status of those operations should be\n    represented directly using the `Status` message.\n\n- Logging. If some API errors are stored in logs, the message `Status` could\n    be used directly after any stripping needed for security/privacy reasons.",
      "type": "object",
      "properties": {
        "message": {
          "description": "A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\ngoogle.rpc.Status.details field, or localized by the client.",
          "type": "string"
        },
        "details": {
          "description": "A list of messages that carry the error details.  There is a common set of\nmessage types for APIs to use.",
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "code": {
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "BatchWriteSpansRequest": {
      "title": "BatchWriteSpansRequest",
      "description": "The request message for the `BatchWriteSpans` method.",
      "type": "object",
      "properties": {
        "spans": {
          "description": "A list of new spans. The span names must not match existing\nspans, or the results are undefined.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Span"
          }
        }
      }
    },
    "Span": {
      "title": "Span",
      "description": "A span represents a single operation within a trace. Spans can be\nnested to form a trace tree. Often, a trace contains a root span\nthat describes the end-to-end latency, and one or more subspans for\nits sub-operations. A trace can also contain multiple root spans,\nor none at all. Spans do not need to be contiguous&mdash;there may be\ngaps or overlaps between spans in a trace.",
      "type": "object",
      "properties": {
        "startTime": {
          "description": "The start time of the span. On the client side, this is the time kept by\nthe local machine where the span execution starts. On the server side, this\nis the time when the server's application handler starts running.",
          "type": "string"
        },
        "displayName": {
          "description": "A description of the span's operation (up to 128 bytes).\nStackdriver Trace displays the description in the\nGoogle Cloud Platform Console.\nFor example, the display name can be a qualified method name or a file name\nand a line number where the operation is called. A best practice is to use\nthe same display name within an application and at the same call point.\nThis makes it easier to correlate spans in different traces.",
          "type": "object"
        },
        "timeEvents": {
          "description": "A set of time events. You can have up to 32 annotations and 128 message\nevents per span.",
          "type": "object"
        },
        "links": {
          "description": "Links associated with the span. You can have up to 128 links per Span.",
          "type": "object"
        },
        "attributes": {
          "description": "A set of attributes on the span. You can have up to 32 attributes per\nspan.",
          "type": "object"
        },
        "spanId": {
          "description": "The [SPAN_ID] portion of the span's resource name.",
          "type": "string"
        },
        "childSpanCount": {
          "description": "An optional number of child spans that were generated while this span\nwas active. If set, allows implementation to detect missing child spans.",
          "type": "integer",
          "format": "int32"
        },
        "sameProcessAsParentSpan": {
          "description": "(Optional) Set this parameter to indicate whether this span is in\nthe same process as its parent. If you do not set this parameter,\nStackdriver Trace is unable to take advantage of this helpful\ninformation.",
          "type": "boolean"
        },
        "status": {
          "description": "An optional final status for this span.",
          "type": "object"
        },
        "name": {
          "description": "The resource name of the span in the following format:\n\n    projects/[PROJECT_ID]/traces/[TRACE_ID]/spans/SPAN_ID is a unique identifier for a trace within a project;\nit is a 32-character hexadecimal encoding of a 16-byte array.\n\n[SPAN_ID] is a unique identifier for a span within a trace; it\nis a 16-character hexadecimal encoding of an 8-byte array.",
          "type": "string"
        },
        "stackTrace": {
          "description": "Stack trace captured at the start of the span.",
          "type": "object"
        },
        "parentSpanId": {
          "description": "The [SPAN_ID] of this span's parent span. If this is a root span,\nthen this field must be empty.",
          "type": "string"
        },
        "endTime": {
          "description": "The end time of the span. On the client side, this is the time kept by\nthe local machine where the span execution ends. On the server side, this\nis the time when the server application handler stops running.",
          "type": "string"
        }
      }
    },
    "AttributeValue": {
      "title": "AttributeValue",
      "description": "The allowed types for [VALUE] in a `[KEY]:[VALUE]` attribute.",
      "type": "object",
      "properties": {
        "intValue": {
          "description": "A 64-bit signed integer.",
          "type": "string"
        },
        "stringValue": {
          "$ref": "#/definitions/TruncatableString"
        },
        "boolValue": {
          "description": "A Boolean value represented by `true` or `false`.",
          "type": "boolean"
        }
      }
    },
    "Attributes": {
      "title": "Attributes",
      "description": "A set of attributes, each in the format `[KEY]:[VALUE]`.",
      "type": "object",
      "properties": {
        "attributeMap": {
          "description": "The set of attributes. Each attribute's key can be up to 128 bytes\nlong. The value can be a string up to 256 bytes, a signed 64-bit integer,\nor the Boolean values `true` and `false`. For example:\n\n    \"/instance_id\": \"my-instance\"\n    \"/http/user_agent\": \"\"\n    \"/http/request_bytes\": 300\n    \"abc.com/myattribute\": true",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/AttributeValue"
          }
        },
        "droppedAttributesCount": {
          "description": "The number of attributes that were discarded. Attributes can be discarded\nbecause their keys are too long or because there are too many attributes.\nIf this value is 0 then all attributes are valid.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Type": {
      "title": "Type",
      "description": "The relationship of the current span relative to the linked span.",
      "example": "TYPE_UNSPECIFIED",
      "type": "string",
      "enum": [
        "TYPE_UNSPECIFIED",
        "CHILD_LINKED_SPAN",
        "PARENT_LINKED_SPAN"
      ]
    },
    "Type1": {
      "title": "Type1",
      "description": "Type of MessageEvent. Indicates whether the message was sent or\nreceived.",
      "example": "TYPE_UNSPECIFIED",
      "type": "string",
      "enum": [
        "TYPE_UNSPECIFIED",
        "SENT",
        "RECEIVED"
      ]
    }
  },
  "tags": [
    {
      "name": "spans",
      "description": ""
    },
    {
      "name": "traces",
      "description": ""
    }
  ]
}