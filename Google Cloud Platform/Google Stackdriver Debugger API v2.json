{
  "swagger": "2.0",
  "info": {
    "version": "v2",
    "title": "Stackdriver Debugger API",
    "description": "Examines the call stack and variables of a running application without stopping or slowing it down.\n",
    "contact": {}
  },
  "host": "clouddebugger.googleapis.com",
  "basePath": "/",
  "securityDefinitions": {
    "auth": {
      "type": "oauth2",
      "flow": "implicit",
      "authorizationUrl": "https://clouddebugger.googleapis.com/",
      "scopes": {
        "https://www.googleapis.com/auth/cloud_debugger": "Use Stackdriver Debugger",
        "https://www.googleapis.com/auth/cloud-platform": "View and manage your data across Google Cloud Platform services"
      }
    }
  },
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v2/debugger/debuggees/{debuggeeId}/breakpoints/set": {
      "post": {
        "description": "Sets the breakpoint to the debuggee.",
        "summary": "SetV2DebuggerDebuggeesBreakpointsSet",
        "tags": [
          "breakpoints"
        ],
        "operationId": "V2DebuggerDebuggeesBreakpointsSetByDebuggeeIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "debuggeeId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the debuggee where the breakpoint is to be set."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/Breakpoint"
            }
          },
          {
            "name": "uploadType",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          {
            "name": "$.xgafv",
            "in": "query",
            "required": false,
            "default": "1",
            "type": "string",
            "description": "V1 error format. (Acceptable values are: \"1\", \"2\")"
          },
          {
            "name": "oauth_token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          {
            "name": "callback",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "JSONP"
          },
          {
            "name": "alt",
            "in": "query",
            "required": false,
            "default": "json",
            "type": "string",
            "description": "Data format for response. (Acceptable values are: \"json\", \"media\", \"proto\")"
          },
          {
            "name": "key",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          {
            "name": "access_token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "OAuth access token."
          },
          {
            "name": "upload_protocol",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          },
          {
            "name": "prettyPrint",
            "in": "query",
            "required": false,
            "default": true,
            "type": "boolean",
            "description": "Returns response with indentations and line breaks."
          },
          {
            "name": "quotaUser",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          },
          {
            "name": "clientVersion",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The client version making the call.\nSchema: `domain/type/version` (e.g., `google.com/intellij/v1`)."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SetBreakpointResponse"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "auth": [
              "https://www.googleapis.com/auth/cloud-platform",
              "https://www.googleapis.com/auth/cloud_debugger"
            ]
          }
        ]
      }
    },
    "/v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}": {
      "delete": {
        "description": "Deletes the breakpoint from the debuggee.",
        "summary": "DeleteV2DebuggerDebuggeesBreakpoints",
        "tags": [
          "breakpoints"
        ],
        "operationId": "V2DebuggerDebuggeesBreakpointsByDebuggeeIdAndBreakpointIdDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "breakpointId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the breakpoint to delete."
          },
          {
            "name": "debuggeeId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the debuggee whose breakpoint to delete."
          },
          {
            "name": "uploadType",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          {
            "name": "$.xgafv",
            "in": "query",
            "required": false,
            "default": "1",
            "type": "string",
            "description": "V1 error format. (Acceptable values are: \"1\", \"2\")"
          },
          {
            "name": "oauth_token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          {
            "name": "callback",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "JSONP"
          },
          {
            "name": "alt",
            "in": "query",
            "required": false,
            "default": "json",
            "type": "string",
            "description": "Data format for response. (Acceptable values are: \"json\", \"media\", \"proto\")"
          },
          {
            "name": "key",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          {
            "name": "access_token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "OAuth access token."
          },
          {
            "name": "upload_protocol",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          },
          {
            "name": "prettyPrint",
            "in": "query",
            "required": false,
            "default": true,
            "type": "boolean",
            "description": "Returns response with indentations and line breaks."
          },
          {
            "name": "quotaUser",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          },
          {
            "name": "clientVersion",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The client version making the call.\nSchema: `domain/type/version` (e.g., `google.com/intellij/v1`)."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "auth": [
              "https://www.googleapis.com/auth/cloud-platform",
              "https://www.googleapis.com/auth/cloud_debugger"
            ]
          }
        ]
      },
      "get": {
        "description": "Gets breakpoint information.",
        "summary": "GetV2DebuggerDebuggeesBreakpoints",
        "tags": [
          "breakpoints"
        ],
        "operationId": "V2DebuggerDebuggeesBreakpointsByDebuggeeIdAndBreakpointIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "breakpointId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the breakpoint to get."
          },
          {
            "name": "debuggeeId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the debuggee whose breakpoint to get."
          },
          {
            "name": "uploadType",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          {
            "name": "$.xgafv",
            "in": "query",
            "required": false,
            "default": "1",
            "type": "string",
            "description": "V1 error format. (Acceptable values are: \"1\", \"2\")"
          },
          {
            "name": "oauth_token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          {
            "name": "callback",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "JSONP"
          },
          {
            "name": "alt",
            "in": "query",
            "required": false,
            "default": "json",
            "type": "string",
            "description": "Data format for response. (Acceptable values are: \"json\", \"media\", \"proto\")"
          },
          {
            "name": "key",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          {
            "name": "access_token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "OAuth access token."
          },
          {
            "name": "upload_protocol",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          },
          {
            "name": "prettyPrint",
            "in": "query",
            "required": false,
            "default": true,
            "type": "boolean",
            "description": "Returns response with indentations and line breaks."
          },
          {
            "name": "quotaUser",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          },
          {
            "name": "clientVersion",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The client version making the call.\nSchema: `domain/type/version` (e.g., `google.com/intellij/v1`)."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/GetBreakpointResponse"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "auth": [
              "https://www.googleapis.com/auth/cloud-platform",
              "https://www.googleapis.com/auth/cloud_debugger"
            ]
          }
        ]
      }
    },
    "/v2/debugger/debuggees/{debuggeeId}/breakpoints": {
      "get": {
        "description": "Lists all breakpoints for the debuggee.",
        "summary": "ListV2DebuggerDebuggeesBreakpoints",
        "tags": [
          "breakpoints"
        ],
        "operationId": "V2DebuggerDebuggeesBreakpointsByDebuggeeIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "debuggeeId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the debuggee whose breakpoints to list."
          },
          {
            "name": "uploadType",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          {
            "name": "$.xgafv",
            "in": "query",
            "required": false,
            "default": "1",
            "type": "string",
            "description": "V1 error format. (Acceptable values are: \"1\", \"2\")"
          },
          {
            "name": "oauth_token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          {
            "name": "callback",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "JSONP"
          },
          {
            "name": "alt",
            "in": "query",
            "required": false,
            "default": "json",
            "type": "string",
            "description": "Data format for response. (Acceptable values are: \"json\", \"media\", \"proto\")"
          },
          {
            "name": "key",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          {
            "name": "access_token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "OAuth access token."
          },
          {
            "name": "upload_protocol",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          },
          {
            "name": "prettyPrint",
            "in": "query",
            "required": false,
            "default": true,
            "type": "boolean",
            "description": "Returns response with indentations and line breaks."
          },
          {
            "name": "quotaUser",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          },
          {
            "name": "stripResults",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "This field is deprecated. The following fields are always stripped out of\nthe result: `stack_frames`, `evaluated_expressions` and `variable_table`."
          },
          {
            "name": "waitToken",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A wait token that, if specified, blocks the call until the breakpoints\nlist has changed, or a server selected timeout has expired.  The value\nshould be set from the last response. The error code\n`google.rpc.Code.ABORTED` (RPC) is returned on wait timeout, which\nshould be called again with the same `wait_token`."
          },
          {
            "name": "action.value",
            "in": "query",
            "required": false,
            "default": "CAPTURE",
            "type": "string",
            "description": "Only breakpoints with the specified action will pass the filter. (Acceptable values are: \"CAPTURE\", \"LOG\")"
          },
          {
            "name": "clientVersion",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The client version making the call.\nSchema: `domain/type/version` (e.g., `google.com/intellij/v1`)."
          },
          {
            "name": "includeAllUsers",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "When set to `true`, the response includes the list of breakpoints set by\nany user. Otherwise, it includes only breakpoints set by the caller."
          },
          {
            "name": "includeInactive",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "When set to `true`, the response includes active and inactive\nbreakpoints. Otherwise, it includes only active breakpoints."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ListBreakpointsResponse"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "auth": [
              "https://www.googleapis.com/auth/cloud-platform",
              "https://www.googleapis.com/auth/cloud_debugger"
            ]
          }
        ]
      }
    },
    "/v2/controller/debuggees/{debuggeeId}/breakpoints": {
      "get": {
        "description": "Returns the list of all active breakpoints for the debuggee.\n\nThe breakpoint specification (`location`, `condition`, and `expressions`\nfields) is semantically immutable, although the field values may\nchange. For example, an agent may update the location line number\nto reflect the actual line where the breakpoint was set, but this\ndoesn't change the breakpoint semantics.\n\nThis means that an agent does not need to check if a breakpoint has changed\nwhen it encounters the same breakpoint on a successive call.\nMoreover, an agent should remember the breakpoints that are completed\nuntil the controller removes them from the active list to avoid\nsetting those breakpoints again.",
        "summary": "ListV2ControllerDebuggeesBreakpoints",
        "tags": [
          "breakpoints"
        ],
        "operationId": "V2ControllerDebuggeesBreakpointsByDebuggeeIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "debuggeeId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifies the debuggee."
          },
          {
            "name": "uploadType",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          {
            "name": "$.xgafv",
            "in": "query",
            "required": false,
            "default": "1",
            "type": "string",
            "description": "V1 error format. (Acceptable values are: \"1\", \"2\")"
          },
          {
            "name": "oauth_token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          {
            "name": "callback",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "JSONP"
          },
          {
            "name": "alt",
            "in": "query",
            "required": false,
            "default": "json",
            "type": "string",
            "description": "Data format for response. (Acceptable values are: \"json\", \"media\", \"proto\")"
          },
          {
            "name": "key",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          {
            "name": "access_token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "OAuth access token."
          },
          {
            "name": "upload_protocol",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          },
          {
            "name": "prettyPrint",
            "in": "query",
            "required": false,
            "default": true,
            "type": "boolean",
            "description": "Returns response with indentations and line breaks."
          },
          {
            "name": "quotaUser",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          },
          {
            "name": "successOnTimeout",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "If set to `true` (recommended), returns `google.rpc.Code.OK` status and\nsets the `wait_expired` response field to `true` when the server-selected\ntimeout has expired.\n\nIf set to `false` (deprecated), returns `google.rpc.Code.ABORTED` status\nwhen the server-selected timeout has expired."
          },
          {
            "name": "waitToken",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A token that, if specified, blocks the method call until the list\nof active breakpoints has changed, or a server-selected timeout has\nexpired. The value should be set from the `next_wait_token` field in\nthe last response. The initial value should be set to `\"init\"`."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ListActiveBreakpointsResponse"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "auth": [
              "https://www.googleapis.com/auth/cloud-platform",
              "https://www.googleapis.com/auth/cloud_debugger"
            ]
          }
        ]
      }
    },
    "/v2/controller/debuggees/{debuggeeId}/breakpoints/{id}": {
      "put": {
        "description": "Updates the breakpoint state or mutable fields.\nThe entire Breakpoint message must be sent back to the controller service.\n\nUpdates to active breakpoint fields are only allowed if the new value\ndoes not change the breakpoint specification. Updates to the `location`,\n`condition` and `expressions` fields should not alter the breakpoint\nsemantics. These may only make changes such as canonicalizing a value\nor snapping the location to the correct line of code.",
        "summary": "UpdateV2ControllerDebuggeesBreakpoints",
        "tags": [
          "breakpoints"
        ],
        "operationId": "V2ControllerDebuggeesBreakpointsByDebuggeeIdAndIdPut",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "debuggeeId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Identifies the debuggee being debugged."
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Breakpoint identifier, unique in the scope of the debuggee."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/UpdateActiveBreakpointRequest"
            }
          },
          {
            "name": "uploadType",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          {
            "name": "$.xgafv",
            "in": "query",
            "required": false,
            "default": "1",
            "type": "string",
            "description": "V1 error format. (Acceptable values are: \"1\", \"2\")"
          },
          {
            "name": "oauth_token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          {
            "name": "callback",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "JSONP"
          },
          {
            "name": "alt",
            "in": "query",
            "required": false,
            "default": "json",
            "type": "string",
            "description": "Data format for response. (Acceptable values are: \"json\", \"media\", \"proto\")"
          },
          {
            "name": "key",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          {
            "name": "access_token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "OAuth access token."
          },
          {
            "name": "upload_protocol",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          },
          {
            "name": "prettyPrint",
            "in": "query",
            "required": false,
            "default": true,
            "type": "boolean",
            "description": "Returns response with indentations and line breaks."
          },
          {
            "name": "quotaUser",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "auth": [
              "https://www.googleapis.com/auth/cloud-platform",
              "https://www.googleapis.com/auth/cloud_debugger"
            ]
          }
        ]
      }
    },
    "/v2/debugger/debuggees": {
      "get": {
        "description": "Lists all the debuggees that the user has access to.",
        "summary": "ListV2DebuggerDebuggees",
        "tags": [
          "debuggees"
        ],
        "operationId": "V2DebuggerDebuggeesGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "uploadType",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          {
            "name": "$.xgafv",
            "in": "query",
            "required": false,
            "default": "1",
            "type": "string",
            "description": "V1 error format. (Acceptable values are: \"1\", \"2\")"
          },
          {
            "name": "oauth_token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          {
            "name": "callback",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "JSONP"
          },
          {
            "name": "alt",
            "in": "query",
            "required": false,
            "default": "json",
            "type": "string",
            "description": "Data format for response. (Acceptable values are: \"json\", \"media\", \"proto\")"
          },
          {
            "name": "key",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          {
            "name": "access_token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "OAuth access token."
          },
          {
            "name": "upload_protocol",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          },
          {
            "name": "prettyPrint",
            "in": "query",
            "required": false,
            "default": true,
            "type": "boolean",
            "description": "Returns response with indentations and line breaks."
          },
          {
            "name": "quotaUser",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          },
          {
            "name": "clientVersion",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The client version making the call.\nSchema: `domain/type/version` (e.g., `google.com/intellij/v1`)."
          },
          {
            "name": "includeInactive",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "When set to `true`, the result includes all debuggees. Otherwise, the\nresult includes only debuggees that are active."
          },
          {
            "name": "project",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Project number of a Google Cloud project whose debuggees to list."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ListDebuggeesResponse"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "auth": [
              "https://www.googleapis.com/auth/cloud-platform",
              "https://www.googleapis.com/auth/cloud_debugger"
            ]
          }
        ]
      }
    },
    "/v2/controller/debuggees/register": {
      "post": {
        "description": "Registers the debuggee with the controller service.\n\nAll agents attached to the same application must call this method with\nexactly the same request content to get back the same stable `debuggee_id`.\nAgents should call this method again whenever `google.rpc.Code.NOT_FOUND`\nis returned from any controller method.\n\nThis protocol allows the controller service to disable debuggees, recover\nfrom data loss, or change the `debuggee_id` format. Agents must handle\n`debuggee_id` value changing upon re-registration.",
        "summary": "RegisterV2ControllerDebuggeesRegister",
        "tags": [
          "debuggees"
        ],
        "operationId": "V2ControllerDebuggeesRegisterPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/RegisterDebuggeeRequest"
            }
          },
          {
            "name": "uploadType",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          {
            "name": "$.xgafv",
            "in": "query",
            "required": false,
            "default": "1",
            "type": "string",
            "description": "V1 error format. (Acceptable values are: \"1\", \"2\")"
          },
          {
            "name": "oauth_token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          {
            "name": "callback",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "JSONP"
          },
          {
            "name": "alt",
            "in": "query",
            "required": false,
            "default": "json",
            "type": "string",
            "description": "Data format for response. (Acceptable values are: \"json\", \"media\", \"proto\")"
          },
          {
            "name": "key",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          {
            "name": "access_token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "OAuth access token."
          },
          {
            "name": "upload_protocol",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          },
          {
            "name": "prettyPrint",
            "in": "query",
            "required": false,
            "default": true,
            "type": "boolean",
            "description": "Returns response with indentations and line breaks."
          },
          {
            "name": "quotaUser",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/RegisterDebuggeeResponse"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "auth": [
              "https://www.googleapis.com/auth/cloud-platform",
              "https://www.googleapis.com/auth/cloud_debugger"
            ]
          }
        ]
      }
    }
  },
  "definitions": {
    "UpdateActiveBreakpointRequest": {
      "title": "UpdateActiveBreakpointRequest",
      "description": "Request to update an active breakpoint.",
      "type": "object",
      "properties": {
        "breakpoint": {
          "$ref": "#/definitions/Breakpoint"
        }
      }
    },
    "SetBreakpointResponse": {
      "title": "SetBreakpointResponse",
      "description": "Response for setting a breakpoint.",
      "type": "object",
      "properties": {
        "breakpoint": {
          "$ref": "#/definitions/Breakpoint"
        }
      }
    },
    "SourceContext": {
      "title": "SourceContext",
      "description": "A SourceContext is a reference to a tree of files. A SourceContext together\nwith a path point to a unique revision of a single file or directory.",
      "type": "object",
      "properties": {
        "git": {
          "$ref": "#/definitions/GitSourceContext"
        },
        "gerrit": {
          "$ref": "#/definitions/GerritSourceContext"
        },
        "cloudRepo": {
          "$ref": "#/definitions/CloudRepoSourceContext"
        },
        "cloudWorkspace": {
          "$ref": "#/definitions/CloudWorkspaceSourceContext"
        }
      }
    },
    "CloudRepoSourceContext": {
      "title": "CloudRepoSourceContext",
      "description": "A SourceContext referring to a revision in a cloud repo.",
      "type": "object",
      "properties": {
        "revisionId": {
          "description": "A revision ID.",
          "type": "string"
        },
        "aliasName": {
          "description": "The name of an alias (branch, tag, etc.).",
          "type": "string"
        },
        "repoId": {
          "description": "The ID of the repo.",
          "type": "object"
        },
        "aliasContext": {
          "description": "An alias, which may be a branch or tag.",
          "type": "object"
        }
      }
    },
    "RegisterDebuggeeResponse": {
      "title": "RegisterDebuggeeResponse",
      "description": "Response for registering a debuggee.",
      "type": "object",
      "properties": {
        "debuggee": {
          "$ref": "#/definitions/Debuggee"
        }
      }
    },
    "RegisterDebuggeeRequest": {
      "title": "RegisterDebuggeeRequest",
      "description": "Request to register a debuggee.",
      "type": "object",
      "properties": {
        "debuggee": {
          "$ref": "#/definitions/Debuggee"
        }
      }
    },
    "GetBreakpointResponse": {
      "title": "GetBreakpointResponse",
      "description": "Response for getting breakpoint information.",
      "type": "object",
      "properties": {
        "breakpoint": {
          "$ref": "#/definitions/Breakpoint"
        }
      }
    },
    "StatusMessage": {
      "title": "StatusMessage",
      "description": "Represents a contextual status message.\nThe message can indicate an error or informational status, and refer to\nspecific parts of the containing object.\nFor example, the `Breakpoint.status` field can indicate an error referring\nto the `BREAKPOINT_SOURCE_LOCATION` with the message `Location not found`.",
      "type": "object",
      "properties": {
        "isError": {
          "description": "Distinguishes errors from informational messages.",
          "type": "boolean"
        },
        "description": {
          "$ref": "#/definitions/FormatMessage"
        },
        "refersTo": {
          "$ref": "#/definitions/RefersTo"
        }
      }
    },
    "GitSourceContext": {
      "title": "GitSourceContext",
      "description": "A SourceContext referring to any third party Git repo (e.g. GitHub).",
      "type": "object",
      "properties": {
        "revisionId": {
          "description": "Git commit hash.\nrequired.",
          "type": "string"
        },
        "url": {
          "description": "Git repository URL.",
          "type": "string"
        }
      }
    },
    "Variable": {
      "title": "Variable",
      "description": "Represents a variable or an argument possibly of a compound object type.\nNote how the following variables are represented:\n\n1) A simple variable:\n\n    int x = 5\n\n    { name: \"x\", value: \"5\", type: \"int\" }  // Captured variable\n\n2) A compound object:\n\n    struct T {\n        int m1;\n        int m2;\n    };\n    T x = { 3, 7 };\n\n    {  // Captured variable\n        name: \"x\",\n        type: \"T\",\n        members { name: \"m1\", value: \"3\", type: \"int\" },\n        members { name: \"m2\", value: \"7\", type: \"int\" }\n    }\n\n3) A pointer where the pointee was captured:\n\n    T x = { 3, 7 };\n    T* p = &x;\n\n    {   // Captured variable\n        name: \"p\",\n        type: \"T*\",\n        value: \"0x00500500\",\n        members { name: \"m1\", value: \"3\", type: \"int\" },\n        members { name: \"m2\", value: \"7\", type: \"int\" }\n    }\n\n4) A pointer where the pointee was not captured:\n\n    T* p = new T;\n\n    {   // Captured variable\n        name: \"p\",\n        type: \"T*\",\n        value: \"0x00400400\"\n        status { is_error: true, description { format: \"unavailable\" } }\n    }\n\nThe status should describe the reason for the missing value,\nsuch as `<optimized out>`, `<inaccessible>`, `<pointers limit reached>`.\n\nNote that a null pointer should not have members.\n\n5) An unnamed value:\n\n    int* p = new int(7);\n\n    {   // Captured variable\n        name: \"p\",\n        value: \"0x00500500\",\n        type: \"int*\",\n        members { value: \"7\", type: \"int\" } }\n\n6) An unnamed pointer where the pointee was not captured:\n\n    int* p = new int(7);\n    int** pp = &p;\n\n    {  // Captured variable\n        name: \"pp\",\n        value: \"0x00500500\",\n        type: \"int**\",\n        members {\n            value: \"0x00400400\",\n            type: \"int*\"\n            status {\n                is_error: true,\n                description: { format: \"unavailable\" } }\n            }\n        }\n    }\n\nTo optimize computation, memory and network traffic, variables that\nrepeat in the output multiple times can be stored once in a shared\nvariable table and be referenced using the `var_table_index` field.  The\nvariables stored in the shared table are nameless and are essentially\na partition of the complete variable. To reconstruct the complete\nvariable, merge the referencing variable with the referenced variable.\n\nWhen using the shared variable table, the following variables:\n\n    T x = { 3, 7 };\n    T* p = &x;\n    T& r = x;\n\n    { name: \"x\", var_table_index: 3, type: \"T\" }  // Captured variables\n    { name: \"p\", value \"0x00500500\", type=\"T*\", var_table_index: 3 }\n    { name: \"r\", type=\"T&\", var_table_index: 3 }\n\n    {  // Shared variable table entry #3:\n        members { name: \"m1\", value: \"3\", type: \"int\" },\n        members { name: \"m2\", value: \"7\", type: \"int\" }\n    }\n\nNote that the pointer address is stored with the referencing variable\nand not with the referenced variable. This allows the referenced variable\nto be shared between pointers and references.\n\nThe type field is optional. The debugger agent may or may not support it.",
      "type": "object",
      "properties": {
        "varTableIndex": {
          "description": "Reference to a variable in the shared variable table. More than\none variable can reference the same variable in the table. The\n`var_table_index` field is an index into `variable_table` in Breakpoint.",
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "description": "Simple value of the variable.",
          "type": "string"
        },
        "members": {
          "description": "Members contained or pointed to by the variable.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Variable"
          }
        },
        "status": {
          "$ref": "#/definitions/StatusMessage"
        },
        "name": {
          "description": "Name of the variable, if any.",
          "type": "string"
        },
        "type": {
          "description": "Variable type (e.g. `MyClass`). If the variable is split with\n`var_table_index`, `type` goes next to `value`. The interpretation of\na type is agent specific. It is recommended to include the dynamic type\nrather than a static type of an object.",
          "type": "string"
        }
      }
    },
    "StackFrame": {
      "title": "StackFrame",
      "description": "Represents a stack frame context.",
      "type": "object",
      "properties": {
        "arguments": {
          "description": "Set of arguments passed to this function.\nNote that this might not be populated for all stack frames.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Variable"
          }
        },
        "locals": {
          "description": "Set of local variables at the stack frame location.\nNote that this might not be populated for all stack frames.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Variable"
          }
        },
        "location": {
          "$ref": "#/definitions/SourceLocation"
        },
        "function": {
          "description": "Demangled function name at the call site.",
          "type": "string"
        }
      }
    },
    "RepoId": {
      "title": "RepoId",
      "description": "A unique identifier for a cloud repo.",
      "type": "object",
      "properties": {
        "uid": {
          "description": "A server-assigned, globally unique identifier.",
          "type": "string"
        },
        "projectRepoId": {
          "$ref": "#/definitions/ProjectRepoId"
        }
      }
    },
    "FormatMessage": {
      "title": "FormatMessage",
      "description": "Status message text.",
      "type": "object",
      "properties": {
        "parameters": {
          "description": "Optional parameters to be embedded into the message.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "format": {
          "description": "Format template for the message. The `format` uses placeholders `$0`,\n`$1`, etc. to reference parameters. `$$` can be used to denote the `$`\ncharacter.\n\nExamples:\n\n*   `Failed to load '$0' which helps debug $1 the first time it\n    is loaded.  Again, $0 is very important.`\n*   `Please pay $$10 to use $0 instead of $1.`",
          "type": "string"
        }
      }
    },
    "ExtendedSourceContext": {
      "title": "ExtendedSourceContext",
      "description": "An ExtendedSourceContext is a SourceContext combined with additional\ndetails describing the context.",
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/SourceContext"
        },
        "labels": {
          "description": "Labels with user defined metadata.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ListDebuggeesResponse": {
      "title": "ListDebuggeesResponse",
      "description": "Response for listing debuggees.",
      "type": "object",
      "properties": {
        "debuggees": {
          "description": "List of debuggees accessible to the calling user.\nThe fields `debuggee.id` and `description` are guaranteed to be set.\nThe `description` field is a human readable field provided by agents and\ncan be displayed to users.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Debuggee"
          }
        }
      }
    },
    "AliasContext": {
      "title": "AliasContext",
      "description": "An alias to a repo revision.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The alias name.",
          "type": "string"
        },
        "kind": {
          "$ref": "#/definitions/Kind"
        }
      }
    },
    "SourceLocation": {
      "title": "SourceLocation",
      "description": "Source location of the call site.",
      "type": "object",
      "properties": {
        "path": {
          "description": "Path to the source file within the source context of the target binary.",
          "type": "string"
        },
        "column": {
          "description": "Column within a line. The first column in a line as the value `1`.\nAgents that do not support setting breakpoints on specific columns ignore\nthis field.",
          "type": "integer",
          "format": "int32"
        },
        "line": {
          "description": "Line inside the file. The first line in the file has the value `1`.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Debuggee": {
      "title": "Debuggee",
      "description": "Debuggee resource.\nThe field `id` is guaranteed to be set (in addition to the echoed fields).\nIf the field `is_disabled` is set to `true`, the agent should disable\nitself by removing all breakpoints and detaching from the application.\nIt should however continue to poll `RegisterDebuggee` until reenabled.",
      "type": "object",
      "properties": {
        "labels": {
          "description": "A set of custom debuggee properties, populated by the agent, to be\ndisplayed to the user.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "isInactive": {
          "description": "If set to `true`, indicates that Controller service does not detect any\nactivity from the debuggee agents and the application is possibly stopped.",
          "type": "boolean"
        },
        "status": {
          "description": "Human readable message to be displayed to the user about this debuggee.\nAbsence of this field indicates no status. The message can be either\ninformational or an error status.",
          "type": "object"
        },
        "project": {
          "description": "Project the debuggee is associated with.\nUse project number or id when registering a Google Cloud Platform project.",
          "type": "string"
        },
        "isDisabled": {
          "description": "If set to `true`, indicates that the agent should disable itself and\ndetach from the debuggee.",
          "type": "boolean"
        },
        "agentVersion": {
          "description": "Version ID of the agent.\nSchema: `domain/language-platform/vmajor.minor` (for example\n`google.com/java-gcp/v1.1`).",
          "type": "string"
        },
        "id": {
          "description": "Unique identifier for the debuggee generated by the controller service.",
          "type": "string"
        },
        "description": {
          "description": "Human readable description of the debuggee.\nIncluding a human-readable project name, environment name and version\ninformation is recommended.",
          "type": "string"
        },
        "uniquifier": {
          "description": "Uniquifier to further distinguish the application.\nIt is possible that different applications might have identical values in\nthe debuggee message, thus, incorrectly identified as a single application\nby the Controller service. This field adds salt to further distinguish the\napplication. Agents should consider seeding this field with value that\nidentifies the code, binary, configuration and environment.",
          "type": "string"
        },
        "sourceContexts": {
          "description": "References to the locations and revisions of the source code used in the\ndeployed application.",
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "extSourceContexts": {
          "description": "References to the locations and revisions of the source code used in the\ndeployed application.",
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      }
    },
    "ListActiveBreakpointsResponse": {
      "title": "ListActiveBreakpointsResponse",
      "description": "Response for listing active breakpoints.",
      "type": "object",
      "properties": {
        "breakpoints": {
          "description": "List of all active breakpoints.\nThe fields `id` and `location` are guaranteed to be set on each breakpoint.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Breakpoint"
          }
        },
        "waitExpired": {
          "description": "If set to `true`, indicates that there is no change to the\nlist of active breakpoints and the server-selected timeout has expired.\nThe `breakpoints` field would be empty and should be ignored.",
          "type": "boolean"
        },
        "nextWaitToken": {
          "description": "A token that can be used in the next method call to block until\nthe list of breakpoints changes.",
          "type": "string"
        }
      }
    },
    "ProjectRepoId": {
      "title": "ProjectRepoId",
      "description": "A combination of a project ID and a repo name.",
      "type": "object",
      "properties": {
        "projectId": {
          "description": "The ID of the project.",
          "type": "string"
        },
        "repoName": {
          "description": "The name of the repo. Leave empty for the default repo.",
          "type": "string"
        }
      }
    },
    "CloudWorkspaceSourceContext": {
      "title": "CloudWorkspaceSourceContext",
      "description": "A SourceContext referring to a snapshot in a cloud workspace.",
      "type": "object",
      "properties": {
        "snapshotId": {
          "description": "The ID of the snapshot.\nAn empty snapshot_id refers to the most recent snapshot.",
          "type": "string"
        },
        "workspaceId": {
          "description": "The ID of the workspace.",
          "type": "object"
        }
      }
    },
    "GerritSourceContext": {
      "title": "GerritSourceContext",
      "description": "A SourceContext referring to a Gerrit project.",
      "type": "object",
      "properties": {
        "hostUri": {
          "description": "The URI of a running Gerrit instance.",
          "type": "string"
        },
        "revisionId": {
          "description": "A revision (commit) ID.",
          "type": "string"
        },
        "aliasName": {
          "description": "The name of an alias (branch, tag, etc.).",
          "type": "string"
        },
        "gerritProject": {
          "description": "The full project name within the host. Projects may be nested, so\n\"project/subproject\" is a valid project name.\nThe \"repo name\" is hostURI/project.",
          "type": "string"
        },
        "aliasContext": {
          "description": "An alias, which may be a branch or tag.",
          "type": "object"
        }
      }
    },
    "CloudWorkspaceId": {
      "title": "CloudWorkspaceId",
      "description": "A CloudWorkspaceId is a unique identifier for a cloud workspace.\nA cloud workspace is a place associated with a repo where modified files\ncan be stored before they are committed.",
      "type": "object",
      "properties": {
        "repoId": {
          "$ref": "#/definitions/RepoId"
        },
        "name": {
          "description": "The unique name of the workspace within the repo.  This is the name\nchosen by the client in the Source API's CreateWorkspace method.",
          "type": "string"
        }
      }
    },
    "ListBreakpointsResponse": {
      "title": "ListBreakpointsResponse",
      "description": "Response for listing breakpoints.",
      "type": "object",
      "properties": {
        "breakpoints": {
          "description": "List of breakpoints matching the request.\nThe fields `id` and `location` are guaranteed to be set on each breakpoint.\nThe fields: `stack_frames`, `evaluated_expressions` and `variable_table`\nare cleared on each breakpoint regardless of its status.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Breakpoint"
          }
        },
        "nextWaitToken": {
          "description": "A wait token that can be used in the next call to `list` (REST) or\n`ListBreakpoints` (RPC) to block until the list of breakpoints has changes.",
          "type": "string"
        }
      }
    },
    "Breakpoint": {
      "title": "Breakpoint",
      "description": "Updated breakpoint information.\nThe field `id` must be set.\nThe agent must echo all Breakpoint specification fields in the update.",
      "type": "object",
      "properties": {
        "stackFrames": {
          "description": "The stack at breakpoint time, where stack_frames[0] represents the most\nrecently entered function.",
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "condition": {
          "description": "Condition that triggers the breakpoint.\nThe condition is a compound boolean expression composed using expressions\nin a programming language at the source location.",
          "type": "string"
        },
        "status": {
          "description": "Breakpoint status.\n\nThe status includes an error flag and a human readable message.\nThis field is usually unset. The message can be either\ninformational or an error message. Regardless, clients should always\ndisplay the text message back to the user.\n\nError status indicates complete failure of the breakpoint.\n\nExample (non-final state): `Still loading symbols...`\n\nExamples (final state):\n\n*   `Invalid line number` referring to location\n*   `Field f not found in class C` referring to condition",
          "type": "object"
        },
        "userEmail": {
          "description": "E-mail address of the user that created this breakpoint",
          "type": "string"
        },
        "action": {
          "$ref": "#/definitions/Action"
        },
        "logLevel": {
          "$ref": "#/definitions/LogLevel"
        },
        "id": {
          "description": "Breakpoint identifier, unique in the scope of the debuggee.",
          "type": "string"
        },
        "location": {
          "description": "Breakpoint source location.",
          "type": "object"
        },
        "finalTime": {
          "description": "Time this breakpoint was finalized as seen by the server in seconds\nresolution.",
          "type": "string"
        },
        "variableTable": {
          "description": "The `variable_table` exists to aid with computation, memory and network\ntraffic optimization.  It enables storing a variable once and reference\nit from multiple variables, including variables stored in the\n`variable_table` itself.\nFor example, the same `this` object, which may appear at many levels of\nthe stack, can have all of its data stored once in this table.  The\nstack frame variables then would hold only a reference to it.\n\nThe variable `var_table_index` field is an index into this repeated field.\nThe stored objects are nameless and get their name from the referencing\nvariable. The effective variable is a merge of the referencing variable\nand the referenced variable.",
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "labels": {
          "description": "A set of custom breakpoint properties, populated by the agent, to be\ndisplayed to the user.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "logMessageFormat": {
          "description": "Only relevant when action is `LOG`. Defines the message to log when\nthe breakpoint hits. The message may include parameter placeholders `$0`,\n`$1`, etc. These placeholders are replaced with the evaluated value\nof the appropriate expression. Expressions not referenced in\n`log_message_format` are not logged.\n\nExample: `Message received, id = $0, count = $1` with\n`expressions` = `[ message.id, message.count ]`.",
          "type": "string"
        },
        "createTime": {
          "description": "Time this breakpoint was created by the server in seconds resolution.",
          "type": "string"
        },
        "expressions": {
          "description": "List of read-only expressions to evaluate at the breakpoint location.\nThe expressions are composed using expressions in the programming language\nat the source location. If the breakpoint action is `LOG`, the evaluated\nexpressions are included in log statements.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "evaluatedExpressions": {
          "description": "Values of evaluated expressions at breakpoint time.\nThe evaluated expressions appear in exactly the same order they\nare listed in the `expressions` field.\nThe `name` field holds the original expression text, the `value` or\n`members` field holds the result of the evaluated expression.\nIf the expression cannot be evaluated, the `status` inside the `Variable`\nwill indicate an error and contain the error text.",
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "isFinalState": {
          "description": "When true, indicates that this is a final result and the\nbreakpoint state will not change from here on.",
          "type": "boolean"
        }
      }
    },
    "Action": {
      "title": "Action",
      "description": "Action that the agent should perform when the code at the\nbreakpoint location is hit.",
      "example": "CAPTURE",
      "type": "string",
      "enum": [
        "CAPTURE",
        "LOG"
      ]
    },
    "Kind": {
      "title": "Kind",
      "description": "The alias kind.",
      "example": "ANY",
      "type": "string",
      "enum": [
        "ANY",
        "FIXED",
        "MOVABLE",
        "OTHER"
      ]
    },
    "LogLevel": {
      "title": "LogLevel",
      "description": "Indicates the severity of the log. Only relevant when action is `LOG`.",
      "example": "INFO",
      "type": "string",
      "enum": [
        "INFO",
        "WARNING",
        "ERROR"
      ]
    },
    "RefersTo": {
      "title": "RefersTo",
      "description": "Reference to which the message applies.",
      "example": "UNSPECIFIED",
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "BREAKPOINT_SOURCE_LOCATION",
        "BREAKPOINT_CONDITION",
        "BREAKPOINT_EXPRESSION",
        "BREAKPOINT_AGE",
        "VARIABLE_NAME",
        "VARIABLE_VALUE"
      ]
    }
  },
  "tags": [
    {
      "name": "breakpoints",
      "description": ""
    },
    {
      "name": "debuggees",
      "description": ""
    }
  ]
}