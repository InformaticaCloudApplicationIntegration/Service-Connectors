{
  "swagger": "2.0",
  "info": {
    "version": "v4",
    "title": "Google Sheets API",
    "description": "Reads and writes Google Sheets.",
    "contact": {}
  },
  "host": "sheets.googleapis.com",
  "basePath": "/",
  "securityDefinitions": {
    "auth": {
      "type": "oauth2",
      "flow": "implicit",
      "authorizationUrl": "https://sheets.googleapis.com/",
      "scopes": {
        "https://www.googleapis.com/auth/drive.file": "View and manage Google Drive files and folders that you have opened or created with this app",
        "https://www.googleapis.com/auth/drive": "See, edit, create, and delete all of your Google Drive files",
        "https://www.googleapis.com/auth/drive.readonly": "See and download all your Google Drive files",
        "https://www.googleapis.com/auth/spreadsheets.readonly": "View your Google Spreadsheets",
        "https://www.googleapis.com/auth/spreadsheets": "See, edit, create, and delete your spreadsheets in Google Drive"
      }
    }
  },
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v4/spreadsheets/{spreadsheetId}/sheets/{sheetId}:copyTo": {
      "post": {
        "description": "Copies a single sheet from a spreadsheet to another spreadsheet.\nReturns the properties of the newly created sheet.",
        "summary": "CopyToV4SpreadsheetsSheetsCopyTo",
        "tags": [
          "sheets"
        ],
        "operationId": "V4SpreadsheetsSheetsCopyToBySpreadsheetIdAndSheetIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "spreadsheetId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the spreadsheet containing the sheet to copy."
          },
          {
            "name": "sheetId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "The ID of the sheet to copy."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/CopySheetToAnotherSpreadsheetRequest"
            }
          },
          {
            "name": "upload_protocol",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          },
          {
            "name": "quotaUser",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          },
          {
            "name": "prettyPrint",
            "in": "query",
            "required": false,
            "default": true,
            "type": "boolean",
            "description": "Returns response with indentations and line breaks."
          },
          {
            "name": "uploadType",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          {
            "name": "callback",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "JSONP"
          },
          {
            "name": "oauth_token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          {
            "name": "$.xgafv",
            "in": "query",
            "required": false,
            "default": "1",
            "type": "string",
            "description": "V1 error format. (Acceptable values are: \"1\", \"2\")"
          },
          {
            "name": "alt",
            "in": "query",
            "required": false,
            "default": "json",
            "type": "string",
            "description": "Data format for response. (Acceptable values are: \"json\", \"media\", \"proto\")"
          },
          {
            "name": "key",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          {
            "name": "access_token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "OAuth access token."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SheetProperties"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "auth": [
              "https://www.googleapis.com/auth/drive",
              "https://www.googleapis.com/auth/drive.file",
              "https://www.googleapis.com/auth/spreadsheets"
            ]
          }
        ]
      }
    },
    "/v4/spreadsheets/{spreadsheetId}/developerMetadata:search": {
      "post": {
        "description": "Returns all developer metadata matching the specified DataFilter.\nIf the provided DataFilter represents a DeveloperMetadataLookup object,\nthis will return all DeveloperMetadata entries selected by it. If the\nDataFilter represents a location in a spreadsheet, this will return all\ndeveloper metadata associated with locations intersecting that region.",
        "summary": "SearchV4SpreadsheetsDeveloperMetadataSearch",
        "tags": [
          "developerMetadata"
        ],
        "operationId": "V4SpreadsheetsDeveloperMetadataSearchBySpreadsheetIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "spreadsheetId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the spreadsheet to retrieve metadata from."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/SearchDeveloperMetadataRequest"
            }
          },
          {
            "name": "upload_protocol",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          },
          {
            "name": "quotaUser",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          },
          {
            "name": "prettyPrint",
            "in": "query",
            "required": false,
            "default": true,
            "type": "boolean",
            "description": "Returns response with indentations and line breaks."
          },
          {
            "name": "uploadType",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          {
            "name": "callback",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "JSONP"
          },
          {
            "name": "oauth_token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          {
            "name": "$.xgafv",
            "in": "query",
            "required": false,
            "default": "1",
            "type": "string",
            "description": "V1 error format. (Acceptable values are: \"1\", \"2\")"
          },
          {
            "name": "alt",
            "in": "query",
            "required": false,
            "default": "json",
            "type": "string",
            "description": "Data format for response. (Acceptable values are: \"json\", \"media\", \"proto\")"
          },
          {
            "name": "key",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          {
            "name": "access_token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "OAuth access token."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SearchDeveloperMetadataResponse"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "auth": [
              "https://www.googleapis.com/auth/drive",
              "https://www.googleapis.com/auth/drive.file",
              "https://www.googleapis.com/auth/spreadsheets"
            ]
          }
        ]
      }
    },
    "/v4/spreadsheets/{spreadsheetId}/developerMetadata/{metadataId}": {
      "get": {
        "description": "Returns the developer metadata with the specified ID.\nThe caller must specify the spreadsheet ID and the developer metadata's\nunique metadataId.",
        "summary": "GetV4SpreadsheetsDeveloperMetadata",
        "tags": [
          "developerMetadata"
        ],
        "operationId": "V4SpreadsheetsDeveloperMetadataBySpreadsheetIdAndMetadataIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "spreadsheetId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the spreadsheet to retrieve metadata from."
          },
          {
            "name": "metadataId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "The ID of the developer metadata to retrieve."
          },
          {
            "name": "upload_protocol",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          },
          {
            "name": "quotaUser",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          },
          {
            "name": "prettyPrint",
            "in": "query",
            "required": false,
            "default": true,
            "type": "boolean",
            "description": "Returns response with indentations and line breaks."
          },
          {
            "name": "uploadType",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          {
            "name": "callback",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "JSONP"
          },
          {
            "name": "oauth_token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          {
            "name": "$.xgafv",
            "in": "query",
            "required": false,
            "default": "1",
            "type": "string",
            "description": "V1 error format. (Acceptable values are: \"1\", \"2\")"
          },
          {
            "name": "alt",
            "in": "query",
            "required": false,
            "default": "json",
            "type": "string",
            "description": "Data format for response. (Acceptable values are: \"json\", \"media\", \"proto\")"
          },
          {
            "name": "key",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          {
            "name": "access_token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "OAuth access token."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DeveloperMetadata"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "auth": [
              "https://www.googleapis.com/auth/drive",
              "https://www.googleapis.com/auth/drive.file",
              "https://www.googleapis.com/auth/spreadsheets"
            ]
          }
        ]
      }
    },
    "/v4/spreadsheets/{spreadsheetId}/values:batchClearByDataFilter": {
      "post": {
        "description": "Clears one or more ranges of values from a spreadsheet.\nThe caller must specify the spreadsheet ID and one or more\nDataFilters. Ranges matching any of the specified data\nfilters will be cleared.  Only values are cleared -- all other properties\nof the cell (such as formatting, data validation, etc..) are kept.",
        "summary": "BatchClearByDataFilterV4SpreadsheetsValuesBatchClearByDataFilter",
        "tags": [
          "values"
        ],
        "operationId": "V4SpreadsheetsValuesBatchClearByDataFilterBySpreadsheetIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "spreadsheetId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the spreadsheet to update."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/BatchClearValuesByDataFilterRequest"
            }
          },
          {
            "name": "upload_protocol",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          },
          {
            "name": "quotaUser",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          },
          {
            "name": "prettyPrint",
            "in": "query",
            "required": false,
            "default": true,
            "type": "boolean",
            "description": "Returns response with indentations and line breaks."
          },
          {
            "name": "uploadType",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          {
            "name": "callback",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "JSONP"
          },
          {
            "name": "oauth_token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          {
            "name": "$.xgafv",
            "in": "query",
            "required": false,
            "default": "1",
            "type": "string",
            "description": "V1 error format. (Acceptable values are: \"1\", \"2\")"
          },
          {
            "name": "alt",
            "in": "query",
            "required": false,
            "default": "json",
            "type": "string",
            "description": "Data format for response. (Acceptable values are: \"json\", \"media\", \"proto\")"
          },
          {
            "name": "key",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          {
            "name": "access_token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "OAuth access token."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/BatchClearValuesByDataFilterResponse"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "auth": [
              "https://www.googleapis.com/auth/drive",
              "https://www.googleapis.com/auth/drive.file",
              "https://www.googleapis.com/auth/spreadsheets"
            ]
          }
        ]
      }
    },
    "/v4/spreadsheets/{spreadsheetId}/values/{range}:append": {
      "post": {
        "description": "Appends values to a spreadsheet. The input range is used to search for\nexisting data and find a \"table\" within that range. Values will be\nappended to the next row of the table, starting with the first column of\nthe table. See the\n[guide](/sheets/api/guides/values#appending_values)\nand\n[sample code](/sheets/api/samples/writing#append_values)\nfor specific details of how tables are detected and data is appended.\n\nThe caller must specify the spreadsheet ID, range, and\na valueInputOption.  The `valueInputOption` only\ncontrols how the input data will be added to the sheet (column-wise or\nrow-wise), it does not influence what cell the data starts being written\nto.",
        "summary": "AppendV4SpreadsheetsValuesAppend",
        "tags": [
          "values"
        ],
        "operationId": "V4SpreadsheetsValuesAppendBySpreadsheetIdAndRangePost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "range",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The A1 notation of a range to search for a logical table of data.\nValues will be appended after the last row of the table."
          },
          {
            "name": "spreadsheetId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the spreadsheet to update."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/ValueRange"
            }
          },
          {
            "name": "upload_protocol",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          },
          {
            "name": "quotaUser",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          },
          {
            "name": "prettyPrint",
            "in": "query",
            "required": false,
            "default": true,
            "type": "boolean",
            "description": "Returns response with indentations and line breaks."
          },
          {
            "name": "uploadType",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          {
            "name": "callback",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "JSONP"
          },
          {
            "name": "oauth_token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          {
            "name": "$.xgafv",
            "in": "query",
            "required": false,
            "default": "1",
            "type": "string",
            "description": "V1 error format. (Acceptable values are: \"1\", \"2\")"
          },
          {
            "name": "alt",
            "in": "query",
            "required": false,
            "default": "json",
            "type": "string",
            "description": "Data format for response. (Acceptable values are: \"json\", \"media\", \"proto\")"
          },
          {
            "name": "key",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          {
            "name": "access_token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "OAuth access token."
          },
          {
            "name": "valueInputOption",
            "in": "query",
            "required": false,
            "default": "INPUT_VALUE_OPTION_UNSPECIFIED",
            "type": "string",
            "description": "How the input data should be interpreted. (Acceptable values are: \"INPUT_VALUE_OPTION_UNSPECIFIED\", \"RAW\", \"USER_ENTERED\")"
          },
          {
            "name": "responseDateTimeRenderOption",
            "in": "query",
            "required": false,
            "default": "SERIAL_NUMBER",
            "type": "string",
            "description": "Determines how dates, times, and durations in the response should be\nrendered. This is ignored if response_value_render_option is\nFORMATTED_VALUE.\nThe default dateTime render option is [DateTimeRenderOption.SERIAL_NUMBER]. (Acceptable values are: \"SERIAL_NUMBER\", \"FORMATTED_STRING\")"
          },
          {
            "name": "includeValuesInResponse",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Determines if the update response should include the values\nof the cells that were appended. By default, responses\ndo not include the updated values."
          },
          {
            "name": "responseValueRenderOption",
            "in": "query",
            "required": false,
            "default": "FORMATTED_VALUE",
            "type": "string",
            "description": "Determines how values in the response should be rendered.\nThe default render option is ValueRenderOption.FORMATTED_VALUE. (Acceptable values are: \"FORMATTED_VALUE\", \"UNFORMATTED_VALUE\", \"FORMULA\")"
          },
          {
            "name": "insertDataOption",
            "in": "query",
            "required": false,
            "default": "OVERWRITE",
            "type": "string",
            "description": "How the input data should be inserted. (Acceptable values are: \"OVERWRITE\", \"INSERT_ROWS\")"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/AppendValuesResponse"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "auth": [
              "https://www.googleapis.com/auth/drive",
              "https://www.googleapis.com/auth/drive.file",
              "https://www.googleapis.com/auth/spreadsheets"
            ]
          }
        ]
      }
    },
    "/v4/spreadsheets/{spreadsheetId}/values:batchGetByDataFilter": {
      "post": {
        "description": "Returns one or more ranges of values that match the specified data filters.\nThe caller must specify the spreadsheet ID and one or more\nDataFilters.  Ranges that match any of the data filters in\nthe request will be returned.",
        "summary": "BatchGetByDataFilterV4SpreadsheetsValuesBatchGetByDataFilter",
        "tags": [
          "values"
        ],
        "operationId": "V4SpreadsheetsValuesBatchGetByDataFilterBySpreadsheetIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "spreadsheetId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the spreadsheet to retrieve data from."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/BatchGetValuesByDataFilterRequest"
            }
          },
          {
            "name": "upload_protocol",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          },
          {
            "name": "quotaUser",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          },
          {
            "name": "prettyPrint",
            "in": "query",
            "required": false,
            "default": true,
            "type": "boolean",
            "description": "Returns response with indentations and line breaks."
          },
          {
            "name": "uploadType",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          {
            "name": "callback",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "JSONP"
          },
          {
            "name": "oauth_token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          {
            "name": "$.xgafv",
            "in": "query",
            "required": false,
            "default": "1",
            "type": "string",
            "description": "V1 error format. (Acceptable values are: \"1\", \"2\")"
          },
          {
            "name": "alt",
            "in": "query",
            "required": false,
            "default": "json",
            "type": "string",
            "description": "Data format for response. (Acceptable values are: \"json\", \"media\", \"proto\")"
          },
          {
            "name": "key",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          {
            "name": "access_token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "OAuth access token."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/BatchGetValuesByDataFilterResponse"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "auth": [
              "https://www.googleapis.com/auth/drive",
              "https://www.googleapis.com/auth/drive.file",
              "https://www.googleapis.com/auth/spreadsheets"
            ]
          }
        ]
      }
    },
    "/v4/spreadsheets/{spreadsheetId}/values:batchClear": {
      "post": {
        "description": "Clears one or more ranges of values from a spreadsheet.\nThe caller must specify the spreadsheet ID and one or more ranges.\nOnly values are cleared -- all other properties of the cell (such as\nformatting, data validation, etc..) are kept.",
        "summary": "BatchClearV4SpreadsheetsValuesBatchClear",
        "tags": [
          "values"
        ],
        "operationId": "V4SpreadsheetsValuesBatchClearBySpreadsheetIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "spreadsheetId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the spreadsheet to update."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/BatchClearValuesRequest"
            }
          },
          {
            "name": "upload_protocol",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          },
          {
            "name": "quotaUser",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          },
          {
            "name": "prettyPrint",
            "in": "query",
            "required": false,
            "default": true,
            "type": "boolean",
            "description": "Returns response with indentations and line breaks."
          },
          {
            "name": "uploadType",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          {
            "name": "callback",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "JSONP"
          },
          {
            "name": "oauth_token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          {
            "name": "$.xgafv",
            "in": "query",
            "required": false,
            "default": "1",
            "type": "string",
            "description": "V1 error format. (Acceptable values are: \"1\", \"2\")"
          },
          {
            "name": "alt",
            "in": "query",
            "required": false,
            "default": "json",
            "type": "string",
            "description": "Data format for response. (Acceptable values are: \"json\", \"media\", \"proto\")"
          },
          {
            "name": "key",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          {
            "name": "access_token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "OAuth access token."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/BatchClearValuesResponse"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "auth": [
              "https://www.googleapis.com/auth/drive",
              "https://www.googleapis.com/auth/drive.file",
              "https://www.googleapis.com/auth/spreadsheets"
            ]
          }
        ]
      }
    },
    "/v4/spreadsheets/{spreadsheetId}/values/{range}": {
      "get": {
        "description": "Returns a range of values from a spreadsheet.\nThe caller must specify the spreadsheet ID and a range.",
        "summary": "GetV4SpreadsheetsValuesBySpreadsheetId",
        "tags": [
          "values"
        ],
        "operationId": "V4SpreadsheetsValuesBySpreadsheetIdAndRangeGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "spreadsheetId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the spreadsheet to retrieve data from."
          },
          {
            "name": "range",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The A1 notation of the values to retrieve."
          },
          {
            "name": "upload_protocol",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          },
          {
            "name": "quotaUser",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          },
          {
            "name": "prettyPrint",
            "in": "query",
            "required": false,
            "default": true,
            "type": "boolean",
            "description": "Returns response with indentations and line breaks."
          },
          {
            "name": "uploadType",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          {
            "name": "callback",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "JSONP"
          },
          {
            "name": "oauth_token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          {
            "name": "$.xgafv",
            "in": "query",
            "required": false,
            "default": "1",
            "type": "string",
            "description": "V1 error format. (Acceptable values are: \"1\", \"2\")"
          },
          {
            "name": "alt",
            "in": "query",
            "required": false,
            "default": "json",
            "type": "string",
            "description": "Data format for response. (Acceptable values are: \"json\", \"media\", \"proto\")"
          },
          {
            "name": "key",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          {
            "name": "access_token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "OAuth access token."
          },
          {
            "name": "majorDimension",
            "in": "query",
            "required": false,
            "default": "DIMENSION_UNSPECIFIED",
            "type": "string",
            "description": "The major dimension that results should use.\n\nFor example, if the spreadsheet data is: `A1=1,B1=2,A2=3,B2=4`,\nthen requesting `range=A1:B2,majorDimension=ROWS` will return\n`[[1,2],[3,4]]`,\nwhereas requesting `range=A1:B2,majorDimension=COLUMNS` will return\n`[[1,3],[2,4]]`. (Acceptable values are: \"DIMENSION_UNSPECIFIED\", \"ROWS\", \"COLUMNS\")"
          },
          {
            "name": "valueRenderOption",
            "in": "query",
            "required": false,
            "default": "FORMATTED_VALUE",
            "type": "string",
            "description": "How values should be represented in the output.\nThe default render option is ValueRenderOption.FORMATTED_VALUE. (Acceptable values are: \"FORMATTED_VALUE\", \"UNFORMATTED_VALUE\", \"FORMULA\")"
          },
          {
            "name": "dateTimeRenderOption",
            "in": "query",
            "required": false,
            "default": "SERIAL_NUMBER",
            "type": "string",
            "description": "How dates, times, and durations should be represented in the output.\nThis is ignored if value_render_option is\nFORMATTED_VALUE.\nThe default dateTime render option is [DateTimeRenderOption.SERIAL_NUMBER]. (Acceptable values are: \"SERIAL_NUMBER\", \"FORMATTED_STRING\")"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ValueRange"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "auth": [
              "https://www.googleapis.com/auth/drive",
              "https://www.googleapis.com/auth/drive.file",
              "https://www.googleapis.com/auth/drive.readonly",
              "https://www.googleapis.com/auth/spreadsheets",
              "https://www.googleapis.com/auth/spreadsheets.readonly"
            ]
          }
        ]
      },
      "put": {
        "description": "Sets values in a range of a spreadsheet.\nThe caller must specify the spreadsheet ID, range, and\na valueInputOption.",
        "summary": "UpdateV4SpreadsheetsValuesBySpreadsheetId",
        "tags": [
          "values"
        ],
        "operationId": "V4SpreadsheetsValuesBySpreadsheetIdAndRangePut",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "range",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The A1 notation of the values to update."
          },
          {
            "name": "spreadsheetId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the spreadsheet to update."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/ValueRange"
            }
          },
          {
            "name": "upload_protocol",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          },
          {
            "name": "quotaUser",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          },
          {
            "name": "prettyPrint",
            "in": "query",
            "required": false,
            "default": true,
            "type": "boolean",
            "description": "Returns response with indentations and line breaks."
          },
          {
            "name": "uploadType",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          {
            "name": "callback",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "JSONP"
          },
          {
            "name": "oauth_token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          {
            "name": "$.xgafv",
            "in": "query",
            "required": false,
            "default": "1",
            "type": "string",
            "description": "V1 error format. (Acceptable values are: \"1\", \"2\")"
          },
          {
            "name": "alt",
            "in": "query",
            "required": false,
            "default": "json",
            "type": "string",
            "description": "Data format for response. (Acceptable values are: \"json\", \"media\", \"proto\")"
          },
          {
            "name": "key",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          {
            "name": "access_token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "OAuth access token."
          },
          {
            "name": "includeValuesInResponse",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Determines if the update response should include the values\nof the cells that were updated. By default, responses\ndo not include the updated values.\nIf the range to write was larger than than the range actually written,\nthe response will include all values in the requested range (excluding\ntrailing empty rows and columns)."
          },
          {
            "name": "responseValueRenderOption",
            "in": "query",
            "required": false,
            "default": "FORMATTED_VALUE",
            "type": "string",
            "description": "Determines how values in the response should be rendered.\nThe default render option is ValueRenderOption.FORMATTED_VALUE. (Acceptable values are: \"FORMATTED_VALUE\", \"UNFORMATTED_VALUE\", \"FORMULA\")"
          },
          {
            "name": "valueInputOption",
            "in": "query",
            "required": false,
            "default": "INPUT_VALUE_OPTION_UNSPECIFIED",
            "type": "string",
            "description": "How the input data should be interpreted. (Acceptable values are: \"INPUT_VALUE_OPTION_UNSPECIFIED\", \"RAW\", \"USER_ENTERED\")"
          },
          {
            "name": "responseDateTimeRenderOption",
            "in": "query",
            "required": false,
            "default": "SERIAL_NUMBER",
            "type": "string",
            "description": "Determines how dates, times, and durations in the response should be\nrendered. This is ignored if response_value_render_option is\nFORMATTED_VALUE.\nThe default dateTime render option is\nDateTimeRenderOption.SERIAL_NUMBER. (Acceptable values are: \"SERIAL_NUMBER\", \"FORMATTED_STRING\")"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/UpdateValuesResponse"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "auth": [
              "https://www.googleapis.com/auth/drive",
              "https://www.googleapis.com/auth/drive.file",
              "https://www.googleapis.com/auth/spreadsheets"
            ]
          }
        ]
      }
    },
    "/v4/spreadsheets/{spreadsheetId}/values:batchUpdateByDataFilter": {
      "post": {
        "description": "Sets values in one or more ranges of a spreadsheet.\nThe caller must specify the spreadsheet ID,\na valueInputOption, and one or more\nDataFilterValueRanges.",
        "summary": "BatchUpdateByDataFilterV4SpreadsheetsValuesBatchUpdateByDataFilter",
        "tags": [
          "values"
        ],
        "operationId": "V4SpreadsheetsValuesBatchUpdateByDataFilterBySpreadsheetIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "spreadsheetId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the spreadsheet to update."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/BatchUpdateValuesByDataFilterRequest"
            }
          },
          {
            "name": "upload_protocol",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          },
          {
            "name": "quotaUser",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          },
          {
            "name": "prettyPrint",
            "in": "query",
            "required": false,
            "default": true,
            "type": "boolean",
            "description": "Returns response with indentations and line breaks."
          },
          {
            "name": "uploadType",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          {
            "name": "callback",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "JSONP"
          },
          {
            "name": "oauth_token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          {
            "name": "$.xgafv",
            "in": "query",
            "required": false,
            "default": "1",
            "type": "string",
            "description": "V1 error format. (Acceptable values are: \"1\", \"2\")"
          },
          {
            "name": "alt",
            "in": "query",
            "required": false,
            "default": "json",
            "type": "string",
            "description": "Data format for response. (Acceptable values are: \"json\", \"media\", \"proto\")"
          },
          {
            "name": "key",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          {
            "name": "access_token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "OAuth access token."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/BatchUpdateValuesByDataFilterResponse"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "auth": [
              "https://www.googleapis.com/auth/drive",
              "https://www.googleapis.com/auth/drive.file",
              "https://www.googleapis.com/auth/spreadsheets"
            ]
          }
        ]
      }
    },
    "/v4/spreadsheets/{spreadsheetId}/values:batchUpdate": {
      "post": {
        "description": "Sets values in one or more ranges of a spreadsheet.\nThe caller must specify the spreadsheet ID,\na valueInputOption, and one or more\nValueRanges.",
        "summary": "BatchUpdateV4SpreadsheetsValuesBatchUpdate",
        "tags": [
          "values"
        ],
        "operationId": "V4SpreadsheetsValuesBatchUpdateBySpreadsheetIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "spreadsheetId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the spreadsheet to update."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/BatchUpdateValuesRequest"
            }
          },
          {
            "name": "upload_protocol",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          },
          {
            "name": "quotaUser",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          },
          {
            "name": "prettyPrint",
            "in": "query",
            "required": false,
            "default": true,
            "type": "boolean",
            "description": "Returns response with indentations and line breaks."
          },
          {
            "name": "uploadType",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          {
            "name": "callback",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "JSONP"
          },
          {
            "name": "oauth_token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          {
            "name": "$.xgafv",
            "in": "query",
            "required": false,
            "default": "1",
            "type": "string",
            "description": "V1 error format. (Acceptable values are: \"1\", \"2\")"
          },
          {
            "name": "alt",
            "in": "query",
            "required": false,
            "default": "json",
            "type": "string",
            "description": "Data format for response. (Acceptable values are: \"json\", \"media\", \"proto\")"
          },
          {
            "name": "key",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          {
            "name": "access_token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "OAuth access token."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/BatchUpdateValuesResponse"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "auth": [
              "https://www.googleapis.com/auth/drive",
              "https://www.googleapis.com/auth/drive.file",
              "https://www.googleapis.com/auth/spreadsheets"
            ]
          }
        ]
      }
    },
    "/v4/spreadsheets/{spreadsheetId}/values/{range}:clear": {
      "post": {
        "description": "Clears values from a spreadsheet.\nThe caller must specify the spreadsheet ID and range.\nOnly values are cleared -- all other properties of the cell (such as\nformatting, data validation, etc..) are kept.",
        "summary": "ClearV4SpreadsheetsValuesClearBySpreadsheetId",
        "tags": [
          "values"
        ],
        "operationId": "V4SpreadsheetsValuesClearBySpreadsheetIdAndRangePost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "spreadsheetId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the spreadsheet to update."
          },
          {
            "name": "range",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The A1 notation of the values to clear."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "upload_protocol",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          },
          {
            "name": "quotaUser",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          },
          {
            "name": "prettyPrint",
            "in": "query",
            "required": false,
            "default": true,
            "type": "boolean",
            "description": "Returns response with indentations and line breaks."
          },
          {
            "name": "uploadType",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          {
            "name": "callback",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "JSONP"
          },
          {
            "name": "oauth_token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          {
            "name": "$.xgafv",
            "in": "query",
            "required": false,
            "default": "1",
            "type": "string",
            "description": "V1 error format. (Acceptable values are: \"1\", \"2\")"
          },
          {
            "name": "alt",
            "in": "query",
            "required": false,
            "default": "json",
            "type": "string",
            "description": "Data format for response. (Acceptable values are: \"json\", \"media\", \"proto\")"
          },
          {
            "name": "key",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          {
            "name": "access_token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "OAuth access token."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ClearValuesResponse"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "auth": [
              "https://www.googleapis.com/auth/drive",
              "https://www.googleapis.com/auth/drive.file",
              "https://www.googleapis.com/auth/spreadsheets"
            ]
          }
        ]
      }
    },
    "/v4/spreadsheets/{spreadsheetId}/values:batchGet": {
      "get": {
        "description": "Returns one or more ranges of values from a spreadsheet.\nThe caller must specify the spreadsheet ID and one or more ranges.",
        "summary": "BatchGetV4SpreadsheetsValuesBatchGet",
        "tags": [
          "values"
        ],
        "operationId": "V4SpreadsheetsValuesBatchGetBySpreadsheetIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "spreadsheetId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the spreadsheet to retrieve data from."
          },
          {
            "name": "upload_protocol",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          },
          {
            "name": "quotaUser",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          },
          {
            "name": "prettyPrint",
            "in": "query",
            "required": false,
            "default": true,
            "type": "boolean",
            "description": "Returns response with indentations and line breaks."
          },
          {
            "name": "uploadType",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          {
            "name": "callback",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "JSONP"
          },
          {
            "name": "oauth_token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          {
            "name": "$.xgafv",
            "in": "query",
            "required": false,
            "default": "1",
            "type": "string",
            "description": "V1 error format. (Acceptable values are: \"1\", \"2\")"
          },
          {
            "name": "alt",
            "in": "query",
            "required": false,
            "default": "json",
            "type": "string",
            "description": "Data format for response. (Acceptable values are: \"json\", \"media\", \"proto\")"
          },
          {
            "name": "key",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          {
            "name": "access_token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "OAuth access token."
          },
          {
            "name": "valueRenderOption",
            "in": "query",
            "required": false,
            "default": "FORMATTED_VALUE",
            "type": "string",
            "description": "How values should be represented in the output.\nThe default render option is ValueRenderOption.FORMATTED_VALUE. (Acceptable values are: \"FORMATTED_VALUE\", \"UNFORMATTED_VALUE\", \"FORMULA\")"
          },
          {
            "name": "dateTimeRenderOption",
            "in": "query",
            "required": false,
            "default": "SERIAL_NUMBER",
            "type": "string",
            "description": "How dates, times, and durations should be represented in the output.\nThis is ignored if value_render_option is\nFORMATTED_VALUE.\nThe default dateTime render option is [DateTimeRenderOption.SERIAL_NUMBER]. (Acceptable values are: \"SERIAL_NUMBER\", \"FORMATTED_STRING\")"
          },
          {
            "name": "ranges",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The A1 notation of the values to retrieve."
          },
          {
            "name": "majorDimension",
            "in": "query",
            "required": false,
            "default": "DIMENSION_UNSPECIFIED",
            "type": "string",
            "description": "The major dimension that results should use.\n\nFor example, if the spreadsheet data is: `A1=1,B1=2,A2=3,B2=4`,\nthen requesting `range=A1:B2,majorDimension=ROWS` will return\n`[[1,2],[3,4]]`,\nwhereas requesting `range=A1:B2,majorDimension=COLUMNS` will return\n`[[1,3],[2,4]]`. (Acceptable values are: \"DIMENSION_UNSPECIFIED\", \"ROWS\", \"COLUMNS\")"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/BatchGetValuesResponse"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "auth": [
              "https://www.googleapis.com/auth/drive",
              "https://www.googleapis.com/auth/drive.file",
              "https://www.googleapis.com/auth/drive.readonly",
              "https://www.googleapis.com/auth/spreadsheets",
              "https://www.googleapis.com/auth/spreadsheets.readonly"
            ]
          }
        ]
      }
    },
    "/v4/spreadsheets": {
      "post": {
        "description": "Creates a spreadsheet, returning the newly created spreadsheet.",
        "summary": "CreateV4Spreadsheets",
        "tags": [
          "spreadsheets"
        ],
        "operationId": "V4SpreadsheetsPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/Spreadsheet"
            }
          },
          {
            "name": "upload_protocol",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          },
          {
            "name": "quotaUser",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          },
          {
            "name": "prettyPrint",
            "in": "query",
            "required": false,
            "default": true,
            "type": "boolean",
            "description": "Returns response with indentations and line breaks."
          },
          {
            "name": "uploadType",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          {
            "name": "callback",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "JSONP"
          },
          {
            "name": "oauth_token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          {
            "name": "$.xgafv",
            "in": "query",
            "required": false,
            "default": "1",
            "type": "string",
            "description": "V1 error format. (Acceptable values are: \"1\", \"2\")"
          },
          {
            "name": "alt",
            "in": "query",
            "required": false,
            "default": "json",
            "type": "string",
            "description": "Data format for response. (Acceptable values are: \"json\", \"media\", \"proto\")"
          },
          {
            "name": "key",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          {
            "name": "access_token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "OAuth access token."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Spreadsheet"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "auth": [
              "https://www.googleapis.com/auth/drive",
              "https://www.googleapis.com/auth/drive.file",
              "https://www.googleapis.com/auth/spreadsheets"
            ]
          }
        ]
      }
    },
    "/v4/spreadsheets/{spreadsheetId}:batchUpdate": {
      "post": {
        "description": "Applies one or more updates to the spreadsheet.\n\nEach request is validated before\nbeing applied. If any request is not valid then the entire request will\nfail and nothing will be applied.\n\nSome requests have replies to\ngive you some information about how\nthey are applied. The replies will mirror the requests.  For example,\nif you applied 4 updates and the 3rd one had a reply, then the\nresponse will have 2 empty replies, the actual reply, and another empty\nreply, in that order.\n\nDue to the collaborative nature of spreadsheets, it is not guaranteed that\nthe spreadsheet will reflect exactly your changes after this completes,\nhowever it is guaranteed that the updates in the request will be\napplied together atomically. Your changes may be altered with respect to\ncollaborator changes. If there are no collaborators, the spreadsheet\nshould reflect your changes.",
        "summary": "BatchUpdateV4SpreadsheetsBatchUpdateBySpreadsheetId",
        "tags": [
          "spreadsheets"
        ],
        "operationId": "V4SpreadsheetsBatchUpdateBySpreadsheetIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "spreadsheetId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The spreadsheet to apply the updates to."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/BatchUpdateSpreadsheetRequest"
            }
          },
          {
            "name": "upload_protocol",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          },
          {
            "name": "quotaUser",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          },
          {
            "name": "prettyPrint",
            "in": "query",
            "required": false,
            "default": true,
            "type": "boolean",
            "description": "Returns response with indentations and line breaks."
          },
          {
            "name": "uploadType",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          {
            "name": "callback",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "JSONP"
          },
          {
            "name": "oauth_token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          {
            "name": "$.xgafv",
            "in": "query",
            "required": false,
            "default": "1",
            "type": "string",
            "description": "V1 error format. (Acceptable values are: \"1\", \"2\")"
          },
          {
            "name": "alt",
            "in": "query",
            "required": false,
            "default": "json",
            "type": "string",
            "description": "Data format for response. (Acceptable values are: \"json\", \"media\", \"proto\")"
          },
          {
            "name": "key",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          {
            "name": "access_token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "OAuth access token."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/BatchUpdateSpreadsheetResponse"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "auth": [
              "https://www.googleapis.com/auth/drive",
              "https://www.googleapis.com/auth/drive.file",
              "https://www.googleapis.com/auth/spreadsheets"
            ]
          }
        ]
      }
    },
    "/v4/spreadsheets/{spreadsheetId}": {
      "get": {
        "description": "Returns the spreadsheet at the given ID.\nThe caller must specify the spreadsheet ID.\n\nBy default, data within grids will not be returned.\nYou can include grid data one of two ways:\n\n* Specify a field mask listing your desired fields using the `fields` URL\nparameter in HTTP\n\n* Set the includeGridData\nURL parameter to true.  If a field mask is set, the `includeGridData`\nparameter is ignored\n\nFor large spreadsheets, it is recommended to retrieve only the specific\nfields of the spreadsheet that you want.\n\nTo retrieve only subsets of the spreadsheet, use the\nranges URL parameter.\nMultiple ranges can be specified.  Limiting the range will\nreturn only the portions of the spreadsheet that intersect the requested\nranges. Ranges are specified using A1 notation.",
        "summary": "GetV4SpreadsheetsBySpreadsheetId",
        "tags": [
          "spreadsheets"
        ],
        "operationId": "V4SpreadsheetsBySpreadsheetIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "spreadsheetId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The spreadsheet to request."
          },
          {
            "name": "upload_protocol",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          },
          {
            "name": "quotaUser",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          },
          {
            "name": "prettyPrint",
            "in": "query",
            "required": false,
            "default": true,
            "type": "boolean",
            "description": "Returns response with indentations and line breaks."
          },
          {
            "name": "uploadType",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          {
            "name": "callback",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "JSONP"
          },
          {
            "name": "oauth_token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          {
            "name": "$.xgafv",
            "in": "query",
            "required": false,
            "default": "1",
            "type": "string",
            "description": "V1 error format. (Acceptable values are: \"1\", \"2\")"
          },
          {
            "name": "alt",
            "in": "query",
            "required": false,
            "default": "json",
            "type": "string",
            "description": "Data format for response. (Acceptable values are: \"json\", \"media\", \"proto\")"
          },
          {
            "name": "key",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          {
            "name": "access_token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "OAuth access token."
          },
          {
            "name": "ranges",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The ranges to retrieve from the spreadsheet."
          },
          {
            "name": "includeGridData",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "True if grid data should be returned.\nThis parameter is ignored if a field mask was set in the request."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Spreadsheet"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "auth": [
              "https://www.googleapis.com/auth/drive",
              "https://www.googleapis.com/auth/drive.file",
              "https://www.googleapis.com/auth/drive.readonly",
              "https://www.googleapis.com/auth/spreadsheets",
              "https://www.googleapis.com/auth/spreadsheets.readonly"
            ]
          }
        ]
      }
    },
    "/v4/spreadsheets/{spreadsheetId}:getByDataFilter": {
      "post": {
        "description": "Returns the spreadsheet at the given ID.\nThe caller must specify the spreadsheet ID.\n\nThis method differs from GetSpreadsheet in that it allows selecting\nwhich subsets of spreadsheet data to return by specifying a\ndataFilters parameter.\nMultiple DataFilters can be specified.  Specifying one or\nmore data filters will return the portions of the spreadsheet that\nintersect ranges matched by any of the filters.\n\nBy default, data within grids will not be returned.\nYou can include grid data one of two ways:\n\n* Specify a field mask listing your desired fields using the `fields` URL\nparameter in HTTP\n\n* Set the includeGridData\nparameter to true.  If a field mask is set, the `includeGridData`\nparameter is ignored\n\nFor large spreadsheets, it is recommended to retrieve only the specific\nfields of the spreadsheet that you want.",
        "summary": "GetByDataFilterV4SpreadsheetsGetByDataFilter",
        "tags": [
          "spreadsheets"
        ],
        "operationId": "V4SpreadsheetsGetByDataFilterBySpreadsheetIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "spreadsheetId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The spreadsheet to request."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/GetSpreadsheetByDataFilterRequest"
            }
          },
          {
            "name": "upload_protocol",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
          },
          {
            "name": "quotaUser",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
          },
          {
            "name": "prettyPrint",
            "in": "query",
            "required": false,
            "default": true,
            "type": "boolean",
            "description": "Returns response with indentations and line breaks."
          },
          {
            "name": "uploadType",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Selector specifying which fields to include in a partial response."
          },
          {
            "name": "callback",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "JSONP"
          },
          {
            "name": "oauth_token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "OAuth 2.0 token for the current user."
          },
          {
            "name": "$.xgafv",
            "in": "query",
            "required": false,
            "default": "1",
            "type": "string",
            "description": "V1 error format. (Acceptable values are: \"1\", \"2\")"
          },
          {
            "name": "alt",
            "in": "query",
            "required": false,
            "default": "json",
            "type": "string",
            "description": "Data format for response. (Acceptable values are: \"json\", \"media\", \"proto\")"
          },
          {
            "name": "key",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
          },
          {
            "name": "access_token",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "OAuth access token."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Spreadsheet"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "auth": [
              "https://www.googleapis.com/auth/drive",
              "https://www.googleapis.com/auth/drive.file",
              "https://www.googleapis.com/auth/spreadsheets"
            ]
          }
        ]
      }
    }
  },
  "definitions": {
    "PivotTable": {
      "title": "PivotTable",
      "description": "A pivot table.",
      "type": "object",
      "properties": {
        "criteria": {
          "description": "An optional mapping of filters per source column offset.\n\nThe filters are applied before aggregating data into the pivot table.\nThe map's key is the column offset of the source range that you want to\nfilter, and the value is the criteria for that column.\n\nFor example, if the source was `C10:E15`, a key of `0` will have the filter\nfor column `C`, whereas the key `1` is for column `D`.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/PivotFilterCriteria"
          }
        },
        "rows": {
          "description": "Each row grouping in the pivot table.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PivotGroup"
          }
        },
        "valueLayout": {
          "$ref": "#/definitions/ValueLayout"
        },
        "values": {
          "description": "A list of values to include in the pivot table.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PivotValue"
          }
        },
        "source": {
          "$ref": "#/definitions/GridRange"
        },
        "columns": {
          "description": "Each column grouping in the pivot table.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PivotGroup"
          }
        }
      }
    },
    "ChartSourceRange": {
      "title": "ChartSourceRange",
      "description": "Source ranges for a chart.",
      "type": "object",
      "properties": {
        "sources": {
          "description": "The ranges of data for a series or domain.\nExactly one dimension must have a length of 1,\nand all sources in the list must have the same dimension\nwith length 1.\nThe domain (if it exists) & all series must have the same number\nof source ranges. If using more than one source range, then the source\nrange at a given offset must be in order and contiguous across the domain\nand series.\n\nFor example, these are valid configurations:\n\n    domain sources: A1:A5\n    series1 sources: B1:B5\n    series2 sources: D6:D10\n\n    domain sources: A1:A5, C10:C12\n    series1 sources: B1:B5, D10:D12\n    series2 sources: C1:C5, E10:E12",
          "type": "array",
          "items": {
            "$ref": "#/definitions/GridRange"
          }
        }
      }
    },
    "SearchDeveloperMetadataResponse": {
      "title": "SearchDeveloperMetadataResponse",
      "description": "A reply to a developer metadata search request.",
      "type": "object",
      "properties": {
        "matchedDeveloperMetadata": {
          "description": "The metadata matching the criteria of the search request.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MatchedDeveloperMetadata"
          }
        }
      }
    },
    "AppendCellsRequest": {
      "title": "AppendCellsRequest",
      "description": "Adds new cells after the last row with data in a sheet,\ninserting new rows into the sheet if necessary.",
      "type": "object",
      "properties": {
        "rows": {
          "description": "The data to append.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RowData"
          }
        },
        "fields": {
          "description": "The fields of CellData that should be updated.\nAt least one field must be specified.\nThe root is the CellData; 'row.values.' should not be specified.\nA single `\"*\"` can be used as short-hand for listing every field.",
          "type": "string"
        },
        "sheetId": {
          "description": "The sheet ID to append the data to.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ValueRange": {
      "title": "ValueRange",
      "description": "Data within a range of the spreadsheet.",
      "type": "object",
      "properties": {
        "range": {
          "description": "The range the values cover, in A1 notation.\nFor output, this range indicates the entire requested range,\neven though the values will exclude trailing rows and columns.\nWhen appending values, this field represents the range to search for a\ntable, after which values will be appended.",
          "type": "string"
        },
        "majorDimension": {
          "$ref": "#/definitions/MajorDimension"
        },
        "values": {
          "description": "The data that was read or to be written.  This is an array of arrays,\nthe outer array representing all the data and each inner array\nrepresenting a major dimension. Each item in the inner array\ncorresponds with one cell.\n\nFor output, empty trailing rows and columns will not be included.\n\nFor input, supported value types are: bool, string, and double.\nNull values will be skipped.\nTo set a cell to an empty value, set the string value to an empty string.",
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      }
    },
    "AddBandingRequest": {
      "title": "AddBandingRequest",
      "description": "Adds a new banded range to the spreadsheet.",
      "type": "object",
      "properties": {
        "bandedRange": {
          "$ref": "#/definitions/BandedRange"
        }
      }
    },
    "Response": {
      "title": "Response",
      "description": "A single response from an update.",
      "type": "object",
      "properties": {
        "deleteDeveloperMetadata": {
          "$ref": "#/definitions/DeleteDeveloperMetadataResponse"
        },
        "addFilterView": {
          "$ref": "#/definitions/AddFilterViewResponse"
        },
        "addBanding": {
          "$ref": "#/definitions/AddBandingResponse"
        },
        "addProtectedRange": {
          "$ref": "#/definitions/AddProtectedRangeResponse"
        },
        "duplicateSheet": {
          "$ref": "#/definitions/DuplicateSheetResponse"
        },
        "updateEmbeddedObjectPosition": {
          "$ref": "#/definitions/UpdateEmbeddedObjectPositionResponse"
        },
        "deleteConditionalFormatRule": {
          "$ref": "#/definitions/DeleteConditionalFormatRuleResponse"
        },
        "deleteDimensionGroup": {
          "$ref": "#/definitions/DeleteDimensionGroupResponse"
        },
        "duplicateFilterView": {
          "$ref": "#/definitions/DuplicateFilterViewResponse"
        },
        "addDimensionGroup": {
          "$ref": "#/definitions/AddDimensionGroupResponse"
        },
        "addChart": {
          "$ref": "#/definitions/AddChartResponse"
        },
        "updateDeveloperMetadata": {
          "$ref": "#/definitions/UpdateDeveloperMetadataResponse"
        },
        "findReplace": {
          "$ref": "#/definitions/FindReplaceResponse"
        },
        "addSheet": {
          "$ref": "#/definitions/AddSheetResponse"
        },
        "updateConditionalFormatRule": {
          "$ref": "#/definitions/UpdateConditionalFormatRuleResponse"
        },
        "createDeveloperMetadata": {
          "$ref": "#/definitions/CreateDeveloperMetadataResponse"
        },
        "addNamedRange": {
          "$ref": "#/definitions/AddNamedRangeResponse"
        }
      }
    },
    "InsertRangeRequest": {
      "title": "InsertRangeRequest",
      "description": "Inserts cells into a range, shifting the existing cells over or down.",
      "type": "object",
      "properties": {
        "shiftDimension": {
          "$ref": "#/definitions/ShiftDimension"
        },
        "range": {
          "$ref": "#/definitions/GridRange"
        }
      }
    },
    "TextFormatRun": {
      "title": "TextFormatRun",
      "description": "A run of a text format. The format of this run continues until the start\nindex of the next run.\nWhen updating, all fields must be set.",
      "type": "object",
      "properties": {
        "format": {
          "$ref": "#/definitions/TextFormat"
        },
        "startIndex": {
          "description": "The character index where this run starts.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "EmbeddedChart": {
      "title": "EmbeddedChart",
      "description": "A chart embedded in a sheet.",
      "type": "object",
      "properties": {
        "chartId": {
          "description": "The ID of the chart.",
          "type": "integer",
          "format": "int32"
        },
        "position": {
          "$ref": "#/definitions/EmbeddedObjectPosition"
        },
        "spec": {
          "$ref": "#/definitions/ChartSpec"
        }
      }
    },
    "AddNamedRangeResponse": {
      "title": "AddNamedRangeResponse",
      "description": "A reply from adding a named range.",
      "type": "object",
      "properties": {
        "namedRange": {
          "description": "The named range to add.",
          "type": "object"
        }
      }
    },
    "BatchUpdateValuesByDataFilterResponse": {
      "title": "BatchUpdateValuesByDataFilterResponse",
      "description": "The response when updating a range of values in a spreadsheet.",
      "type": "object",
      "properties": {
        "totalUpdatedSheets": {
          "description": "The total number of sheets where at least one cell in the sheet was\nupdated.",
          "type": "integer",
          "format": "int32"
        },
        "totalUpdatedCells": {
          "description": "The total number of cells updated.",
          "type": "integer",
          "format": "int32"
        },
        "totalUpdatedColumns": {
          "description": "The total number of columns where at least one cell in the column was\nupdated.",
          "type": "integer",
          "format": "int32"
        },
        "spreadsheetId": {
          "description": "The spreadsheet the updates were applied to.",
          "type": "string"
        },
        "totalUpdatedRows": {
          "description": "The total number of rows where at least one cell in the row was updated.",
          "type": "integer",
          "format": "int32"
        },
        "responses": {
          "description": "The response for each range updated.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/UpdateValuesByDataFilterResponse"
          }
        }
      }
    },
    "RowData": {
      "title": "RowData",
      "description": "Data about each cell in a row.",
      "type": "object",
      "properties": {
        "values": {
          "description": "The values in the row, one per column.",
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      }
    },
    "Border": {
      "title": "Border",
      "description": "A border along a cell.",
      "type": "object",
      "properties": {
        "width": {
          "description": "The width of the border, in pixels.\nDeprecated; the width is determined by the \"style\" field.",
          "type": "integer",
          "format": "int32"
        },
        "style": {
          "$ref": "#/definitions/Style"
        },
        "color": {
          "$ref": "#/definitions/Color"
        }
      }
    },
    "GridData": {
      "title": "GridData",
      "description": "Data in the grid, as well as metadata about the dimensions.",
      "type": "object",
      "properties": {
        "startRow": {
          "description": "The first row this GridData refers to, zero-based.",
          "type": "integer",
          "format": "int32"
        },
        "columnMetadata": {
          "description": "Metadata about the requested columns in the grid, starting with the column\nin start_column.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DimensionProperties"
          }
        },
        "startColumn": {
          "description": "The first column this GridData refers to, zero-based.",
          "type": "integer",
          "format": "int32"
        },
        "rowMetadata": {
          "description": "Metadata about the requested rows in the grid, starting with the row\nin start_row.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DimensionProperties"
          }
        },
        "rowData": {
          "description": "The data in the grid, one entry per row,\nstarting with the row in startRow.\nThe values in RowData will correspond to columns starting\nat start_column.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RowData"
          }
        }
      }
    },
    "UpdateNamedRangeRequest": {
      "title": "UpdateNamedRangeRequest",
      "description": "Updates properties of the named range with the specified\nnamedRangeId.",
      "type": "object",
      "properties": {
        "namedRange": {
          "$ref": "#/definitions/NamedRange"
        },
        "fields": {
          "description": "The fields that should be updated.  At least one field must be specified.\nThe root `namedRange` is implied and should not be specified.\nA single `\"*\"` can be used as short-hand for listing every field.",
          "type": "string"
        }
      }
    },
    "FindReplaceRequest": {
      "title": "FindReplaceRequest",
      "description": "Finds and replaces data in cells over a range, sheet, or all sheets.",
      "type": "object",
      "properties": {
        "sheetId": {
          "description": "The sheet to find/replace over.",
          "type": "integer",
          "format": "int32"
        },
        "matchCase": {
          "description": "True if the search is case sensitive.",
          "type": "boolean"
        },
        "allSheets": {
          "description": "True to find/replace over all sheets.",
          "type": "boolean"
        },
        "includeFormulas": {
          "description": "True if the search should include cells with formulas.\nFalse to skip cells with formulas.",
          "type": "boolean"
        },
        "matchEntireCell": {
          "description": "True if the find value should match the entire cell.",
          "type": "boolean"
        },
        "find": {
          "description": "The value to search.",
          "type": "string"
        },
        "searchByRegex": {
          "description": "True if the find value is a regex.\nThe regular expression and replacement should follow Java regex rules\nat https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html.\nThe replacement string is allowed to refer to capturing groups.\nFor example, if one cell has the contents `\"Google Sheets\"` and another\nhas `\"Google Docs\"`, then searching for `\"o.* (.*)\"` with a replacement of\n`\"$1 Rocks\"` would change the contents of the cells to\n`\"GSheets Rocks\"` and `\"GDocs Rocks\"` respectively.",
          "type": "boolean"
        },
        "replacement": {
          "description": "The value to use as the replacement.",
          "type": "string"
        },
        "range": {
          "$ref": "#/definitions/GridRange"
        }
      }
    },
    "AddSheetRequest": {
      "title": "AddSheetRequest",
      "description": "Adds a new sheet.\nWhen a sheet is added at a given index,\nall subsequent sheets' indexes are incremented.\nTo add an object sheet, use AddChartRequest instead and specify\nEmbeddedObjectPosition.sheetId or\nEmbeddedObjectPosition.newSheet.",
      "type": "object",
      "properties": {
        "properties": {
          "$ref": "#/definitions/SheetProperties"
        }
      }
    },
    "UpdateCellsRequest": {
      "title": "UpdateCellsRequest",
      "description": "Updates all cells in a range with new data.",
      "type": "object",
      "properties": {
        "start": {
          "$ref": "#/definitions/GridCoordinate"
        },
        "range": {
          "$ref": "#/definitions/GridRange"
        },
        "rows": {
          "description": "The data to write.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RowData"
          }
        },
        "fields": {
          "description": "The fields of CellData that should be updated.\nAt least one field must be specified.\nThe root is the CellData; 'row.values.' should not be specified.\nA single `\"*\"` can be used as short-hand for listing every field.",
          "type": "string"
        }
      }
    },
    "RandomizeRangeRequest": {
      "title": "RandomizeRangeRequest",
      "description": "Randomizes the order of the rows in a range.",
      "type": "object",
      "properties": {
        "range": {
          "$ref": "#/definitions/GridRange"
        }
      }
    },
    "DeleteConditionalFormatRuleResponse": {
      "title": "DeleteConditionalFormatRuleResponse",
      "description": "A reply from deleting a conditional format rule.",
      "type": "object",
      "properties": {
        "rule": {
          "description": "The rule that was deleted.",
          "type": "object"
        }
      }
    },
    "DeleteRangeRequest": {
      "title": "DeleteRangeRequest",
      "description": "Deletes a range of cells, shifting other cells into the deleted area.",
      "type": "object",
      "properties": {
        "shiftDimension": {
          "$ref": "#/definitions/ShiftDimension1"
        },
        "range": {
          "$ref": "#/definitions/GridRange"
        }
      }
    },
    "GridCoordinate": {
      "title": "GridCoordinate",
      "description": "The coordinate to start writing data at.\nAny number of rows and columns (including a different number of\ncolumns per row) may be written.",
      "type": "object",
      "properties": {
        "rowIndex": {
          "description": "The row index of the coordinate.",
          "type": "integer",
          "format": "int32"
        },
        "columnIndex": {
          "description": "The column index of the coordinate.",
          "type": "integer",
          "format": "int32"
        },
        "sheetId": {
          "description": "The sheet this coordinate is on.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "UpdateSheetPropertiesRequest": {
      "title": "UpdateSheetPropertiesRequest",
      "description": "Updates properties of the sheet with the specified\nsheetId.",
      "type": "object",
      "properties": {
        "fields": {
          "description": "The fields that should be updated.  At least one field must be specified.\nThe root `properties` is implied and should not be specified.\nA single `\"*\"` can be used as short-hand for listing every field.",
          "type": "string"
        },
        "properties": {
          "$ref": "#/definitions/SheetProperties"
        }
      }
    },
    "GridProperties": {
      "title": "GridProperties",
      "description": "Properties of a grid.",
      "type": "object",
      "properties": {
        "frozenRowCount": {
          "description": "The number of rows that are frozen in the grid.",
          "type": "integer",
          "format": "int32"
        },
        "columnCount": {
          "description": "The number of columns in the grid.",
          "type": "integer",
          "format": "int32"
        },
        "frozenColumnCount": {
          "description": "The number of columns that are frozen in the grid.",
          "type": "integer",
          "format": "int32"
        },
        "columnGroupControlAfter": {
          "description": "True if the column grouping control toggle is shown after the group.",
          "type": "boolean"
        },
        "rowGroupControlAfter": {
          "description": "True if the row grouping control toggle is shown after the group.",
          "type": "boolean"
        },
        "rowCount": {
          "description": "The number of rows in the grid.",
          "type": "integer",
          "format": "int32"
        },
        "hideGridlines": {
          "description": "True if the grid isn't showing gridlines in the UI.",
          "type": "boolean"
        }
      }
    },
    "UnmergeCellsRequest": {
      "title": "UnmergeCellsRequest",
      "description": "Unmerges cells in the given range.",
      "type": "object",
      "properties": {
        "range": {
          "$ref": "#/definitions/GridRange"
        }
      }
    },
    "SortSpec": {
      "title": "SortSpec",
      "description": "A sort order associated with a specific column or row.",
      "type": "object",
      "properties": {
        "sortOrder": {
          "$ref": "#/definitions/SortOrder1"
        },
        "dimensionIndex": {
          "description": "The dimension the sort should be applied to.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Sheet": {
      "title": "Sheet",
      "description": "A sheet in a spreadsheet.",
      "type": "object",
      "properties": {
        "columnGroups": {
          "description": "All column groups on this sheet, ordered by increasing range start index,\nthen by group depth.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DimensionGroup"
          }
        },
        "conditionalFormats": {
          "description": "The conditional format rules in this sheet.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConditionalFormatRule"
          }
        },
        "protectedRanges": {
          "description": "The protected ranges in this sheet.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProtectedRange"
          }
        },
        "developerMetadata": {
          "description": "The developer metadata associated with a sheet.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeveloperMetadata"
          }
        },
        "basicFilter": {
          "$ref": "#/definitions/BasicFilter"
        },
        "merges": {
          "description": "The ranges that are merged together.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/GridRange"
          }
        },
        "bandedRanges": {
          "description": "The banded (alternating colors) ranges on this sheet.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BandedRange"
          }
        },
        "charts": {
          "description": "The specifications of every chart on this sheet.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/EmbeddedChart"
          }
        },
        "filterViews": {
          "description": "The filter views in this sheet.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FilterView"
          }
        },
        "rowGroups": {
          "description": "All row groups on this sheet, ordered by increasing range start index, then\nby group depth.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DimensionGroup"
          }
        },
        "data": {
          "description": "Data in the grid, if this is a grid sheet.\nThe number of GridData objects returned is dependent on the number of\nranges requested on this sheet. For example, if this is representing\n`Sheet1`, and the spreadsheet was requested with ranges\n`Sheet1!A1:C10` and `Sheet1!D15:E20`, then the first GridData will have a\nstartRow/startColumn of `0`,\nwhile the second one will have `startRow 14` (zero-based row 15),\nand `startColumn 3` (zero-based column D).",
          "type": "array",
          "items": {
            "$ref": "#/definitions/GridData"
          }
        },
        "properties": {
          "$ref": "#/definitions/SheetProperties"
        }
      }
    },
    "UpdateEmbeddedObjectPositionResponse": {
      "title": "UpdateEmbeddedObjectPositionResponse",
      "description": "A reply from updating an embedded object's position.",
      "type": "object",
      "properties": {
        "position": {
          "description": "The new position of the embedded object.",
          "type": "object"
        }
      }
    },
    "BooleanRule": {
      "title": "BooleanRule",
      "description": "A rule that may or may not match, depending on the condition.",
      "type": "object",
      "properties": {
        "condition": {
          "$ref": "#/definitions/BooleanCondition"
        },
        "format": {
          "$ref": "#/definitions/CellFormat"
        }
      }
    },
    "FilterCriteria": {
      "title": "FilterCriteria",
      "description": "Criteria for showing/hiding rows in a filter or filter view.",
      "type": "object",
      "properties": {
        "hiddenValues": {
          "description": "Values that should be hidden.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "condition": {
          "$ref": "#/definitions/BooleanCondition"
        }
      }
    },
    "PivotGroupValueMetadata": {
      "title": "PivotGroupValueMetadata",
      "description": "Metadata about a value in a pivot grouping.",
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/ExtendedValue"
        },
        "collapsed": {
          "description": "True if the data corresponding to the value is collapsed.",
          "type": "boolean"
        }
      }
    },
    "WaterfallChartSpec": {
      "title": "WaterfallChartSpec",
      "description": "A waterfall chart.",
      "type": "object",
      "properties": {
        "connectorLineStyle": {
          "$ref": "#/definitions/LineStyle"
        },
        "domain": {
          "$ref": "#/definitions/WaterfallChartDomain"
        },
        "firstValueIsTotal": {
          "description": "True to interpret the first value as a total.",
          "type": "boolean"
        },
        "stackedType": {
          "$ref": "#/definitions/StackedType"
        },
        "hideConnectorLines": {
          "description": "True to hide connector lines between columns.",
          "type": "boolean"
        },
        "series": {
          "description": "The data this waterfall chart is visualizing.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/WaterfallChartSeries"
          }
        }
      }
    },
    "Editors": {
      "title": "Editors",
      "description": "The editors of a protected range.",
      "type": "object",
      "properties": {
        "users": {
          "description": "The email addresses of users with edit access to the protected range.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "groups": {
          "description": "The email addresses of groups with edit access to the protected range.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "domainUsersCanEdit": {
          "description": "True if anyone in the document's domain has edit access to the protected\nrange.  Domain protection is only supported on documents within a domain.",
          "type": "boolean"
        }
      }
    },
    "UpdateConditionalFormatRuleRequest": {
      "title": "UpdateConditionalFormatRuleRequest",
      "description": "Updates a conditional format rule at the given index,\nor moves a conditional format rule to another index.",
      "type": "object",
      "properties": {
        "index": {
          "description": "The zero-based index of the rule that should be replaced or moved.",
          "type": "integer",
          "format": "int32"
        },
        "sheetId": {
          "description": "The sheet of the rule to move.  Required if new_index is set,\nunused otherwise.",
          "type": "integer",
          "format": "int32"
        },
        "newIndex": {
          "description": "The zero-based new index the rule should end up at.",
          "type": "integer",
          "format": "int32"
        },
        "rule": {
          "$ref": "#/definitions/ConditionalFormatRule"
        }
      }
    },
    "BasicChartDomain": {
      "title": "BasicChartDomain",
      "description": "The domain of a chart.\nFor example, if charting stock prices over time, this would be the date.",
      "type": "object",
      "properties": {
        "domain": {
          "$ref": "#/definitions/ChartData"
        },
        "reversed": {
          "description": "True to reverse the order of the domain values (horizontal axis).",
          "type": "boolean"
        }
      }
    },
    "DataValidationRule": {
      "title": "DataValidationRule",
      "description": "A data validation rule.",
      "type": "object",
      "properties": {
        "strict": {
          "description": "True if invalid data should be rejected.",
          "type": "boolean"
        },
        "inputMessage": {
          "description": "A message to show the user when adding data to the cell.",
          "type": "string"
        },
        "condition": {
          "$ref": "#/definitions/BooleanCondition"
        },
        "showCustomUi": {
          "description": "True if the UI should be customized based on the kind of condition.\nIf true, \"List\" conditions will show a dropdown.",
          "type": "boolean"
        }
      }
    },
    "PasteDataRequest": {
      "title": "PasteDataRequest",
      "description": "Inserts data into the spreadsheet starting at the specified coordinate.",
      "type": "object",
      "properties": {
        "data": {
          "description": "The data to insert.",
          "type": "string"
        },
        "delimiter": {
          "description": "The delimiter in the data.",
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/Type2"
        },
        "html": {
          "description": "True if the data is HTML.",
          "type": "boolean"
        },
        "coordinate": {
          "$ref": "#/definitions/GridCoordinate"
        }
      }
    },
    "UpdateDeveloperMetadataResponse": {
      "title": "UpdateDeveloperMetadataResponse",
      "description": "A reply from updating a developer metadata entry.",
      "type": "object",
      "properties": {
        "developerMetadata": {
          "description": "The updated developer metadata.",
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      }
    },
    "AppendDimensionRequest": {
      "title": "AppendDimensionRequest",
      "description": "Appends rows or columns to the end of a sheet.",
      "type": "object",
      "properties": {
        "sheetId": {
          "description": "The sheet to append rows or columns to.",
          "type": "integer",
          "format": "int32"
        },
        "dimension": {
          "$ref": "#/definitions/Dimension"
        },
        "length": {
          "description": "The number of rows or columns to append.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "AddNamedRangeRequest": {
      "title": "AddNamedRangeRequest",
      "description": "Adds a named range to the spreadsheet.",
      "type": "object",
      "properties": {
        "namedRange": {
          "$ref": "#/definitions/NamedRange"
        }
      }
    },
    "CreateDeveloperMetadataResponse": {
      "title": "CreateDeveloperMetadataResponse",
      "description": "A reply from creating a developer metadata entry.",
      "type": "object",
      "properties": {
        "developerMetadata": {
          "description": "The developer metadata that was created.",
          "type": "object"
        }
      }
    },
    "UpdateEmbeddedObjectPositionRequest": {
      "title": "UpdateEmbeddedObjectPositionRequest",
      "description": "Update an embedded object's position (such as a moving or resizing a\nchart or image).",
      "type": "object",
      "properties": {
        "newPosition": {
          "$ref": "#/definitions/EmbeddedObjectPosition"
        },
        "fields": {
          "description": "The fields of OverlayPosition\nthat should be updated when setting a new position. Used only if\nnewPosition.overlayPosition\nis set, in which case at least one field must\nbe specified.  The root `newPosition.overlayPosition` is implied and\nshould not be specified.\nA single `\"*\"` can be used as short-hand for listing every field.",
          "type": "string"
        },
        "objectId": {
          "description": "The ID of the object to moved.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "TextRotation": {
      "title": "TextRotation",
      "description": "The rotation applied to text in a cell.",
      "type": "object",
      "properties": {
        "angle": {
          "description": "The angle between the standard orientation and the desired orientation.\nMeasured in degrees. Valid values are between -90 and 90. Positive\nangles are angled upwards, negative are angled downwards.\n\nNote: For LTR text direction positive angles are in the counterclockwise\ndirection, whereas for RTL they are in the clockwise direction",
          "type": "integer",
          "format": "int32"
        },
        "vertical": {
          "description": "If true, text reads top to bottom, but the orientation of individual\ncharacters is unchanged.\nFor example:\n\n    | V |\n    | e |\n    | r |\n    | t |\n    | i |\n    | c |\n    | a |\n    | l |",
          "type": "boolean"
        }
      }
    },
    "DeleteDimensionGroupResponse": {
      "title": "DeleteDimensionGroupResponse",
      "description": "A reply from deleting a dimension group.",
      "type": "object",
      "properties": {
        "dimensionGroups": {
          "description": "All groups of a dimension after deleting a group from that dimension.",
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      }
    },
    "PieChartSpec": {
      "title": "PieChartSpec",
      "description": "A <a href=\"/chart/interactive/docs/gallery/piechart\">pie chart</a>.",
      "type": "object",
      "properties": {
        "domain": {
          "$ref": "#/definitions/ChartData"
        },
        "threeDimensional": {
          "description": "True if the pie is three dimensional.",
          "type": "boolean"
        },
        "series": {
          "$ref": "#/definitions/ChartData"
        },
        "legendPosition": {
          "$ref": "#/definitions/LegendPosition"
        },
        "pieHole": {
          "description": "The size of the hole in the pie chart.",
          "type": "number",
          "format": "double"
        }
      }
    },
    "UpdateDeveloperMetadataRequest": {
      "title": "UpdateDeveloperMetadataRequest",
      "description": "A request to update properties of developer metadata.\nUpdates the properties of the developer metadata selected by the filters to\nthe values provided in the DeveloperMetadata resource.  Callers must\nspecify the properties they wish to update in the fields parameter, as well\nas specify at least one DataFilter matching the metadata they wish to\nupdate.",
      "type": "object",
      "properties": {
        "dataFilters": {
          "description": "The filters matching the developer metadata entries to update.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataFilter"
          }
        },
        "fields": {
          "description": "The fields that should be updated.  At least one field must be specified.\nThe root `developerMetadata` is implied and should not be specified.\nA single `\"*\"` can be used as short-hand for listing every field.",
          "type": "string"
        },
        "developerMetadata": {
          "$ref": "#/definitions/DeveloperMetadata"
        }
      }
    },
    "WaterfallChartColumnStyle": {
      "title": "WaterfallChartColumnStyle",
      "description": "Styles for a waterfall chart column.",
      "type": "object",
      "properties": {
        "color": {
          "$ref": "#/definitions/Color"
        },
        "label": {
          "description": "The label of the column's legend.",
          "type": "string"
        }
      }
    },
    "UpdateFilterViewRequest": {
      "title": "UpdateFilterViewRequest",
      "description": "Updates properties of the filter view.",
      "type": "object",
      "properties": {
        "filter": {
          "$ref": "#/definitions/FilterView"
        },
        "fields": {
          "description": "The fields that should be updated.  At least one field must be specified.\nThe root `filter` is implied and should not be specified.\nA single `\"*\"` can be used as short-hand for listing every field.",
          "type": "string"
        }
      }
    },
    "ConditionalFormatRule": {
      "title": "ConditionalFormatRule",
      "description": "A rule describing a conditional format.",
      "type": "object",
      "properties": {
        "booleanRule": {
          "description": "The formatting is either \"on\" or \"off\" according to the rule.",
          "type": "object"
        },
        "ranges": {
          "description": "The ranges that are formatted if the condition is true.\nAll the ranges must be on the same grid.",
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "gradientRule": {
          "description": "The formatting will vary based on the gradients in the rule.",
          "type": "object"
        }
      }
    },
    "CopyPasteRequest": {
      "title": "CopyPasteRequest",
      "description": "Copies data from the source to the destination.",
      "type": "object",
      "properties": {
        "source": {
          "$ref": "#/definitions/GridRange"
        },
        "pasteType": {
          "$ref": "#/definitions/PasteType"
        },
        "destination": {
          "$ref": "#/definitions/GridRange"
        },
        "pasteOrientation": {
          "$ref": "#/definitions/PasteOrientation"
        }
      }
    },
    "BooleanCondition": {
      "title": "BooleanCondition",
      "description": "The condition of the rule. If the condition evaluates to true,\nthe format is applied.",
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/Type"
        },
        "values": {
          "description": "The values of the condition. The number of supported values depends\non the condition type.  Some support zero values,\nothers one or two values,\nand ConditionType.ONE_OF_LIST supports an arbitrary number of values.",
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      }
    },
    "Request": {
      "title": "Request",
      "description": "A single kind of update to apply to a spreadsheet.",
      "type": "object",
      "properties": {
        "autoResizeDimensions": {
          "$ref": "#/definitions/AutoResizeDimensionsRequest"
        },
        "appendCells": {
          "$ref": "#/definitions/AppendCellsRequest"
        },
        "cutPaste": {
          "$ref": "#/definitions/CutPasteRequest"
        },
        "mergeCells": {
          "$ref": "#/definitions/MergeCellsRequest"
        },
        "updateNamedRange": {
          "$ref": "#/definitions/UpdateNamedRangeRequest"
        },
        "updateSheetProperties": {
          "$ref": "#/definitions/UpdateSheetPropertiesRequest"
        },
        "deleteDimension": {
          "$ref": "#/definitions/DeleteDimensionRequest"
        },
        "autoFill": {
          "$ref": "#/definitions/AutoFillRequest"
        },
        "sortRange": {
          "$ref": "#/definitions/SortRangeRequest"
        },
        "deleteDimensionGroup": {
          "$ref": "#/definitions/DeleteDimensionGroupRequest"
        },
        "deleteProtectedRange": {
          "$ref": "#/definitions/DeleteProtectedRangeRequest"
        },
        "duplicateFilterView": {
          "$ref": "#/definitions/DuplicateFilterViewRequest"
        },
        "addChart": {
          "$ref": "#/definitions/AddChartRequest"
        },
        "findReplace": {
          "$ref": "#/definitions/FindReplaceRequest"
        },
        "textToColumns": {
          "$ref": "#/definitions/TextToColumnsRequest"
        },
        "updateChartSpec": {
          "$ref": "#/definitions/UpdateChartSpecRequest"
        },
        "addSheet": {
          "$ref": "#/definitions/AddSheetRequest"
        },
        "updateProtectedRange": {
          "$ref": "#/definitions/UpdateProtectedRangeRequest"
        },
        "deleteFilterView": {
          "$ref": "#/definitions/DeleteFilterViewRequest"
        },
        "copyPaste": {
          "$ref": "#/definitions/CopyPasteRequest"
        },
        "insertDimension": {
          "$ref": "#/definitions/InsertDimensionRequest"
        },
        "deleteRange": {
          "$ref": "#/definitions/DeleteRangeRequest"
        },
        "deleteBanding": {
          "$ref": "#/definitions/DeleteBandingRequest"
        },
        "addFilterView": {
          "$ref": "#/definitions/AddFilterViewRequest"
        },
        "updateBorders": {
          "$ref": "#/definitions/UpdateBordersRequest"
        },
        "setDataValidation": {
          "$ref": "#/definitions/SetDataValidationRequest"
        },
        "deleteConditionalFormatRule": {
          "$ref": "#/definitions/DeleteConditionalFormatRuleRequest"
        },
        "repeatCell": {
          "$ref": "#/definitions/RepeatCellRequest"
        },
        "clearBasicFilter": {
          "$ref": "#/definitions/ClearBasicFilterRequest"
        },
        "appendDimension": {
          "$ref": "#/definitions/AppendDimensionRequest"
        },
        "updateConditionalFormatRule": {
          "$ref": "#/definitions/UpdateConditionalFormatRuleRequest"
        },
        "createDeveloperMetadata": {
          "$ref": "#/definitions/CreateDeveloperMetadataRequest"
        },
        "insertRange": {
          "$ref": "#/definitions/InsertRangeRequest"
        },
        "moveDimension": {
          "$ref": "#/definitions/MoveDimensionRequest"
        },
        "deleteDeveloperMetadata": {
          "$ref": "#/definitions/DeleteDeveloperMetadataRequest"
        },
        "randomizeRange": {
          "$ref": "#/definitions/RandomizeRangeRequest"
        },
        "updateBanding": {
          "$ref": "#/definitions/UpdateBandingRequest"
        },
        "addProtectedRange": {
          "$ref": "#/definitions/AddProtectedRangeRequest"
        },
        "deleteNamedRange": {
          "$ref": "#/definitions/DeleteNamedRangeRequest"
        },
        "duplicateSheet": {
          "$ref": "#/definitions/DuplicateSheetRequest"
        },
        "deleteSheet": {
          "$ref": "#/definitions/DeleteSheetRequest"
        },
        "unmergeCells": {
          "$ref": "#/definitions/UnmergeCellsRequest"
        },
        "updateEmbeddedObjectPosition": {
          "$ref": "#/definitions/UpdateEmbeddedObjectPositionRequest"
        },
        "addDimensionGroup": {
          "$ref": "#/definitions/AddDimensionGroupRequest"
        },
        "updateDeveloperMetadata": {
          "$ref": "#/definitions/UpdateDeveloperMetadataRequest"
        },
        "updateDimensionProperties": {
          "$ref": "#/definitions/UpdateDimensionPropertiesRequest"
        },
        "updateDimensionGroup": {
          "$ref": "#/definitions/UpdateDimensionGroupRequest"
        },
        "pasteData": {
          "$ref": "#/definitions/PasteDataRequest"
        },
        "setBasicFilter": {
          "$ref": "#/definitions/SetBasicFilterRequest"
        },
        "addConditionalFormatRule": {
          "$ref": "#/definitions/AddConditionalFormatRuleRequest"
        },
        "addNamedRange": {
          "$ref": "#/definitions/AddNamedRangeRequest"
        },
        "updateCells": {
          "$ref": "#/definitions/UpdateCellsRequest"
        },
        "updateSpreadsheetProperties": {
          "$ref": "#/definitions/UpdateSpreadsheetPropertiesRequest"
        },
        "deleteEmbeddedObject": {
          "$ref": "#/definitions/DeleteEmbeddedObjectRequest"
        },
        "updateFilterView": {
          "$ref": "#/definitions/UpdateFilterViewRequest"
        },
        "addBanding": {
          "$ref": "#/definitions/AddBandingRequest"
        }
      }
    },
    "WaterfallChartDomain": {
      "title": "WaterfallChartDomain",
      "description": "The domain data (horizontal axis) for the waterfall chart.",
      "type": "object",
      "properties": {
        "data": {
          "description": "The data of the WaterfallChartDomain.",
          "type": "object"
        },
        "reversed": {
          "description": "True to reverse the order of the domain values (horizontal axis).",
          "type": "boolean"
        }
      }
    },
    "GridRange": {
      "title": "GridRange",
      "description": "The range the pivot table is reading data from.",
      "type": "object",
      "properties": {
        "startColumnIndex": {
          "description": "The start column (inclusive) of the range, or not set if unbounded.",
          "type": "integer",
          "format": "int32"
        },
        "sheetId": {
          "description": "The sheet this range is on.",
          "type": "integer",
          "format": "int32"
        },
        "endRowIndex": {
          "description": "The end row (exclusive) of the range, or not set if unbounded.",
          "type": "integer",
          "format": "int32"
        },
        "endColumnIndex": {
          "description": "The end column (exclusive) of the range, or not set if unbounded.",
          "type": "integer",
          "format": "int32"
        },
        "startRowIndex": {
          "description": "The start row (inclusive) of the range, or not set if unbounded.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "BasicChartSpec": {
      "title": "BasicChartSpec",
      "description": "The specification for a basic chart.  See BasicChartType for the list\nof charts this supports.",
      "type": "object",
      "properties": {
        "headerCount": {
          "description": "The number of rows or columns in the data that are \"headers\".\nIf not set, Google Sheets will guess how many rows are headers based\non the data.\n\n(Note that BasicChartAxis.title may override the axis title\n inferred from the header values.)",
          "type": "integer",
          "format": "int32"
        },
        "stackedType": {
          "$ref": "#/definitions/StackedType1"
        },
        "axis": {
          "description": "The axis on the chart.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BasicChartAxis"
          }
        },
        "threeDimensional": {
          "description": "True to make the chart 3D.\nApplies to Bar and Column charts.",
          "type": "boolean"
        },
        "chartType": {
          "$ref": "#/definitions/ChartType"
        },
        "interpolateNulls": {
          "description": "If some values in a series are missing, gaps may appear in the chart (e.g,\nsegments of lines in a line chart will be missing).  To eliminate these\ngaps set this to true.\nApplies to Line, Area, and Combo charts.",
          "type": "boolean"
        },
        "series": {
          "description": "The data this chart is visualizing.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BasicChartSeries"
          }
        },
        "legendPosition": {
          "$ref": "#/definitions/LegendPosition1"
        },
        "compareMode": {
          "$ref": "#/definitions/CompareMode"
        },
        "domains": {
          "description": "The domain of data this is charting.\nOnly a single domain is supported.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BasicChartDomain"
          }
        },
        "lineSmoothing": {
          "description": "Gets whether all lines should be rendered smooth or straight by default.\nApplies to Line charts.",
          "type": "boolean"
        }
      }
    },
    "AddDimensionGroupRequest": {
      "title": "AddDimensionGroupRequest",
      "description": "Creates a group over the specified range.",
      "type": "object",
      "properties": {
        "range": {
          "description": "The range over which to create a group.",
          "type": "object"
        }
      }
    },
    "DeleteDimensionGroupRequest": {
      "title": "DeleteDimensionGroupRequest",
      "description": "Deletes a group over the specified range.",
      "type": "object",
      "properties": {
        "range": {
          "description": "The range of the group to be deleted.",
          "type": "object"
        }
      }
    },
    "BubbleChartSpec": {
      "title": "BubbleChartSpec",
      "description": "A <a href=\"/chart/interactive/docs/gallery/bubblechart\">bubble chart</a>.",
      "type": "object",
      "properties": {
        "domain": {
          "$ref": "#/definitions/ChartData"
        },
        "bubbleSizes": {
          "$ref": "#/definitions/ChartData"
        },
        "bubbleOpacity": {
          "description": "The opacity of the bubbles between 0 and 1.0.\n0 is fully transparent and 1 is fully opaque.",
          "type": "number",
          "format": "double"
        },
        "bubbleBorderColor": {
          "$ref": "#/definitions/Color"
        },
        "bubbleTextStyle": {
          "$ref": "#/definitions/TextFormat"
        },
        "groupIds": {
          "$ref": "#/definitions/ChartData"
        },
        "bubbleLabels": {
          "$ref": "#/definitions/ChartData"
        },
        "bubbleMinRadiusSize": {
          "description": "The minimum radius size of the bubbles, in pixels.\nIf specific, the field must be a positive value.",
          "type": "integer",
          "format": "int32"
        },
        "bubbleMaxRadiusSize": {
          "description": "The max radius size of the bubbles, in pixels.\nIf specified, the field must be a positive value.",
          "type": "integer",
          "format": "int32"
        },
        "series": {
          "$ref": "#/definitions/ChartData"
        },
        "legendPosition": {
          "$ref": "#/definitions/LegendPosition2"
        }
      }
    },
    "SetDataValidationRequest": {
      "title": "SetDataValidationRequest",
      "description": "Sets data validation for one or more cells.",
      "type": "object",
      "properties": {
        "rule": {
          "description": "The data validation rule to set on each cell in the range,\nor empty to clear the data validation in the range.",
          "type": "object"
        },
        "range": {
          "description": "The range the data validation rule should apply to.",
          "type": "object"
        }
      }
    },
    "CellData": {
      "title": "CellData",
      "description": "Data about a specific cell.",
      "type": "object",
      "properties": {
        "formattedValue": {
          "description": "The formatted value of the cell.\nThis is the value as it's shown to the user.\nThis field is read-only.",
          "type": "string"
        },
        "textFormatRuns": {
          "description": "Runs of rich text applied to subsections of the cell.  Runs are only valid\non user entered strings, not formulas, bools, or numbers.\nRuns start at specific indexes in the text and continue until the next\nrun. Properties of a run will continue unless explicitly changed\nin a subsequent run (and properties of the first run will continue\nthe properties of the cell unless explicitly changed).\n\nWhen writing, the new runs will overwrite any prior runs.  When writing a\nnew user_entered_value, previous runs are erased.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TextFormatRun"
          }
        },
        "hyperlink": {
          "description": "A hyperlink this cell points to, if any.\nThis field is read-only.  (To set it, use a `=HYPERLINK` formula\nin the userEnteredValue.formulaValue\nfield.)",
          "type": "string"
        },
        "pivotTable": {
          "$ref": "#/definitions/PivotTable"
        },
        "userEnteredFormat": {
          "$ref": "#/definitions/CellFormat"
        },
        "note": {
          "description": "Any note on the cell.",
          "type": "string"
        },
        "effectiveFormat": {
          "$ref": "#/definitions/CellFormat"
        },
        "userEnteredValue": {
          "$ref": "#/definitions/ExtendedValue"
        },
        "dataValidation": {
          "$ref": "#/definitions/DataValidationRule"
        },
        "effectiveValue": {
          "$ref": "#/definitions/ExtendedValue"
        }
      }
    },
    "TextPosition": {
      "title": "TextPosition",
      "description": "Position settings for text.",
      "type": "object",
      "properties": {
        "horizontalAlignment": {
          "$ref": "#/definitions/HorizontalAlignment1"
        }
      }
    },
    "BatchUpdateValuesByDataFilterRequest": {
      "title": "BatchUpdateValuesByDataFilterRequest",
      "description": "The request for updating more than one range of values in a spreadsheet.",
      "type": "object",
      "properties": {
        "responseValueRenderOption": {
          "$ref": "#/definitions/ResponseValueRenderOption"
        },
        "includeValuesInResponse": {
          "description": "Determines if the update response should include the values\nof the cells that were updated. By default, responses\ndo not include the updated values. The `updatedData` field within\neach of the BatchUpdateValuesResponse.responses will contain\nthe updated values. If the range to write was larger than than the range\nactually written, the response will include all values in the requested\nrange (excluding trailing empty rows and columns).",
          "type": "boolean"
        },
        "valueInputOption": {
          "$ref": "#/definitions/ValueInputOption"
        },
        "data": {
          "description": "The new values to apply to the spreadsheet.  If more than one range is\nmatched by the specified DataFilter the specified values will be\napplied to all of those ranges.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataFilterValueRange"
          }
        },
        "responseDateTimeRenderOption": {
          "$ref": "#/definitions/ResponseDateTimeRenderOption"
        }
      }
    },
    "BatchUpdateSpreadsheetRequest": {
      "title": "BatchUpdateSpreadsheetRequest",
      "description": "The request for updating any aspect of a spreadsheet.",
      "type": "object",
      "properties": {
        "includeSpreadsheetInResponse": {
          "description": "Determines if the update response should include the spreadsheet\nresource.",
          "type": "boolean"
        },
        "responseRanges": {
          "description": "Limits the ranges included in the response spreadsheet.\nMeaningful only if include_spreadsheet_response is 'true'.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "responseIncludeGridData": {
          "description": "True if grid data should be returned. Meaningful only if\nif include_spreadsheet_in_response is 'true'.\nThis parameter is ignored if a field mask was set in the request.",
          "type": "boolean"
        },
        "requests": {
          "description": "A list of updates to apply to the spreadsheet.\nRequests will be applied in the order they are specified.\nIf any request is not valid, no requests will be applied.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Request"
          }
        }
      }
    },
    "BasicChartAxis": {
      "title": "BasicChartAxis",
      "description": "An axis of the chart.\nA chart may not have more than one axis per\naxis position.",
      "type": "object",
      "properties": {
        "position": {
          "$ref": "#/definitions/Position"
        },
        "title": {
          "description": "The title of this axis. If set, this overrides any title inferred\nfrom headers of the data.",
          "type": "string"
        },
        "titleTextPosition": {
          "description": "The axis title text position.",
          "type": "object"
        },
        "format": {
          "description": "The format of the title.\nOnly valid if the axis is not associated with the domain.",
          "type": "object"
        }
      }
    },
    "Padding": {
      "title": "Padding",
      "description": "The amount of padding around the cell, in pixels.\nWhen updating padding, every field must be specified.",
      "type": "object",
      "properties": {
        "right": {
          "description": "The right padding of the cell.",
          "type": "integer",
          "format": "int32"
        },
        "bottom": {
          "description": "The bottom padding of the cell.",
          "type": "integer",
          "format": "int32"
        },
        "top": {
          "description": "The top padding of the cell.",
          "type": "integer",
          "format": "int32"
        },
        "left": {
          "description": "The left padding of the cell.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "DeleteDimensionRequest": {
      "title": "DeleteDimensionRequest",
      "description": "Deletes rows or columns in a sheet.",
      "type": "object",
      "properties": {
        "range": {
          "description": "The dimensions to delete from the sheet.",
          "type": "object"
        }
      }
    },
    "UpdateChartSpecRequest": {
      "title": "UpdateChartSpecRequest",
      "description": "Updates a chart's specifications.",
      "type": "object",
      "properties": {
        "chartId": {
          "description": "The ID of the chart to update.",
          "type": "integer",
          "format": "int32"
        },
        "spec": {
          "description": "The specification to apply to the chart.",
          "type": "object"
        }
      }
    },
    "DeleteFilterViewRequest": {
      "title": "DeleteFilterViewRequest",
      "description": "Deletes a filter view from a sheet.",
      "type": "object",
      "properties": {
        "filterId": {
          "description": "The ID of the filter to delete.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "UpdateDimensionGroupRequest": {
      "title": "UpdateDimensionGroupRequest",
      "description": "Updates the state of the specified group.",
      "type": "object",
      "properties": {
        "fields": {
          "description": "The fields that should be updated.  At least one field must be specified.\nThe root `dimensionGroup` is implied and should not be specified.\nA single `\"*\"` can be used as short-hand for listing every field.",
          "type": "string"
        },
        "dimensionGroup": {
          "description": "The group whose state should be updated. The range and depth of the group\nshould specify a valid group on the sheet, and all other fields updated.",
          "type": "object"
        }
      }
    },
    "BatchGetValuesByDataFilterRequest": {
      "title": "BatchGetValuesByDataFilterRequest",
      "description": "The request for retrieving a range of values in a spreadsheet selected by a\nset of DataFilters.",
      "type": "object",
      "properties": {
        "majorDimension": {
          "$ref": "#/definitions/MajorDimension2"
        },
        "dataFilters": {
          "description": "The data filters used to match the ranges of values to retrieve.  Ranges\nthat match any of the specified data filters will be included in the\nresponse.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataFilter"
          }
        },
        "valueRenderOption": {
          "$ref": "#/definitions/ValueRenderOption"
        },
        "dateTimeRenderOption": {
          "$ref": "#/definitions/DateTimeRenderOption"
        }
      }
    },
    "DeleteDeveloperMetadataResponse": {
      "title": "DeleteDeveloperMetadataResponse",
      "description": "A reply from deleting a developer metadata entry.",
      "type": "object",
      "properties": {
        "deletedDeveloperMetadata": {
          "description": "The metadata that was deleted.",
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      }
    },
    "BatchUpdateValuesResponse": {
      "title": "BatchUpdateValuesResponse",
      "description": "The response when updating a range of values in a spreadsheet.",
      "type": "object",
      "properties": {
        "totalUpdatedColumns": {
          "description": "The total number of columns where at least one cell in the column was\nupdated.",
          "type": "integer",
          "format": "int32"
        },
        "spreadsheetId": {
          "description": "The spreadsheet the updates were applied to.",
          "type": "string"
        },
        "totalUpdatedRows": {
          "description": "The total number of rows where at least one cell in the row was updated.",
          "type": "integer",
          "format": "int32"
        },
        "responses": {
          "description": "One UpdateValuesResponse per requested range, in the same order as\nthe requests appeared.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/UpdateValuesResponse"
          }
        },
        "totalUpdatedSheets": {
          "description": "The total number of sheets where at least one cell in the sheet was\nupdated.",
          "type": "integer",
          "format": "int32"
        },
        "totalUpdatedCells": {
          "description": "The total number of cells updated.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "SortRangeRequest": {
      "title": "SortRangeRequest",
      "description": "Sorts data in a range.",
      "type": "object",
      "properties": {
        "range": {
          "description": "The range to sort.",
          "type": "object"
        },
        "sortSpecs": {
          "description": "The sort order per column. Later specifications are used when values\nare equal in the earlier specifications.",
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      }
    },
    "MatchedDeveloperMetadata": {
      "title": "MatchedDeveloperMetadata",
      "description": "A developer metadata entry and the data filters specified in the original\nrequest that matched it.",
      "type": "object",
      "properties": {
        "dataFilters": {
          "description": "All filters matching the returned developer metadata.",
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "developerMetadata": {
          "description": "The developer metadata matching the specified filters.",
          "type": "object"
        }
      }
    },
    "MergeCellsRequest": {
      "title": "MergeCellsRequest",
      "description": "Merges cells together.",
      "type": "object",
      "properties": {
        "mergeType": {
          "$ref": "#/definitions/MergeType"
        },
        "range": {
          "description": "The range of cells to merge.",
          "type": "object"
        }
      }
    },
    "AddProtectedRangeRequest": {
      "title": "AddProtectedRangeRequest",
      "description": "Adds a protected range.",
      "type": "object",
      "properties": {
        "protectedRange": {
          "description": "The protected range to be added. The\nprotectedRangeId field is optional; if\none is not set, an id will be randomly generated. (It is an error to\nspecify the ID of a range that already exists.)",
          "type": "object"
        }
      }
    },
    "BatchClearValuesRequest": {
      "title": "BatchClearValuesRequest",
      "description": "The request for clearing more than one range of values in a spreadsheet.",
      "type": "object",
      "properties": {
        "ranges": {
          "description": "The ranges to clear, in A1 notation.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "DeveloperMetadata": {
      "title": "DeveloperMetadata",
      "description": "Developer metadata associated with a location or object in a spreadsheet.\nDeveloper metadata may be used to associate arbitrary data with various\nparts of a spreadsheet and will remain associated at those locations as they\nmove around and the spreadsheet is edited.  For example, if developer\nmetadata is associated with row 5 and another row is then subsequently\ninserted above row 5, that original metadata will still be associated with\nthe row it was first associated with (what is now row 6). If the associated\nobject is deleted its metadata is deleted too.",
      "type": "object",
      "properties": {
        "metadataKey": {
          "description": "The metadata key. There may be multiple metadata in a spreadsheet with the\nsame key.  Developer metadata must always have a key specified.",
          "type": "string"
        },
        "metadataId": {
          "description": "The spreadsheet-scoped unique ID that identifies the metadata. IDs may be\nspecified when metadata is created, otherwise one will be randomly\ngenerated and assigned. Must be positive.",
          "type": "integer",
          "format": "int32"
        },
        "location": {
          "description": "The location where the metadata is associated.",
          "type": "object"
        },
        "visibility": {
          "$ref": "#/definitions/Visibility"
        },
        "metadataValue": {
          "description": "Data associated with the metadata's key.",
          "type": "string"
        }
      }
    },
    "DuplicateFilterViewResponse": {
      "title": "DuplicateFilterViewResponse",
      "description": "A reply from duplicating a filter view.",
      "type": "object",
      "properties": {
        "filter": {
          "description": "The newly created filter.",
          "type": "object"
        }
      }
    },
    "DuplicateSheetResponse": {
      "title": "DuplicateSheetResponse",
      "description": "A reply from duplicating a sheet.",
      "type": "object",
      "properties": {
        "properties": {
          "description": "The properties of the duplicate sheet.",
          "type": "object"
        }
      }
    },
    "DimensionGroup": {
      "title": "DimensionGroup",
      "description": "A group over an interval of rows or columns on a sheet, which can contain or\nbe contained within other groups. A group can be collapsed or expanded as a\nunit on the sheet.",
      "type": "object",
      "properties": {
        "collapsed": {
          "description": "This field is true if this group is collapsed. A collapsed group remains\ncollapsed if an overlapping group at a shallower depth is expanded.\n\nA true value does not imply that all dimensions within the group are\nhidden, since a dimension's visibility can change independently from this\ngroup property. However, when this property is updated, all dimensions\nwithin it are set to hidden if this field is true, or set to visible if\nthis field is false.",
          "type": "boolean"
        },
        "range": {
          "description": "The range over which this group exists.",
          "type": "object"
        },
        "depth": {
          "description": "The depth of the group, representing how many groups have a range that\nwholly contains the range of this group.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ClearBasicFilterRequest": {
      "title": "ClearBasicFilterRequest",
      "description": "Clears the basic filter on a sheet.",
      "type": "object",
      "properties": {
        "sheetId": {
          "description": "The sheet ID on which the basic filter should be cleared.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "TextToColumnsRequest": {
      "title": "TextToColumnsRequest",
      "description": "Converts a column of text into many columns of text.",
      "type": "object",
      "properties": {
        "source": {
          "description": "The source data range.  This must span exactly one column.",
          "type": "object"
        },
        "delimiterType": {
          "$ref": "#/definitions/DelimiterType"
        },
        "delimiter": {
          "description": "The delimiter to use. Used only if delimiterType is\nCUSTOM.",
          "type": "string"
        }
      }
    },
    "DeleteBandingRequest": {
      "title": "DeleteBandingRequest",
      "description": "Removes a banded range",
      "type": "object",
      "properties": {
        "bandedRangeId": {
          "description": "The ID of the banded range to delete.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "BatchUpdateSpreadsheetResponse": {
      "title": "BatchUpdateSpreadsheetResponse",
      "description": "The reply for batch updating a spreadsheet.",
      "type": "object",
      "properties": {
        "replies": {
          "description": "The reply of the updates.  This maps 1:1 with the updates, although\nreplies to some requests may be empty.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Response"
          }
        },
        "updatedSpreadsheet": {
          "$ref": "#/definitions/Spreadsheet"
        },
        "spreadsheetId": {
          "description": "The spreadsheet the updates were applied to.",
          "type": "string"
        }
      }
    },
    "AppendValuesResponse": {
      "title": "AppendValuesResponse",
      "description": "The response when updating a range of values in a spreadsheet.",
      "type": "object",
      "properties": {
        "updates": {
          "$ref": "#/definitions/UpdateValuesResponse"
        },
        "tableRange": {
          "description": "The range (in A1 notation) of the table that values are being appended to\n(before the values were appended).\nEmpty if no table was found.",
          "type": "string"
        },
        "spreadsheetId": {
          "description": "The spreadsheet the updates were applied to.",
          "type": "string"
        }
      }
    },
    "PivotFilterCriteria": {
      "title": "PivotFilterCriteria",
      "description": "Criteria for showing/hiding rows in a pivot table.",
      "type": "object",
      "properties": {
        "visibleValues": {
          "description": "Values that should be included.  Values not listed here are excluded.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "AddFilterViewRequest": {
      "title": "AddFilterViewRequest",
      "description": "Adds a filter view.",
      "type": "object",
      "properties": {
        "filter": {
          "description": "The filter to add. The filterViewId\nfield is optional; if one is not set, an id will be randomly generated. (It\nis an error to specify the ID of a filter that already exists.)",
          "type": "object"
        }
      }
    },
    "MoveDimensionRequest": {
      "title": "MoveDimensionRequest",
      "description": "Moves rows or columns to another location in a sheet.",
      "type": "object",
      "properties": {
        "destinationIndex": {
          "description": "The zero-based start index of where to move the source data to,\nbased on the coordinates *before* the source data is removed\nfrom the grid.  Existing data will be shifted down or right\n(depending on the dimension) to make room for the moved dimensions.\nThe source dimensions are removed from the grid, so the\nthe data may end up in a different index than specified.\n\nFor example, given `A1..A5` of `0, 1, 2, 3, 4` and wanting to move\n`\"1\"` and `\"2\"` to between `\"3\"` and `\"4\"`, the source would be\n`ROWS [1..3)`,and the destination index would be `\"4\"`\n(the zero-based index of row 5).\nThe end result would be `A1..A5` of `0, 3, 1, 2, 4`.",
          "type": "integer",
          "format": "int32"
        },
        "source": {
          "description": "The source dimensions to move.",
          "type": "object"
        }
      }
    },
    "AddConditionalFormatRuleRequest": {
      "title": "AddConditionalFormatRuleRequest",
      "description": "Adds a new conditional format rule.",
      "type": "object",
      "properties": {
        "index": {
          "description": "The zero-based index where the rule should be inserted.",
          "type": "integer",
          "format": "int32"
        },
        "rule": {
          "description": "The rule to add.",
          "type": "object"
        }
      }
    },
    "ChartSpec": {
      "title": "ChartSpec",
      "description": "The specification of the chart.",
      "type": "object",
      "properties": {
        "candlestickChart": {
          "description": "A candlestick chart specification.",
          "type": "object"
        },
        "bubbleChart": {
          "description": "A bubble chart specification.",
          "type": "object"
        },
        "waterfallChart": {
          "description": "A waterfall chart specification.",
          "type": "object"
        },
        "fontName": {
          "description": "The name of the font to use by default for all chart text (e.g. title,\naxis labels, legend).  If a font is specified for a specific part of the\nchart it will override this font name.",
          "type": "string"
        },
        "maximized": {
          "description": "True to make a chart fill the entire space in which it's rendered with\nminimum padding.  False to use the default padding.\n(Not applicable to Geo and Org charts.)",
          "type": "boolean"
        },
        "treemapChart": {
          "description": "A treemap chart specification.",
          "type": "object"
        },
        "hiddenDimensionStrategy": {
          "$ref": "#/definitions/HiddenDimensionStrategy"
        },
        "subtitleTextFormat": {
          "description": "The subtitle text format.\nStrikethrough and underline are not supported.",
          "type": "object"
        },
        "subtitle": {
          "description": "The subtitle of the chart.",
          "type": "string"
        },
        "backgroundColor": {
          "description": "The background color of the entire chart.\nNot applicable to Org charts.",
          "type": "object"
        },
        "subtitleTextPosition": {
          "description": "The subtitle text position.\nThis field is optional.",
          "type": "object"
        },
        "basicChart": {
          "description": "A basic chart specification, can be one of many kinds of charts.\nSee BasicChartType for the list of all\ncharts this supports.",
          "type": "object"
        },
        "orgChart": {
          "description": "An org chart specification.",
          "type": "object"
        },
        "pieChart": {
          "description": "A pie chart specification.",
          "type": "object"
        },
        "titleTextFormat": {
          "description": "The title text format.\nStrikethrough and underline are not supported.",
          "type": "object"
        },
        "title": {
          "description": "The title of the chart.",
          "type": "string"
        },
        "altText": {
          "description": "The alternative text that describes the chart.  This is often used\nfor accessibility.",
          "type": "string"
        },
        "titleTextPosition": {
          "description": "The title text position.\nThis field is optional.",
          "type": "object"
        },
        "histogramChart": {
          "description": "A histogram chart specification.",
          "type": "object"
        }
      }
    },
    "CreateDeveloperMetadataRequest": {
      "title": "CreateDeveloperMetadataRequest",
      "description": "Creates new developer metadata",
      "type": "object",
      "properties": {
        "developerMetadata": {
          "description": "The developer metadata to create.",
          "type": "object"
        }
      }
    },
    "BatchGetValuesByDataFilterResponse": {
      "title": "BatchGetValuesByDataFilterResponse",
      "description": "The response when retrieving more than one range of values in a spreadsheet\nselected by DataFilters.",
      "type": "object",
      "properties": {
        "valueRanges": {
          "description": "The requested values with the list of data filters that matched them.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MatchedValueRange"
          }
        },
        "spreadsheetId": {
          "description": "The ID of the spreadsheet the data was retrieved from.",
          "type": "string"
        }
      }
    },
    "LineStyle": {
      "title": "LineStyle",
      "description": "The line style for the connector lines.",
      "type": "object",
      "properties": {
        "width": {
          "description": "The thickness of the line, in px.",
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "$ref": "#/definitions/Type1"
        }
      }
    },
    "DataFilterValueRange": {
      "title": "DataFilterValueRange",
      "description": "A range of values whose location is specified by a DataFilter.",
      "type": "object",
      "properties": {
        "dataFilter": {
          "description": "The data filter describing the location of the values in the spreadsheet.",
          "type": "object"
        },
        "majorDimension": {
          "$ref": "#/definitions/MajorDimension1"
        },
        "values": {
          "description": "The data to be written.  If the provided values exceed any of the ranges\nmatched by the data filter then the request will fail.  If the provided\nvalues are less than the matched ranges only the specified values will be\nwritten, existing values in the matched ranges will remain unaffected.",
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      }
    },
    "NumberFormat": {
      "title": "NumberFormat",
      "description": "The number format of a cell.",
      "type": "object",
      "properties": {
        "pattern": {
          "description": "Pattern string used for formatting.  If not set, a default pattern based on\nthe user's locale will be used if necessary for the given type.\nSee the [Date and Number Formats guide](/sheets/api/guides/formats) for more\ninformation about the supported patterns.",
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/Type4"
        }
      }
    },
    "CandlestickDomain": {
      "title": "CandlestickDomain",
      "description": "The domain of a CandlestickChart.",
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/ChartData"
        },
        "reversed": {
          "description": "True to reverse the order of the domain values (horizontal axis).",
          "type": "boolean"
        }
      }
    },
    "SheetProperties": {
      "title": "SheetProperties",
      "description": "The properties the new sheet should have.\nAll properties are optional.\nThe sheetId field is optional; if one is not\nset, an id will be randomly generated. (It is an error to specify the ID\nof a sheet that already exists.)",
      "type": "object",
      "properties": {
        "title": {
          "description": "The name of the sheet.",
          "type": "string"
        },
        "tabColor": {
          "description": "The color of the tab in the UI.",
          "type": "object"
        },
        "index": {
          "description": "The index of the sheet within the spreadsheet.\nWhen adding or updating sheet properties, if this field\nis excluded then the sheet is added or moved to the end\nof the sheet list. When updating sheet indices or inserting\nsheets, movement is considered in \"before the move\" indexes.\nFor example, if there were 3 sheets (S1, S2, S3) in order to\nmove S1 ahead of S2 the index would have to be set to 2. A sheet\nindex update request is ignored if the requested index is\nidentical to the sheets current index or if the requested new\nindex is equal to the current sheet index + 1.",
          "type": "integer",
          "format": "int32"
        },
        "sheetId": {
          "description": "The ID of the sheet. Must be non-negative.\nThis field cannot be changed once set.",
          "type": "integer",
          "format": "int32"
        },
        "rightToLeft": {
          "description": "True if the sheet is an RTL sheet instead of an LTR sheet.",
          "type": "boolean"
        },
        "hidden": {
          "description": "True if the sheet is hidden in the UI, false if it's visible.",
          "type": "boolean"
        },
        "gridProperties": {
          "description": "Additional properties of the sheet if this sheet is a grid.\n(If the sheet is an object sheet, containing a chart or image, then\nthis field will be absent.)\nWhen writing it is an error to set any grid properties on non-grid sheets.",
          "type": "object"
        },
        "sheetType": {
          "$ref": "#/definitions/SheetType"
        }
      }
    },
    "UpdateDimensionPropertiesRequest": {
      "title": "UpdateDimensionPropertiesRequest",
      "description": "Updates dimensions' properties.",
      "type": "object",
      "properties": {
        "properties": {
          "description": "Properties to update.",
          "type": "object"
        },
        "range": {
          "description": "The rows or columns to update.",
          "type": "object"
        },
        "fields": {
          "description": "The fields that should be updated.  At least one field must be specified.\nThe root `properties` is implied and should not be specified.\nA single `\"*\"` can be used as short-hand for listing every field.",
          "type": "string"
        }
      }
    },
    "SourceAndDestination": {
      "title": "SourceAndDestination",
      "description": "A combination of a source range and how to extend that source.",
      "type": "object",
      "properties": {
        "fillLength": {
          "description": "The number of rows or columns that data should be filled into.\nPositive numbers expand beyond the last row or last column\nof the source.  Negative numbers expand before the first row\nor first column of the source.",
          "type": "integer",
          "format": "int32"
        },
        "source": {
          "$ref": "#/definitions/GridRange"
        },
        "dimension": {
          "$ref": "#/definitions/Dimension1"
        }
      }
    },
    "OrgChartSpec": {
      "title": "OrgChartSpec",
      "description": "An <a href=\"/chart/interactive/docs/gallery/orgchart\">org chart</a>.\nOrg charts require a unique set of labels in labels and may\noptionally include parent_labels and tooltips.\nparent_labels contain, for each node, the label identifying the parent\nnode.  tooltips contain, for each node, an optional tooltip.\n\nFor example, to describe an OrgChart with Alice as the CEO, Bob as the\nPresident (reporting to Alice) and Cathy as VP of Sales (also reporting to\nAlice), have labels contain \"Alice\", \"Bob\", \"Cathy\",\nparent_labels contain \"\", \"Alice\", \"Alice\" and tooltips contain\n\"CEO\", \"President\", \"VP Sales\".",
      "type": "object",
      "properties": {
        "tooltips": {
          "$ref": "#/definitions/ChartData"
        },
        "selectedNodeColor": {
          "$ref": "#/definitions/Color"
        },
        "parentLabels": {
          "$ref": "#/definitions/ChartData"
        },
        "nodeSize": {
          "$ref": "#/definitions/NodeSize"
        },
        "labels": {
          "$ref": "#/definitions/ChartData"
        },
        "nodeColor": {
          "$ref": "#/definitions/Color"
        }
      }
    },
    "FilterView": {
      "title": "FilterView",
      "description": "A filter view.",
      "type": "object",
      "properties": {
        "sortSpecs": {
          "description": "The sort order per column. Later specifications are used when values\nare equal in the earlier specifications.",
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "namedRangeId": {
          "description": "The named range this filter view is backed by, if any.\n\nWhen writing, only one of range or named_range_id\nmay be set.",
          "type": "string"
        },
        "filterViewId": {
          "description": "The ID of the filter view.",
          "type": "integer",
          "format": "int32"
        },
        "criteria": {
          "description": "The criteria for showing/hiding values per column.\nThe map's key is the column index, and the value is the criteria for\nthat column.",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "title": {
          "description": "The name of the filter view.",
          "type": "string"
        },
        "range": {
          "description": "The range this filter view covers.\n\nWhen writing, only one of range or named_range_id\nmay be set.",
          "type": "object"
        }
      }
    },
    "SearchDeveloperMetadataRequest": {
      "title": "SearchDeveloperMetadataRequest",
      "description": "A request to retrieve all developer metadata matching the set of specified\ncriteria.",
      "type": "object",
      "properties": {
        "dataFilters": {
          "description": "The data filters describing the criteria used to determine which\nDeveloperMetadata entries to return.  DeveloperMetadata matching any of the\nspecified filters will be included in the response.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataFilter"
          }
        }
      }
    },
    "BandingProperties": {
      "title": "BandingProperties",
      "description": "Properties referring a single dimension (either row or column). If both\nBandedRange.row_properties and BandedRange.column_properties are\nset, the fill colors are applied to cells according to the following rules:\n\n* header_color and footer_color take priority over band colors.\n* first_band_color takes priority over second_band_color.\n* row_properties takes priority over column_properties.\n\nFor example, the first row color takes priority over the first column\ncolor, but the first column color takes priority over the second row color.\nSimilarly, the row header takes priority over the column header in the\ntop left cell, but the column header takes priority over the first row\ncolor if the row header is not set.",
      "type": "object",
      "properties": {
        "footerColor": {
          "$ref": "#/definitions/Color"
        },
        "headerColor": {
          "$ref": "#/definitions/Color"
        },
        "firstBandColor": {
          "$ref": "#/definitions/Color"
        },
        "secondBandColor": {
          "$ref": "#/definitions/Color"
        }
      }
    },
    "AddProtectedRangeResponse": {
      "title": "AddProtectedRangeResponse",
      "description": "A reply from adding a protected range.",
      "type": "object",
      "properties": {
        "protectedRange": {
          "description": "The newly added protected range.",
          "type": "object"
        }
      }
    },
    "BasicFilter": {
      "title": "BasicFilter",
      "description": "The filter on this sheet, if any.",
      "type": "object",
      "properties": {
        "range": {
          "description": "The range the filter covers.",
          "type": "object"
        },
        "criteria": {
          "description": "The criteria for showing/hiding values per column.\nThe map's key is the column index, and the value is the criteria for\nthat column.",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "sortSpecs": {
          "description": "The sort order per column. Later specifications are used when values\nare equal in the earlier specifications.",
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      }
    },
    "CandlestickSeries": {
      "title": "CandlestickSeries",
      "description": "The series of a CandlestickData.",
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/ChartData"
        }
      }
    },
    "HistogramChartSpec": {
      "title": "HistogramChartSpec",
      "description": "A <a href=\"/chart/interactive/docs/gallery/histogram\">histogram chart</a>.\nA histogram chart groups data items into bins, displaying each bin as a\ncolumn of stacked items.  Histograms are used to display the distribution\nof a dataset.  Each column of items represents a range into which those\nitems fall.  The number of bins can be chosen automatically or specified\nexplicitly.",
      "type": "object",
      "properties": {
        "showItemDividers": {
          "description": "Whether horizontal divider lines should be displayed between items in each\ncolumn.",
          "type": "boolean"
        },
        "series": {
          "description": "The series for a histogram may be either a single series of values to be\nbucketed or multiple series, each of the same length, containing the name\nof the series followed by the values to be bucketed for that series.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/HistogramSeries"
          }
        },
        "legendPosition": {
          "$ref": "#/definitions/LegendPosition3"
        },
        "bucketSize": {
          "description": "By default the bucket size (the range of values stacked in a single\ncolumn) is chosen automatically, but it may be overridden here.\nE.g., A bucket size of 1.5 results in buckets from 0 - 1.5, 1.5 - 3.0, etc.\nCannot be negative.\nThis field is optional.",
          "type": "number",
          "format": "double"
        },
        "outlierPercentile": {
          "description": "The outlier percentile is used to ensure that outliers do not adversely\naffect the calculation of bucket sizes.  For example, setting an outlier\npercentile of 0.05 indicates that the top and bottom 5% of values when\ncalculating buckets.  The values are still included in the chart, they will\nbe added to the first or last buckets instead of their own buckets.\nMust be between 0.0 and 0.5.",
          "type": "number",
          "format": "double"
        }
      }
    },
    "UpdateValuesResponse": {
      "title": "UpdateValuesResponse",
      "description": "The response when updating a range of values in a spreadsheet.",
      "type": "object",
      "properties": {
        "updatedColumns": {
          "description": "The number of columns where at least one cell in the column was updated.",
          "type": "integer",
          "format": "int32"
        },
        "spreadsheetId": {
          "description": "The spreadsheet the updates were applied to.",
          "type": "string"
        },
        "updatedRange": {
          "description": "The range (in A1 notation) that updates were applied to.",
          "type": "string"
        },
        "updatedCells": {
          "description": "The number of cells updated.",
          "type": "integer",
          "format": "int32"
        },
        "updatedData": {
          "description": "The values of the cells after updates were applied.\nThis is only included if the request's `includeValuesInResponse` field\nwas `true`.",
          "type": "object"
        },
        "updatedRows": {
          "description": "The number of rows where at least one cell in the row was updated.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "PivotValue": {
      "title": "PivotValue",
      "description": "The definition of how a value in a pivot table should be calculated.",
      "type": "object",
      "properties": {
        "summarizeFunction": {
          "$ref": "#/definitions/SummarizeFunction"
        },
        "sourceColumnOffset": {
          "description": "The column offset of the source range that this value reads from.\n\nFor example, if the source was `C10:E15`, a `sourceColumnOffset` of `0`\nmeans this value refers to column `C`, whereas the offset `1` would\nrefer to column `D`.",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "A name to use for the value.",
          "type": "string"
        },
        "formula": {
          "description": "A custom formula to calculate the value.  The formula must start\nwith an `=` character.",
          "type": "string"
        },
        "calculatedDisplayType": {
          "$ref": "#/definitions/CalculatedDisplayType"
        }
      }
    },
    "ErrorValue": {
      "title": "ErrorValue",
      "description": "An error in a cell.",
      "type": "object",
      "properties": {
        "message": {
          "description": "A message with more information about the error\n(in the spreadsheet's locale).",
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/Type5"
        }
      }
    },
    "CopySheetToAnotherSpreadsheetRequest": {
      "title": "CopySheetToAnotherSpreadsheetRequest",
      "description": "The request to copy a sheet across spreadsheets.",
      "type": "object",
      "properties": {
        "destinationSpreadsheetId": {
          "description": "The ID of the spreadsheet to copy the sheet to.",
          "type": "string"
        }
      }
    },
    "PivotGroupSortValueBucket": {
      "title": "PivotGroupSortValueBucket",
      "description": "Information about which values in a pivot group should be used for sorting.",
      "type": "object",
      "properties": {
        "valuesIndex": {
          "description": "The offset in the PivotTable.values list which the values in this\ngrouping should be sorted by.",
          "type": "integer",
          "format": "int32"
        },
        "buckets": {
          "description": "Determines the bucket from which values are chosen to sort.\n\nFor example, in a pivot table with one row group & two column groups,\nthe row group can list up to two values. The first value corresponds\nto a value within the first column group, and the second value\ncorresponds to a value in the second column group.  If no values\nare listed, this would indicate that the row should be sorted according\nto the \"Grand Total\" over the column groups. If a single value is listed,\nthis would correspond to using the \"Total\" of that bucket.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExtendedValue"
          }
        }
      }
    },
    "WaterfallChartSeries": {
      "title": "WaterfallChartSeries",
      "description": "A single series of data for a waterfall chart.",
      "type": "object",
      "properties": {
        "subtotalColumnsStyle": {
          "description": "Styles for all subtotal columns in this series.",
          "type": "object"
        },
        "positiveColumnsStyle": {
          "description": "Styles for all columns in this series with positive values.",
          "type": "object"
        },
        "data": {
          "description": "The data being visualized in this series.",
          "type": "object"
        },
        "negativeColumnsStyle": {
          "description": "Styles for all columns in this series with negative values.",
          "type": "object"
        },
        "hideTrailingSubtotal": {
          "description": "True to hide the subtotal column from the end of the series. By default,\na subtotal column will appear at the end of each series. Setting this\nfield to true will hide that subtotal column for this series.",
          "type": "boolean"
        },
        "customSubtotals": {
          "description": "Custom subtotal columns appearing in this series. The order in which\nsubtotals are defined is not significant. Only one subtotal may be\ndefined for each data point.",
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      }
    },
    "DeleteDeveloperMetadataRequest": {
      "title": "DeleteDeveloperMetadataRequest",
      "description": "Deletes developer metadata",
      "type": "object",
      "properties": {
        "dataFilter": {
          "description": "The data filter describing the criteria used to select which developer\nmetadata entry to delete.",
          "type": "object"
        }
      }
    },
    "CandlestickChartSpec": {
      "title": "CandlestickChartSpec",
      "description": "A <a href=\"/chart/interactive/docs/gallery/candlestickchart\">candlestick chart</a>.",
      "type": "object",
      "properties": {
        "domain": {
          "$ref": "#/definitions/CandlestickDomain"
        },
        "data": {
          "description": "The Candlestick chart data.\nOnly one CandlestickData is supported.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CandlestickData"
          }
        }
      }
    },
    "BatchClearValuesByDataFilterResponse": {
      "title": "BatchClearValuesByDataFilterResponse",
      "description": "The response when clearing a range of values selected with\nDataFilters in a spreadsheet.",
      "type": "object",
      "properties": {
        "clearedRanges": {
          "description": "The ranges that were cleared, in A1 notation.\n(If the requests were for an unbounded range or a ranger larger\n than the bounds of the sheet, this will be the actual ranges\n that were cleared, bounded to the sheet's limits.)",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "spreadsheetId": {
          "description": "The spreadsheet the updates were applied to.",
          "type": "string"
        }
      }
    },
    "TreemapChartColorScale": {
      "title": "TreemapChartColorScale",
      "description": "A color scale for a treemap chart.",
      "type": "object",
      "properties": {
        "midValueColor": {
          "$ref": "#/definitions/Color"
        },
        "maxValueColor": {
          "$ref": "#/definitions/Color"
        },
        "minValueColor": {
          "$ref": "#/definitions/Color"
        },
        "noDataColor": {
          "$ref": "#/definitions/Color"
        }
      }
    },
    "CandlestickData": {
      "title": "CandlestickData",
      "description": "The Candlestick chart data, each containing the low, open, close, and high\nvalues for a series.",
      "type": "object",
      "properties": {
        "highSeries": {
          "description": "The range data (vertical axis) for the high/maximum value for each\ncandle. This is the top of the candle's center line.",
          "type": "object"
        },
        "lowSeries": {
          "description": "The range data (vertical axis) for the low/minimum value for each candle.\nThis is the bottom of the candle's center line.",
          "type": "object"
        },
        "closeSeries": {
          "description": "The range data (vertical axis) for the close/final value for each candle.\nThis is the top of the candle body.  If greater than the open value the\ncandle will be filled.  Otherwise the candle will be hollow.",
          "type": "object"
        },
        "openSeries": {
          "description": "The range data (vertical axis) for the open/initial value for each\ncandle. This is the bottom of the candle body.  If less than the close\nvalue the candle will be filled.  Otherwise the candle will be hollow.",
          "type": "object"
        }
      }
    },
    "EmbeddedObjectPosition": {
      "title": "EmbeddedObjectPosition",
      "description": "The position of the chart.",
      "type": "object",
      "properties": {
        "newSheet": {
          "description": "If true, the embedded object is put on a new sheet whose ID\nis chosen for you. Used only when writing.",
          "type": "boolean"
        },
        "sheetId": {
          "description": "The sheet this is on. Set only if the embedded object\nis on its own sheet. Must be non-negative.",
          "type": "integer",
          "format": "int32"
        },
        "overlayPosition": {
          "description": "The position at which the object is overlaid on top of a grid.",
          "type": "object"
        }
      }
    },
    "DeleteProtectedRangeRequest": {
      "title": "DeleteProtectedRangeRequest",
      "description": "Deletes a protected range.",
      "type": "object",
      "properties": {
        "protectedRangeId": {
          "description": "The ID of the protected range to delete.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "DeveloperMetadataLookup": {
      "title": "DeveloperMetadataLookup",
      "description": "Selects DeveloperMetadata that matches all of the specified fields.  For\nexample, if only a metadata ID is specified this considers the\nDeveloperMetadata with that particular unique ID. If a metadata key is\nspecified, this considers all developer metadata with that key.  If a\nkey, visibility, and location type are all specified, this considers all\ndeveloper metadata with that key and visibility that are associated with a\nlocation of that type.  In general, this\nselects all DeveloperMetadata that matches the intersection of all the\nspecified fields; any field or combination of fields may be specified.",
      "type": "object",
      "properties": {
        "metadataValue": {
          "description": "Limits the selected developer metadata to that which has a matching\nDeveloperMetadata.metadata_value.",
          "type": "string"
        },
        "metadataLocation": {
          "$ref": "#/definitions/DeveloperMetadataLocation"
        },
        "locationMatchingStrategy": {
          "$ref": "#/definitions/LocationMatchingStrategy"
        },
        "locationType": {
          "$ref": "#/definitions/LocationType1"
        },
        "metadataKey": {
          "description": "Limits the selected developer metadata to that which has a matching\nDeveloperMetadata.metadata_key.",
          "type": "string"
        },
        "metadataId": {
          "description": "Limits the selected developer metadata to that which has a matching\nDeveloperMetadata.metadata_id.",
          "type": "integer",
          "format": "int32"
        },
        "visibility": {
          "$ref": "#/definitions/Visibility1"
        }
      }
    },
    "AutoFillRequest": {
      "title": "AutoFillRequest",
      "description": "Automatically fills in more data based on existing data.",
      "type": "object",
      "properties": {
        "useAlternateSeries": {
          "description": "True if we should generate data with the \"alternate\" series.\nThis differs based on the type and amount of source data.",
          "type": "boolean"
        },
        "sourceAndDestination": {
          "description": "The source and destination areas to autofill.\nThis explicitly lists the source of the autofill and where to\nextend that data.",
          "type": "object"
        },
        "range": {
          "description": "The range to autofill. This will examine the range and detect\nthe location that has data and automatically fill that data\nin to the rest of the range.",
          "type": "object"
        }
      }
    },
    "GradientRule": {
      "title": "GradientRule",
      "description": "A rule that applies a gradient color scale format, based on\nthe interpolation points listed. The format of a cell will vary\nbased on its contents as compared to the values of the interpolation\npoints.",
      "type": "object",
      "properties": {
        "midpoint": {
          "$ref": "#/definitions/InterpolationPoint"
        },
        "minpoint": {
          "$ref": "#/definitions/InterpolationPoint"
        },
        "maxpoint": {
          "$ref": "#/definitions/InterpolationPoint"
        }
      }
    },
    "SetBasicFilterRequest": {
      "title": "SetBasicFilterRequest",
      "description": "Sets the basic filter on a sheet.",
      "type": "object",
      "properties": {
        "filter": {
          "description": "The filter to set.",
          "type": "object"
        }
      }
    },
    "InterpolationPoint": {
      "title": "InterpolationPoint",
      "description": "An optional midway interpolation point.",
      "type": "object",
      "properties": {
        "value": {
          "description": "The value this interpolation point uses.  May be a formula.\nUnused if type is MIN or\nMAX.",
          "type": "string"
        },
        "color": {
          "description": "The color this interpolation point should use.",
          "type": "object"
        },
        "type": {
          "$ref": "#/definitions/Type6"
        }
      }
    },
    "BatchClearValuesByDataFilterRequest": {
      "title": "BatchClearValuesByDataFilterRequest",
      "description": "The request for clearing more than one range selected by a\nDataFilter in a spreadsheet.",
      "type": "object",
      "properties": {
        "dataFilters": {
          "description": "The DataFilters used to determine which ranges to clear.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataFilter"
          }
        }
      }
    },
    "GetSpreadsheetByDataFilterRequest": {
      "title": "GetSpreadsheetByDataFilterRequest",
      "description": "The request for retrieving a Spreadsheet.",
      "type": "object",
      "properties": {
        "includeGridData": {
          "description": "True if grid data should be returned.\nThis parameter is ignored if a field mask was set in the request.",
          "type": "boolean"
        },
        "dataFilters": {
          "description": "The DataFilters used to select which ranges to retrieve from\nthe spreadsheet.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataFilter"
          }
        }
      }
    },
    "DeleteEmbeddedObjectRequest": {
      "title": "DeleteEmbeddedObjectRequest",
      "description": "Deletes an embedded object (e.g, chart, image) in a sheet.",
      "type": "object",
      "properties": {
        "objectId": {
          "description": "The ID of the embedded object to delete.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "FindReplaceResponse": {
      "title": "FindReplaceResponse",
      "description": "A reply from doing a find/replace.",
      "type": "object",
      "properties": {
        "sheetsChanged": {
          "description": "The number of sheets changed.",
          "type": "integer",
          "format": "int32"
        },
        "formulasChanged": {
          "description": "The number of formula cells changed.",
          "type": "integer",
          "format": "int32"
        },
        "valuesChanged": {
          "description": "The number of non-formula cells changed.",
          "type": "integer",
          "format": "int32"
        },
        "occurrencesChanged": {
          "description": "The number of occurrences (possibly multiple within a cell) changed.\nFor example, if replacing `\"e\"` with `\"o\"` in `\"Google Sheets\"`, this would\nbe `\"3\"` because `\"Google Sheets\"` -> `\"Googlo Shoots\"`.",
          "type": "integer",
          "format": "int32"
        },
        "rowsChanged": {
          "description": "The number of rows changed.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "UpdateValuesByDataFilterResponse": {
      "title": "UpdateValuesByDataFilterResponse",
      "description": "The response when updating a range of values by a data filter in a\nspreadsheet.",
      "type": "object",
      "properties": {
        "updatedRange": {
          "description": "The range (in A1 notation) that updates were applied to.",
          "type": "string"
        },
        "updatedCells": {
          "description": "The number of cells updated.",
          "type": "integer",
          "format": "int32"
        },
        "dataFilter": {
          "description": "The data filter that selected the range that was updated.",
          "type": "object"
        },
        "updatedRows": {
          "description": "The number of rows where at least one cell in the row was updated.",
          "type": "integer",
          "format": "int32"
        },
        "updatedData": {
          "description": "The values of the cells in the range matched by the dataFilter after all\nupdates were applied. This is only included if the request's\n`includeValuesInResponse` field was `true`.",
          "type": "object"
        },
        "updatedColumns": {
          "description": "The number of columns where at least one cell in the column was updated.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "DeleteSheetRequest": {
      "title": "DeleteSheetRequest",
      "description": "Deletes a sheet.",
      "type": "object",
      "properties": {
        "sheetId": {
          "description": "The ID of the sheet to delete.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "DuplicateFilterViewRequest": {
      "title": "DuplicateFilterViewRequest",
      "description": "Duplicates a filter view.",
      "type": "object",
      "properties": {
        "filterId": {
          "description": "The ID of the filter being duplicated.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "MatchedValueRange": {
      "title": "MatchedValueRange",
      "description": "A value range that was matched by one or more data filers.",
      "type": "object",
      "properties": {
        "valueRange": {
          "description": "The values matched by the DataFilter.",
          "type": "object"
        },
        "dataFilters": {
          "description": "The DataFilters from the request that matched the range of\nvalues.",
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      }
    },
    "DeveloperMetadataLocation": {
      "title": "DeveloperMetadataLocation",
      "description": "Limits the selected developer metadata to those entries associated with\nthe specified location.  This field either matches exact locations or all\nintersecting locations according the specified\nlocationMatchingStrategy.",
      "type": "object",
      "properties": {
        "locationType": {
          "$ref": "#/definitions/LocationType"
        },
        "dimensionRange": {
          "description": "Represents the row or column when metadata is associated with\na dimension. The specified DimensionRange must represent a single row\nor column; it cannot be unbounded or span multiple rows or columns.",
          "type": "object"
        },
        "spreadsheet": {
          "description": "True when metadata is associated with an entire spreadsheet.",
          "type": "boolean"
        },
        "sheetId": {
          "description": "The ID of the sheet when metadata is associated with an entire sheet.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "UpdateConditionalFormatRuleResponse": {
      "title": "UpdateConditionalFormatRuleResponse",
      "description": "A reply from updating a conditional format rule.",
      "type": "object",
      "properties": {
        "newIndex": {
          "description": "The index of the new rule.",
          "type": "integer",
          "format": "int32"
        },
        "oldIndex": {
          "description": "The old index of the rule. Not set if a rule was replaced\n(because it is the same as new_index).",
          "type": "integer",
          "format": "int32"
        },
        "newRule": {
          "description": "The new rule that replaced the old rule (if replacing),\nor the rule that was moved (if moved)",
          "type": "object"
        },
        "oldRule": {
          "description": "The old (deleted) rule. Not set if a rule was moved\n(because it is the same as new_rule).",
          "type": "object"
        }
      }
    },
    "ConditionValue": {
      "title": "ConditionValue",
      "description": "The value of the condition.",
      "type": "object",
      "properties": {
        "relativeDate": {
          "$ref": "#/definitions/RelativeDate"
        },
        "userEnteredValue": {
          "description": "A value the condition is based on.\nThe value is parsed as if the user typed into a cell.\nFormulas are supported (and must begin with an `=` or a '+').",
          "type": "string"
        }
      }
    },
    "DuplicateSheetRequest": {
      "title": "DuplicateSheetRequest",
      "description": "Duplicates a sheet.",
      "type": "object",
      "properties": {
        "newSheetId": {
          "description": "If set, the ID of the new sheet. If not set, an ID is chosen.\nIf set, the ID must not conflict with any existing sheet ID.\nIf set, it must be non-negative.",
          "type": "integer",
          "format": "int32"
        },
        "insertSheetIndex": {
          "description": "The zero-based index where the new sheet should be inserted.\nThe index of all sheets after this are incremented.",
          "type": "integer",
          "format": "int32"
        },
        "newSheetName": {
          "description": "The name of the new sheet.  If empty, a new name is chosen for you.",
          "type": "string"
        },
        "sourceSheetId": {
          "description": "The sheet to duplicate.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "DateTimeRule": {
      "title": "DateTimeRule",
      "description": "Allows you to organize the date-time values in a source data column into\nbuckets based on selected parts of their date or time values. For example,\nconsider a pivot table showing sales transactions by date:\n\n    +----------+--------------+\n    | Date     | SUM of Sales |\n    +----------+--------------+\n    | 1/1/2017 |      $621.14 |\n    | 2/3/2017 |      $708.84 |\n    | 5/8/2017 |      $326.84 |\n    ...\n    +----------+--------------+\nApplying a date-time group rule with a DateTimeRuleType of YEAR_MONTH\nresults in the following pivot table.\n\n    +--------------+--------------+\n    | Grouped Date | SUM of Sales |\n    +--------------+--------------+\n    | 2017-Jan     |   $53,731.78 |\n    | 2017-Feb     |   $83,475.32 |\n    | 2017-Mar     |   $94,385.05 |\n    ...\n    +--------------+--------------+",
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/Type7"
        }
      }
    },
    "TreemapChartSpec": {
      "title": "TreemapChartSpec",
      "description": "A <a href=\"/chart/interactive/docs/gallery/treemap\">Treemap chart</a>.",
      "type": "object",
      "properties": {
        "textFormat": {
          "$ref": "#/definitions/TextFormat"
        },
        "headerColor": {
          "$ref": "#/definitions/Color"
        },
        "parentLabels": {
          "$ref": "#/definitions/ChartData"
        },
        "labels": {
          "$ref": "#/definitions/ChartData"
        },
        "colorData": {
          "$ref": "#/definitions/ChartData"
        },
        "maxValue": {
          "description": "The maximum possible data value. Cells with values greater than this will\nhave the same color as cells with this value. If not specified, defaults\nto the actual maximum value from color_data, or the maximum value from\nsize_data if color_data is not specified.",
          "type": "number",
          "format": "double"
        },
        "colorScale": {
          "$ref": "#/definitions/TreemapChartColorScale"
        },
        "hideTooltips": {
          "description": "True to hide tooltips.",
          "type": "boolean"
        },
        "hintedLevels": {
          "description": "The number of additional data levels beyond the labeled levels to be shown\non the treemap chart. These levels are not interactive and are shown\nwithout their labels. Defaults to 0 if not specified.",
          "type": "integer",
          "format": "int32"
        },
        "levels": {
          "description": "The number of data levels to show on the treemap chart. These levels are\ninteractive and are shown with their labels. Defaults to 2 if not\nspecified.",
          "type": "integer",
          "format": "int32"
        },
        "minValue": {
          "description": "The minimum possible data value. Cells with values less than this will\nhave the same color as cells with this value. If not specified, defaults\nto the actual minimum value from color_data, or the minimum value from\nsize_data if color_data is not specified.",
          "type": "number",
          "format": "double"
        },
        "sizeData": {
          "$ref": "#/definitions/ChartData"
        }
      }
    },
    "ExtendedValue": {
      "title": "ExtendedValue",
      "description": "The calculated value the metadata corresponds to.\n(Note that formulaValue is not valid,\n because the values will be calculated.)",
      "type": "object",
      "properties": {
        "numberValue": {
          "description": "Represents a double value.\nNote: Dates, Times and DateTimes are represented as doubles in\n\"serial number\" format.",
          "type": "number",
          "format": "double"
        },
        "errorValue": {
          "description": "Represents an error.\nThis field is read-only.",
          "type": "object"
        },
        "stringValue": {
          "description": "Represents a string value.\nLeading single quotes are not included. For example, if the user typed\n`'123` into the UI, this would be represented as a `stringValue` of\n`\"123\"`.",
          "type": "string"
        },
        "boolValue": {
          "description": "Represents a boolean value.",
          "type": "boolean"
        },
        "formulaValue": {
          "description": "Represents a formula.",
          "type": "string"
        }
      }
    },
    "HistogramSeries": {
      "title": "HistogramSeries",
      "description": "A histogram series containing the series color and data.",
      "type": "object",
      "properties": {
        "data": {
          "description": "The data for this histogram series.",
          "type": "object"
        },
        "barColor": {
          "description": "The color of the column representing this series in each bucket.\nThis field is optional.",
          "type": "object"
        }
      }
    },
    "BatchClearValuesResponse": {
      "title": "BatchClearValuesResponse",
      "description": "The response when clearing a range of values in a spreadsheet.",
      "type": "object",
      "properties": {
        "clearedRanges": {
          "description": "The ranges that were cleared, in A1 notation.\n(If the requests were for an unbounded range or a ranger larger\n than the bounds of the sheet, this will be the actual ranges\n that were cleared, bounded to the sheet's limits.)",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "spreadsheetId": {
          "description": "The spreadsheet the updates were applied to.",
          "type": "string"
        }
      }
    },
    "Spreadsheet": {
      "title": "Spreadsheet",
      "description": "The spreadsheet after updates were applied. This is only set if\n[BatchUpdateSpreadsheetRequest.include_spreadsheet_in_response] is `true`.",
      "type": "object",
      "properties": {
        "sheets": {
          "description": "The sheets that are part of a spreadsheet.",
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "spreadsheetUrl": {
          "description": "The url of the spreadsheet.\nThis field is read-only.",
          "type": "string"
        },
        "properties": {
          "description": "Overall properties of a spreadsheet.",
          "type": "object"
        },
        "spreadsheetId": {
          "description": "The ID of the spreadsheet.\nThis field is read-only.",
          "type": "string"
        },
        "namedRanges": {
          "description": "The named ranges defined in a spreadsheet.",
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "developerMetadata": {
          "description": "The developer metadata associated with a spreadsheet.",
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      }
    },
    "BandedRange": {
      "title": "BandedRange",
      "description": "The banded range to add. The bandedRangeId\nfield is optional; if one is not set, an id will be randomly generated. (It\nis an error to specify the ID of a range that already exists.)",
      "type": "object",
      "properties": {
        "range": {
          "description": "The range over which these properties are applied.",
          "type": "object"
        },
        "bandedRangeId": {
          "description": "The id of the banded range.",
          "type": "integer",
          "format": "int32"
        },
        "rowProperties": {
          "description": "Properties for row bands. These properties are applied on a row-by-row\nbasis throughout all the rows in the range. At least one of\nrow_properties or column_properties must be specified.",
          "type": "object"
        },
        "columnProperties": {
          "description": "Properties for column bands. These properties are applied on a column-\nby-column basis throughout all the columns in the range. At least one of\nrow_properties or column_properties must be specified.",
          "type": "object"
        }
      }
    },
    "AddChartRequest": {
      "title": "AddChartRequest",
      "description": "Adds a chart.",
      "type": "object",
      "properties": {
        "chart": {
          "description": "The chart that should be added to the spreadsheet, including the position\nwhere it should be placed. The chartId\nfield is optional; if one is not set, an id will be randomly generated. (It\nis an error to specify the ID of a chart that already exists.)",
          "type": "object"
        }
      }
    },
    "HistogramRule": {
      "title": "HistogramRule",
      "description": "Allows you to organize the numeric values in a source data column into\nbuckets of a constant size. All values from HistogramRule.start to\nHistogramRule.end are placed into groups of size\nHistogramRule.interval. In addition, all values below\nHistogramRule.start are placed in one group, and all values above\nHistogramRule.end are placed in another. Only\nHistogramRule.interval is required, though if HistogramRule.start\nand HistogramRule.end are both provided, HistogramRule.start must\nbe less than HistogramRule.end. For example, a pivot table showing\naverage purchase amount by age that has 50+ rows:\n\n    +-----+-------------------+\n    | Age | AVERAGE of Amount |\n    +-----+-------------------+\n    | 16  |            $27.13 |\n    | 17  |             $5.24 |\n    | 18  |            $20.15 |\n    ...\n    +-----+-------------------+\ncould be turned into a pivot table that looks like the one below by\napplying a histogram group rule with a HistogramRule.start of 25,\nan HistogramRule.interval of 20, and an HistogramRule.end\nof 65.\n\n    +-------------+-------------------+\n    | Grouped Age | AVERAGE of Amount |\n    +-------------+-------------------+\n    | < 25        |            $19.34 |\n    | 25-45       |            $31.43 |\n    | 45-65       |            $35.87 |\n    | > 65        |            $27.55 |\n    +-------------+-------------------+\n    | Grand Total |            $29.12 |\n    +-------------+-------------------+",
      "type": "object",
      "properties": {
        "interval": {
          "description": "The size of the buckets that are created. Must be positive.",
          "type": "number",
          "format": "double"
        },
        "start": {
          "description": "The minimum value at which items are placed into buckets\nof constant size. Values below start are lumped into a single bucket.\nThis field is optional.",
          "type": "number",
          "format": "double"
        },
        "end": {
          "description": "The maximum value at which items are placed into buckets\nof constant size. Values above end are lumped into a single bucket.\nThis field is optional.",
          "type": "number",
          "format": "double"
        }
      }
    },
    "UpdateProtectedRangeRequest": {
      "title": "UpdateProtectedRangeRequest",
      "description": "Updates a protected range.",
      "type": "object",
      "properties": {
        "protectedRange": {
          "description": "The protected range to update with the new properties.",
          "type": "object"
        },
        "fields": {
          "description": "The fields that should be updated.  At least one field must be specified.\nThe root `protectedRange` is implied and should not be specified.\nA single `\"*\"` can be used as short-hand for listing every field.",
          "type": "string"
        }
      }
    },
    "DataFilter": {
      "title": "DataFilter",
      "description": "Filter that describes what data should be selected or returned from a\nrequest.",
      "type": "object",
      "properties": {
        "a1Range": {
          "description": "Selects data that matches the specified A1 range.",
          "type": "string"
        },
        "gridRange": {
          "description": "Selects data that matches the range described by the GridRange.",
          "type": "object"
        },
        "developerMetadataLookup": {
          "description": "Selects data associated with the developer metadata matching the criteria\ndescribed by this DeveloperMetadataLookup.",
          "type": "object"
        }
      }
    },
    "TextFormat": {
      "title": "TextFormat",
      "description": "The format of this run.  Absent values inherit the cell's format.",
      "type": "object",
      "properties": {
        "fontFamily": {
          "description": "The font family.",
          "type": "string"
        },
        "italic": {
          "description": "True if the text is italicized.",
          "type": "boolean"
        },
        "strikethrough": {
          "description": "True if the text has a strikethrough.",
          "type": "boolean"
        },
        "fontSize": {
          "description": "The size of the font.",
          "type": "integer",
          "format": "int32"
        },
        "underline": {
          "description": "True if the text is underlined.",
          "type": "boolean"
        },
        "foregroundColor": {
          "description": "The foreground color of the text.",
          "type": "object"
        },
        "bold": {
          "description": "True if the text is bold.",
          "type": "boolean"
        }
      }
    },
    "AddSheetResponse": {
      "title": "AddSheetResponse",
      "description": "A reply from adding a sheet.",
      "type": "object",
      "properties": {
        "properties": {
          "description": "The properties of the newly added sheet.",
          "type": "object"
        }
      }
    },
    "AddFilterViewResponse": {
      "title": "AddFilterViewResponse",
      "description": "A reply from adding a filter view.",
      "type": "object",
      "properties": {
        "filter": {
          "description": "The newly added filter view.",
          "type": "object"
        }
      }
    },
    "PivotGroupRule": {
      "title": "PivotGroupRule",
      "description": "An optional setting on a PivotGroup that defines buckets for the values\nin the source data column rather than breaking out each individual value.\nOnly one PivotGroup with a group rule may be added for each column in\nthe source data, though on any given column you may add both a\nPivotGroup that has a rule and a PivotGroup that does not.",
      "type": "object",
      "properties": {
        "histogramRule": {
          "$ref": "#/definitions/HistogramRule"
        },
        "dateTimeRule": {
          "$ref": "#/definitions/DateTimeRule"
        },
        "manualRule": {
          "$ref": "#/definitions/ManualRule"
        }
      }
    },
    "IterativeCalculationSettings": {
      "title": "IterativeCalculationSettings",
      "description": "Settings to control how circular dependencies are resolved with iterative\ncalculation.",
      "type": "object",
      "properties": {
        "convergenceThreshold": {
          "description": "When iterative calculation is enabled and successive results differ by\nless than this threshold value, the calculation rounds stop.",
          "type": "number",
          "format": "double"
        },
        "maxIterations": {
          "description": "When iterative calculation is enabled, the maximum number of calculation\nrounds to perform.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "OverlayPosition": {
      "title": "OverlayPosition",
      "description": "The location an object is overlaid on top of a grid.",
      "type": "object",
      "properties": {
        "anchorCell": {
          "$ref": "#/definitions/GridCoordinate"
        },
        "offsetYPixels": {
          "description": "The vertical offset, in pixels, that the object is offset\nfrom the anchor cell.",
          "type": "integer",
          "format": "int32"
        },
        "heightPixels": {
          "description": "The height of the object, in pixels. Defaults to 371.",
          "type": "integer",
          "format": "int32"
        },
        "widthPixels": {
          "description": "The width of the object, in pixels. Defaults to 600.",
          "type": "integer",
          "format": "int32"
        },
        "offsetXPixels": {
          "description": "The horizontal offset, in pixels, that the object is offset\nfrom the anchor cell.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "SpreadsheetProperties": {
      "title": "SpreadsheetProperties",
      "description": "Properties of a spreadsheet.",
      "type": "object",
      "properties": {
        "timeZone": {
          "description": "The time zone of the spreadsheet, in CLDR format such as\n`America/New_York`. If the time zone isn't recognized, this may\nbe a custom time zone such as `GMT-07:00`.",
          "type": "string"
        },
        "title": {
          "description": "The title of the spreadsheet.",
          "type": "string"
        },
        "locale": {
          "description": "The locale of the spreadsheet in one of the following formats:\n\n* an ISO 639-1 language code such as `en`\n\n* an ISO 639-2 language code such as `fil`, if no 639-1 code exists\n\n* a combination of the ISO language code and country code, such as `en_US`\n\nNote: when updating this field, not all locales/languages are supported.",
          "type": "string"
        },
        "iterativeCalculationSettings": {
          "$ref": "#/definitions/IterativeCalculationSettings"
        },
        "autoRecalc": {
          "$ref": "#/definitions/AutoRecalc"
        },
        "defaultFormat": {
          "$ref": "#/definitions/CellFormat"
        }
      }
    },
    "RepeatCellRequest": {
      "title": "RepeatCellRequest",
      "description": "Repeats a single cell across a range.",
      "type": "object",
      "properties": {
        "fields": {
          "description": "The fields that should be updated.  At least one field must be specified.\nThe root `cell` is implied and should not be specified.\nA single `\"*\"` can be used as short-hand for listing every field.",
          "type": "string"
        },
        "cell": {
          "description": "The data to write.",
          "type": "object"
        },
        "range": {
          "description": "The range to repeat the cell in.",
          "type": "object"
        }
      }
    },
    "AddChartResponse": {
      "title": "AddChartResponse",
      "description": "A reply from adding a chart.",
      "type": "object",
      "properties": {
        "chart": {
          "description": "The newly added chart.",
          "type": "object"
        }
      }
    },
    "InsertDimensionRequest": {
      "title": "InsertDimensionRequest",
      "description": "Inserts new rows or columns in a sheet.",
      "type": "object",
      "properties": {
        "inheritFromBefore": {
          "description": "Whether dimension properties should be extended from the dimensions\nbefore or after the newly inserted dimensions.\nTrue to inherit from the dimensions before (in which case the start\nindex must be greater than 0), and false to inherit from the dimensions\nafter.\n\nFor example, if row index 0 has red background and row index 1\nhas a green background, then inserting 2 rows at index 1 can inherit\neither the green or red background.  If `inheritFromBefore` is true,\nthe two new rows will be red (because the row before the insertion point\nwas red), whereas if `inheritFromBefore` is false, the two new rows will\nbe green (because the row after the insertion point was green).",
          "type": "boolean"
        },
        "range": {
          "description": "The dimensions to insert.  Both the start and end indexes must be bounded.",
          "type": "object"
        }
      }
    },
    "UpdateSpreadsheetPropertiesRequest": {
      "title": "UpdateSpreadsheetPropertiesRequest",
      "description": "Updates the spreadsheet's properties.",
      "type": "object",
      "properties": {
        "properties": {
          "description": "The properties to update.",
          "type": "object"
        },
        "fields": {
          "description": "The fields that should be updated.  At least one field must be specified.\nThe root 'properties' is implied and should not be specified.\nA single `\"*\"` can be used as short-hand for listing every field.",
          "type": "string"
        }
      }
    },
    "BatchUpdateValuesRequest": {
      "title": "BatchUpdateValuesRequest",
      "description": "The request for updating more than one range of values in a spreadsheet.",
      "type": "object",
      "properties": {
        "responseValueRenderOption": {
          "$ref": "#/definitions/ResponseValueRenderOption"
        },
        "includeValuesInResponse": {
          "description": "Determines if the update response should include the values\nof the cells that were updated. By default, responses\ndo not include the updated values. The `updatedData` field within\neach of the BatchUpdateValuesResponse.responses will contain\nthe updated values. If the range to write was larger than than the range\nactually written, the response will include all values in the requested\nrange (excluding trailing empty rows and columns).",
          "type": "boolean"
        },
        "valueInputOption": {
          "$ref": "#/definitions/ValueInputOption"
        },
        "data": {
          "description": "The new values to apply to the spreadsheet.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ValueRange"
          }
        },
        "responseDateTimeRenderOption": {
          "$ref": "#/definitions/ResponseDateTimeRenderOption"
        }
      }
    },
    "ProtectedRange": {
      "title": "ProtectedRange",
      "description": "A protected range.",
      "type": "object",
      "properties": {
        "description": {
          "description": "The description of this protected range.",
          "type": "string"
        },
        "unprotectedRanges": {
          "description": "The list of unprotected ranges within a protected sheet.\nUnprotected ranges are only supported on protected sheets.",
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "namedRangeId": {
          "description": "The named range this protected range is backed by, if any.\n\nWhen writing, only one of range or named_range_id\nmay be set.",
          "type": "string"
        },
        "protectedRangeId": {
          "description": "The ID of the protected range.\nThis field is read-only.",
          "type": "integer",
          "format": "int32"
        },
        "warningOnly": {
          "description": "True if this protected range will show a warning when editing.\nWarning-based protection means that every user can edit data in the\nprotected range, except editing will prompt a warning asking the user\nto confirm the edit.\n\nWhen writing: if this field is true, then editors is ignored.\nAdditionally, if this field is changed from true to false and the\n`editors` field is not set (nor included in the field mask), then\nthe editors will be set to all the editors in the document.",
          "type": "boolean"
        },
        "requestingUserCanEdit": {
          "description": "True if the user who requested this protected range can edit the\nprotected area.\nThis field is read-only.",
          "type": "boolean"
        },
        "range": {
          "description": "The range that is being protected.\nThe range may be fully unbounded, in which case this is considered\na protected sheet.\n\nWhen writing, only one of range or named_range_id\nmay be set.",
          "type": "object"
        },
        "editors": {
          "description": "The users and groups with edit access to the protected range.\nThis field is only visible to users with edit access to the protected\nrange and the document.\nEditors are not supported with warning_only protection.",
          "type": "object"
        }
      }
    },
    "DimensionProperties": {
      "title": "DimensionProperties",
      "description": "Properties about a dimension.",
      "type": "object",
      "properties": {
        "pixelSize": {
          "description": "The height (if a row) or width (if a column) of the dimension in pixels.",
          "type": "integer",
          "format": "int32"
        },
        "hiddenByFilter": {
          "description": "True if this dimension is being filtered.\nThis field is read-only.",
          "type": "boolean"
        },
        "hiddenByUser": {
          "description": "True if this dimension is explicitly hidden.",
          "type": "boolean"
        },
        "developerMetadata": {
          "description": "The developer metadata associated with a single row or column.",
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      }
    },
    "NamedRange": {
      "title": "NamedRange",
      "description": "The named range to update with the new properties.",
      "type": "object",
      "properties": {
        "namedRangeId": {
          "description": "The ID of the named range.",
          "type": "string"
        },
        "range": {
          "description": "The range this represents.",
          "type": "object"
        },
        "name": {
          "description": "The name of the named range.",
          "type": "string"
        }
      }
    },
    "DimensionRange": {
      "title": "DimensionRange",
      "description": "A range along a single dimension on a sheet.\nAll indexes are zero-based.\nIndexes are half open: the start index is inclusive\nand the end index is exclusive.\nMissing indexes indicate the range is unbounded on that side.",
      "type": "object",
      "properties": {
        "dimension": {
          "$ref": "#/definitions/Dimension2"
        },
        "startIndex": {
          "description": "The start (inclusive) of the span, or not set if unbounded.",
          "type": "integer",
          "format": "int32"
        },
        "endIndex": {
          "description": "The end (exclusive) of the span, or not set if unbounded.",
          "type": "integer",
          "format": "int32"
        },
        "sheetId": {
          "description": "The sheet this span is on.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "CutPasteRequest": {
      "title": "CutPasteRequest",
      "description": "Cuts data from one area and pastes it to another.",
      "type": "object",
      "properties": {
        "destination": {
          "description": "The top-left coordinate where the data should be pasted.",
          "type": "object"
        },
        "source": {
          "description": "The source data to cut.",
          "type": "object"
        },
        "pasteType": {
          "$ref": "#/definitions/PasteType1"
        }
      }
    },
    "Borders": {
      "title": "Borders",
      "description": "The borders of the cell.",
      "type": "object",
      "properties": {
        "right": {
          "$ref": "#/definitions/Border"
        },
        "bottom": {
          "$ref": "#/definitions/Border"
        },
        "top": {
          "$ref": "#/definitions/Border"
        },
        "left": {
          "$ref": "#/definitions/Border"
        }
      }
    },
    "BasicChartSeries": {
      "title": "BasicChartSeries",
      "description": "A single series of data in a chart.\nFor example, if charting stock prices over time, multiple series may exist,\none for the \"Open Price\", \"High Price\", \"Low Price\" and \"Close Price\".",
      "type": "object",
      "properties": {
        "targetAxis": {
          "$ref": "#/definitions/TargetAxis"
        },
        "color": {
          "description": "The color for elements (i.e. bars, lines, points) associated with this\nseries.  If empty, a default color is used.",
          "type": "object"
        },
        "lineStyle": {
          "description": "The line style of this series. Valid only if the\nchartType is AREA,\nLINE, or SCATTER.\nCOMBO charts are also supported if the\nseries chart type is\nAREA or LINE.",
          "type": "object"
        },
        "series": {
          "description": "The data being visualized in this chart series.",
          "type": "object"
        },
        "type": {
          "$ref": "#/definitions/Type3"
        }
      }
    },
    "AutoResizeDimensionsRequest": {
      "title": "AutoResizeDimensionsRequest",
      "description": "Automatically resizes one or more dimensions based on the contents\nof the cells in that dimension.",
      "type": "object",
      "properties": {
        "dimensions": {
          "description": "The dimensions to automatically resize.",
          "type": "object"
        }
      }
    },
    "ManualRule": {
      "title": "ManualRule",
      "description": "A ManualRule.",
      "type": "object",
      "properties": {
        "groups": {
          "description": "The list of group names and the corresponding items from the source data\nthat map to each group name.",
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      }
    },
    "UpdateBordersRequest": {
      "title": "UpdateBordersRequest",
      "description": "Updates the borders in a range of cells.",
      "type": "object",
      "properties": {
        "bottom": {
          "description": "The border to put at the bottom of the range.",
          "type": "object"
        },
        "innerVertical": {
          "description": "The vertical border to put within the range.",
          "type": "object"
        },
        "right": {
          "description": "The border to put at the right of the range.",
          "type": "object"
        },
        "range": {
          "description": "The range whose borders should be updated.",
          "type": "object"
        },
        "innerHorizontal": {
          "description": "The horizontal border to put within the range.",
          "type": "object"
        },
        "top": {
          "description": "The border to put at the top of the range.",
          "type": "object"
        },
        "left": {
          "description": "The border to put at the left of the range.",
          "type": "object"
        }
      }
    },
    "CellFormat": {
      "title": "CellFormat",
      "description": "The format to apply.\nConditional formatting can only apply a subset of formatting:\nbold, italic,\nstrikethrough,\nforeground color &\nbackground color.",
      "type": "object",
      "properties": {
        "numberFormat": {
          "description": "A format describing how number values should be represented to the user.",
          "type": "object"
        },
        "hyperlinkDisplayType": {
          "$ref": "#/definitions/HyperlinkDisplayType"
        },
        "horizontalAlignment": {
          "$ref": "#/definitions/HorizontalAlignment"
        },
        "textFormat": {
          "description": "The format of the text in the cell (unless overridden by a format run).",
          "type": "object"
        },
        "backgroundColor": {
          "description": "The background color of the cell.",
          "type": "object"
        },
        "padding": {
          "description": "The padding of the cell.",
          "type": "object"
        },
        "verticalAlignment": {
          "$ref": "#/definitions/VerticalAlignment"
        },
        "borders": {
          "description": "The borders of the cell.",
          "type": "object"
        },
        "textDirection": {
          "$ref": "#/definitions/TextDirection"
        },
        "wrapStrategy": {
          "$ref": "#/definitions/WrapStrategy"
        },
        "textRotation": {
          "description": "The rotation applied to text in a cell",
          "type": "object"
        }
      }
    },
    "ClearValuesResponse": {
      "title": "ClearValuesResponse",
      "description": "The response when clearing a range of values in a spreadsheet.",
      "type": "object",
      "properties": {
        "spreadsheetId": {
          "description": "The spreadsheet the updates were applied to.",
          "type": "string"
        },
        "clearedRange": {
          "description": "The range (in A1 notation) that was cleared.\n(If the request was for an unbounded range or a ranger larger\n than the bounds of the sheet, this will be the actual range\n that was cleared, bounded to the sheet's limits.)",
          "type": "string"
        }
      }
    },
    "DeleteConditionalFormatRuleRequest": {
      "title": "DeleteConditionalFormatRuleRequest",
      "description": "Deletes an existing conditional format rule.",
      "type": "object",
      "properties": {
        "index": {
          "description": "The zero-based index of the rule to be deleted.",
          "type": "integer",
          "format": "int32"
        },
        "sheetId": {
          "description": "The sheet the rule is being deleted from.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "AddBandingResponse": {
      "title": "AddBandingResponse",
      "description": "A reply from adding a banded range.",
      "type": "object",
      "properties": {
        "bandedRange": {
          "description": "The banded range that was added.",
          "type": "object"
        }
      }
    },
    "DeleteNamedRangeRequest": {
      "title": "DeleteNamedRangeRequest",
      "description": "Deletes a named range.",
      "type": "object",
      "properties": {
        "namedRangeId": {
          "description": "The ID of the named range to delete.",
          "type": "string"
        }
      }
    },
    "AddDimensionGroupResponse": {
      "title": "AddDimensionGroupResponse",
      "description": "A reply from adding a dimension group.",
      "type": "object",
      "properties": {
        "dimensionGroups": {
          "description": "All groups of a dimension after adding a group to that dimension.",
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      }
    },
    "WaterfallChartCustomSubtotal": {
      "title": "WaterfallChartCustomSubtotal",
      "description": "A custom subtotal column for a waterfall chart series.",
      "type": "object",
      "properties": {
        "subtotalIndex": {
          "description": "The 0-based index of a data point within the series. If\ndata_is_subtotal is true, the data point at this index is the\nsubtotal. Otherwise, the subtotal appears after the data point with\nthis index. A series can have multiple subtotals at arbitrary indices,\nbut subtotals do not affect the indices of the data points. For\nexample, if a series has three data points, their indices will always\nbe 0, 1, and 2, regardless of how many subtotals exist on the series or\nwhat data points they are associated with.",
          "type": "integer",
          "format": "int32"
        },
        "dataIsSubtotal": {
          "description": "True if the data point at subtotal_index is the subtotal. If false,\nthe subtotal will be computed and appear after the data point.",
          "type": "boolean"
        },
        "label": {
          "description": "A label for the subtotal column.",
          "type": "string"
        }
      }
    },
    "ChartData": {
      "title": "ChartData",
      "description": "The data of the domain. For example, if charting stock prices over time,\nthis is the data representing the dates.",
      "type": "object",
      "properties": {
        "sourceRange": {
          "description": "The source ranges of the data.",
          "type": "object"
        }
      }
    },
    "BatchGetValuesResponse": {
      "title": "BatchGetValuesResponse",
      "description": "The response when retrieving more than one range of values in a spreadsheet.",
      "type": "object",
      "properties": {
        "valueRanges": {
          "description": "The requested values. The order of the ValueRanges is the same as the\norder of the requested ranges.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ValueRange"
          }
        },
        "spreadsheetId": {
          "description": "The ID of the spreadsheet the data was retrieved from.",
          "type": "string"
        }
      }
    },
    "UpdateBandingRequest": {
      "title": "UpdateBandingRequest",
      "description": "Updates a banded range",
      "type": "object",
      "properties": {
        "fields": {
          "description": "The fields that should be updated.  At least one field must be specified.\nThe root `bandedRange` is implied and should not be specified.\nA single `\"*\"` can be used as short-hand for listing every field.",
          "type": "string"
        },
        "bandedRange": {
          "description": "The banded range to update with the new properties.",
          "type": "object"
        }
      }
    },
    "Color": {
      "title": "Color",
      "description": "The color of the border.",
      "type": "object",
      "properties": {
        "red": {
          "description": "The amount of red in the color as a value in the interval [0, 1].",
          "type": "number",
          "format": "double"
        },
        "green": {
          "description": "The amount of green in the color as a value in the interval [0, 1].",
          "type": "number",
          "format": "double"
        },
        "blue": {
          "description": "The amount of blue in the color as a value in the interval [0, 1].",
          "type": "number",
          "format": "double"
        },
        "alpha": {
          "description": "The fraction of this color that should be applied to the pixel. That is,\nthe final pixel color is defined by the equation:\n\n  pixel color = alpha * (this color) + (1.0 - alpha) * (background color)\n\nThis means that a value of 1.0 corresponds to a solid color, whereas\na value of 0.0 corresponds to a completely transparent color. This\nuses a wrapper message rather than a simple float scalar so that it is\npossible to distinguish between a default value and the value being unset.\nIf omitted, this color object is to be rendered as a solid color\n(as if the alpha value had been explicitly given with a value of 1.0).",
          "type": "number",
          "format": "double"
        }
      }
    },
    "PivotGroup": {
      "title": "PivotGroup",
      "description": "A single grouping (either row or column) in a pivot table.",
      "type": "object",
      "properties": {
        "repeatHeadings": {
          "description": "True if the headings in this pivot group should be repeated.\nThis is only valid for row groupings and is ignored by columns.\n\nBy default, we minimize repitition of headings by not showing higher\nlevel headings where they are the same. For example, even though the\nthird row below corresponds to \"Q1 Mar\", \"Q1\" is not shown because\nit is redundant with previous rows. Setting repeat_headings to true\nwould cause \"Q1\" to be repeated for \"Feb\" and \"Mar\".\n\n    +--------------+\n    | Q1     | Jan |\n    |        | Feb |\n    |        | Mar |\n    +--------+-----+\n    | Q1 Total     |\n    +--------------+",
          "type": "boolean"
        },
        "sourceColumnOffset": {
          "description": "The column offset of the source range that this grouping is based on.\n\nFor example, if the source was `C10:E15`, a `sourceColumnOffset` of `0`\nmeans this group refers to column `C`, whereas the offset `1` would refer\nto column `D`.",
          "type": "integer",
          "format": "int32"
        },
        "sortOrder": {
          "$ref": "#/definitions/SortOrder"
        },
        "valueBucket": {
          "description": "The bucket of the opposite pivot group to sort by.\nIf not specified, sorting is alphabetical by this group's values.",
          "type": "object"
        },
        "showTotals": {
          "description": "True if the pivot table should include the totals for this grouping.",
          "type": "boolean"
        },
        "valueMetadata": {
          "description": "Metadata about values in the grouping.",
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "groupRule": {
          "description": "The group rule to apply to this row/column group.",
          "type": "object"
        },
        "label": {
          "description": "The labels to use for the row/column groups which can be customized. For\nexample, in the following pivot table, the row label is `Region` (which\ncould be renamed to `State`) and the column label is `Product` (which\ncould be renamed `Item`). Pivot tables created before December 2017 do\nnot have header labels. If you'd like to add header labels to an existing\npivot table, please delete the existing pivot table and then create a new\npivot table with same parameters.\n\n    +--------------+---------+-------+\n    | SUM of Units | Product |       |\n    | Region       | Pen     | Paper |\n    +--------------+---------+-------+\n    | New York     |     345 |    98 |\n    | Oregon       |     234 |   123 |\n    | Tennessee    |     531 |   415 |\n    +--------------+---------+-------+\n    | Grand Total  |    1110 |   636 |\n    +--------------+---------+-------+",
          "type": "string"
        }
      }
    },
    "ManualRuleGroup": {
      "title": "ManualRuleGroup",
      "description": "A group name and a list of items from the source data that should be placed\nin the group with this name.",
      "type": "object",
      "properties": {
        "items": {
          "description": "The items in the source data that should be placed into this group. Each\nitem may be a string, number, or boolean. Items may appear in at most one\ngroup within a given ManualRule. Items that do not appear in any\ngroup will appear on their own.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExtendedValue"
          }
        },
        "groupName": {
          "$ref": "#/definitions/ExtendedValue"
        }
      }
    },
    "AutoRecalc": {
      "title": "AutoRecalc",
      "description": "The amount of time to wait before volatile functions are recalculated.",
      "example": "RECALCULATION_INTERVAL_UNSPECIFIED",
      "type": "string",
      "enum": [
        "RECALCULATION_INTERVAL_UNSPECIFIED",
        "ON_CHANGE",
        "MINUTE",
        "HOUR"
      ]
    },
    "CalculatedDisplayType": {
      "title": "CalculatedDisplayType",
      "description": "If specified, indicates that pivot values should be displayed as\nthe result of a calculation with another pivot value. For example, if\ncalculated_display_type is specified as PERCENT_OF_GRAND_TOTAL, all the\npivot values are displayed as the percentage of the grand total. In\nthe Sheets UI, this is referred to as \"Show As\" in the value section of a\npivot table.",
      "example": "PIVOT_VALUE_CALCULATED_DISPLAY_TYPE_UNSPECIFIED",
      "type": "string",
      "enum": [
        "PIVOT_VALUE_CALCULATED_DISPLAY_TYPE_UNSPECIFIED",
        "PERCENT_OF_ROW_TOTAL",
        "PERCENT_OF_COLUMN_TOTAL",
        "PERCENT_OF_GRAND_TOTAL"
      ]
    },
    "ChartType": {
      "title": "ChartType",
      "description": "The type of the chart.",
      "example": "BASIC_CHART_TYPE_UNSPECIFIED",
      "type": "string",
      "enum": [
        "BASIC_CHART_TYPE_UNSPECIFIED",
        "BAR",
        "LINE",
        "AREA",
        "COLUMN",
        "SCATTER",
        "COMBO",
        "STEPPED_AREA"
      ]
    },
    "CompareMode": {
      "title": "CompareMode",
      "description": "The behavior of tooltips and data highlighting when hovering on data and\nchart area.",
      "example": "BASIC_CHART_COMPARE_MODE_UNSPECIFIED",
      "type": "string",
      "enum": [
        "BASIC_CHART_COMPARE_MODE_UNSPECIFIED",
        "DATUM",
        "CATEGORY"
      ]
    },
    "DateTimeRenderOption": {
      "title": "DateTimeRenderOption",
      "description": "How dates, times, and durations should be represented in the output.\nThis is ignored if value_render_option is\nFORMATTED_VALUE.\nThe default dateTime render option is [DateTimeRenderOption.SERIAL_NUMBER].",
      "example": "SERIAL_NUMBER",
      "type": "string",
      "enum": [
        "SERIAL_NUMBER",
        "FORMATTED_STRING"
      ]
    },
    "DelimiterType": {
      "title": "DelimiterType",
      "description": "The delimiter type to use.",
      "example": "DELIMITER_TYPE_UNSPECIFIED",
      "type": "string",
      "enum": [
        "DELIMITER_TYPE_UNSPECIFIED",
        "COMMA",
        "SEMICOLON",
        "PERIOD",
        "SPACE",
        "CUSTOM",
        "AUTODETECT"
      ]
    },
    "Dimension": {
      "title": "Dimension",
      "description": "Whether rows or columns should be appended.",
      "example": "DIMENSION_UNSPECIFIED",
      "type": "string",
      "enum": [
        "DIMENSION_UNSPECIFIED",
        "ROWS",
        "COLUMNS"
      ]
    },
    "Dimension1": {
      "title": "Dimension1",
      "description": "The dimension that data should be filled into.",
      "example": "DIMENSION_UNSPECIFIED",
      "type": "string",
      "enum": [
        "DIMENSION_UNSPECIFIED",
        "ROWS",
        "COLUMNS"
      ]
    },
    "Dimension2": {
      "title": "Dimension2",
      "description": "The dimension of the span.",
      "example": "DIMENSION_UNSPECIFIED",
      "type": "string",
      "enum": [
        "DIMENSION_UNSPECIFIED",
        "ROWS",
        "COLUMNS"
      ]
    },
    "HiddenDimensionStrategy": {
      "title": "HiddenDimensionStrategy",
      "description": "Determines how the charts will use hidden rows or columns.",
      "example": "CHART_HIDDEN_DIMENSION_STRATEGY_UNSPECIFIED",
      "type": "string",
      "enum": [
        "CHART_HIDDEN_DIMENSION_STRATEGY_UNSPECIFIED",
        "SKIP_HIDDEN_ROWS_AND_COLUMNS",
        "SKIP_HIDDEN_ROWS",
        "SKIP_HIDDEN_COLUMNS",
        "SHOW_ALL"
      ]
    },
    "HorizontalAlignment": {
      "title": "HorizontalAlignment",
      "description": "The horizontal alignment of the value in the cell.",
      "example": "HORIZONTAL_ALIGN_UNSPECIFIED",
      "type": "string",
      "enum": [
        "HORIZONTAL_ALIGN_UNSPECIFIED",
        "LEFT",
        "CENTER",
        "RIGHT"
      ]
    },
    "HorizontalAlignment1": {
      "title": "HorizontalAlignment1",
      "description": "Horizontal alignment setting for the piece of text.",
      "example": "HORIZONTAL_ALIGN_UNSPECIFIED",
      "type": "string",
      "enum": [
        "HORIZONTAL_ALIGN_UNSPECIFIED",
        "LEFT",
        "CENTER",
        "RIGHT"
      ]
    },
    "HyperlinkDisplayType": {
      "title": "HyperlinkDisplayType",
      "description": "How a hyperlink, if it exists, should be displayed in the cell.",
      "example": "HYPERLINK_DISPLAY_TYPE_UNSPECIFIED",
      "type": "string",
      "enum": [
        "HYPERLINK_DISPLAY_TYPE_UNSPECIFIED",
        "LINKED",
        "PLAIN_TEXT"
      ]
    },
    "LegendPosition": {
      "title": "LegendPosition",
      "description": "Where the legend of the pie chart should be drawn.",
      "example": "PIE_CHART_LEGEND_POSITION_UNSPECIFIED",
      "type": "string",
      "enum": [
        "PIE_CHART_LEGEND_POSITION_UNSPECIFIED",
        "BOTTOM_LEGEND",
        "LEFT_LEGEND",
        "RIGHT_LEGEND",
        "TOP_LEGEND",
        "NO_LEGEND",
        "LABELED_LEGEND"
      ]
    },
    "LegendPosition1": {
      "title": "LegendPosition1",
      "description": "The position of the chart legend.",
      "example": "BASIC_CHART_LEGEND_POSITION_UNSPECIFIED",
      "type": "string",
      "enum": [
        "BASIC_CHART_LEGEND_POSITION_UNSPECIFIED",
        "BOTTOM_LEGEND",
        "LEFT_LEGEND",
        "RIGHT_LEGEND",
        "TOP_LEGEND",
        "NO_LEGEND"
      ]
    },
    "LegendPosition2": {
      "title": "LegendPosition2",
      "description": "Where the legend of the chart should be drawn.",
      "example": "BUBBLE_CHART_LEGEND_POSITION_UNSPECIFIED",
      "type": "string",
      "enum": [
        "BUBBLE_CHART_LEGEND_POSITION_UNSPECIFIED",
        "BOTTOM_LEGEND",
        "LEFT_LEGEND",
        "RIGHT_LEGEND",
        "TOP_LEGEND",
        "NO_LEGEND",
        "INSIDE_LEGEND"
      ]
    },
    "LegendPosition3": {
      "title": "LegendPosition3",
      "description": "The position of the chart legend.",
      "example": "HISTOGRAM_CHART_LEGEND_POSITION_UNSPECIFIED",
      "type": "string",
      "enum": [
        "HISTOGRAM_CHART_LEGEND_POSITION_UNSPECIFIED",
        "BOTTOM_LEGEND",
        "LEFT_LEGEND",
        "RIGHT_LEGEND",
        "TOP_LEGEND",
        "NO_LEGEND",
        "INSIDE_LEGEND"
      ]
    },
    "LocationMatchingStrategy": {
      "title": "LocationMatchingStrategy",
      "description": "Determines how this lookup matches the location.  If this field is\nspecified as EXACT, only developer metadata associated on the exact\nlocation specified is matched.  If this field is specified to INTERSECTING,\ndeveloper metadata associated on intersecting locations is also\nmatched.  If left unspecified, this field assumes a default value of\nINTERSECTING.\nIf this field is specified, a metadataLocation\nmust also be specified.",
      "example": "DEVELOPER_METADATA_LOCATION_MATCHING_STRATEGY_UNSPECIFIED",
      "type": "string",
      "enum": [
        "DEVELOPER_METADATA_LOCATION_MATCHING_STRATEGY_UNSPECIFIED",
        "EXACT_LOCATION",
        "INTERSECTING_LOCATION"
      ]
    },
    "LocationType": {
      "title": "LocationType",
      "description": "The type of location this object represents.  This field is read-only.",
      "example": "DEVELOPER_METADATA_LOCATION_TYPE_UNSPECIFIED",
      "type": "string",
      "enum": [
        "DEVELOPER_METADATA_LOCATION_TYPE_UNSPECIFIED",
        "ROW",
        "COLUMN",
        "SHEET",
        "SPREADSHEET"
      ]
    },
    "LocationType1": {
      "title": "LocationType1",
      "description": "Limits the selected developer metadata to those entries which are\nassociated with locations of the specified type.  For example, when this\nfield is specified as ROW this lookup\nonly considers developer metadata associated on rows.  If the field is left\nunspecified, all location types are considered.  This field cannot be\nspecified as SPREADSHEET when\nthe locationMatchingStrategy\nis specified as INTERSECTING or when the\nmetadataLocation is specified as a\nnon-spreadsheet location: spreadsheet metadata cannot intersect any other\ndeveloper metadata location.  This field also must be left unspecified when\nthe locationMatchingStrategy\nis specified as EXACT.",
      "example": "DEVELOPER_METADATA_LOCATION_TYPE_UNSPECIFIED",
      "type": "string",
      "enum": [
        "DEVELOPER_METADATA_LOCATION_TYPE_UNSPECIFIED",
        "ROW",
        "COLUMN",
        "SHEET",
        "SPREADSHEET"
      ]
    },
    "MajorDimension": {
      "title": "MajorDimension",
      "description": "The major dimension of the values.\n\nFor output, if the spreadsheet data is: `A1=1,B1=2,A2=3,B2=4`,\nthen requesting `range=A1:B2,majorDimension=ROWS` will return\n`[[1,2],[3,4]]`,\nwhereas requesting `range=A1:B2,majorDimension=COLUMNS` will return\n`[[1,3],[2,4]]`.\n\nFor input, with `range=A1:B2,majorDimension=ROWS` then `[[1,2],[3,4]]`\nwill set `A1=1,B1=2,A2=3,B2=4`. With `range=A1:B2,majorDimension=COLUMNS`\nthen `[[1,2],[3,4]]` will set `A1=1,B1=3,A2=2,B2=4`.\n\nWhen writing, if this field is not set, it defaults to ROWS.",
      "example": "DIMENSION_UNSPECIFIED",
      "type": "string",
      "enum": [
        "DIMENSION_UNSPECIFIED",
        "ROWS",
        "COLUMNS"
      ]
    },
    "MajorDimension1": {
      "title": "MajorDimension1",
      "description": "The major dimension of the values.",
      "example": "DIMENSION_UNSPECIFIED",
      "type": "string",
      "enum": [
        "DIMENSION_UNSPECIFIED",
        "ROWS",
        "COLUMNS"
      ]
    },
    "MajorDimension2": {
      "title": "MajorDimension2",
      "description": "The major dimension that results should use.\n\nFor example, if the spreadsheet data is: `A1=1,B1=2,A2=3,B2=4`,\nthen a request that selects that range and sets `majorDimension=ROWS` will\nreturn `[[1,2],[3,4]]`,\nwhereas a request that sets `majorDimension=COLUMNS` will return\n`[[1,3],[2,4]]`.",
      "example": "DIMENSION_UNSPECIFIED",
      "type": "string",
      "enum": [
        "DIMENSION_UNSPECIFIED",
        "ROWS",
        "COLUMNS"
      ]
    },
    "MergeType": {
      "title": "MergeType",
      "description": "How the cells should be merged.",
      "example": "MERGE_ALL",
      "type": "string",
      "enum": [
        "MERGE_ALL",
        "MERGE_COLUMNS",
        "MERGE_ROWS"
      ]
    },
    "NodeSize": {
      "title": "NodeSize",
      "description": "The size of the org chart nodes.",
      "example": "ORG_CHART_LABEL_SIZE_UNSPECIFIED",
      "type": "string",
      "enum": [
        "ORG_CHART_LABEL_SIZE_UNSPECIFIED",
        "SMALL",
        "MEDIUM",
        "LARGE"
      ]
    },
    "PasteOrientation": {
      "title": "PasteOrientation",
      "description": "How that data should be oriented when pasting.",
      "example": "NORMAL",
      "type": "string",
      "enum": [
        "NORMAL",
        "TRANSPOSE"
      ]
    },
    "PasteType": {
      "title": "PasteType",
      "description": "What kind of data to paste.",
      "example": "PASTE_NORMAL",
      "type": "string",
      "enum": [
        "PASTE_NORMAL",
        "PASTE_VALUES",
        "PASTE_FORMAT",
        "PASTE_NO_BORDERS",
        "PASTE_FORMULA",
        "PASTE_DATA_VALIDATION",
        "PASTE_CONDITIONAL_FORMATTING"
      ]
    },
    "PasteType1": {
      "title": "PasteType1",
      "description": "What kind of data to paste.  All the source data will be cut, regardless\nof what is pasted.",
      "example": "PASTE_NORMAL",
      "type": "string",
      "enum": [
        "PASTE_NORMAL",
        "PASTE_VALUES",
        "PASTE_FORMAT",
        "PASTE_NO_BORDERS",
        "PASTE_FORMULA",
        "PASTE_DATA_VALIDATION",
        "PASTE_CONDITIONAL_FORMATTING"
      ]
    },
    "Position": {
      "title": "Position",
      "description": "The position of this axis.",
      "example": "BASIC_CHART_AXIS_POSITION_UNSPECIFIED",
      "type": "string",
      "enum": [
        "BASIC_CHART_AXIS_POSITION_UNSPECIFIED",
        "BOTTOM_AXIS",
        "LEFT_AXIS",
        "RIGHT_AXIS"
      ]
    },
    "RelativeDate": {
      "title": "RelativeDate",
      "description": "A relative date (based on the current date).\nValid only if the type is\nDATE_BEFORE,\nDATE_AFTER,\nDATE_ON_OR_BEFORE or\nDATE_ON_OR_AFTER.\n\nRelative dates are not supported in data validation.\nThey are supported only in conditional formatting and\nconditional filters.",
      "example": "RELATIVE_DATE_UNSPECIFIED",
      "type": "string",
      "enum": [
        "RELATIVE_DATE_UNSPECIFIED",
        "PAST_YEAR",
        "PAST_MONTH",
        "PAST_WEEK",
        "YESTERDAY",
        "TODAY",
        "TOMORROW"
      ]
    },
    "ResponseDateTimeRenderOption": {
      "title": "ResponseDateTimeRenderOption",
      "description": "Determines how dates, times, and durations in the response should be\nrendered. This is ignored if response_value_render_option is\nFORMATTED_VALUE.\nThe default dateTime render option is\nDateTimeRenderOption.SERIAL_NUMBER.",
      "example": "SERIAL_NUMBER",
      "type": "string",
      "enum": [
        "SERIAL_NUMBER",
        "FORMATTED_STRING"
      ]
    },
    "ResponseValueRenderOption": {
      "title": "ResponseValueRenderOption",
      "description": "Determines how values in the response should be rendered.\nThe default render option is ValueRenderOption.FORMATTED_VALUE.",
      "example": "FORMATTED_VALUE",
      "type": "string",
      "enum": [
        "FORMATTED_VALUE",
        "UNFORMATTED_VALUE",
        "FORMULA"
      ]
    },
    "SheetType": {
      "title": "SheetType",
      "description": "The type of sheet. Defaults to GRID.\nThis field cannot be changed once set.",
      "example": "SHEET_TYPE_UNSPECIFIED",
      "type": "string",
      "enum": [
        "SHEET_TYPE_UNSPECIFIED",
        "GRID",
        "OBJECT"
      ]
    },
    "ShiftDimension": {
      "title": "ShiftDimension",
      "description": "The dimension which will be shifted when inserting cells.\nIf ROWS, existing cells will be shifted down.\nIf COLUMNS, existing cells will be shifted right.",
      "example": "DIMENSION_UNSPECIFIED",
      "type": "string",
      "enum": [
        "DIMENSION_UNSPECIFIED",
        "ROWS",
        "COLUMNS"
      ]
    },
    "ShiftDimension1": {
      "title": "ShiftDimension1",
      "description": "The dimension from which deleted cells will be replaced with.\nIf ROWS, existing cells will be shifted upward to\nreplace the deleted cells. If COLUMNS, existing cells\nwill be shifted left to replace the deleted cells.",
      "example": "DIMENSION_UNSPECIFIED",
      "type": "string",
      "enum": [
        "DIMENSION_UNSPECIFIED",
        "ROWS",
        "COLUMNS"
      ]
    },
    "SortOrder": {
      "title": "SortOrder",
      "description": "The order the values in this group should be sorted.",
      "example": "SORT_ORDER_UNSPECIFIED",
      "type": "string",
      "enum": [
        "SORT_ORDER_UNSPECIFIED",
        "ASCENDING",
        "DESCENDING"
      ]
    },
    "SortOrder1": {
      "title": "SortOrder1",
      "description": "The order data should be sorted.",
      "example": "SORT_ORDER_UNSPECIFIED",
      "type": "string",
      "enum": [
        "SORT_ORDER_UNSPECIFIED",
        "ASCENDING",
        "DESCENDING"
      ]
    },
    "StackedType": {
      "title": "StackedType",
      "description": "The stacked type.",
      "example": "WATERFALL_STACKED_TYPE_UNSPECIFIED",
      "type": "string",
      "enum": [
        "WATERFALL_STACKED_TYPE_UNSPECIFIED",
        "STACKED",
        "SEQUENTIAL"
      ]
    },
    "StackedType1": {
      "title": "StackedType1",
      "description": "The stacked type for charts that support vertical stacking.\nApplies to Area, Bar, Column, Combo, and Stepped Area charts.",
      "example": "BASIC_CHART_STACKED_TYPE_UNSPECIFIED",
      "type": "string",
      "enum": [
        "BASIC_CHART_STACKED_TYPE_UNSPECIFIED",
        "NOT_STACKED",
        "STACKED",
        "PERCENT_STACKED"
      ]
    },
    "Style": {
      "title": "Style",
      "description": "The style of the border.",
      "example": "STYLE_UNSPECIFIED",
      "type": "string",
      "enum": [
        "STYLE_UNSPECIFIED",
        "DOTTED",
        "DASHED",
        "SOLID",
        "SOLID_MEDIUM",
        "SOLID_THICK",
        "NONE",
        "DOUBLE"
      ]
    },
    "SummarizeFunction": {
      "title": "SummarizeFunction",
      "description": "A function to summarize the value.\nIf formula is set, the only supported values are\nSUM and\nCUSTOM.\nIf sourceColumnOffset is set, then `CUSTOM`\nis not supported.",
      "example": "PIVOT_STANDARD_VALUE_FUNCTION_UNSPECIFIED",
      "type": "string",
      "enum": [
        "PIVOT_STANDARD_VALUE_FUNCTION_UNSPECIFIED",
        "SUM",
        "COUNTA",
        "COUNT",
        "COUNTUNIQUE",
        "AVERAGE",
        "MAX",
        "MIN",
        "MEDIAN",
        "PRODUCT",
        "STDEV",
        "STDEVP",
        "VAR",
        "VARP",
        "CUSTOM"
      ]
    },
    "TargetAxis": {
      "title": "TargetAxis",
      "description": "The minor axis that will specify the range of values for this series.\nFor example, if charting stocks over time, the \"Volume\" series\nmay want to be pinned to the right with the prices pinned to the left,\nbecause the scale of trading volume is different than the scale of\nprices.\nIt is an error to specify an axis that isn't a valid minor axis\nfor the chart's type.",
      "example": "BASIC_CHART_AXIS_POSITION_UNSPECIFIED",
      "type": "string",
      "enum": [
        "BASIC_CHART_AXIS_POSITION_UNSPECIFIED",
        "BOTTOM_AXIS",
        "LEFT_AXIS",
        "RIGHT_AXIS"
      ]
    },
    "TextDirection": {
      "title": "TextDirection",
      "description": "The direction of the text in the cell.",
      "example": "TEXT_DIRECTION_UNSPECIFIED",
      "type": "string",
      "enum": [
        "TEXT_DIRECTION_UNSPECIFIED",
        "LEFT_TO_RIGHT",
        "RIGHT_TO_LEFT"
      ]
    },
    "Type": {
      "title": "Type",
      "description": "The type of condition.",
      "example": "CONDITION_TYPE_UNSPECIFIED",
      "type": "string",
      "enum": [
        "CONDITION_TYPE_UNSPECIFIED",
        "NUMBER_GREATER",
        "NUMBER_GREATER_THAN_EQ",
        "NUMBER_LESS",
        "NUMBER_LESS_THAN_EQ",
        "NUMBER_EQ",
        "NUMBER_NOT_EQ",
        "NUMBER_BETWEEN",
        "NUMBER_NOT_BETWEEN",
        "TEXT_CONTAINS",
        "TEXT_NOT_CONTAINS",
        "TEXT_STARTS_WITH",
        "TEXT_ENDS_WITH",
        "TEXT_EQ",
        "TEXT_IS_EMAIL",
        "TEXT_IS_URL",
        "DATE_EQ",
        "DATE_BEFORE",
        "DATE_AFTER",
        "DATE_ON_OR_BEFORE",
        "DATE_ON_OR_AFTER",
        "DATE_BETWEEN",
        "DATE_NOT_BETWEEN",
        "DATE_IS_VALID",
        "ONE_OF_RANGE",
        "ONE_OF_LIST",
        "BLANK",
        "NOT_BLANK",
        "CUSTOM_FORMULA",
        "BOOLEAN"
      ]
    },
    "Type1": {
      "title": "Type1",
      "description": "The dash type of the line.",
      "example": "LINE_DASH_TYPE_UNSPECIFIED",
      "type": "string",
      "enum": [
        "LINE_DASH_TYPE_UNSPECIFIED",
        "INVISIBLE",
        "CUSTOM",
        "SOLID",
        "DOTTED",
        "MEDIUM_DASHED",
        "MEDIUM_DASHED_DOTTED",
        "LONG_DASHED",
        "LONG_DASHED_DOTTED"
      ]
    },
    "Type2": {
      "title": "Type2",
      "description": "How the data should be pasted.",
      "example": "PASTE_NORMAL",
      "type": "string",
      "enum": [
        "PASTE_NORMAL",
        "PASTE_VALUES",
        "PASTE_FORMAT",
        "PASTE_NO_BORDERS",
        "PASTE_FORMULA",
        "PASTE_DATA_VALIDATION",
        "PASTE_CONDITIONAL_FORMATTING"
      ]
    },
    "Type3": {
      "title": "Type3",
      "description": "The type of this series. Valid only if the\nchartType is\nCOMBO.\nDifferent types will change the way the series is visualized.\nOnly LINE, AREA,\nand COLUMN are supported.",
      "example": "BASIC_CHART_TYPE_UNSPECIFIED",
      "type": "string",
      "enum": [
        "BASIC_CHART_TYPE_UNSPECIFIED",
        "BAR",
        "LINE",
        "AREA",
        "COLUMN",
        "SCATTER",
        "COMBO",
        "STEPPED_AREA"
      ]
    },
    "Type4": {
      "title": "Type4",
      "description": "The type of the number format.\nWhen writing, this field must be set.",
      "example": "NUMBER_FORMAT_TYPE_UNSPECIFIED",
      "type": "string",
      "enum": [
        "NUMBER_FORMAT_TYPE_UNSPECIFIED",
        "TEXT",
        "NUMBER",
        "PERCENT",
        "CURRENCY",
        "DATE",
        "TIME",
        "DATE_TIME",
        "SCIENTIFIC"
      ]
    },
    "Type5": {
      "title": "Type5",
      "description": "The type of error.",
      "example": "ERROR_TYPE_UNSPECIFIED",
      "type": "string",
      "enum": [
        "ERROR_TYPE_UNSPECIFIED",
        "ERROR",
        "NULL_VALUE",
        "DIVIDE_BY_ZERO",
        "VALUE",
        "REF",
        "NAME",
        "NUM",
        "N_A",
        "LOADING"
      ]
    },
    "Type6": {
      "title": "Type6",
      "description": "How the value should be interpreted.",
      "example": "INTERPOLATION_POINT_TYPE_UNSPECIFIED",
      "type": "string",
      "enum": [
        "INTERPOLATION_POINT_TYPE_UNSPECIFIED",
        "MIN",
        "MAX",
        "NUMBER",
        "PERCENT",
        "PERCENTILE"
      ]
    },
    "Type7": {
      "title": "Type7",
      "description": "The type of date-time grouping to apply.",
      "example": "DATE_TIME_RULE_TYPE_UNSPECIFIED",
      "type": "string",
      "enum": [
        "DATE_TIME_RULE_TYPE_UNSPECIFIED",
        "SECOND",
        "MINUTE",
        "HOUR",
        "HOUR_MINUTE",
        "HOUR_MINUTE_AMPM",
        "DAY_OF_WEEK",
        "DAY_OF_YEAR",
        "DAY_OF_MONTH",
        "DAY_MONTH",
        "MONTH",
        "QUARTER",
        "YEAR",
        "YEAR_MONTH",
        "YEAR_QUARTER",
        "YEAR_MONTH_DAY"
      ]
    },
    "ValueInputOption": {
      "title": "ValueInputOption",
      "description": "How the input data should be interpreted.",
      "example": "INPUT_VALUE_OPTION_UNSPECIFIED",
      "type": "string",
      "enum": [
        "INPUT_VALUE_OPTION_UNSPECIFIED",
        "RAW",
        "USER_ENTERED"
      ]
    },
    "ValueLayout": {
      "title": "ValueLayout",
      "description": "Whether values should be listed horizontally (as columns)\nor vertically (as rows).",
      "example": "HORIZONTAL",
      "type": "string",
      "enum": [
        "HORIZONTAL",
        "VERTICAL"
      ]
    },
    "ValueRenderOption": {
      "title": "ValueRenderOption",
      "description": "How values should be represented in the output.\nThe default render option is ValueRenderOption.FORMATTED_VALUE.",
      "example": "FORMATTED_VALUE",
      "type": "string",
      "enum": [
        "FORMATTED_VALUE",
        "UNFORMATTED_VALUE",
        "FORMULA"
      ]
    },
    "VerticalAlignment": {
      "title": "VerticalAlignment",
      "description": "The vertical alignment of the value in the cell.",
      "example": "VERTICAL_ALIGN_UNSPECIFIED",
      "type": "string",
      "enum": [
        "VERTICAL_ALIGN_UNSPECIFIED",
        "TOP",
        "MIDDLE",
        "BOTTOM"
      ]
    },
    "Visibility": {
      "title": "Visibility",
      "description": "The metadata visibility.  Developer metadata must always have a visibility\nspecified.",
      "example": "DEVELOPER_METADATA_VISIBILITY_UNSPECIFIED",
      "type": "string",
      "enum": [
        "DEVELOPER_METADATA_VISIBILITY_UNSPECIFIED",
        "DOCUMENT",
        "PROJECT"
      ]
    },
    "Visibility1": {
      "title": "Visibility1",
      "description": "Limits the selected developer metadata to that which has a matching\nDeveloperMetadata.visibility.  If left unspecified, all developer\nmetadata visibile to the requesting project is considered.",
      "example": "DEVELOPER_METADATA_VISIBILITY_UNSPECIFIED",
      "type": "string",
      "enum": [
        "DEVELOPER_METADATA_VISIBILITY_UNSPECIFIED",
        "DOCUMENT",
        "PROJECT"
      ]
    },
    "WrapStrategy": {
      "title": "WrapStrategy",
      "description": "The wrap strategy for the value in the cell.",
      "example": "WRAP_STRATEGY_UNSPECIFIED",
      "type": "string",
      "enum": [
        "WRAP_STRATEGY_UNSPECIFIED",
        "OVERFLOW_CELL",
        "LEGACY_WRAP",
        "CLIP",
        "WRAP"
      ]
    }
  },
  "tags": [
    {
      "name": "sheets",
      "description": ""
    },
    {
      "name": "developerMetadata",
      "description": ""
    },
    {
      "name": "values",
      "description": ""
    },
    {
      "name": "spreadsheets",
      "description": ""
    }
  ]
}