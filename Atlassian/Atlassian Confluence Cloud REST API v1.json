{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "The Confluence Cloud REST API",
    "description": "This document describes the REST API and resources provided by Confluence. The REST APIs are for developers who want to integrate Confluence into their application and for administrators who want to script interactions with the Confluence server.Confluence's REST APIs provide access to resources (data entities) via URI paths. To use a REST API, your application will make an HTTP request and parse the response. The response format is JSON. Your methods will be the standard HTTP methods like GET, PUT, POST and DELETE. Because the REST API is based on open standards, you can use any web development language to access the API.",
    "contact": {}
  },
  "host": "example.com",
  "basePath": "//your-domain.atlassian.net/wiki/rest/api",
  "securityDefinitions": {
    "auth": {
      "type": "basic"
    }
  },
  "schemes": [],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/audit": {
      "get": {
        "description": "Returns all records in the audit log, optionally for a certain date range. \nThis contains information about events like space exports, group membership \nchanges, app installations, etc. For more information, see \n[Audit log](https://confluence.atlassian.com/confcloud/audit-log-802164269.html) \nin the Confluence administrator's guide.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \n'Confluence Administrator' global permission.",
        "summary": "Get audit records",
        "tags": [
          "/audit"
        ],
        "operationId": "AuditGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filters the results to the records on or after the `startDate`. \nThe `startDate` must be specified as a [timestamp](https://www.unixtimestamp.com/)."
          },
          {
            "name": "endDate",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filters the results to the records on or before the `endDate`. \nThe `endDate` must be specified as a [timestamp](https://www.unixtimestamp.com/)."
          },
          {
            "name": "searchString",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filters the results to records that have string property values \nmatching the `searchString`."
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "default": 0,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The starting index of the returned records."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "default": 1000,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The maximum number of records to return per page. \nNote, this may be restricted by fixed system limits."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested records are returned.",
            "schema": {
              "$ref": "#/definitions/AuditRecordArray"
            },
            "headers": {}
          },
          "403": {
            "description": "Returned if the calling user does not have permission to view the audit \nlog.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "post": {
        "description": "Creates a record in the audit log. \n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \n'Confluence Administrator' global permission.",
        "summary": "Create audit record",
        "tags": [
          "/audit"
        ],
        "operationId": "AuditPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "The record to be created in the audit log.",
            "schema": {
              "$ref": "#/definitions/AuditRecordCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the record is created in the audit log.",
            "schema": {
              "$ref": "#/definitions/AuditRecord"
            },
            "headers": {}
          },
          "400": {
            "description": "Returned if the `remoteAddress` property is not specified.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/audit/export": {
      "get": {
        "description": "Exports audit records as a CSV file or ZIP file.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \n'Confluence Administrator' global permission.",
        "summary": "Export audit records",
        "tags": [
          "/audit"
        ],
        "operationId": "AuditExportGet",
        "produces": [
          "text/csv"
        ],
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filters the exported results to the records on or after the `startDate`. \nThe `startDate` must be specified as a [timestamp](https://www.unixtimestamp.com/)."
          },
          {
            "name": "endDate",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filters the exported results to the records on or before the `endDate`. \nThe `endDate` must be specified as a [timestamp](https://www.unixtimestamp.com/)."
          },
          {
            "name": "searchString",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filters the exported results to records that have string property values \nmatching the `searchString`."
          },
          {
            "name": "format",
            "in": "query",
            "required": false,
            "enum": [
              "csv",
              "zip"
            ],
            "default": "csv",
            "type": "string",
            "description": "The format of the export file for the audit records."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested export of the audit records is returned.",
            "schema": {
              "type": "string",
              "format": "binary"
            },
            "headers": {}
          },
          "403": {
            "description": "Returned if the calling user does not have permission to view the audit \nlog.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/audit/retention": {
      "get": {
        "description": "Returns the retention period for records in the audit log. The retention \nperiod is how long an audit record is kept for, from creation date until \nit is deleted.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \n'Confluence Administrator' global permission.",
        "summary": "Get retention period",
        "tags": [
          "/audit"
        ],
        "operationId": "AuditRetentionGet",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returned if the requested retention period is returned.",
            "schema": {
              "$ref": "#/definitions/RetentionPeriod"
            },
            "headers": {}
          },
          "403": {
            "description": "Returned if the calling user does not have permission to view the audit \nlog.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "put": {
        "description": "Sets the retention period for records in the audit log. The retention period \ncan be set to a maximum of 20 years.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \n'Confluence Administrator' global permission.",
        "summary": "Set retention period",
        "tags": [
          "/audit"
        ],
        "operationId": "AuditRetentionPut",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "The updated retention period.",
            "schema": {
              "$ref": "#/definitions/RetentionPeriod"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the retention period is updated.",
            "schema": {
              "$ref": "#/definitions/RetentionPeriod"
            },
            "headers": {}
          },
          "403": {
            "description": "Returned if the calling user does not have permission to view the audit \nlog.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/audit/since": {
      "get": {
        "description": "Returns records from the audit log, for a time period back from the current \ndate. For example, you can use this method to get the last 3 months of records.\n\nThis contains information about events like space exports, group membership \nchanges, app installations, etc. For more information, see \n[Audit log](https://confluence.atlassian.com/confcloud/audit-log-802164269.html) \nin the Confluence administrator's guide.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \n'Confluence Administrator' global permission.",
        "summary": "Get audit records for time period",
        "tags": [
          "/audit"
        ],
        "operationId": "AuditSinceGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "number",
            "in": "query",
            "required": false,
            "default": 3,
            "type": "integer",
            "format": "int64",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The number of units for the time period."
          },
          {
            "name": "units",
            "in": "query",
            "required": false,
            "enum": [
              "NANOS",
              "MICROS",
              "MILLIS",
              "SECONDS",
              "MINUTES",
              "HOURS",
              "HALF_DAYS",
              "DAYS",
              "WEEKS",
              "MONTHS",
              "YEARS",
              "DECADES",
              "CENTURIES"
            ],
            "default": "MONTHS",
            "type": "string",
            "description": "The unit of time that the time period is measured in."
          },
          {
            "name": "searchString",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filters the results to records that have string property values \nmatching the `searchString`."
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "default": 0,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The starting index of the returned records."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "default": 1000,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The maximum number of records to return per page. \nNote, this may be restricted by fixed system limits."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested records are returned.",
            "schema": {
              "$ref": "#/definitions/AuditRecordArray"
            },
            "headers": {}
          },
          "403": {
            "description": "Returned if the calling user does not have permission to view the audit \nlog.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/content": {
      "get": {
        "description": "Returns all content in a Confluence instance.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \nPermission to access the Confluence site ('Can use' global permission). \nOnly content that the user has permission to view will be returned.",
        "summary": "Get content",
        "tags": [
          "/content"
        ],
        "operationId": "ContentGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "required": false,
            "enum": [
              "page",
              "blogpost"
            ],
            "default": "page",
            "type": "string",
            "description": "The type of content to return."
          },
          {
            "name": "spaceKey",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The key of the space to be queried for its content."
          },
          {
            "name": "title",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The title of the page to be returned. Required for <code>page</code> type."
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "enum": [
              "current",
              "trashed",
              "draft",
              "any"
            ],
            "default": "current",
            "type": "string",
            "description": "Filter the results to a set of content based on their status. If set to `any`, \ncontent with any status is returned. Note, the `historical` status is currently \nnot supported."
          },
          {
            "name": "postingDay",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The posting date of the blog post to be returned. Required for\n<code>blogpost</code> type. Format: <code>yyyy-mm-dd</code>."
          },
          {
            "name": "expand",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "childTypes.all",
                "childTypes.attachment",
                "childTypes.comment",
                "childTypes.page",
                "container",
                "metadata.currentuser",
                "metadata.properties",
                "metadata.labels",
                "metadata.frontend",
                "operations",
                "children.page",
                "children.attachment",
                "children.comment",
                "restrictions.read.restrictions.user",
                "restrictions.read.restrictions.group",
                "restrictions.update.restrictions.user",
                "restrictions.update.restrictions.group",
                "history",
                "history.lastUpdated",
                "history.previousVersion",
                "history.contributors",
                "history.nextVersion",
                "ancestors",
                "body",
                "version",
                "descendants.page",
                "descendants.attachment",
                "descendants.comment",
                "space"
              ]
            },
            "description": "A multi-value parameter indicating which properties of the content to expand.\nBy default, the following objects are expanded: `space`, `history`, `version`.\n\n- `childTypes.all` returns whether the content has attachments, comments, or child pages. \nUse this if you only need to check whether the content has children of a particular type.\n- `childTypes.attachment` returns whether the content has attachments.\n- `childTypes.comment` returns whether the content has comments.\n- `childTypes.page` returns whether the content has child pages.\n- `container` returns the space that the content is in. This is the same as the information \nreturned by [Get space](#api-space-spaceKey-get).\n- `metadata.currentuser` returns information about the current user in relation to the content, \nlike when they last viewed it, modified it, contributed to it, or added it as a favourite.\n- `metadata.properties` returns content properties that have been set via the Confluence REST API.\n- `metadata.labels` returns the labels that have been added to the content.\n- `metadata.frontend` (this property is only used by Atlassian)\n- `operations` returns the operations for the content, which are used when setting permissions.\n- `children.page` returns pages that are descendants at the level immediately below the content.\n- `children.attachment` returns all attachments for the content.\n- `children.comment` returns all comments on the content.\n- `restrictions.read.restrictions.user` returns the users that have permission to read the content.\n- `restrictions.read.restrictions.group` returns the groups that have permission to read the content.\n- `restrictions.update.restrictions.user` returns the users that have permission to update the content.\n- `restrictions.update.restrictions.group` returns the groups that have permission to update the content.\n- `history` returns the history of the content, including the date it was created.\n- `history.lastUpdated` returns information about the most recent update of the content, including \nwho updated it and when it was updated.\n- `history.previousVersion` returns information about the update prior to the current content update.\n- `history.contributors` returns all of the users who have contributed to the content.\n- `history.nextVersion` returns information about the update after to the current content update.\n- `ancestors` returns the parent page, if the content is a page.\n- `body` returns the body of the content in different formats, including the editor format, \nview format, and export format.\n- `version` returns information about the most recent update of the content, including who updated it \nand when it was updated.\n- `descendants.page` returns pages that are descendants at any level below the content.\n- `descendants.attachment` returns all attachments for the content, same as `children.attachment`.\n- `descendants.comment` returns all comments on the content, same as `children.comment`.\n- `space` returns the space that the content is in. This is the same as the information returned by \n[Get space](#api-space-spaceKey-get)."
          },
          {
            "name": "trigger",
            "in": "query",
            "required": false,
            "enum": [
              "viewed"
            ],
            "type": "string",
            "description": "If set to `viewed`, the request will trigger a 'viewed' event for the content. \nWhen this event is triggered, the page/blogpost will appear on the 'Recently visited' \ntab of the user's Confluence dashboard."
          },
          {
            "name": "orderby",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Orders the content by a particular field. Specify the field and sort direction for \nthis parameter, as follows: 'fieldpath asc/desc'. For example, 'history.createdDate desc'."
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "default": 0,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The starting index of the returned content."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "default": 25,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The maximum number of content objects to return per page. \nNote, this may be restricted by fixed system limits."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested list of content is returned.",
            "schema": {
              "$ref": "#/definitions/ContentArray"
            },
            "headers": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing \nfrom the request.",
            "schema": {}
          },
          "404": {
            "description": "Returned if the calling user does not have permission to view the \nrequested content.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "post": {
        "description": "Creates a new piece of content or publishes an existing draft. \n\nTo publish a draft, add the `id` and `status` properties to the body of the request. \nSet the `id` to the ID of the draft and set the `status` to 'current'. When the \nrequest is sent, a new piece of content will be created and the metadata from the \ndraft will be transferred into it.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: 'Add' permission for the \nspace that the content will be created in, and permission to view the draft if publishing a draft.",
        "summary": "Create content",
        "tags": [
          "/content"
        ],
        "operationId": "ContentPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "The new content to be created. Set the `representation` to the name of the body \nformat type. For example, if you use `storage` for the body format, set \n'`representation`=`storage`'.\n\nIf you are not sure how to generate the different formats, you can create a page in the \nConfluence application, retrieve the content using [Get content](#api-content-get), \nand expand the desired content format, e.g. `expand=body.storage`.",
            "schema": {
              "$ref": "#/definitions/ContentCreate"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "default": "current",
            "type": "string",
            "description": "Filter the returned content by status."
          },
          {
            "name": "expand",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "childTypes.all",
                "childTypes.attachment",
                "childTypes.comment",
                "childTypes.page",
                "container",
                "metadata.currentuser",
                "metadata.properties",
                "metadata.labels",
                "metadata.frontend",
                "operations",
                "children.page",
                "children.attachment",
                "children.comment",
                "restrictions.read.restrictions.user",
                "restrictions.read.restrictions.group",
                "restrictions.update.restrictions.user",
                "restrictions.update.restrictions.group",
                "history",
                "history.lastUpdated",
                "history.previousVersion",
                "history.contributors",
                "history.nextVersion",
                "ancestors",
                "body",
                "version",
                "descendants.page",
                "descendants.attachment",
                "descendants.comment",
                "space"
              ]
            },
            "description": "A multi-value parameter indicating which properties of the new content to expand. \nBy default, the following objects are expanded: `space`, `history`, `version`.\n\n- `childTypes.all` returns whether the content has attachments, comments, or child pages. \nUse this if you only need to check whether the content has children of a particular type.\n- `childTypes.attachment` returns whether the content has attachments.\n- `childTypes.comment` returns whether the content has comments.\n- `childTypes.page` returns whether the content has child pages.\n- `container` returns the space that the content is in. This is the same as the information \nreturned by [Get space](#api-space-spaceKey-get).\n- `metadata.currentuser` returns information about the current user in relation to the content, \nlike when they last viewed it, modified it, contributed to it, or added it as a favourite.\n- `metadata.properties` returns content properties that have been set via the Confluence REST API.\n- `metadata.labels` returns the labels that have been added to the content.\n- `metadata.frontend` (this property is only used by Atlassian)\n- `operations` returns the operations for the content, which are used when setting permissions.\n- `children.page` returns pages that are descendants at the level immediately below the content.\n- `children.attachment` returns all attachments for the content.\n- `children.comment` returns all comments on the content.\n- `restrictions.read.restrictions.user` returns the users that have permission to read the content.\n- `restrictions.read.restrictions.group` returns the groups that have permission to read the content.\n- `restrictions.update.restrictions.user` returns the users that have permission to update the content.\n- `restrictions.update.restrictions.group` returns the groups that have permission to update the content.\n- `history` returns the history of the content, including the date it was created.\n- `history.lastUpdated` returns information about the most recent update of the content, including \nwho updated it and when it was updated.\n- `history.previousVersion` returns information about the update prior to the current content update.\n- `history.contributors` returns all of the users who have contributed to the content.\n- `history.nextVersion` returns information about the update after to the current content update.\n- `ancestors` returns the parent page, if the content is a page.\n- `body` returns the body of the content in different formats, including the editor format, \nview format, and export format.\n- `version` returns information about the most recent update of the content, including who updated it \nand when it was updated.\n- `descendants.page` returns pages that are descendants at any level below the content.\n- `descendants.attachment` returns all attachments for the content, same as `children.attachment`.\n- `descendants.comment` returns all comments on the content, same as `children.comment`.\n- `space` returns the space that the content is in. This is the same as the information returned by \n[Get space](#api-space-spaceKey-get)."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the content is created.",
            "schema": {
              "$ref": "#/definitions/Content"
            },
            "headers": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing \nfrom the request.",
            "schema": {}
          },
          "403": {
            "description": "Returned if;\n\n- The space that the content is being created in does not exist.\n- If the requesting user does not have permission to create content in it.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/content/search": {
      "get": {
        "description": "Returns the list of content that matches a Confluence Query Language \n(CQL) query. For information on CQL, see: \n[Advanced searching using CQL](https://developer.atlassian.com/cloud/confluence/advanced-searching-using-cql/).\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \nPermission to access the Confluence site ('Can use' global permission). \nOnly content that the user has permission to view will be returned.",
        "summary": "Search content by CQL",
        "tags": [
          "/content"
        ],
        "operationId": "ContentSearchGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "cql",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The CQL string that is used to find the requested content."
          },
          {
            "name": "cqlcontext",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The space, content, and content status to execute the search against. \nSpecify this as an object with the following properties:\n\n- `spaceKey` Key of the space to search against. Optional.\n- `contentId` ID of the content to search against. Optional. Must \nbe in the space spacified by `spaceKey`.\n- `contentStatuses` Content statuses to search against. Optional."
          },
          {
            "name": "expand",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "childTypes.all",
                "childTypes.attachment",
                "childTypes.comment",
                "childTypes.page",
                "container",
                "metadata.currentuser",
                "metadata.properties",
                "metadata.labels",
                "metadata.frontend",
                "operations",
                "children.page",
                "children.attachment",
                "children.comment",
                "restrictions.read.restrictions.user",
                "restrictions.read.restrictions.group",
                "restrictions.update.restrictions.user",
                "restrictions.update.restrictions.group",
                "history",
                "history.lastUpdated",
                "history.previousVersion",
                "history.contributors",
                "history.nextVersion",
                "ancestors",
                "body",
                "version",
                "descendants.page",
                "descendants.attachment",
                "descendants.comment",
                "space"
              ]
            },
            "description": "A multi-value parameter indicating which properties of the content to expand.\n\n- `childTypes.all` returns whether the content has attachments, comments, \nor child pages. Use this if you only need to check whether the content \nhas children of a particular type.\n- `childTypes.attachment` returns whether the content has attachments.\n- `childTypes.comment` returns whether the content has comments.\n- `childTypes.page` returns whether the content has child pages.\n- `container` returns the space that the content is in. This is the same \nas the information returned by [Get space](#api-space-spaceKey-get).\n- `metadata.currentuser` returns information about the current user in \nrelation to the content, like when they last viewed it, modified it, \ncontributed to it, or added it as a favourite.\n- `metadata.properties` returns content properties that have been set \nvia the Confluence REST API.\n- `metadata.labels` returns the labels that have been added to the content.\n- `metadata.frontend` (this property is only used by Atlassian)\n- `operations` returns the operations for the content, which are used \nwhen setting permissions.\n- `children.page` returns pages that are descendants at the level \nimmediately below the content.\n- `children.attachment` returns all attachments for the content.\n- `children.comment` returns all comments on the content.\n- `restrictions.read.restrictions.user` returns the users that have \npermission to read the content.\n- `restrictions.read.restrictions.group` returns the groups that have \npermission to read the content.\n- `restrictions.update.restrictions.user` returns the users that have \npermission to update the content.\n- `restrictions.update.restrictions.group` returns the groups that have \npermission to update the content.\n- `history` returns the history of the content, including the date it was created.\n- `history.lastUpdated` returns information about the most recent update \nof the content, including who updated it and when it was updated.\n- `history.previousVersion` returns information about the update prior to \nthe current content update.\n- `history.contributors` returns all of the users who have contributed to \nthe content.\n- `history.nextVersion` returns information about the update after to the \ncurrent content update.\n- `ancestors` returns the parent page, if the content is a page.\n- `body` returns the body of the content in different formats, including the \neditor format, view format, and export format.\n- `version` returns information about the most recent update of the content, \nincluding who updated it and when it was updated.\n- `descendants.page` returns pages that are descendants at any level below the \ncontent.\n- `descendants.attachment` returns all attachments for the content, same as \n`children.attachment`.\n- `descendants.comment` returns all comments on the content, same as \n`children.comment`.\n- `space` returns the space that the content is in. This is the same as the \ninformation returned by [Get space](#api-space-spaceKey-get)."
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "default": 0,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The starting index of the returned content."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "default": 25,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The maximum number of content objects to return per page. \nNote, this may be restricted by fixed system limits."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested list of content is returned.",
            "schema": {
              "$ref": "#/definitions/ContentArray"
            },
            "headers": {}
          },
          "400": {
            "description": "Returned if the CQL is invalid or missing.",
            "schema": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing \nfrom the request.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/content/{id}": {
      "get": {
        "description": "Returns a single piece of content, like a page or a blog post.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \nPermission to view the content. If the content is a blog post, 'View' permission \nfor the space is required.",
        "summary": "Get content by ID",
        "tags": [
          "/content"
        ],
        "operationId": "ContentByIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the content to be returned. If you don't know the content ID, \nuse [Get content](#api-content-get) and filter the results."
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "enum": [
              "current",
              "trashed",
              "draft",
              "any"
            ],
            "default": "current",
            "type": "string",
            "description": "Filter the results to a set of content based on their status. \nIf set to `any`, content with any status is returned. Note, the \n`historical` status is currently not supported."
          },
          {
            "name": "version",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The version number of the content to be returned."
          },
          {
            "name": "embeddedContentRender",
            "in": "query",
            "required": false,
            "enum": [
              "current",
              "version-at-save"
            ],
            "default": "current",
            "type": "string",
            "description": "The version of embedded content (e.g. attachments) to render. \n\n- <code>current</code> renders the latest version of the embedded content.\n- <code>version-at-save</code> renders the version of the embedded content \nat the time of save."
          },
          {
            "name": "expand",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "childTypes.all",
                "childTypes.attachment",
                "childTypes.comment",
                "childTypes.page",
                "container",
                "metadata.currentuser",
                "metadata.properties",
                "metadata.labels",
                "metadata.frontend",
                "operations",
                "children.page",
                "children.attachment",
                "children.comment",
                "restrictions.read.restrictions.user",
                "restrictions.read.restrictions.group",
                "restrictions.update.restrictions.user",
                "restrictions.update.restrictions.group",
                "history",
                "history.lastUpdated",
                "history.previousVersion",
                "history.contributors",
                "history.nextVersion",
                "ancestors",
                "macroRenderedOutput",
                "body",
                "version",
                "descendants.page",
                "descendants.attachment",
                "descendants.comment",
                "space"
              ]
            },
            "description": "A multi-value parameter indicating which properties of the content to expand.\nBy default, the following objects are expanded: `space`, `history`, `version`.\n\n- `childTypes.all` returns whether the content has attachments, comments, or child pages. \nUse this if you only need to check whether the content has children of a particular type.\n- `childTypes.attachment` returns whether the content has attachments.\n- `childTypes.comment` returns whether the content has comments.\n- `childTypes.page` returns whether the content has child pages.\n- `container` returns the space that the content is in. This is the same as the information \nreturned by [Get space](#api-space-spaceKey-get).\n- `metadata.currentuser` returns information about the current user in relation to the content, \nlike when they last viewed it, modified it, contributed to it, or added it as a favourite.\n- `metadata.properties` returns content properties that have been set via the Confluence REST API.\n- `metadata.labels` returns the labels that have been added to the content.\n- `metadata.frontend` (this property is only used by Atlassian)\n- `operations` returns the operations for the content, which are used when setting permissions.\n- `children.page` returns pages that are descendants at the level immediately below the content.\n- `children.attachment` returns all attachments for the content.\n- `children.comment` returns all comments on the content.\n- `restrictions.read.restrictions.user` returns the users that have permission to read the content.\n- `restrictions.read.restrictions.group` returns the groups that have permission to read the content.\n- `restrictions.update.restrictions.user` returns the users that have permission to update the content.\n- `restrictions.update.restrictions.group` returns the groups that have permission to update the content.\n- `history` returns the history of the content, including the date it was created.\n- `history.lastUpdated` returns information about the most recent update of the content, including \nwho updated it and when it was updated.\n- `history.previousVersion` returns information about the update prior to the current content update.\n- `history.contributors` returns all of the users who have contributed to the content.\n- `history.nextVersion` returns information about the update after to the current content update.\n- `ancestors` returns the parent page, if the content is a page.\n- `body` returns the body of the content in different formats, including the editor format, view format, \nand export format.\n- `version` returns information about the most recent update of the content, including who updated it \nand when it was updated.\n- `descendants.page` returns pages that are descendants at any level below the content.\n- `descendants.attachment` returns all attachments for the content, same as `children.attachment`.\n- `descendants.comment` returns all comments on the content, same as `children.comment`.\n- `space` returns the space that the content is in. This is the same as the information returned by \n[Get space](#api-space-spaceKey-get)."
          },
          {
            "name": "trigger",
            "in": "query",
            "required": false,
            "enum": [
              "viewed"
            ],
            "type": "string",
            "description": "If set to `viewed`, the request will trigger a 'viewed' event for the content. \nWhen this event is triggered, the page/blogpost will appear on the 'Recently visited' \ntab of the user's Confluence dashboard."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested content is returned.",
            "schema": {
              "$ref": "#/definitions/Content"
            },
            "headers": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing \nfrom the request.",
            "schema": {}
          },
          "404": {
            "description": "Returned if;\n\n- There is no content with the given ID.\n- The requesting user does not have permission to view the content.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "put": {
        "description": "Updates a piece of content. Use this method to update the title or body \nof a piece of content, change the status, change the parent page, and more.\n\nNote, updating draft content is currently not supported.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \nPermission to update the content.",
        "summary": "Update content",
        "tags": [
          "/content"
        ],
        "operationId": "ContentByIdPut",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the content to be updated."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "The updated content.",
            "schema": {
              "$ref": "#/definitions/ContentUpdate"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "enum": [
              "current",
              "trashed",
              "historical",
              "draft"
            ],
            "default": "current",
            "type": "string",
            "description": "The updated status of the content. Use this parameter to change the \nstatus of a piece of content without passing the entire request body."
          },
          {
            "name": "conflictPolicy",
            "in": "query",
            "required": false,
            "enum": [
              "abort"
            ],
            "default": "abort",
            "type": "string",
            "description": "The action that should be taken when conflicts are discovered. \nOnly used when publishing a draft page."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the content is updated.",
            "schema": {
              "$ref": "#/definitions/Content"
            },
            "headers": {}
          },
          "400": {
            "description": "Returned if;\n\n- The request body is missing required parameters (version, type, title).\n- The type property has been set incorrectly.",
            "schema": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing \nfrom the request.",
            "schema": {}
          },
          "404": {
            "description": "Returned if a draft with current content cannot be found when setting the status\nparameter to draft and the content status is current.",
            "schema": {}
          },
          "409": {
            "description": "Returned if;\n- The page is a draft (draft pages cannot be updated). - The version property has not been set correctly for the content type.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "delete": {
        "description": "Moves a piece of content to the space's trash or purges it from the trash, \ndepending on the content's type and status:\n\n- If the content's type is `page` or `blogpost` and its status is `current`, \nit will be trashed.\n- If the content's type is `page` or `blogpost` and its status is `trashed`, \nthe content will be purged from the trash and deleted permanently. Note, \nyou must also set the `status` query parameter to `trashed` in your request.\n- If the content's type is `comment` or `attachment`, it will be deleted \npermanently without being trashed.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \n'Delete' permission for the space that the content is in, and permission to edit the content.",
        "summary": "Delete content",
        "tags": [
          "/content"
        ],
        "operationId": "ContentByIdDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the content to be deleted."
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Set this to `trashed`, if the content's status is `trashed` and you want to purge it."
          }
        ],
        "responses": {
          "204": {
            "description": "Returned if the content is successfully trashed.",
            "headers": {}
          },
          "404": {
            "description": "Returned if;\n\n- There is no content with the given ID.\n- The requesting user does not have permission to trash or purge the \ncontent.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/content/{id}/history": {
      "get": {
        "description": "Returns the most recent update for a piece of content.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: Permission to view the content.",
        "summary": "Get history for content",
        "tags": [
          "/content"
        ],
        "operationId": "ContentHistoryByIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the content to be queried for its history."
          },
          {
            "name": "expand",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "lastUpdated",
                "previousVersion",
                "contributors",
                "nextVersion"
              ]
            },
            "description": "A multi-value parameter indicating which properties of the content history to expand.\n\n- `lastUpdated` returns information about the most recent update of the content, \nincluding who updated it and when it was updated.\n- `previousVersion` returns information about the update prior to the current content \nupdate. For this method, it contains the same information as `lastUpdated`.\n- `contributors` returns all of the users who have contributed to the content.\n- `nextVersion` This parameter is not used for this method."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested content history is returned.",
            "schema": {
              "$ref": "#/definitions/ContentHistory"
            },
            "headers": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing \nfrom the request.",
            "schema": {}
          },
          "404": {
            "description": "Returned if;\n\n- There is no content with the given ID.\n- The calling user does not have permission to view the content.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/content/{id}/history/{version}/macro/id/{macroId}": {
      "get": {
        "description": "Returns the body of a macro in storage format, for the given macro ID. \nThis includes information like the name of the macro, the body of the macro, \nand any macro parameters. This method is mainly used by Cloud apps.\n\nAbout the macro ID: When a macro is created in a new version of content, \nConfluence will generate a random ID for it, unless an ID is specified \n(by an app). The macro ID will look similar to this: '50884bd9-0cb8-41d5-98be-f80943c14f96'. \nThe ID is then persisted as new versions of content are created, and is \nonly modified by Confluence if there are conflicting IDs.\n\nNote, to preserve backwards compatibility this resource will also match on \nthe hash of the macro body, even if a macro ID is found. This check will \neventually become redundant, as macro IDs are generated for pages and \ntransparently propagate out to all instances.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \nPermission to view the content that the macro is in.",
        "summary": "Get macro body by macro ID",
        "tags": [
          "/content"
        ],
        "operationId": "ContentHistoryMacroIdMacroIdByIdAndVersionGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID for the content that contains the macro."
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The version of the content that contains the macro."
          },
          {
            "name": "macroId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the macro. This is usually passed by the app that the\nmacro is in. Otherwise, find the macro ID by querying the desired \ncontent and version, then expanding the body in storage format. \nFor example, '/content/196611/version/7?expand=content.body.storage'."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested macro body is returned.",
            "schema": {
              "$ref": "#/definitions/MacroInstance"
            },
            "headers": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing \nfrom the request.",
            "schema": {}
          },
          "404": {
            "description": "Returned if;\n\n- There is no content with the given ID.\n- The calling user does not have permission to view the content.\n- The macro does not exist in the specified version.\n- There is no macro matching the given macro ID or hash.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/content/blueprint/instance/{draftId}": {
      "post": {
        "description": "Publishes a legacy draft of a page created from a blueprint. Legacy drafts \nwill eventually be removed in favor of shared drafts. For now, this method\nworks the same as [Publish shared draft](#api-content-blueprint-instance-draftId-put).\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \nPermission to view the draft and 'Add' permission for the space that \nthe content will be created in.",
        "summary": "Publish legacy draft",
        "tags": [
          "/content/blueprint"
        ],
        "operationId": "ContentBlueprintInstanceByDraftIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "draftId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the draft page that was created from a blueprint. \nYou can find the `draftId` in the Confluence application by \nopening the draft page and checking the page URL."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/ContentBlueprintDraft"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "default": "draft",
            "type": "string",
            "description": "The status of the content to be updated, i.e. the draft. This is set \nto 'draft' by default, so you shouldn't need to specify it."
          },
          {
            "name": "expand",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "childTypes.all",
                "childTypes.attachment",
                "childTypes.comment",
                "childTypes.page",
                "container",
                "metadata.currentuser",
                "metadata.properties",
                "metadata.labels",
                "metadata.frontend",
                "operations",
                "children.page",
                "children.attachment",
                "children.comment",
                "restrictions.read.restrictions.user",
                "restrictions.read.restrictions.group",
                "restrictions.update.restrictions.user",
                "restrictions.update.restrictions.group",
                "history",
                "history.lastUpdated",
                "history.previousVersion",
                "history.contributors",
                "history.nextVersion",
                "ancestors",
                "body",
                "version",
                "descendants.page",
                "descendants.attachment",
                "descendants.comment",
                "space"
              ]
            },
            "description": "A multi-value parameter indicating which properties of the new content \nto expand when returned. By default, the following objects are expanded: \n`body.storage`,`history`,`space`,`version`,`ancestors`\n\n- `childTypes.all` returns whether the content has attachments, comments, or child pages. \nUse this if you only need to check whether the content has children of a particular type.\n- `childTypes.attachment` returns whether the content has attachments.\n- `childTypes.comment` returns whether the content has comments.\n- `childTypes.page` returns whether the content has child pages.\n- `container` returns the space that the content is in. This is the same as the information \nreturned by [Get space](#api-space-spaceKey-get).\n- `metadata.currentuser` returns information about the current user in relation to the content, \nlike when they last viewed it, modified it, contributed to it, or added it as a favourite.\n- `metadata.properties` returns content properties that have been set via the Confluence REST API.\n- `metadata.labels` returns the labels that have been added to the content.\n- `metadata.frontend` (this property is only used by Atlassian)\n- `operations` returns the operations for the content, which are used when setting permissions.\n- `children.page` returns pages that are descendants at the level immediately below the content.\n- `children.attachment` returns all attachments for the content.\n- `children.comment` returns all comments on the content.\n- `restrictions.read.restrictions.user` returns the users that have permission to read the content.\n- `restrictions.read.restrictions.group` returns the groups that have permission to read the content.\n- `restrictions.update.restrictions.user` returns the users that have permission to update the content.\n- `restrictions.update.restrictions.group` returns the groups that have permission to update the content.\n- `history` returns the history of the content, including the date it was created.\n- `history.lastUpdated` returns information about the most recent update of the content, including \nwho updated it and when it was updated.\n- `history.previousVersion` returns information about the update prior to the current content update.\n- `history.contributors` returns all of the users who have contributed to the content.\n- `history.nextVersion` returns information about the update after to the current content update.\n- `ancestors` returns the parent page, if the content is a page.\n- `body` returns the body of the content in different formats, including the editor format, \nview format, and export format.\n- `version` returns information about the most recent update of the content, including who updated it \nand when it was updated.\n- `descendants.page` returns pages that are descendants at any level below the content.\n- `descendants.attachment` returns all attachments for the content, same as `children.attachment`.\n- `descendants.comment` returns all comments on the content, same as `children.comment`.\n- `space` returns the space that the content is in. This is the same as the information returned by \n[Get space](#api-space-spaceKey-get)."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the draft was successfully published.",
            "schema": {
              "$ref": "#/definitions/Content"
            },
            "headers": {}
          },
          "400": {
            "description": "Returned if a title is not specified or a page with the \ntitle already exists.",
            "schema": {}
          },
          "409": {
            "description": "Returned if the version is not set to 1.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "put": {
        "description": "Publishes a shared draft of a page created from a blueprint.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \nPermission to view the draft and 'Add' permission for the space that \nthe content will be created in.",
        "summary": "Publish shared draft",
        "tags": [
          "/content/blueprint"
        ],
        "operationId": "ContentBlueprintInstanceByDraftIdPut",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "draftId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the draft page that was created from a blueprint. \nYou can find the `draftId` in the Confluence application by \nopening the draft page and checking the page URL."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/ContentBlueprintDraft"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "default": "draft",
            "type": "string",
            "description": "The status of the content to be updated, i.e. the draft. This is set \nto 'draft' by default, so you shouldn't need to specify it."
          },
          {
            "name": "expand",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "childTypes.all",
                "childTypes.attachment",
                "childTypes.comment",
                "childTypes.page",
                "container",
                "metadata.currentuser",
                "metadata.properties",
                "metadata.labels",
                "metadata.frontend",
                "operations",
                "children.page",
                "children.attachment",
                "children.comment",
                "restrictions.read.restrictions.user",
                "restrictions.read.restrictions.group",
                "restrictions.update.restrictions.user",
                "restrictions.update.restrictions.group",
                "history",
                "history.lastUpdated",
                "history.previousVersion",
                "history.contributors",
                "history.nextVersion",
                "ancestors",
                "body",
                "version",
                "descendants.page",
                "descendants.attachment",
                "descendants.comment",
                "space"
              ]
            },
            "description": "A multi-value parameter indicating which properties of the new content \nto expand when returned. By default, the following objects are expanded: \n`body.storage`,`history`,`space`,`version`,`ancestors`\n\n- `childTypes.all` returns whether the content has attachments, comments, or child pages. \nUse this if you only need to check whether the content has children of a particular type.\n- `childTypes.attachment` returns whether the content has attachments.\n- `childTypes.comment` returns whether the content has comments.\n- `childTypes.page` returns whether the content has child pages.\n- `container` returns the space that the content is in. This is the same as the information \nreturned by [Get space](#api-space-spaceKey-get).\n- `metadata.currentuser` returns information about the current user in relation to the content, \nlike when they last viewed it, modified it, contributed to it, or added it as a favourite.\n- `metadata.properties` returns content properties that have been set via the Confluence REST API.\n- `metadata.labels` returns the labels that have been added to the content.\n- `metadata.frontend` (this property is only used by Atlassian)\n- `operations` returns the operations for the content, which are used when setting permissions.\n- `children.page` returns pages that are descendants at the level immediately below the content.\n- `children.attachment` returns all attachments for the content.\n- `children.comment` returns all comments on the content.\n- `restrictions.read.restrictions.user` returns the users that have permission to read the content.\n- `restrictions.read.restrictions.group` returns the groups that have permission to read the content.\n- `restrictions.update.restrictions.user` returns the users that have permission to update the content.\n- `restrictions.update.restrictions.group` returns the groups that have permission to update the content.\n- `history` returns the history of the content, including the date it was created.\n- `history.lastUpdated` returns information about the most recent update of the content, including \nwho updated it and when it was updated.\n- `history.previousVersion` returns information about the update prior to the current content update.\n- `history.contributors` returns all of the users who have contributed to the content.\n- `history.nextVersion` returns information about the update after to the current content update.\n- `ancestors` returns the parent page, if the content is a page.\n- `body` returns the body of the content in different formats, including the editor format, \nview format, and export format.\n- `version` returns information about the most recent update of the content, including who updated it \nand when it was updated.\n- `descendants.page` returns pages that are descendants at any level below the content.\n- `descendants.attachment` returns all attachments for the content, same as `children.attachment`.\n- `descendants.comment` returns all comments on the content, same as `children.comment`.\n- `space` returns the space that the content is in. This is the same as the information returned by \n[Get space](#api-space-spaceKey-get)."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the draft was successfully published.",
            "schema": {
              "$ref": "#/definitions/Content"
            },
            "headers": {}
          },
          "400": {
            "description": "Returned if a title is not specified or a page with the \ntitle already exists.",
            "schema": {}
          },
          "409": {
            "description": "Returned if the version is not set to 1.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/content/{id}/child": {
      "get": {
        "description": "Returns a map of the direct children of a piece of content. A piece of content \nhas different types of child content, depending on its type. These are \nthe default parent-child content type relationships:\n\n- `page`: child content is `page`, `comment`, `attachment`\n- `blogpost`: child content is `comment`, `attachment`\n- `attachment`: child content is `comment`\n- `comment`: child content is `attachment`\n\nApps can override these default relationships. Apps can also introduce \nnew content types that create new parent-child content relationships.\n\nNote, the map will always include all child content types that are valid \nfor the content. However, if the content has no instances of a child content \ntype, the map will contain an empty array for that child content type.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: 'View' permission for the space, \nand permission to view the content if it is a page.",
        "summary": "Get content children",
        "tags": [
          "/content/{id}/child"
        ],
        "operationId": "ContentChildByIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the content to be queried for its children."
          },
          {
            "name": "expand",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "attachment",
                "comment",
                "page"
              ]
            },
            "description": "A multi-value parameter indicating which properties of the children to expand, where:\n\n- `attachment` returns all attachments for the content.\n- `comments` returns all comments for the content.\n- `page` returns all child pages of the content."
          },
          {
            "name": "parentVersion",
            "in": "query",
            "required": false,
            "default": 0,
            "type": "integer",
            "format": "int32",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The version of the parent content to retrieve children for.\nCurrently, this only works for the latest version."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested content children are returned.",
            "schema": {
              "$ref": "#/definitions/ContentChildren"
            },
            "headers": {}
          },
          "404": {
            "description": "Returned if;\n\n- There is no content with the given ID.\n- The calling user does not have permission to view the content.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/content/{id}/child/attachment": {
      "get": {
        "description": "Returns the attachments for a piece of content.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \nPermission to view the content. If the content is a blog post, 'View' permission \nfor the space is required.",
        "summary": "Get attachments",
        "tags": [
          "/content/{id}/child"
        ],
        "operationId": "ContentChildAttachmentByIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the content to be queried for its attachments."
          },
          {
            "name": "expand",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "childTypes.all",
                "childTypes.attachment",
                "childTypes.comment",
                "childTypes.page",
                "container",
                "metadata.currentuser",
                "metadata.properties",
                "metadata.labels",
                "metadata.frontend",
                "operations",
                "children.page",
                "children.attachment",
                "children.comment",
                "restrictions.read.restrictions.user",
                "restrictions.read.restrictions.group",
                "restrictions.update.restrictions.user",
                "restrictions.update.restrictions.group",
                "history",
                "history.lastUpdated",
                "history.previousVersion",
                "history.contributors",
                "history.nextVersion",
                "ancestors",
                "body",
                "version",
                "descendants.page",
                "descendants.attachment",
                "descendants.comment",
                "space"
              ]
            },
            "description": "A multi-value parameter indicating which properties of the \nattachments to expand. By default, the following objects are expanded: \n`metadata`.\n\n- `childTypes.all` returns whether the content has attachments, comments, or child pages. \nUse this if you only need to check whether the content has children of a particular type.\n- `childTypes.attachment` returns whether the content has attachments.\n- `childTypes.comment` returns whether the content has comments.\n- `childTypes.page` returns whether the content has child pages.\n- `container` returns the space that the content is in. This is the same as the information \nreturned by [Get space](#api-space-spaceKey-get).\n- `metadata.currentuser` returns information about the current user in relation to the content, \nlike when they last viewed it, modified it, contributed to it, or added it as a favourite.\n- `metadata.properties` returns content properties that have been set via the Confluence REST API.\n- `metadata.labels` returns the labels that have been added to the content.\n- `metadata.frontend` (this property is only used by Atlassian)\n- `operations` returns the operations for the content, which are used when setting permissions.\n- `children.page` returns pages that are descendants at the level immediately below the content.\n- `children.attachment` returns all attachments for the content.\n- `children.comment` returns all comments on the content.\n- `restrictions.read.restrictions.user` returns the users that have permission to read the content.\n- `restrictions.read.restrictions.group` returns the groups that have permission to read the content.\n- `restrictions.update.restrictions.user` returns the users that have permission to update the content.\n- `restrictions.update.restrictions.group` returns the groups that have permission to update the content.\n- `history` returns the history of the content, including the date it was created.\n- `history.lastUpdated` returns information about the most recent update of the content, including \nwho updated it and when it was updated.\n- `history.previousVersion` returns information about the update prior to the current content update.\n- `history.contributors` returns all of the users who have contributed to the content.\n- `history.nextVersion` returns information about the update after to the current content update.\n- `ancestors` returns the parent page, if the content is a page.\n- `body` returns the body of the content in different formats, including the editor format, \nview format, and export format.\n- `version` returns information about the most recent update of the content, including who updated it \nand when it was updated.\n- `descendants.page` returns pages that are descendants at any level below the content.\n- `descendants.attachment` returns all attachments for the content, same as `children.attachment`.\n- `descendants.comment` returns all comments on the content, same as `children.comment`.\n- `space` returns the space that the content is in. This is the same as the information returned by \n[Get space](#api-space-spaceKey-get)."
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "default": 0,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The starting index of the returned attachments."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "default": 25,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The maximum number of attachments to return per page. \nNote, this may be restricted by fixed system limits."
          },
          {
            "name": "filename",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter the results to attachments that match the filename."
          },
          {
            "name": "mediaType",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter the results to attachments that match the media type."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested attachments are returned.",
            "schema": {
              "$ref": "#/definitions/ContentArray"
            },
            "headers": {}
          },
          "404": {
            "description": "Returned if;\n\n- There is no parent content with the given ID.\n- The calling user does not have permission to view the parent content.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "post": {
        "description": "Adds an attachment to a piece of content. This method only adds a new \nattachment. If you want to update an existing attachment, use \n[Create or update attachments](#api-content-id-child-attachment-put).\n\nNote, you must set a `X-Atlassian-Token: nocheck` header on the request \nfor this method, otherwise it will be blocked. This protects against XSRF \nattacks, which is necessary as this method accepts multipart/form-data.\n\nThe media type 'multipart/form-data' is defined in [RFC 1867](https://www.ietf.org/rfc/rfc1867.txt). \nMost client libraries have classes that make it easier to implement \nmultipart posts, like the [MultiPartEntity](http://hc.apache.org/httpcomponents-client-ga/httpmime/apidocs/org/apache/http/entity/mime/MultipartEntity.html) \nJava class provided by Apache HTTP Components.\n\nExample: This curl command attaches a file ('example.txt') to a container \n(id='123') with a comment and `minorEdits`=true.\n\n``` bash\ncurl -D- \\\n  -u admin:admin \\\n  -X POST \\\n  -H \"X-Atlassian-Token: nocheck\" \\\n  -F \"file=@example.txt\" \\\n  -F \"minorEdit=true\" \\\n  -F \"comment=Example attachment comment\" \\\n  http://myhost/rest/api/content/123/child/attachment\n```\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \nPermission to update the content.",
        "summary": "Create attachment",
        "tags": [
          "/content/{id}/child/attachment"
        ],
        "operationId": "ContentChildAttachmentByIdPost",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the content to add the attachment to."
          },
          {
            "name": "file",
            "in": "formData",
            "required": true,
            "type": "file",
            "format": "file",
            "description": "The relative location and name of the attachment to be added to \nthe content."
          },
          {
            "name": "minorEdit",
            "in": "formData",
            "required": true,
            "type": "file",
            "format": "file",
            "description": "If `minorEdits` is set to 'true', no notification email or activity stream \nwill be generated when the attachment is added to the content."
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "enum": [
              "current",
              "draft"
            ],
            "default": "current",
            "type": "string",
            "description": "The status of the content that the attachment is being added to."
          },
          {
            "name": "comment",
            "in": "formData",
            "required": false,
            "type": "file",
            "format": "file",
            "description": "The comment for the attachment that is being added.\nIf you specify a comment, then every file must have a comment and \nthe comments must be in the same order as the files. Alternatively, \ndon't specify any comments."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the attachments were added to the content.",
            "schema": {
              "$ref": "#/definitions/ContentArray"
            },
            "headers": {}
          },
          "400": {
            "description": "Returned if the content already has an attachment with the same filename.",
            "schema": {}
          },
          "403": {
            "description": "Returned if;\n\n- Attachments are disabled in Confluence.\n- The calling user does not have permission to add attachments to the \ncontent.",
            "schema": {}
          },
          "404": {
            "description": "Returned if;\n\n- The requested content is not found.\n- The user does not have permission to view it\n- The attachment exceeds the maximum configured attachment size.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "put": {
        "description": "Adds an attachment to a piece of content. If the attachment already exists \nfor the content, then the attachment is updated (i.e. a new version of the \nattachment is created).\n\nNote, you must set a `X-Atlassian-Token: nocheck` header on the request \nfor this method, otherwise it will be blocked. This protects against XSRF \nattacks, which is necessary as this method accepts multipart/form-data.\n\nThe media type 'multipart/form-data' is defined in [RFC 1867](https://www.ietf.org/rfc/rfc1867.txt). \nMost client libraries have classes that make it easier to implement \nmultipart posts, like the [MultiPartEntity](http://hc.apache.org/httpcomponents-client-ga/httpmime/apidocs/org/apache/http/entity/mime/MultipartEntity.html) \nJava class provided by Apache HTTP Components.\n\nExample: This curl command attaches a file ('example.txt') to a piece of \ncontent (id='123') with a comment and `minorEdits`=true. If the 'example.txt' \nfile already exists, it will update it with a new version of the attachment.\n\n``` bash\ncurl -D- \\\n  -u admin:admin \\\n  -X PUT \\\n  -H \"X-Atlassian-Token: nocheck\" \\\n  -F \"file=@example.txt\" \\\n  -F \"minorEdit=true\" \\\n  -F \"comment=Example attachment comment\" \\\n  http://myhost/rest/api/content/123/child/attachment\n```\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \nPermission to update the content.",
        "summary": "Create or update attachment",
        "tags": [
          "/content/{id}/child/attachment"
        ],
        "operationId": "ContentChildAttachmentByIdPut",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the content to add the attachment to."
          },
          {
            "name": "file",
            "in": "formData",
            "required": true,
            "type": "file",
            "format": "file",
            "description": "The relative location and name of the attachment to be added to \nthe content."
          },
          {
            "name": "minorEdit",
            "in": "formData",
            "required": true,
            "type": "file",
            "format": "file",
            "description": "If `minorEdits` is set to 'true', no notification email or activity stream \nwill be generated when the attachment is added to the content."
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "enum": [
              "current",
              "draft"
            ],
            "default": "current",
            "type": "string",
            "description": "The status of the content that the attachment is being added to. \nThis should always be set to 'current'."
          },
          {
            "name": "comment",
            "in": "formData",
            "required": false,
            "type": "file",
            "format": "file",
            "description": "The comment for the attachment that is being added.\nIf you specify a comment, then every file must have a comment and \nthe comments must be in the same order as the files. Alternatively, \ndon't specify any comments."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the attachments were added to the content.",
            "schema": {
              "$ref": "#/definitions/ContentArray"
            },
            "headers": {}
          },
          "403": {
            "description": "Returned if;\n\n- Attachments are disabled.\n- The calling user does not have permission to add attachments to the \ncontent.",
            "schema": {}
          },
          "404": {
            "description": "Returned if;\n\n- The requested content is not found. \n- The user does not have permission to view it.\n- The attachment exceeds the maximum configured attachment size.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/content/{id}/child/comment": {
      "get": {
        "description": "Returns the comments on a piece of content.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: 'View' permission for the space, \nand permission to view the content if it is a page.",
        "summary": "Get content comments",
        "tags": [
          "/content/{id}/child"
        ],
        "operationId": "ContentChildCommentByIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the content to be queried for its comments."
          },
          {
            "name": "expand",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "childTypes.all",
                "childTypes.attachment",
                "childTypes.comment",
                "childTypes.page",
                "container",
                "metadata.currentuser",
                "metadata.properties",
                "metadata.labels",
                "metadata.frontend",
                "operations",
                "children.page",
                "children.attachment",
                "children.comment",
                "restrictions.read.restrictions.user",
                "restrictions.read.restrictions.group",
                "restrictions.update.restrictions.user",
                "restrictions.update.restrictions.group",
                "history",
                "history.lastUpdated",
                "history.previousVersion",
                "history.contributors",
                "history.nextVersion",
                "ancestors",
                "body",
                "version",
                "descendants.page",
                "descendants.attachment",
                "descendants.comment",
                "space",
                "extensions.inlineProperties",
                "extensions.resolution"
              ]
            },
            "description": "A multi-value parameter indicating which properties of the \nattachments to expand.\n\n- `childTypes.all` returns whether the content has attachments, comments, or child pages. \nUse this if you only need to check whether the content has children of a particular type.\n- `childTypes.attachment` returns whether the content has attachments.\n- `childTypes.comment` returns whether the content has comments.\n- `childTypes.page` returns whether the content has child pages.\n- `container` returns the space that the content is in. This is the same as the information \nreturned by [Get space](#api-space-spaceKey-get).\n- `metadata.currentuser` returns information about the current user in relation to the content, \nlike when they last viewed it, modified it, contributed to it, or added it as a favourite.\n- `metadata.properties` returns content properties that have been set via the Confluence REST API.\n- `metadata.labels` returns the labels that have been added to the content.\n- `metadata.frontend` (this property is only used by Atlassian)\n- `operations` returns the operations for the content, which are used when setting permissions.\n- `children.page` returns pages that are descendants at the level immediately below the content.\n- `children.attachment` returns all attachments for the content.\n- `children.comment` returns all comments on the content.\n- `restrictions.read.restrictions.user` returns the users that have permission to read the content.\n- `restrictions.read.restrictions.group` returns the groups that have permission to read the content.\n- `restrictions.update.restrictions.user` returns the users that have permission to update the content.\n- `restrictions.update.restrictions.group` returns the groups that have permission to update the content.\n- `history` returns the history of the content, including the date it was created.\n- `history.lastUpdated` returns information about the most recent update of the content, including \nwho updated it and when it was updated.\n- `history.previousVersion` returns information about the update prior to the current content update.\n- `history.contributors` returns all of the users who have contributed to the content.\n- `history.nextVersion` returns information about the update after to the current content update.\n- `ancestors` returns the parent page, if the content is a page.\n- `body` returns the body of the content in different formats, including the editor format, \nview format, and export format.\n- `version` returns information about the most recent update of the content, including who updated it \nand when it was updated.\n- `descendants.page` returns pages that are descendants at any level below the content.\n- `descendants.attachment` returns all attachments for the content, same as `children.attachment`.\n- `descendants.comment` returns all comments on the content, same as `children.comment`.\n- `space` returns the space that the content is in. This is the same as the information returned by \n[Get space](#api-space-spaceKey-get).\n\nIn addition, the following comment-specific expansions can be used:\n\n- `extensions.inlineProperties` returns inline comment-specific properties.\n- `extensions.resolution` returns the resolution status of each comment."
          },
          {
            "name": "parentVersion",
            "in": "query",
            "required": false,
            "default": 0,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The version of the parent content to retrieve children for.\nCurrently, this only works for the latest version."
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The starting index of the returned comments."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "default": 25,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The maximum number of comments to return per page. Note,\nthis may be restricted by fixed system limits."
          },
          {
            "name": "location",
            "in": "query",
            "required": false,
            "enum": [
              "inline",
              "footer",
              "resolved"
            ],
            "type": "string",
            "description": "The location of the comments in the page. Multiple locations can be specified. \nIf no location is specified, comments from all locations are returned."
          },
          {
            "name": "depth",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Currently, this parameter is not used. \nComments are returned at the root level only."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested comments are returned.",
            "schema": {
              "$ref": "#/definitions/ContentArray"
            },
            "headers": {}
          },
          "404": {
            "description": "Returned if;\n\n- There is no parent content with the given ID.\n- The calling user does not have permission to view the parent content.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/content/{id}/child/{type}": {
      "get": {
        "description": "Returns all children of a given type, for a piece of content. \nA piece of content has different types of child content, depending on its type:\n\n- `page`: child content is `page`, `comment`, `attachment`\n- `blogpost`: child content is `comment`, `attachment`\n- `attachment`: child content is `comment`\n- `comment`: child content is `attachment`\n\nCustom content types that are provided by apps can also be returned.\n\nNote, this method only returns direct children. To return children at all \nlevels, use [Get descendants by type](#api-content-id-descendant-type-get).\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: 'View' permission for the space, \nand permission to view the content if it is a page.",
        "summary": "Get content children by type",
        "tags": [
          "/content/{id}/child"
        ],
        "operationId": "ContentChildByIdAndTypeGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the content to be queried for its children."
          },
          {
            "name": "type",
            "in": "path",
            "required": true,
            "enum": [
              "page",
              "comment",
              "attachment"
            ],
            "type": "string",
            "description": "The type of children to return."
          },
          {
            "name": "expand",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "childTypes.all",
                "childTypes.attachment",
                "childTypes.comment",
                "childTypes.page",
                "container",
                "metadata.currentuser",
                "metadata.properties",
                "metadata.labels",
                "metadata.frontend",
                "operations",
                "children.page",
                "children.attachment",
                "children.comment",
                "restrictions.read.restrictions.user",
                "restrictions.read.restrictions.group",
                "restrictions.update.restrictions.user",
                "restrictions.update.restrictions.group",
                "history",
                "history.lastUpdated",
                "history.previousVersion",
                "history.contributors",
                "history.nextVersion",
                "ancestors",
                "body",
                "version",
                "descendants.page",
                "descendants.attachment",
                "descendants.comment",
                "space"
              ]
            },
            "description": "A multi-value parameter indicating which properties of the new content to expand. \n\n- `childTypes.all` returns whether the content has attachments, comments, or child pages. \nUse this if you only need to check whether the content has children of a particular type.\n- `childTypes.attachment` returns whether the content has attachments.\n- `childTypes.comment` returns whether the content has comments.\n- `childTypes.page` returns whether the content has child pages.\n- `container` returns the space that the content is in. This is the same as the information \nreturned by [Get space](#api-space-spaceKey-get).\n- `metadata.currentuser` returns information about the current user in relation to the content, \nlike when they last viewed it, modified it, contributed to it, or added it as a favourite.\n- `metadata.properties` returns content properties that have been set via the Confluence REST API.\n- `metadata.labels` returns the labels that have been added to the content.\n- `metadata.frontend` (this property is only used by Atlassian)\n- `operations` returns the operations for the content, which are used when setting permissions.\n- `children.page` returns pages that are descendants at the level immediately below the content.\n- `children.attachment` returns all attachments for the content.\n- `children.comment` returns all comments on the content.\n- `restrictions.read.restrictions.user` returns the users that have permission to read the content.\n- `restrictions.read.restrictions.group` returns the groups that have permission to read the content.\n- `restrictions.update.restrictions.user` returns the users that have permission to update the content.\n- `restrictions.update.restrictions.group` returns the groups that have permission to update the content.\n- `history` returns the history of the content, including the date it was created.\n- `history.lastUpdated` returns information about the most recent update of the content, including \nwho updated it and when it was updated.\n- `history.previousVersion` returns information about the update prior to the current content update.\n- `history.contributors` returns all of the users who have contributed to the content.\n- `history.nextVersion` returns information about the update after to the current content update.\n- `ancestors` returns the parent page, if the content is a page.\n- `body` returns the body of the content in different formats, including the editor format, \nview format, and export format.\n- `version` returns information about the most recent update of the content, including who updated it \nand when it was updated.\n- `descendants.page` returns pages that are descendants at any level below the content.\n- `descendants.attachment` returns all attachments for the content, same as `children.attachment`.\n- `descendants.comment` returns all comments on the content, same as `children.comment`.\n- `space` returns the space that the content is in. This is the same as the information returned by \n[Get space](#api-space-spaceKey-get)."
          },
          {
            "name": "parentVersion",
            "in": "query",
            "required": false,
            "default": 0,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The version of the parent content to retrieve children for.\nCurrently, this only works for the latest version."
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The starting index of the returned content."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "default": 25,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The maximum number of content to return per page. Note,\nthis may be restricted by fixed system limits."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested content is returned.",
            "schema": {
              "$ref": "#/definitions/ContentArray"
            },
            "headers": {}
          },
          "404": {
            "description": "Returned if;\n\n- There is no content with the given ID.\n- The calling user does not have permission to view the content.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/content/{id}/child/attachment/{attachmentId}": {
      "put": {
        "description": "Updates the attachment properties, i.e. the non-binary data of an attachment \nlike the filename, media-type, comment, and parent container.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \nPermission to update the content.",
        "summary": "Update attachment properties",
        "tags": [
          "/content/{id}/child/attachment"
        ],
        "operationId": "ContentChildAttachmentByIdAndAttachmentIdPut",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the content that the attachment is attached to."
          },
          {
            "name": "attachmentId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the attachment to update."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "The details of the attachment to be updated.",
            "schema": {
              "$ref": "#/definitions/AttachmentUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the attachment is updated.",
            "schema": {
              "$ref": "#/definitions/Content"
            },
            "headers": {}
          },
          "400": {
            "description": "Returned if;\n\n- The attachment id is invalid.\n- The attachment version number is invalid.",
            "schema": {}
          },
          "403": {
            "description": "Returned if;\n\n- The calling user is not permitted to update or move the attachment.\n- The attachment is being moved to an invalid content type.",
            "schema": {}
          },
          "404": {
            "description": "Returned if no attachment is found for the attachment ID.",
            "schema": {}
          },
          "409": {
            "description": "Returned if the version of the supplied attachment does not match\nthe version of the attachment stored in the database.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/content/{id}/child/attachment/{attachmentId}/data": {
      "post": {
        "description": "Updates the binary data of an attachment, given the attachment ID, and \noptionally the comment and the minor edit field.\n\nThis method is essentially the same as [Create or update attachments](#api-content-id-child-attachment-put), \nexcept that it matches the attachment ID rather than the name.\n\nNote, you must set a `X-Atlassian-Token: nocheck` header on the request \nfor this method, otherwise it will be blocked. This protects against XSRF \nattacks, which is necessary as this method accepts multipart/form-data.\n\nThe media type 'multipart/form-data' is defined in [RFC 1867](https://www.ietf.org/rfc/rfc1867.txt). \nMost client libraries have classes that make it easier to implement \nmultipart posts, like the [MultiPartEntity](http://hc.apache.org/httpcomponents-client-ga/httpmime/apidocs/org/apache/http/entity/mime/MultipartEntity.html) \nJava class provided by Apache HTTP Components.\n\nExample: This curl command updates an attachment (id='att456') that is attached  \nto a piece of content (id='123') with a comment and `minorEdits`=true. \n\n``` bash\ncurl -D- \\\n  -u admin:admin \\\n  -X POST \\\n  -H \"X-Atlassian-Token: nocheck\" \\\n  -F \"file=@example.txt\" \\\n  -F \"minorEdit=true\" \\\n  -F \"comment=Example attachment comment\" \\\n  http://myhost/rest/api/content/123/child/attachment/att456/data\n```\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \nPermission to update the content.",
        "summary": "Update attachment data",
        "tags": [
          "/content/{id}/child/attachment"
        ],
        "operationId": "ContentChildAttachmentDataByIdAndAttachmentIdPost",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the content that the attachment is attached to."
          },
          {
            "name": "attachmentId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the attachment to update."
          },
          {
            "name": "file",
            "in": "formData",
            "required": true,
            "type": "file",
            "format": "file",
            "description": "The relative location and name of the attachment to be added to \nthe content."
          },
          {
            "name": "minorEdit",
            "in": "formData",
            "required": true,
            "type": "file",
            "format": "file",
            "description": "If `minorEdits` is set to 'true', no notification email or activity stream \nwill be generated when the attachment is added to the content."
          },
          {
            "name": "comment",
            "in": "formData",
            "required": false,
            "type": "file",
            "format": "file",
            "description": "The comment for the attachment that is being added.\nIf you specify a comment, then every file must have a comment and \nthe comments must be in the same order as the files. Alternatively, \ndon't specify any comments."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the attachment is updated.",
            "schema": {
              "$ref": "#/definitions/Content"
            },
            "headers": {}
          },
          "400": {
            "description": "Returned if the attachment id is invalid.",
            "schema": {}
          },
          "404": {
            "description": "Returned if no attachment is found for the attachment ID.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/content/{id}/descendant": {
      "get": {
        "description": "Returns a map of the descendants of a piece of content. This is similar \nto [Get content children](#api-content-id-child-get), except that this \nmethod returns child pages at all levels, rather than just the direct \nchild pages.\n\nA piece of content has different types of descendants, depending on its type:\n\n- `page`: descendant is `page`, `comment`, `attachment`\n- `blogpost`: descendant is `comment`, `attachment`\n- `attachment`: descendant is `comment`\n- `comment`: descendant is `attachment`\n\nThe map will always include all descendant types that are valid for the content. \nHowever, if the content has no instances of a descendant type, the map will \ncontain an empty array for that descendant type.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \n'View' permission for the space, and permission to view the content if it \nis a page.",
        "summary": "Get content descendants",
        "tags": [
          "/content/{id}/descendant"
        ],
        "operationId": "ContentDescendantByIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the content to be queried for its descendants."
          },
          {
            "name": "expand",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "attachment",
                "comment",
                "page"
              ]
            },
            "description": "A multi-value parameter indicating which properties of the children to \nexpand, where:\n\n- `attachment` returns all attachments for the content.\n- `comments` returns all comments for the content.\n- `page` returns all child pages of the content."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested descendants are returned.",
            "schema": {
              "$ref": "#/definitions/ContentChildren"
            },
            "headers": {}
          },
          "404": {
            "description": "Returned if;\n\n- There is no content with the given ID.\n- The calling user does not have permission to view the content.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/content/{id}/descendant/{type}": {
      "get": {
        "description": "Returns all descendants of a given type, for a piece of content. This is \nsimilar to [Get content children by type](#api-content-id-child-type-get), \nexcept that this method returns child pages at all levels, rather than just \nthe direct child pages.\n\nA piece of content has different types of descendants, depending on its type:\n\n- `page`: descendant is `page`, `comment`, `attachment`\n- `blogpost`: descendant is `comment`, `attachment`\n- `attachment`: descendant is `comment`\n- `comment`: descendant is `attachment`\n\nCustom content types that are provided by apps can also be returned.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \n'View' permission for the space, and permission to view the content if it \nis a page.",
        "summary": "Get content descendants by type",
        "tags": [
          "/content/{id}/descendant"
        ],
        "operationId": "ContentDescendantByIdAndTypeGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the content to be queried for its descendants."
          },
          {
            "name": "type",
            "in": "path",
            "required": true,
            "enum": [
              "page",
              "comment",
              "attachment"
            ],
            "type": "string",
            "description": "The type of descendants to return."
          },
          {
            "name": "expand",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "childTypes.all",
                "childTypes.attachment",
                "childTypes.comment",
                "childTypes.page",
                "container",
                "metadata.currentuser",
                "metadata.properties",
                "metadata.labels",
                "metadata.frontend",
                "operations",
                "children.page",
                "children.attachment",
                "children.comment",
                "restrictions.read.restrictions.user",
                "restrictions.read.restrictions.group",
                "restrictions.update.restrictions.user",
                "restrictions.update.restrictions.group",
                "history",
                "history.lastUpdated",
                "history.previousVersion",
                "history.contributors",
                "history.nextVersion",
                "ancestors",
                "body",
                "version",
                "descendants.page",
                "descendants.attachment",
                "descendants.comment",
                "space"
              ]
            },
            "description": "A multi-value parameter indicating which properties of the new content to expand. \n\n- `childTypes.all` returns whether the content has attachments, comments, or child pages. \nUse this if you only need to check whether the content has children of a particular type.\n- `childTypes.attachment` returns whether the content has attachments.\n- `childTypes.comment` returns whether the content has comments.\n- `childTypes.page` returns whether the content has child pages.\n- `container` returns the space that the content is in. This is the same as the information \nreturned by [Get space](#api-space-spaceKey-get).\n- `metadata.currentuser` returns information about the current user in relation to the content, \nlike when they last viewed it, modified it, contributed to it, or added it as a favourite.\n- `metadata.properties` returns content properties that have been set via the Confluence REST API.\n- `metadata.labels` returns the labels that have been added to the content.\n- `metadata.frontend` (this property is only used by Atlassian)\n- `operations` returns the operations for the content, which are used when setting permissions.\n- `children.page` returns pages that are descendants at the level immediately below the content.\n- `children.attachment` returns all attachments for the content.\n- `children.comment` returns all comments on the content.\n- `restrictions.read.restrictions.user` returns the users that have permission to read the content.\n- `restrictions.read.restrictions.group` returns the groups that have permission to read the content.\n- `restrictions.update.restrictions.user` returns the users that have permission to update the content.\n- `restrictions.update.restrictions.group` returns the groups that have permission to update the content.\n- `history` returns the history of the content, including the date it was created.\n- `history.lastUpdated` returns information about the most recent update of the content, including \nwho updated it and when it was updated.\n- `history.previousVersion` returns information about the update prior to the current content update.\n- `history.contributors` returns all of the users who have contributed to the content.\n- `history.nextVersion` returns information about the update after to the current content update.\n- `ancestors` returns the parent page, if the content is a page.\n- `body` returns the body of the content in different formats, including the editor format, \nview format, and export format.\n- `version` returns information about the most recent update of the content, including who updated it \nand when it was updated.\n- `descendants.page` returns pages that are descendants at any level below the content.\n- `descendants.attachment` returns all attachments for the content, same as `children.attachment`.\n- `descendants.comment` returns all comments on the content, same as `children.comment`.\n- `space` returns the space that the content is in. This is the same as the information returned by \n[Get space](#api-space-spaceKey-get)."
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "default": 0,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The starting index of the returned content."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "default": 25,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The maximum number of content to return per page. Note,\nthis may be restricted by fixed system limits."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested content is returned.",
            "schema": {
              "$ref": "#/definitions/ContentArray"
            },
            "headers": {}
          },
          "404": {
            "description": "Returned if;\n\n- There is no content with the given ID.\n- The calling user does not have permission to view the content.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/content/{id}/label": {
      "get": {
        "description": "Returns the labels on a piece of content.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \n'View' permission for the space and permission to view the content if it is a page.",
        "summary": "Get labels for content",
        "tags": [
          "/content/{id}/label"
        ],
        "operationId": "ContentLabelByIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the content to be queried for its labels."
          },
          {
            "name": "prefix",
            "in": "query",
            "required": false,
            "enum": [
              "global",
              "my",
              "team"
            ],
            "type": "string",
            "description": "Filters the results to labels with the specified prefix. If this parameter  \nis not specified, then labels with any prefix will be returned.\n\n- `global` prefix is used by default when a user adds a label \nvia the UI.\n- `my` prefix can be explicitly added by a user when adding a label \nvia the UI, e.g. 'my:example-label'. Also, when a page is selected as \na favourite, the 'my:favourite' label is automatically added.\n- `team` can used when adding labels via [Add labels to content](#api-content-id-label-post) \nbut is not used in the UI."
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "default": 0,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The starting index of the returned labels."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "default": 200,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The maximum number of labels to return per page. Note,\nthis may be restricted by fixed system limits."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested labels are returned.",
            "schema": {
              "$ref": "#/definitions/LabelArray"
            },
            "headers": {}
          },
          "404": {
            "description": "Returned if;\n\n- There is no content with the given ID.\n- The calling user does not have permission to view the content.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "post": {
        "description": "Adds labels to a piece of content. Does not modify the existing labels.\n\nNotes:\n\n- Labels can also be added when creating content ([Create content](#api-content-post)).\n- Labels can be updated when updating content ([Update content](#api-content-id-put)). \nThis will delete the existing labels and replace them with the labels in \nthe request.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \nPermission to update the content.",
        "summary": "Add labels to content",
        "tags": [
          "/content/{id}/label"
        ],
        "operationId": "ContentLabelByIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the content that will have labels added to it."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "The labels to add to the content.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LabelCreate"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the labels are added to the content.",
            "schema": {
              "$ref": "#/definitions/LabelArray"
            },
            "headers": {}
          },
          "404": {
            "description": "Returned if;\n\n- There is no content with the given ID.\n- The calling user does not have permission to view the content.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "delete": {
        "description": "Removes a label from a piece of content. This is similar to \n[Remove label from content](#api-content-id-label-label-delete) \nexcept that the label name is specified via a query parameter. \n\nUse this method if the label name has \"/\" characters, as \n[Remove label from content using query parameter](#api-content-id-label-delete) \ndoes not accept \"/\" characters for the label name.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \nPermission to update the content.",
        "summary": "Remove label from content using query parameter",
        "tags": [
          "/content/{id}/label"
        ],
        "operationId": "ContentLabelByIdDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the content that the label will be removed from."
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The name of the label to be removed."
          }
        ],
        "responses": {
          "204": {
            "description": "Returned if the label is removed. The response body will be empty.",
            "headers": {}
          },
          "403": {
            "description": "Returned if the calling user can view but not edit the content.",
            "schema": {}
          },
          "404": {
            "description": "Returned if;\n\n- There is no content with the given ID.\n- The calling user does not have permission to view the content.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/content/{id}/label/{label}": {
      "delete": {
        "description": "Removes a label from a piece of content. This is similar to \n[Remove label from content using query parameter](#api-content-id-label-delete) \nexcept that the label name is specified via a path parameter. \n\nUse this method if the label name does not have \"/\" characters, as the path \nparameter does not accept \"/\" characters for security reasons. Otherwise, \nuse [Remove label from content using query parameter](#api-content-id-label-delete).\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \nPermission to update the content.",
        "summary": "Remove label from content",
        "tags": [
          "/content/{id}/label"
        ],
        "operationId": "ContentLabelByIdAndLabelDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the content that the label will be removed from."
          },
          {
            "name": "label",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the label to be removed."
          }
        ],
        "responses": {
          "204": {
            "description": "Returned if the label is removed. The response body will be empty.",
            "headers": {}
          },
          "400": {
            "description": "Returned if the label name has a \"/\" character.",
            "schema": {}
          },
          "403": {
            "description": "Returned if the calling user can view but not edit the content.",
            "schema": {}
          },
          "404": {
            "description": "Returned if;\n\n- There is no content with the given ID.\n- The calling user does not have permission to view the content.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/content/{id}/notification/child-created": {
      "get": {
        "description": "Returns the watches for a page. A user that watches a page will receive \nreceive notifications when the page is updated.\n\nIf you want to manage watches for a page, use the following `user` methods:\n\n- [Get content watch status for user](#api-user-watch-content-contentId-get)\n- [Add content watch](#api-user-watch-content-contentId-post)\n- [Remove content watch](#api-user-watch-content-contentId-delete)\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to access the Confluence site ('Can use' global permission).",
        "summary": "Get watches for page",
        "tags": [
          "/content/{id}/notification"
        ],
        "operationId": "ContentNotificationChildCreatedByIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the content to be queried for its watches."
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "default": 0,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The starting index of the returned watches."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "default": 200,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The maximum number of watches to return per page. \nNote, this may be restricted by fixed system limits."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested watches are returned.",
            "schema": {
              "$ref": "#/definitions/WatchArray"
            },
            "headers": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing \nfrom the request.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/content/{id}/notification/created": {
      "get": {
        "description": "Returns all space watches for the space that the content is in. A user that \nwatches a space will receive receive notifications when any content in the \nspace is updated.\n\nIf you want to manage watches for a space, use the following `user` methods:\n\n- [Get space watch status for user](#api-user-watch-space-spaceKey-get)\n- [Add space watch](#api-user-watch-space-spaceKey-post)\n- [Remove space watch](#api-user-watch-space-spaceKey-delete)\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to access the Confluence site ('Can use' global permission).",
        "summary": "Get watches for space",
        "tags": [
          "/content/{id}/notification"
        ],
        "operationId": "ContentNotificationCreatedByIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the content to be queried for its watches."
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "default": 0,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The starting index of the returned watches."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "default": 200,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The maximum number of watches to return per page. \nNote, this may be restricted by fixed system limits."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested watches are returned.",
            "schema": {
              "$ref": "#/definitions/WatchArray"
            },
            "headers": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing \nfrom the request.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/content/{id}/property": {
      "get": {
        "description": "Returns the properties for a piece of content. For more information \nabout content properties, see [Content properties in the REST API](https://developer.atlassian.com/cloud/confluence/content-properties/).\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \n'View' permission for the space, and permission to view the content if it is a page.",
        "summary": "Get content properties",
        "tags": [
          "/content/{id}/property"
        ],
        "operationId": "ContentPropertyByIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the content to be queried for its properties."
          },
          {
            "name": "expand",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "content",
                "version"
              ]
            },
            "description": "A multi-value parameter indicating which properties of the content to \nexpand. By default, the `version` object is expanded.\n\n- `content` returns the content that the property is stored against.\n- `version` returns information about the version of the property, such \nas the version number, when it was created, etc."
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "default": 0,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The starting index of the returned properties."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "default": 10,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The maximum number of properties to return per page. \nNote, this may be restricted by fixed system limits."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested properties are returned.",
            "schema": {
              "$ref": "#/definitions/ContentPropertyArray"
            },
            "headers": {}
          },
          "404": {
            "description": "Returned if;\n\n- There is no content with the given ID\n- The calling user does not have permission to view the content.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "post": {
        "description": "Creates a property for an existing piece of content. For more information \nabout content properties, see [Content properties in the REST API](https://developer.atlassian.com/cloud/confluence/content-properties/).\n\nThis is the same as [Create content property for key](#api-content-id-property-key-post) \nexcept that the key is specified in the request body instead of as a \npath parameter.\n\nContent properties can also be added when creating a new piece of content \nby including them in the `metadata.properties` of the request.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \nPermission to update the content.",
        "summary": "Create content property",
        "tags": [
          "/content/{id}/property"
        ],
        "operationId": "ContentPropertyByIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the content to add the property to."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "The content property to be created.",
            "schema": {
              "$ref": "#/definitions/ContentPropertyCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the content property is created.",
            "schema": {
              "$ref": "#/definitions/ContentProperty"
            },
            "headers": {}
          },
          "400": {
            "description": "Returned if;\n\n- The content already has a property with the given key.\n- The key is too long.\n- The key is empty.",
            "schema": {}
          },
          "403": {
            "description": "Returned if the user does not have permission to edit the content\nwith the given ID.",
            "schema": {}
          },
          "413": {
            "description": "Returned if the value is too long.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/content/{id}/property/{key}": {
      "get": {
        "description": "Returns a content property for a piece of content. For more information, see \n[Content properties in the REST API](https://developer.atlassian.com/cloud/confluence/content-properties/).\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \n'View' permission for the space, and permission to view the content if it is a page.",
        "summary": "Get content property",
        "tags": [
          "/content/{id}/property"
        ],
        "operationId": "ContentPropertyByIdAndKeyGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the content to be queried for the property."
          },
          {
            "name": "key",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The key of the content property."
          },
          {
            "name": "expand",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "content",
                "version"
              ]
            },
            "description": "A multi-value parameter indicating which properties of the content to \nexpand. By default, the `version` object is expanded.\n\n- `content` returns the content that the property is stored against.\n- `version` returns information about the version of the property, such \nas the version number, when it was created, etc."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the content property is returned.",
            "schema": {
              "$ref": "#/definitions/ContentProperty"
            },
            "headers": {}
          },
          "404": {
            "description": "Returned if;\n\n- The calling user does not have permission to view the content.\n- There is no content with the given ID.\n- There is no property with the given key.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "post": {
        "description": "Creates a property for an existing piece of content. For more information \nabout content properties, see [Content properties in the REST API](https://developer.atlassian.com/cloud/confluence/content-properties/).\n\nThis is the same as [Create content property](#api-content-id-property-post) \nexcept that the key is specified as a path parameter instead of in the \nrequest body.\n\nContent properties can also be added when creating a new piece of content \nby including them in the `metadata.properties` of the request.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \nPermission to update the content.",
        "summary": "Create content property for key",
        "tags": [
          "/content/{id}/property"
        ],
        "operationId": "ContentPropertyByIdAndKeyPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the content to add the property to."
          },
          {
            "name": "key",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The key of the content property. Required."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "The content property to be created.",
            "schema": {
              "$ref": "#/definitions/ContentPropertyCreateNoKey"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the content property is created.",
            "schema": {
              "$ref": "#/definitions/ContentProperty"
            },
            "headers": {}
          },
          "400": {
            "description": "Returned if;\n\n- The content already has a property with the given key.\n- The key is too long.\n- The key is empty.",
            "schema": {}
          },
          "403": {
            "description": "Returned if the user does not have permission to edit the content\nwith the given ID.",
            "schema": {}
          },
          "413": {
            "description": "Returned if the value is too long.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "put": {
        "description": "Updates an existing content property. This method will also create a new \nproperty for a piece of content, if the property key does not exist and \nthe property version is 1. For more information about content properties, see \n[Content properties in the REST API](https://developer.atlassian.com/cloud/confluence/content-properties/).\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \nPermission to update the content.",
        "summary": "Update content property",
        "tags": [
          "/content/{id}/property"
        ],
        "operationId": "ContentPropertyByIdAndKeyPut",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the content that the property belongs to."
          },
          {
            "name": "key",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The key of the property."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "The content property being updated.",
            "schema": {
              "$ref": "#/definitions/ContentPropertyUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the content property is created.",
            "schema": {
              "$ref": "#/definitions/ContentProperty"
            },
            "headers": {}
          },
          "400": {
            "description": "Returned if;\n\n- The content already a property with the given key.\n- The key is too long.\n- The key is empty.",
            "schema": {}
          },
          "403": {
            "description": "Returned if the user does not have permission to edit the content\nwith the given ID.",
            "schema": {}
          },
          "404": {
            "description": "Returned if;\n\n- There is no content with the given ID.\n- The calling user does not have permission to view the content.\n- There is no property with the given key and the version number is not 1.",
            "schema": {}
          },
          "409": {
            "description": "Returned if the property version is not correctly incremented.",
            "schema": {}
          },
          "413": {
            "description": "Returned if the value is too long.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "delete": {
        "description": "Deletes a content property. For more information about content properties, see \n[Content properties in the REST API](https://developer.atlassian.com/cloud/confluence/content-properties/).\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \nPermission to update the content.",
        "summary": "Delete content property",
        "tags": [
          "/content/{id}/property"
        ],
        "operationId": "ContentPropertyByIdAndKeyDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the content that the property belongs to."
          },
          {
            "name": "key",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The key of the property."
          }
        ],
        "responses": {
          "204": {
            "description": "Returned if the content property is deleted.",
            "headers": {}
          },
          "404": {
            "description": "Returned if;\n\n- There is no content with the given ID.\n- The calling user does not have permission to view the content.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/content/{id}/restriction": {
      "get": {
        "description": "Returns the restrictions on a piece of content.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \nPermission to view the content.",
        "summary": "Get restrictions",
        "tags": [
          "/content/{id}/restriction"
        ],
        "operationId": "ContentRestrictionByIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the content to be queried for its restrictions."
          },
          {
            "name": "expand",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "restrictions.user",
                "restrictions.group",
                "content"
              ]
            },
            "description": "A multi-value parameter indicating which properties of the content \nrestrictions to expand. By default, the following objects are expanded: \n`restrictions.user`, `restrictions.group`.\n\n- `restrictions.user` returns the piece of content that the restrictions are \napplied to.\n- `restrictions.group` returns the piece of content that the restrictions are \napplied to.\n- `content` returns the piece of content that the restrictions are \napplied to."
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "default": 0,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The starting index of the users and groups in the returned restrictions."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "default": 100,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The maximum number of users and the maximum number of groups, in the \nreturned restrictions, to return per page. Note, this may be restricted \nby fixed system limits."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested restrictions are returned.",
            "schema": {
              "$ref": "#/definitions/ContentRestrictionArray"
            },
            "headers": {}
          },
          "404": {
            "description": "Returned if;\n\n- There is no content with the given ID.\n- The calling user does not have permission to view the content.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "post": {
        "description": "Adds restrictions to a piece of content. Note, this does not change any \nexisting restrictions on the content.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \nPermission to edit the content.",
        "summary": "Add restrictions",
        "tags": [
          "/content/{id}/restriction"
        ],
        "operationId": "ContentRestrictionByIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the content to add restrictions to."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "The restrictions to be added to the content.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ContentRestrictionUpdate"
              }
            }
          },
          {
            "name": "expand",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "restrictions.user",
                "restrictions.group",
                "content"
              ]
            },
            "description": "A multi-value parameter indicating which properties of the content \nrestrictions (returned in response) to expand. \n\n- `restrictions.user` returns the piece of content that the restrictions are \napplied to. Expanded by default.\n- `restrictions.group` returns the piece of content that the restrictions are \napplied to. Expanded by default.\n- `content` returns the piece of content that the restrictions are \napplied to."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested restrictions are added.",
            "schema": {
              "$ref": "#/definitions/ContentRestrictionArray"
            },
            "headers": {}
          },
          "404": {
            "description": "Returned if;\n\n- There is no content with the given ID.\n- The calling user does not have permission to add restrictions to \nthe content.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "put": {
        "description": "Updates restrictions for a piece of content. This removes the existing \nrestrictions and replaces them with the restrictions in the request.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \nPermission to edit the content.",
        "summary": "Update restrictions",
        "tags": [
          "/content/{id}/restriction"
        ],
        "operationId": "ContentRestrictionByIdPut",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the content to update restrictions for."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "The updated restrictions for the content.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ContentRestrictionUpdate"
              }
            }
          },
          {
            "name": "expand",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "restrictions.user",
                "restrictions.group",
                "content"
              ]
            },
            "description": "A multi-value parameter indicating which properties of the content \nrestrictions (returned in response) to expand. \n\n- `restrictions.user` returns the piece of content that the restrictions are \napplied to. Expanded by default.\n- `restrictions.group` returns the piece of content that the restrictions are \napplied to. Expanded by default.\n- `content` returns the piece of content that the restrictions are \napplied to."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested restrictions are updated.",
            "schema": {
              "$ref": "#/definitions/ContentRestrictionArray"
            },
            "headers": {}
          },
          "404": {
            "description": "Returned if;\n\n- There is no content with the given ID.\n- The calling user does not have permission to update restrictions \nfor the content.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "delete": {
        "description": "Removes all restrictions (read and update) on a piece of content.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \nPermission to edit the content.",
        "summary": "Delete restrictions",
        "tags": [
          "/content/{id}/restriction"
        ],
        "operationId": "ContentRestrictionByIdDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the content to remove restrictions from."
          },
          {
            "name": "expand",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "restrictions.user",
                "restrictions.group",
                "content"
              ]
            },
            "description": "A multi-value parameter indicating which properties of the content \nrestrictions (returned in response) to expand. \n\n- `restrictions.user` returns the piece of content that the restrictions are \napplied to. Expanded by default.\n- `restrictions.group` returns the piece of content that the restrictions are \napplied to. Expanded by default.\n- `content` returns the piece of content that the restrictions are \napplied to."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the restrictions are removed.",
            "schema": {
              "$ref": "#/definitions/ContentRestrictionArray"
            },
            "headers": {}
          },
          "400": {
            "description": "Returned if any of the above validation rules are violated",
            "schema": {}
          },
          "403": {
            "description": "Returned if the calling user does not have permission to alter the\nrestrictions on the content.",
            "schema": {}
          },
          "404": {
            "description": "Returned if;\n\n- There is no content with the given ID.\n- The calling user does not have permission to view the content.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/content/{id}/restriction/byOperation": {
      "get": {
        "description": "Returns restrictions on a piece of content by operation. This method is \nsimilar to [Get restrictions](#api-content-id-restriction-get) except that \nthe operations are properties of the return object, rather than items in \na results array. \n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \nPermission to view the content.",
        "summary": "Get restrictions by operation",
        "tags": [
          "/content/{id}/restriction"
        ],
        "operationId": "ContentRestrictionByOperationByIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the content to be queried for its restrictions."
          },
          {
            "name": "expand",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "restrictions.user",
                "restrictions.group",
                "content"
              ]
            },
            "description": "A multi-value parameter indicating which properties of the content \nrestrictions to expand. \n\n- `restrictions.user` returns the piece of content that the restrictions are \napplied to. Expanded by default.\n- `restrictions.group` returns the piece of content that the restrictions are \napplied to. Expanded by default.\n- `content` returns the piece of content that the restrictions are \napplied to."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested restrictions are returned.",
            "schema": {
              "$ref": "#/definitions/ContentRestrictionByOperationResponse"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/content/{id}/restriction/byOperation/{operationKey}": {
      "get": {
        "description": "Returns the restictions on a piece of content for a given operation (read \nor update).\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \nPermission to view the content.",
        "summary": "Get restrictions for operation",
        "tags": [
          "/content/{id}/restriction"
        ],
        "operationId": "ContentRestrictionByOperationByIdAndOperationKeyGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the content to be queried for its restrictions."
          },
          {
            "name": "operationKey",
            "in": "path",
            "required": true,
            "enum": [
              "read",
              "update"
            ],
            "type": "string",
            "description": "The operation type of the restrictions to be returned."
          },
          {
            "name": "expand",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "restrictions.user",
                "restrictions.group",
                "content"
              ]
            },
            "description": "A multi-value parameter indicating which properties of the content \nrestrictions to expand. \n\n- `restrictions.user` returns the piece of content that the restrictions are \napplied to. Expanded by default.\n- `restrictions.group` returns the piece of content that the restrictions are \napplied to. Expanded by default.\n- `content` returns the piece of content that the restrictions are \napplied to."
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "default": 0,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The starting index of the users and groups in the returned restrictions."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "default": 100,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The maximum number of users and the maximum number of groups, in the \nreturned restrictions, to return per page. Note, this may be restricted \nby fixed system limits."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested restrictions are returned.",
            "schema": {
              "$ref": "#/definitions/ContentRestriction"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/content/{id}/restriction/byOperation/{operationKey}/group/{groupName}": {
      "get": {
        "description": "Returns whether the specified content restriction applies to a group. \nFor example, if the 'admins' group has permission to read a page with an \nID of 123, then the following request will return true:\n\n`https://your-domain.atlassian.net/wiki/rest/api/content/123/restriction/byOperation/read/group/admins`\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \nPermission to view the content.",
        "summary": "Get content restriction status for group",
        "tags": [
          "/content/{id}/restriction"
        ],
        "operationId": "ContentRestrictionByOperationGroupGroupNameByIdAndOperationKeyGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the content that the restriction applies to."
          },
          {
            "name": "operationKey",
            "in": "path",
            "required": true,
            "enum": [
              "read",
              "update"
            ],
            "type": "string",
            "description": "The operation that the restriction applies to."
          },
          {
            "name": "groupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the group to be queried for whether the content restriction \napplies to it."
          }
        ],
        "responses": {
          "200": {
            "description": "Returns true if the content restriction applies to the group. The response \nwill not return a response body.",
            "headers": {}
          },
          "404": {
            "description": "Returned if;\n\n- There is no content with the given ID.\n- The calling user does not have permission to view the content.\n- An invalid operation or group is specified.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "put": {
        "description": "Adds a group to a content restriction. That is, grant read or update \npermission to the group for a piece of content.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \nPermission to edit the content.",
        "summary": "Add group to content restriction",
        "tags": [
          "/content/{id}/restriction"
        ],
        "operationId": "ContentRestrictionByOperationGroupGroupNameByIdAndOperationKeyPut",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the content that the restriction applies to."
          },
          {
            "name": "operationKey",
            "in": "path",
            "required": true,
            "enum": [
              "read",
              "update"
            ],
            "type": "string",
            "description": "The operation that the restriction applies to."
          },
          {
            "name": "groupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the group to add to the content restriction."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the group is added to the content restriction. The response \nbody will be empty.",
            "headers": {}
          },
          "404": {
            "description": "Returned if;\n\n- There is no content with the given ID.\n- The calling user does not have permission to view the content.\n- An invalid operation or group is specified.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "delete": {
        "description": "Removes a group from a content restriction. That is, remove read or update \npermission for the group for a piece of content.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \nPermission to edit the content.",
        "summary": "Remove group from content restriction",
        "tags": [
          "/content/{id}/restriction"
        ],
        "operationId": "ContentRestrictionByOperationGroupGroupNameByIdAndOperationKeyDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the content that the restriction applies to."
          },
          {
            "name": "operationKey",
            "in": "path",
            "required": true,
            "enum": [
              "read",
              "update"
            ],
            "type": "string",
            "description": "The operation that the restriction applies to."
          },
          {
            "name": "groupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the group to remove from the content restriction."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the group is removed from the content restriction. The response \nbody will be empty.",
            "headers": {}
          },
          "404": {
            "description": "Returned if;\n\n- There is no content with the given ID.\n- The calling user does not have permission to view the content.\n- The restriction to be deleted does not exist.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/content/{id}/restriction/byOperation/{operationKey}/user": {
      "get": {
        "description": "Returns whether the specified content restriction applies to a user. \nFor example, if the user 'admin' has permission to read a page with an \nID of 123, then the following request will return true:\n\n`https://your-domain.atlassian.net/wiki/rest/api/content/123/restriction/byOperation/read/user?username=admin`\n\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \nPermission to view the content.",
        "summary": "Get content restriction status for user",
        "tags": [
          "/content/{id}/restriction"
        ],
        "operationId": "ContentRestrictionByOperationUserByIdAndOperationKeyGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the content that the restriction applies to."
          },
          {
            "name": "operationKey",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The operation that is restricted."
          },
          {
            "name": "key",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "This parameter has been deprecated due to privacy changes. Use `accountId` instead. See the\n[migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)\nfor details.\n\nThe key of the user to be queried for whether the content restriction applies to it.\nRequired, unless the `username` or `accountId` is specified."
          },
          {
            "name": "userName",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "This parameter has been deprecated due to privacy changes. Use `accountId` instead. See the\n[migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)\nfor details.\n\nThe username of the user to be queried for whether the content restriction applies to it.\nRequired, unless the `key` or `accountId` is specified."
          },
          {
            "name": "accountId",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The account ID of the user to be queried for whether the content restriction applies to it. The accountId\nuniquely identifies the user across all Atlassian products. For example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`.\nRequired, unless `username` or `userKey` is specified."
          }
        ],
        "responses": {
          "200": {
            "description": "Return true if the content restriction applies to the user. The response \nbody will be empty.",
            "headers": {}
          },
          "404": {
            "description": "Returned if;\n\n- There is no content with the given ID.\n- The calling user does not have permission to view the content.\n- An invalid operation or user is specified.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "put": {
        "description": "Adds a user to a content restriction. That is, grant read or update \npermission to the user for a piece of content.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \nPermission to edit the content.",
        "summary": "Add user to content restriction",
        "tags": [
          "/content/{id}/restriction"
        ],
        "operationId": "ContentRestrictionByOperationUserByIdAndOperationKeyPut",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the content that the restriction applies to."
          },
          {
            "name": "operationKey",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The operation that the restriction applies to."
          },
          {
            "name": "key",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "This parameter has been deprecated due to privacy changes. Use `accountId` instead. See the\n[migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)\nfor details.\n\nThe key of the user to add to the content restriction. Required, unless the `username` or `accountId` is specified."
          },
          {
            "name": "userName",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "This parameter has been deprecated due to privacy changes. Use `accountId` instead. See the\n[migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)\nfor details.\n\nThe username of the user to add to the content restriction. Required, unless the `key` or `accountId` is specified."
          },
          {
            "name": "accountId",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The account ID of the user to add to the content restriction. The accountId uniquely identifies the user across\nall Atlassian products. For example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`.\nRequired, unless `username` or `userKey` is specified."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the user is added to the content restriction. The response \nbody will be empty.",
            "headers": {}
          },
          "404": {
            "description": "Returned if;\n\n- There is no content with the given ID.\n- The calling user does not have permission to view the content.\n- An invalid operation or group is specified.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "delete": {
        "description": "Removes a group from a content restriction. That is, remove read or update \npermission for the group for a piece of content.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \nPermission to edit the content.",
        "summary": "Remove user from content restriction",
        "tags": [
          "/content/{id}/restriction"
        ],
        "operationId": "ContentRestrictionByOperationUserByIdAndOperationKeyDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the content that the restriction applies to."
          },
          {
            "name": "operationKey",
            "in": "path",
            "required": true,
            "enum": [
              "read",
              "update"
            ],
            "type": "string",
            "description": "The operation that the restriction applies to."
          },
          {
            "name": "key",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "This parameter has been deprecated due to privacy changes. Use `accountId` instead. See the\n[migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)\nfor details.\n\nThe key of the user to remove from the content restriction. Required, unless the `username` or `accountId` is specified."
          },
          {
            "name": "userName",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "This parameter has been deprecated due to privacy changes. Use `accountId` instead. See the\n[migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)\nfor details.\n\nThe username of the user to remove from the content restriction. Required, unless the `key` or `accountId` is specified."
          },
          {
            "name": "accountId",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The account ID of the user to remove from the content restriction. The accountId uniquely identifies the user\nacross all Atlassian products. For example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`.\nRequired, unless `username` or `userKey` is specified."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the user is removed from the content restriction. The response \nbody will be empty.",
            "headers": {}
          },
          "404": {
            "description": "Returned if;\n\n- There is no content with the given ID.\n- The calling user does not have permission to view the content.\n- An invalid operation or group is specified.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/content/{id}/version": {
      "get": {
        "description": "Returns the versions for a piece of content in descending order.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \nPermission to view the content. If the content is a blog post, 'View' permission \nfor the space is required.",
        "summary": "Get content versions",
        "tags": [
          "/content/{id}/version"
        ],
        "operationId": "ContentVersionByIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the content to be queried for its versions."
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "default": 0,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The starting index of the returned versions."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "default": 200,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The maximum number of versions to return per page. \nNote, this may be restricted by fixed system limits."
          },
          {
            "name": "expand",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "collaborators",
                "content"
              ]
            },
            "description": "A multi-value parameter indicating which properties of the content to expand.\n\n- `collaborators` returns the users that collaborated on the version.\n- `content` returns the content for the version."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested versions are returned.",
            "schema": {
              "$ref": "#/definitions/VersionArray"
            },
            "headers": {}
          },
          "403": {
            "description": "Returned if the calling user does not have permission to view the\ncontent.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "post": {
        "description": "Restores a historical version to be the latest version. That is, a new version \nis created with the content of the historical version.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \nPermission to update the content.",
        "summary": "Restore content version",
        "tags": [
          "/content/{id}/version"
        ],
        "operationId": "ContentVersionByIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the content for which the history will be restored."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "The content version to be restored.",
            "schema": {
              "$ref": "#/definitions/VersionRestore"
            }
          },
          {
            "name": "expand",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "collaborators",
                "content"
              ]
            },
            "description": "A multi-value parameter indicating which properties of the returned\ncontent to expand.\n\n- `collaborators` returns the users that collaborated on the version.\n- `content` returns the content for the version."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the version is restored.",
            "schema": {
              "$ref": "#/definitions/Version"
            },
            "headers": {}
          },
          "400": {
            "description": "Returned if;\n\n- There is no content with the given ID.\n- There is no version with the given version number.\n- The version number is the current version.",
            "schema": {}
          },
          "403": {
            "description": "Returned if the calling user doesn't have permission to edit the\ncontent.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/content/{id}/version/{versionNumber}": {
      "get": {
        "description": "Returns a version for a piece of content.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \nPermission to view the content. If the content is a blog post, 'View' permission \nfor the space is required.",
        "summary": "Get content version",
        "tags": [
          "/content/{id}/version"
        ],
        "operationId": "ContentVersionByIdAndVersionNumberGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the content to be queried for its version."
          },
          {
            "name": "versionNumber",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The number of the version to be retrieved."
          },
          {
            "name": "expand",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "collaborators",
                "content"
              ]
            },
            "description": "A multi-value parameter indicating which properties of the content to \nexpand. By default, the `content` object is expanded.\n\n- `collaborators` returns the users that collaborated on the version.\n- `content` returns the content for the version."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the version is returned.",
            "schema": {
              "$ref": "#/definitions/Version"
            },
            "headers": {}
          },
          "403": {
            "description": "Returned if the calling user does not have permission to view the\ncontent.",
            "schema": {}
          },
          "404": {
            "description": "Returned if the content or version cannot be found.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "delete": {
        "description": "Delete a historical version. This does not delete the changes made to the \ncontent in that version, rather the changes for the deleted version are \nrolled up into the next version. Note, you cannot delete the current version.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \nPermission to update the content.",
        "summary": "Delete content version",
        "tags": [
          "/content/{id}/version"
        ],
        "operationId": "ContentVersionByIdAndVersionNumberDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the content that the version will be deleted from."
          },
          {
            "name": "versionNumber",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The number of the version to be deleted. The version number starts \nfrom 1 up to current version."
          }
        ],
        "responses": {
          "204": {
            "description": "Returned if the version is deleted.",
            "headers": {}
          },
          "400": {
            "description": "Returned if;\n\n- The content or version cannot be found.\n- The current version is specified.",
            "schema": {}
          },
          "403": {
            "description": "Returned if the calling user doesn't have permission to edit the\ncontent.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/contentbody/convert/{to}": {
      "post": {
        "description": "Converts a content body from one format to another format.\n\nSupported conversions:\n\n- storage: view, export_view, styled_view, editor\n- editor: storage\n- view: none\n- export_view: none\n- styled_view: none\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nIf request specifies 'contentIdContext', 'View' permission for the space, and permission to view the content.",
        "summary": "Convert content body",
        "tags": [
          "/contentbody/convert/{to}"
        ],
        "operationId": "ContentbodyConvertByToPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "to",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the target format for the content body."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "The content body to convert.",
            "schema": {
              "$ref": "#/definitions/ContentBodyCreate"
            }
          },
          {
            "name": "expand",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "childTypes.all",
                "childTypes.attachment",
                "childTypes.comment",
                "childTypes.page",
                "container",
                "metadata.currentuser",
                "metadata.properties",
                "metadata.labels",
                "metadata.frontend",
                "operations",
                "children.page",
                "children.attachment",
                "children.comment",
                "restrictions.read.restrictions.user",
                "restrictions.read.restrictions.group",
                "restrictions.update.restrictions.user",
                "restrictions.update.restrictions.group",
                "history",
                "history.lastUpdated",
                "history.previousVersion",
                "history.contributors",
                "history.nextVersion",
                "ancestors",
                "body",
                "version",
                "descendants.page",
                "descendants.attachment",
                "descendants.comment",
                "space"
              ]
            },
            "description": "A multi-value parameter indicating which properties of the new content to expand. \n\n- `childTypes.all` returns whether the content has attachments, comments, or child pages. \nUse this if you only need to check whether the content has children of a particular type.\n- `childTypes.attachment` returns whether the content has attachments.\n- `childTypes.comment` returns whether the content has comments.\n- `childTypes.page` returns whether the content has child pages.\n- `container` returns the space that the content is in. This is the same as the information \nreturned by [Get space](#api-space-spaceKey-get).\n- `metadata.currentuser` returns information about the current user in relation to the content, \nlike when they last viewed it, modified it, contributed to it, or added it as a favourite.\n- `metadata.properties` returns content properties that have been set via the Confluence REST API.\n- `metadata.labels` returns the labels that have been added to the content.\n- `metadata.frontend` (this property is only used by Atlassian)\n- `operations` returns the operations for the content, which are used when setting permissions.\n- `children.page` returns pages that are descendants at the level immediately below the content.\n- `children.attachment` returns all attachments for the content.\n- `children.comment` returns all comments on the content.\n- `restrictions.read.restrictions.user` returns the users that have permission to read the content.\n- `restrictions.read.restrictions.group` returns the groups that have permission to read the content.\n- `restrictions.update.restrictions.user` returns the users that have permission to update the content.\n- `restrictions.update.restrictions.group` returns the groups that have permission to update the content.\n- `history` returns the history of the content, including the date it was created.\n- `history.lastUpdated` returns information about the most recent update of the content, including \nwho updated it and when it was updated.\n- `history.previousVersion` returns information about the update prior to the current content update.\n- `history.contributors` returns all of the users who have contributed to the content.\n- `history.nextVersion` returns information about the update after to the current content update.\n- `ancestors` returns the parent page, if the content is a page.\n- `body` returns the body of the content in different formats, including the editor format, \nview format, and export format.\n- `version` returns information about the most recent update of the content, including who updated it \nand when it was updated.\n- `descendants.page` returns pages that are descendants at any level below the content.\n- `descendants.attachment` returns all attachments for the content, same as `children.attachment`.\n- `descendants.comment` returns all comments on the content, same as `children.comment`.\n- `space` returns the space that the content is in. This is the same as the information returned by \n[Get space](#api-space-spaceKey-get)."
          },
          {
            "name": "spaceKeyContext",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The space key used for resolving embedded content (page includes, \nfiles, and links) in the content body. For example, if the source content \ncontains the link `<ac:link><ri:page ri:content-title=\"Example page\" /><ac:link>` \nand the `spaceKeyContext=TEST` parameter is provided, then the link \nwill be converted to a link to the \"Example page\" page in the \"TEST\" space."
          },
          {
            "name": "contentIdContext",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The content ID used to find the space for resolving embedded content \n(page includes, files, and links) in the content body. For example, \nif the source content contains the link `<ac:link><ri:page ri:content-title=\"Example page\" /><ac:link>` \nand the `contentIdContext=123` parameter is provided, then the link \nwill be converted to a link to the \"Example page\" page in the same space \nthat has the content with ID=123. Note, `spaceKeyContext` will be ignored \nif this parameter is provided."
          },
          {
            "name": "embeddedContentRender",
            "in": "query",
            "required": false,
            "enum": [
              "current",
              "version-at-save"
            ],
            "default": "current",
            "type": "string",
            "description": "Mode used for rendering embedded content, like attachments.\n\n- `current` renders the embedded content using the latest version.\n- `version-at-save` renders the embedded content using the version at \nthe time of save."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the content is converted.",
            "schema": {
              "$ref": "#/definitions/ContentBody"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/group": {
      "get": {
        "description": "Returns all user groups. The returned groups are ordered alphabetically in\nascending order by group name.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to access the Confluence site ('Can use' global permission).",
        "summary": "Get groups",
        "tags": [
          "/group"
        ],
        "operationId": "GroupGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "required": false,
            "default": 0,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The starting index of the returned groups."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "default": 200,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The maximum number of groups to return per page. \nNote, this may be restricted by fixed system limits."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested groups are returned.",
            "schema": {
              "$ref": "#/definitions/GroupArrayWithLinks"
            },
            "headers": {}
          },
          "403": {
            "description": "Returned if the calling user does not have permission to view\ngroups.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/group/{groupName}": {
      "get": {
        "description": "Returns a user group for a given group name.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to access the Confluence site ('Can use' global permission).",
        "summary": "Get group",
        "tags": [
          "/group"
        ],
        "operationId": "GroupByGroupNameGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "groupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the group. This is the same as the group name shown in \nthe Confluence administration console."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested group is returned.",
            "schema": {
              "$ref": "#/definitions/Group"
            },
            "headers": {}
          },
          "403": {
            "description": "Returned if the calling user does not have permission to view\ngroups.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/group/{groupName}/member": {
      "get": {
        "description": "Returns the users that are members of a group.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to access the Confluence site ('Can use' global permission).",
        "summary": "Get group members",
        "tags": [
          "/group"
        ],
        "operationId": "GroupMemberByGroupNameGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "groupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the group to be queried for its members."
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "default": 0,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The starting index of the returned users."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "default": 200,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The maximum number of users to return per page. \nNote, this may be restricted by fixed system limits."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested users are returned.",
            "schema": {
              "$ref": "#/definitions/UserArrayWithLinks"
            },
            "headers": {}
          },
          "403": {
            "description": "Returned if the calling user does not have permission to view users.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/longtask": {
      "get": {
        "description": "Returns information about all active long-running tasks (e.g. space export), \nsuch as how long each task has been running and the percentage of each task \nthat has completed.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to access the Confluence site ('Can use' global permission).",
        "summary": "Get long-running tasks",
        "tags": [
          "/longtask"
        ],
        "operationId": "LongtaskGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "required": false,
            "default": 0,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The starting index of the returned tasks."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "default": 100,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The maximum number of tasks to return per page. Note, this may be\nrestricted by fixed system limits."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested tasks are returned.",
            "schema": {
              "$ref": "#/definitions/LongTaskStatusArray"
            },
            "headers": {}
          },
          "401": {
            "description": "Returned if the calling user is not logged in to Confluence.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/longtask/{id}": {
      "get": {
        "description": "Returns information about an active long-running task (e.g. space export), \nsuch as how long it has been running and the percentage of the task that \nhas completed.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to access the Confluence site ('Can use' global permission).",
        "summary": "Get long-running task",
        "tags": [
          "/longtask"
        ],
        "operationId": "LongtaskByIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the task."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested task is returned.",
            "schema": {
              "$ref": "#/definitions/LongTaskStatusWithLinks"
            },
            "headers": {}
          },
          "401": {
            "description": "Returned if the calling user is not logged in to Confluence.",
            "schema": {}
          },
          "404": {
            "description": "Returned if;\n\n- There is no task with the given ID.\n- The calling user does not have permission to view the task.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/relation/{relationName}/from/{sourceType}/{sourceKey}/to/{targetType}": {
      "get": {
        "description": "Returns all target entities that have a particular relationship to the \nsource entity. Note, relationships are one way.\n\nFor example, the following method finds all content that the current user \nhas an 'ignore' relationship with:\n`GET https://your-domain.atlassian.net/wiki/rest/api/relation/ignore/from/user/current/to/content`\nNote, 'ignore' is an example custom relationship type.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \nPermission to view both the target entity and source entity.",
        "summary": "Find target entities related to a source entity",
        "tags": [
          "/relation"
        ],
        "operationId": "RelationFromSourceKeyToTargetTypeByRelationNameAndSourceTypeGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "relationName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the relationship. This method supports relationships created via \n[Create relationship](#api-relation-relationName-from-sourceType-sourceKey-to-targetType-targetKey-put). \nNote, this method does not support 'favourite' relationships."
          },
          {
            "name": "sourceType",
            "in": "path",
            "required": true,
            "enum": [
              "user",
              "content",
              "space"
            ],
            "type": "string",
            "description": "The source entity type of the relationship."
          },
          {
            "name": "sourceKey",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The identifier for the source entity:\n\n- If `sourceType` is `user`, then specify either `current` (logged-in user), the user key of the user, or\nthe account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the\n[migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)\nfor details.\n- If `sourceType` is 'content', then specify the content ID.\n- If `sourceType` is 'space', then specify the space key."
          },
          {
            "name": "targetType",
            "in": "path",
            "required": true,
            "enum": [
              "user",
              "content",
              "space"
            ],
            "type": "string",
            "description": "The target entity type of the relationship."
          },
          {
            "name": "sourceStatus",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The status of the source. This parameter is only used when the\n`sourceType` is 'content'."
          },
          {
            "name": "targetStatus",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The status of the target. This parameter is only used when the\n`targetType` is 'content'."
          },
          {
            "name": "sourceVersion",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The version of the source. This parameter is only used when the\n`sourceType` is 'content' and the `sourceStatus` is 'historical'."
          },
          {
            "name": "targetVersion",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The version of the target. This parameter is only used when the\n`targetType` is 'content' and the `targetStatus` is 'historical'."
          },
          {
            "name": "expand",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "relationData",
                "source",
                "target"
              ]
            },
            "description": "A multi-value parameter indicating which properties of the response \nobject to expand.\n\n- `relationData` returns information about the relationship, such as \nwho created it and when it was created.\n- `source` returns the source entity.\n- `target` returns the target entity."
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "default": 0,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The starting index of the returned relationships."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "default": 25,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The maximum number of relationships to return per page. \nNote, this may be restricted by fixed system limits."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested relationships are returned.",
            "schema": {
              "$ref": "#/definitions/RelationArray"
            },
            "headers": {}
          },
          "403": {
            "description": "Returned if the user does not have permission to view the\nrelationships.",
            "schema": {}
          },
          "404": {
            "description": "Returned if the target entity does not exist.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/relation/{relationName}/from/{sourceType}/{sourceKey}/to/{targetType}/{targetKey}": {
      "get": {
        "description": "Find whether a particular type of relationship exists from a source \nentity to a target entity. Note, relationships are one way.\n\nFor example, you can use this method to find whether the current user has \nselected a particular page as a favorite (i.e. 'save for later'):\n`GET https://your-domain.atlassian.net/wiki/rest/api/relation/favourite/from/user/current/to/content/123`\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \nPermission to view both the target entity and source entity.",
        "summary": "Find relationship from source to target",
        "tags": [
          "/relation"
        ],
        "operationId": "RelationFromSourceKeyToTargetTypeTargetKeyByRelationNameAndSourceTypeGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "relationName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the relationship. This method supports the 'favourite' \n(i.e. 'save for later') relationship as well as any other relationship \ntypes created via [Create relationship](#api-relation-relationName-from-sourceType-sourceKey-to-targetType-targetKey-put)."
          },
          {
            "name": "sourceType",
            "in": "path",
            "required": true,
            "enum": [
              "user",
              "content",
              "space"
            ],
            "type": "string",
            "description": "The source entity type of the relationship. This must be 'user', if \nthe `relationName` is 'favourite'."
          },
          {
            "name": "sourceKey",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "- The identifier for the source entity:\n\n- If `sourceType` is `user`, then specify either `current` (logged-in user), the user key of the user, or\nthe account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the\n[migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)\nfor details.\n- If `sourceType` is 'content', then specify the content ID.\n- If `sourceType` is 'space', then specify the space key."
          },
          {
            "name": "targetType",
            "in": "path",
            "required": true,
            "enum": [
              "user",
              "content",
              "space"
            ],
            "type": "string",
            "description": "The target entity type of the relationship. This must be 'space' or \n'content', if the `relationName` is 'favourite'."
          },
          {
            "name": "targetKey",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The identifier for the target entity:\n\n- If `targetType` is `user`, then specify either `current` (logged-in user), the user key of the user, or\nthe account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the\n[migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)\nfor details.\n- If `targetType` is 'content', then specify the content ID.\n- If `targetType` is 'space', then specify the space key."
          },
          {
            "name": "sourceStatus",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The status of the source. This parameter is only used when the\n`sourceType` is 'content'."
          },
          {
            "name": "targetStatus",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The status of the target. This parameter is only used when the\n`targetType` is 'content'."
          },
          {
            "name": "sourceVersion",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The version of the source. This parameter is only used when the\n`sourceType` is 'content' and the `sourceStatus` is 'historical'."
          },
          {
            "name": "targetVersion",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The version of the target. This parameter is only used when the\n`targetType` is 'content' and the `targetStatus` is 'historical'."
          },
          {
            "name": "expand",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "relationData",
                "source",
                "target"
              ]
            },
            "description": "A multi-value parameter indicating which properties of the response \nobject to expand.\n\n- `relationData` returns information about the relationship, such as \nwho created it and when it was created.\n- `source` returns the source entity.\n- `target` returns the target entity."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the relationship exists.",
            "schema": {
              "$ref": "#/definitions/Relation"
            },
            "headers": {}
          },
          "403": {
            "description": "Returned if the user does not have permission to view the\nrelationship.",
            "schema": {}
          },
          "404": {
            "description": "Returned if the relationship does not exist.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "put": {
        "description": "Creates a relationship between two entities (user, space, content). The \n'favourite' relationship is supported by default, but you can use this method \nto create any type of relationship between two entities.\n\nFor example, the following method creates a 'sibling' relationship between \ntwo pieces of content:\n`GET https://your-domain.atlassian.net/wiki/rest/api/relation/sibling/from/content/123/to/content/456`\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \nPermission to access the Confluence site ('Can use' global permission).",
        "summary": "Create relationship",
        "tags": [
          "/relation"
        ],
        "operationId": "RelationFromSourceKeyToTargetTypeTargetKeyByRelationNameAndSourceTypePut",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "relationName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the relationship. This method supports the 'favourite' \n(i.e. 'save for later') relationship. You can also specify any other \nvalue for this parameter to create a custom relationship type."
          },
          {
            "name": "sourceType",
            "in": "path",
            "required": true,
            "enum": [
              "user",
              "content",
              "space"
            ],
            "type": "string",
            "description": "The source entity type of the relationship. This must be 'user', if \nthe `relationName` is 'favourite'."
          },
          {
            "name": "sourceKey",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "- The identifier for the source entity:\n\n- If `sourceType` is 'user', then specify either 'current' (logged-in \n  user) or the user key.\n- If `sourceType` is 'content', then specify the content ID.\n- If `sourceType` is 'space', then specify the space key."
          },
          {
            "name": "targetType",
            "in": "path",
            "required": true,
            "enum": [
              "user",
              "content",
              "space"
            ],
            "type": "string",
            "description": "The target entity type of the relationship. This must be 'space' or \n'content', if the `relationName` is 'favourite'."
          },
          {
            "name": "targetKey",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "- The identifier for the target entity:\n\n- If `sourceType` is 'user', then specify either 'current' (logged-in \n  user) or the user key.\n- If `sourceType` is 'content', then specify the content ID.\n- If `sourceType` is 'space', then specify the space key."
          },
          {
            "name": "sourceStatus",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The status of the source. This parameter is only used when the\n`sourceType` is 'content'."
          },
          {
            "name": "targetStatus",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The status of the target. This parameter is only used when the\n`targetType` is 'content'."
          },
          {
            "name": "sourceVersion",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The version of the source. This parameter is only used when the\n`sourceType` is 'content' and the `sourceStatus` is 'historical'."
          },
          {
            "name": "targetVersion",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The version of the target. This parameter is only used when the\n`targetType` is 'content' and the `targetStatus` is 'historical'."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the relationship is created.",
            "schema": {
              "$ref": "#/definitions/Relation"
            },
            "headers": {}
          },
          "403": {
            "description": "Returned if the user does not have permission to use Confluence.",
            "schema": {}
          },
          "404": {
            "description": "Returned if the user, space or content could not be found.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "delete": {
        "description": "Deletes a relationship between two entities (user, space, content).\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \nPermission to access the Confluence site ('Can use' global permission). \nFor favourite relationships, the current user can only delete their own \nfavourite relationships. A space administrator can delete favourite \nrelationships for any user.",
        "summary": "Delete",
        "tags": [
          "/relation"
        ],
        "operationId": "RelationFromSourceKeyToTargetTypeTargetKeyByRelationNameAndSourceTypeDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "relationName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the relationship."
          },
          {
            "name": "sourceType",
            "in": "path",
            "required": true,
            "enum": [
              "user",
              "content",
              "space"
            ],
            "type": "string",
            "description": "The source entity type of the relationship. This must be 'user', if \nthe `relationName` is 'favourite'."
          },
          {
            "name": "sourceKey",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "- The identifier for the source entity:\n\n- If `sourceType` is 'user', then specify either 'current' (logged-in \n  user) or the user key.\n- If `sourceType` is 'content', then specify the content ID.\n- If `sourceType` is 'space', then specify the space key."
          },
          {
            "name": "targetType",
            "in": "path",
            "required": true,
            "enum": [
              "user",
              "content",
              "space"
            ],
            "type": "string",
            "description": "The target entity type of the relationship. This must be 'space' or \n'content', if the `relationName` is 'favourite'."
          },
          {
            "name": "targetKey",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "- The identifier for the target entity:\n\n- If `sourceType` is 'user', then specify either 'current' (logged-in \n  user) or the user key.\n- If `sourceType` is 'content', then specify the content ID.\n- If `sourceType` is 'space', then specify the space key."
          },
          {
            "name": "sourceStatus",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The status of the source. This parameter is only used when the\n`sourceType` is 'content'."
          },
          {
            "name": "targetStatus",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The status of the target. This parameter is only used when the\n`targetType` is 'content'."
          },
          {
            "name": "sourceVersion",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The version of the source. This parameter is only used when the\n`sourceType` is 'content' and the `sourceStatus` is 'historical'."
          },
          {
            "name": "targetVersion",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The version of the target. This parameter is only used when the\n`targetType` is 'content' and the `targetStatus` is 'historical'."
          }
        ],
        "responses": {
          "204": {
            "description": "Returned if the relationship is deleted or the relationship didn't\nexist.",
            "headers": {}
          },
          "403": {
            "description": "Returned if the user does not have permission to delete the\nrelationship.",
            "schema": {}
          },
          "404": {
            "description": "Returned if the user, space or content could not be found.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/relation/{relationName}/to/{targetType}/{targetKey}/from/{sourceType}": {
      "get": {
        "description": "Returns all target entities that have a particular relationship to the \nsource entity. Note, relationships are one way.\n\nFor example, the following method finds all users that have a 'collaborator' \nrelationship to a piece of content with an ID of '1234':\n`GET https://your-domain.atlassian.net/wiki/rest/api/relation/collaborator/to/content/1234/from/user`\nNote, 'collaborator' is an example custom relationship type.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \nPermission to view both the target entity and source entity.",
        "summary": "Find target entities related to a source entity",
        "tags": [
          "/relation"
        ],
        "operationId": "RelationToTargetKeyFromSourceTypeByRelationNameAndTargetTypeGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "relationName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the relationship. This method supports relationships created via \n[Create relationship](#api-relation-relationName-from-sourceType-sourceKey-to-targetType-targetKey-put). \nNote, this method does not support 'favourite' relationships."
          },
          {
            "name": "sourceType",
            "in": "path",
            "required": true,
            "enum": [
              "user",
              "content",
              "space"
            ],
            "type": "string",
            "description": "The source entity type of the relationship."
          },
          {
            "name": "targetType",
            "in": "path",
            "required": true,
            "enum": [
              "user",
              "content",
              "space"
            ],
            "type": "string",
            "description": "The target entity type of the relationship."
          },
          {
            "name": "targetKey",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The identifier for the target entity:\n\n- If `targetType` is `user`, then specify either `current` (logged-in user), the user key of the user, or\nthe account ID of the user. Note that the user key has been deprecated in favor of the account ID for this parameter. See the\n[migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)\nfor details.\n- If `targetType` is 'content', then specify the content ID.\n- If `targetType` is 'space', then specify the space key."
          },
          {
            "name": "sourceStatus",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The status of the source. This parameter is only used when the\n`sourceType` is 'content'."
          },
          {
            "name": "targetStatus",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The status of the target. This parameter is only used when the\n`targetType` is 'content'."
          },
          {
            "name": "sourceVersion",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The version of the source. This parameter is only used when the\n`sourceType` is 'content' and the `sourceStatus` is 'historical'."
          },
          {
            "name": "targetVersion",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The version of the target. This parameter is only used when the\n`targetType` is 'content' and the `targetStatus` is 'historical'."
          },
          {
            "name": "expand",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "relationData",
                "source",
                "target"
              ]
            },
            "description": "A multi-value parameter indicating which properties of the response \nobject to expand.\n\n- `relationData` returns information about the relationship, such as \nwho created it and when it was created.\n- `source` returns the source entity.\n- `target` returns the target entity."
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "default": 0,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The starting index of the returned relationships."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "default": 25,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The maximum number of relationships to return per page. \nNote, this may be restricted by fixed system limits."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested relationships are returned.",
            "schema": {
              "$ref": "#/definitions/RelationArray"
            },
            "headers": {}
          },
          "403": {
            "description": "Returned if the user does not have permission to view the\nrelationship",
            "schema": {}
          },
          "404": {
            "description": "Returned if the target entity does not exist.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/search": {
      "get": {
        "description": "Searches for content using the \n[Confluence Query Language (CQL)](https://developer.atlassian.com/cloud/confluence/advanced-searching-using-cql/)\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \nPermission to view the entities. Note, only entities that the user has \npermission to view will be returned.",
        "summary": "Search",
        "tags": [
          "/search"
        ],
        "operationId": "SearchGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "cql",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The CQL query to be used for the search. See \n[Advanced Searching using CQL](https://developer.atlassian.com/cloud/confluence/advanced-searching-using-cql/) \nfor instructions on how to build a CQL query."
          },
          {
            "name": "cqlcontext",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The space, content, and content status to execute the search\nagainst. \n\n- `spaceKey` Key of the space to search against. Optional.\n- `contentId` ID of the content to search against. Optional. Must be \nin the space specified by `spaceKey`.\n- `contentStatuses` Content statuses to search against. Optional.\n\nSpecify these values in an object. For example, \n`cqlcontext={%22spaceKey%22:%22TEST%22, %22contentId%22:%22123%22}`"
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "default": 0,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The starting index of the returned content."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "default": 25,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The maximum number of content objects to return per page. \nNote, this may be restricted by fixed system limits."
          },
          {
            "name": "includeArchivedSpaces",
            "in": "query",
            "required": false,
            "default": false,
            "type": "boolean",
            "description": "Include content from archived spaces in the results."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested results are returned.",
            "schema": {
              "$ref": "#/definitions/SearchPageResponseSearchResult"
            },
            "headers": {}
          },
          "400": {
            "description": "Returned if the CQL query cannot be parsed.",
            "schema": {}
          },
          "403": {
            "description": "Returned if the calling user does not have permission to access  \nConfluence.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/settings/lookandfeel": {
      "get": {
        "description": "Returns the look and feel settings for the site or a single space. This \nincludes attributes such as the color scheme, padding, and border radius.\n\nThe look and feel settings for a space can be inherited from the global \nlook and feel settings or provided by a theme.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \nNone",
        "summary": "Get look and feel settings",
        "tags": [
          "/settings/lookandfeel"
        ],
        "operationId": "SettingsLookandfeelGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "spaceKey",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The key of the space for which the look and feel settings will be\nreturned. If this is not set, only the global look and feel settings\nare returned."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested look and feel settings are returned.",
            "schema": {
              "$ref": "#/definitions/LookAndFeelSettings"
            },
            "headers": {}
          },
          "400": {
            "description": "Returned if `spaceKey` is invalid.",
            "schema": {}
          },
          "404": {
            "description": "Returned if there is no space with the given `spaceKey`.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/settings/lookandfeel/custom": {
      "post": {
        "description": "Updates the look and feel settings for the site or for a single space.\nIf custom settings exist, they are updated. If no custom settings exist, \nthen a set of custom settings is created.\n\nNote, if a theme is selected for a space, the space look and feel settings \nare provided by the theme and cannot be overridden.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \n'Admin' permission for the space.",
        "summary": "Update look and feel settings",
        "tags": [
          "/settings/lookandfeel"
        ],
        "operationId": "SettingsLookandfeelCustomPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "The updated settings. All values for the settings must be included, \nregardless of whether they are being changed.\n\nOne way to create the request body is to copy the settings from the \nresponse body of [Get look and feel settings](#api-settings-lookandfeel-get) \nand modify it as needed.",
            "schema": {
              "$ref": "#/definitions/LookAndFeel"
            }
          },
          {
            "name": "spaceKey",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The key of the space for which the look and feel settings will be\nupdated. If this is not set, the global look and feel settings will \nbe updated."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the look and feel settings are updated.",
            "schema": {
              "$ref": "#/definitions/LookAndFeelUpdated"
            },
            "headers": {}
          },
          "400": {
            "description": "Returned if;\n\n- The `spaceKey` is invalid\n- The request body contains invalid data.",
            "schema": {}
          },
          "403": {
            "description": "Returned if the calling user doesn't have permission to edit the\nlook and feel settings.",
            "schema": {}
          },
          "404": {
            "description": "Returned if there is no space with the given `spaceKey`.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "delete": {
        "description": "Resets the custom look and feel settings for the site or a single space.\nThis changes the values of the custom settings to be the same as the \ndefault settings. It does not change which settings (default or custom) \nare selected. Note, the default space settings are inherited from the \ncurrent global settings.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \n'Admin' permission for the space.",
        "summary": "Reset look and feel settings",
        "tags": [
          "/settings/lookandfeel"
        ],
        "operationId": "SettingsLookandfeelCustomDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "spaceKey",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The key of the space for which the look and feel settings will be\nreset. If this is not set, the global look and feel settings will \nbe reset."
          }
        ],
        "responses": {
          "204": {
            "description": "Returned if the look and feel settings have been reset.",
            "headers": {}
          },
          "400": {
            "description": "Returned if `spaceKey` is invalid.",
            "schema": {}
          },
          "403": {
            "description": "Returned if the calling user doesn't have permission to reset the\nlook and feel.",
            "schema": {}
          },
          "404": {
            "description": "Returned if there is no space with the given `spaceKey`.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/settings/lookandfeel/selected": {
      "put": {
        "description": "Sets the look and feel settings to either the default settings or the\ncustom settings, for the site or a single space. Note, the default \nspace settings are inherited from the current global settings.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \n'Admin' permission for the space.",
        "summary": "Set look and feel settings",
        "tags": [
          "/settings/lookandfeel"
        ],
        "operationId": "SettingsLookandfeelSelectedPut",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "The look and feel settings to be set.",
            "schema": {
              "$ref": "#/definitions/LookAndFeelType"
            }
          },
          {
            "name": "spaceKey",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The key of the space for which the look and feel settings will be\nset. If this is not set, the global look and feel settings will be \nset."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the look and feel settings were set.",
            "schema": {
              "$ref": "#/definitions/LookAndFeelSettings"
            },
            "headers": {}
          },
          "400": {
            "description": "Returned if;\n\n- The `spaceKey` is invalid. \n- The look and feel type is invalid.",
            "schema": {}
          },
          "403": {
            "description": "Returned if the look and feel type is set to 'theme' but the \nspace/site doesn't have a theme assigned.",
            "schema": {}
          },
          "404": {
            "description": "Returned if there is no space with the given `spaceKey`.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/settings/systemInfo": {
      "get": {
        "description": "Returns the system information for the Confluence Cloud tenant. This\ninformation is used by Atlassian.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \nPermission to access the Confluence site ('Can use' global permission).",
        "summary": "Get system info",
        "tags": [
          "/settings"
        ],
        "operationId": "SettingsSystemInfoGet",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returned if the system information for the Confluence Cloud tenant\nis returned.",
            "schema": {
              "$ref": "#/definitions/SystemInfoEntity"
            },
            "headers": {}
          },
          "403": {
            "description": "Returned when the user does not have permission to view the system\ninformation.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/settings/theme": {
      "get": {
        "description": "Returns all themes, not including the default theme.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: None",
        "summary": "Get themes",
        "tags": [
          "/settings/theme"
        ],
        "operationId": "SettingsThemeGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "required": false,
            "default": 0,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The starting index of the returned themes."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "default": 100,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The maximum number of themes to return per page. \nNote, this may be restricted by fixed system limits."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested themes are returned.",
            "schema": {
              "$ref": "#/definitions/ThemeArray"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/settings/theme/selected": {
      "get": {
        "description": "Returns the globally assigned theme.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: None",
        "summary": "Get global theme",
        "tags": [
          "/settings/theme"
        ],
        "operationId": "SettingsThemeSelectedGet",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returned if the global theme is returned.",
            "schema": {
              "$ref": "#/definitions/Theme"
            },
            "headers": {}
          },
          "404": {
            "description": "Returned if Confluence does not have a global theme assigned, i.e.\nthe default theme is used.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/settings/theme/{themeKey}": {
      "get": {
        "description": "Returns a theme. This includes information about the theme name,\ndescription, and icon.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: None",
        "summary": "Get theme",
        "tags": [
          "/settings/theme"
        ],
        "operationId": "SettingsThemeByThemeKeyGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "themeKey",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The key of the theme to be returned."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested theme is returned.",
            "schema": {
              "$ref": "#/definitions/Theme"
            },
            "headers": {}
          },
          "404": {
            "description": "Returned if there is no theme with the given key.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/space": {
      "get": {
        "description": "Returns all spaces. The returned spaces are ordered alphabetically in\nascending order by space key.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\nPermission to access the Confluence site ('Can use' global permission).\nNote, the returned list will only contain spaces that the current user\nhas permission to view.",
        "summary": "Get spaces",
        "tags": [
          "/space"
        ],
        "operationId": "SpaceGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "spaceKey",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The key of the space to be returned. To return multiple spaces,\nspecify this parameter multiple times with different values."
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "enum": [
              "global",
              "personal"
            ],
            "type": "string",
            "description": "Filter the results to spaces based on their type."
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "enum": [
              "current",
              "archived"
            ],
            "type": "string",
            "description": "Filter the results to spaces based on their status."
          },
          {
            "name": "label",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Filter the results to spaces based on their label."
          },
          {
            "name": "favourite",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Filter the results to the favourite spaces of the user specified by\n`favouriteUserKey`. Note, 'favourite' spaces are also\nknown as 'saved for later' spaces."
          },
          {
            "name": "favouriteUserKey",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The userKey of the user, whose favourite spaces are used to filter\nthe results when using the `favourite` parameter.\n\nLeave blank for the current user. Use [Get user](#api-user-get) to \nget the userKey for a user."
          },
          {
            "name": "expand",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "settings",
                "metadata.labels",
                "operations",
                "lookAndFeel",
                "permissions",
                "icon",
                "description.plain",
                "description.view",
                "theme",
                "homepage"
              ]
            },
            "description": "A multi-value parameter indicating which properties of the spaces to\nexpand, where:\n\n  - `settings` returns the settings for the space, similar to [Get space settings](#api-space-spaceKey-settings-get).\n  - `metadata.labels` returns the space labels, which are used to categorize the space.\n  - `operations` returns the operations for a space, which are used when setting permissions.\n  - `lookAndFeel` returns information about the look and feel of the space, like the color scheme.\n  - `permissions` returns the permissions for the space.\n  - `icon` returns information about space icon.\n  - `description.plain` returns the description of the space.\n  - `description.view` returns the description of the space.\n  - `theme` returns information about the space theme.\n  - `homepage` returns information about the space homepage."
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "default": 0,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The starting index of the returned spaces."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "default": 25,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The maximum number of spaces to return per page. Note, this may be\nrestricted by fixed system limits."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested spaces are returned.",
            "schema": {
              "$ref": "#/definitions/SpaceArray"
            },
            "headers": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing \nfrom the request.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "post": {
        "description": "Creates a new space. Note, currently you cannot set space labels when\ncreating a space.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\n'Create Space(s)' global permission.",
        "summary": "Create space",
        "tags": [
          "/space"
        ],
        "operationId": "SpacePost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "The space to be created.",
            "schema": {
              "$ref": "#/definitions/SpaceCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the space is created.",
            "schema": {
              "$ref": "#/definitions/Space"
            },
            "headers": {}
          },
          "400": {
            "description": "Returned if any of the following is true:\n\n- The request is invalid.\n- The space already exists.",
            "schema": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing \nfrom the request.",
            "schema": {}
          },
          "403": {
            "description": "Returned if the callig user does not have permission to create a space.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/space/_private": {
      "post": {
        "description": "Creates a new space that is only visible to the creator. This method is\nthe same as the [Create space](#api-space-post) method with permissions\nset to the current user only. Note, currently you cannot set space\nlabels when creating a space.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\n'Create Space(s)' global permission.",
        "summary": "Create private space",
        "tags": [
          "/space"
        ],
        "operationId": "SpacePrivatePost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "The space to be created.",
            "schema": {
              "$ref": "#/definitions/SpacePrivateCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the space is created.",
            "schema": {
              "$ref": "#/definitions/Space"
            },
            "headers": {}
          },
          "400": {
            "description": "Returned if any of the following is true:\n\n- The request is invalid.\n- The space already exists.",
            "schema": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing \nfrom the request.",
            "schema": {}
          },
          "403": {
            "description": "Returned if the user does not have permission to create a space.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/space/{spaceKey}": {
      "get": {
        "description": "Returns a space. This includes information like the name, description,\nand permissions, but not the content in the space.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\n'View' permission for the space.",
        "summary": "Get space",
        "tags": [
          "/space"
        ],
        "operationId": "SpaceBySpaceKeyGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "spaceKey",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The key of the space to be returned."
          },
          {
            "name": "expand",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "settings",
                "metadata.labels",
                "operations",
                "lookAndFeel",
                "permissions",
                "icon",
                "description.plain",
                "description.view",
                "theme",
                "homepage"
              ]
            },
            "description": "A multi-value parameter indicating which properties of the space to\nexpand, where:\n\n  - `settings` returns the settings for the space, similar to [Get space settings](#api-space-spaceKey-settings-get).\n  - `metadata.labels` returns the space labels, which are used to categorize the space.\n  - `operations` returns the operations for a space, which are used when setting permissions.\n  - `lookAndFeel` returns information about the look and feel of the space, like the color scheme.\n  - `permissions` returns the permissions for the space.\n  - `icon` returns information about space icon.\n  - `description.plain` returns the description of the space.\n  - `description.view` returns the description of the space.\n  - `theme` returns information about the space theme.\n  - `homepage` returns information about the space homepage."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested space is returned.",
            "schema": {
              "$ref": "#/definitions/Space"
            },
            "headers": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing \nfrom the request.",
            "schema": {}
          },
          "404": {
            "description": "Returned if any of the following is true:\n\n- There is no space with the given key.\n- The calling user does not have permission to view the space.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "put": {
        "description": "Updates the name, description, or homepage of a space.\n\n-   For security reasons, permissions cannot be updated via the API and\nmust be changed via the user interface instead.\n-   Currently you cannot set space labels when updating a space.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\n'Admin' permission for the space.",
        "summary": "Update space",
        "tags": [
          "/space"
        ],
        "operationId": "SpaceBySpaceKeyPut",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "spaceKey",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The key of the space to update."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "The updated space.",
            "schema": {
              "$ref": "#/definitions/SpaceUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the space is updated.",
            "schema": {
              "$ref": "#/definitions/Space"
            },
            "headers": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing \nfrom the request.",
            "schema": {}
          },
          "404": {
            "description": "Returned if any of the following is true:\n\n- There is no space with the given key\n- The calling user does not have permission to update the space.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "delete": {
        "description": "Deletes a space. Note, the space will be deleted in a long running task.\nTherefore, the space may not be deleted yet when this method has\nreturned. Clients should poll the status link that is returned in the\nresponse until the task completes.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\n'Admin' permission for the space.",
        "summary": "Delete space",
        "tags": [
          "/space"
        ],
        "operationId": "SpaceBySpaceKeyDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "spaceKey",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The key of the space to delete."
          }
        ],
        "responses": {
          "202": {
            "description": "Returns a pointer to the status of the space deletion task.",
            "headers": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing \nfrom the request.",
            "schema": {}
          },
          "404": {
            "description": "Returned if any of the following is true:\n\n- There is no space with the given key.\n- The calling user does not have permission to delete the space.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/space/{spaceKey}/content": {
      "get": {
        "description": "Returns all content in a space. The returned content is grouped by type\n(pages then blogposts), then ordered by content ID in ascending order.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\n'View' permission for the space. Note, the returned list will only\ncontain content that the current user has permission to view.",
        "summary": "Get content for space",
        "tags": [
          "/space"
        ],
        "operationId": "SpaceContentBySpaceKeyGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "spaceKey",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The key of the space to be queried for its content."
          },
          {
            "name": "depth",
            "in": "query",
            "required": false,
            "enum": [
              "all",
              "root"
            ],
            "default": "all",
            "type": "string",
            "description": "Filter the results to content at the root level of the space or all content."
          },
          {
            "name": "expand",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "childTypes.all",
                "childTypes.attachment",
                "childTypes.comment",
                "childTypes.page",
                "container",
                "metadata.currentuser",
                "metadata.properties",
                "metadata.labels",
                "metadata.frontend",
                "operations",
                "children.page",
                "children.attachment",
                "children.comment",
                "restrictions.read.restrictions.user",
                "restrictions.read.restrictions.group",
                "restrictions.update.restrictions.user",
                "restrictions.update.restrictions.group",
                "history",
                "history.lastUpdated",
                "history.previousVersion",
                "history.contributors",
                "history.nextVersion",
                "ancestors",
                "body",
                "version",
                "descendants.page",
                "descendants.attachment",
                "descendants.comment",
                "space"
              ]
            },
            "description": "A multi-value parameter indicating which properties of the content\nto expand, where:\n\n  - `childTypes.all` returns whether the content has attachments, comments, or child pages. Use this if you only need to check whether the content has children of a particular type.\n  - `childTypes.attachment` returns whether the content has attachments.\n  - `childTypes.comment` returns whether the content has comments.\n  - `childTypes.page` returns whether the content has child pages.\n  - `container` returns the space that the content is in. This is the same as the information returned by [Get space](#api-space-spaceKey-get).\n  - `metadata.currentuser` returns information about the current user in relation to the content, like when they last viewed it, modified it, contributed to it, or added it as a favourite.\n  - `metadata.properties` returns content properties that have been set via the Confluence REST API.\n  - `metadata.labels` returns the labels that have been added to the content.\n  - `metadata.frontend` (this property is only used by Atlassian)\n  - `operations` returns the operations for the content, which are used when setting permissions.\n  - `children.page` returns pages that are descendants at the level immediately below the content.\n  - `children.attachment` returns all attachments for the content.\n  - `children.comment` returns all comments on the content.\n  - `restrictions.read.restrictions.user` returns the users that have permission to read the content.\n  - `restrictions.read.restrictions.group` returns the groups that have permission to read the content.\n  - `restrictions.update.restrictions.user` returns the users that have permission to update the content.\n  - `restrictions.update.restrictions.group` returns the groups that have permission to update the content.\n  - `history` returns the history of the content, including the date it was created.\n  - `history.lastUpdated` returns information about the most recent update of the content, including who updated it and when it was updated.\n  - `history.previousVersion` returns information about the update prior to the current content update.\n  - `history.contributors` returns all of the users who have contributed to the content.\n  - `history.nextVersion` returns information about the update after to the current content update.\n  - `ancestors` returns the parent page, if the content is a page.\n  - `body` returns the body of the content in different formats, including the editor format, view format, and export format.\n  - `version` returns information about the most recent update of the content, including who updated it and when it was updated.\n  - `descendants.page` returns pages that are descendants at any level below the content.\n  - `descendants.attachment` returns all attachments for the content, same as `children.attachment`.\n  - `descendants.comment` returns all comments on the content, same as `children.comment`.\n  - `space` returns the space that the content is in. This is the same as the information returned by [Get space](#api-space-spaceKey-get)."
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "default": 0,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The starting index of the returned content."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "default": 25,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The maximum number of content objects to return per page. Note, this \nmay be restricted by fixed system limits."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested content is returned.",
            "schema": {
              "$ref": "#/definitions/ContentArray"
            },
            "headers": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing \nfrom the request.",
            "schema": {}
          },
          "404": {
            "description": "Returned if any of the following is true:\n\n- There is no space with the given key.\n- The calling user does not have permission to view the space.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/space/{spaceKey}/content/{type}": {
      "get": {
        "description": "Returns all content of a given type, in a space. The returned content is\nordered by content ID in ascending order.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\n'View' permission for the space. Note, the returned list will only\ncontain content that the current user has permission to view.",
        "summary": "Get content by type for space",
        "tags": [
          "/space"
        ],
        "operationId": "SpaceContentBySpaceKeyAndTypeGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "spaceKey",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The key of the space to be queried for its content."
          },
          {
            "name": "type",
            "in": "path",
            "required": true,
            "enum": [
              "page",
              "blogpost"
            ],
            "type": "string",
            "description": "The type of content to return."
          },
          {
            "name": "depth",
            "in": "query",
            "required": false,
            "enum": [
              "all",
              "root"
            ],
            "default": "all",
            "type": "string",
            "description": "Filter the results to content at the root level of the space or all\ncontent."
          },
          {
            "name": "expand",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "childTypes.all",
                "childTypes.attachment",
                "childTypes.comment",
                "childTypes.page",
                "container",
                "metadata.currentuser",
                "metadata.properties",
                "metadata.labels",
                "metadata.frontend",
                "operations",
                "children.page",
                "children.attachment",
                "children.comment",
                "restrictions.read.restrictions.user",
                "restrictions.read.restrictions.group",
                "restrictions.update.restrictions.user",
                "restrictions.update.restrictions.group",
                "history",
                "history.lastUpdated",
                "history.previousVersion",
                "history.contributors",
                "history.nextVersion",
                "ancestors",
                "body",
                "version",
                "descendants.page",
                "descendants.attachment",
                "descendants.comment",
                "space"
              ]
            },
            "description": "A multi-value parameter indicating which properties of the content\nto expand, where:\n\n  - `childTypes.all` returns whether the content has attachments, comments, or child pages. Use this if you only need to check whether the content has children of a particular type.\n  - `childTypes.attachment` returns whether the content has attachments.\n  - `childTypes.comment` returns whether the content has comments.\n  - `childTypes.page` returns whether the content has child pages.\n  - `container` returns the space that the content is in. This is the same as the information returned by [Get space](#api-space-spaceKey-get).\n  - `metadata.currentuser` returns information about the current user in relation to the content, like when they last viewed it, modified it, contributed to it, or added it as a favourite.\n  - `metadata.properties` returns content properties that have been set via the Confluence REST API.\n  - `metadata.labels` returns the labels that have been added to the content.\n  - `metadata.frontend` (this property is only used by Atlassian)\n  - `operations` returns the operations for the content, which are used when setting permissions.\n  - `children.page` returns pages that are descendants at the level immediately below the content.\n  - `children.attachment` returns all attachments for the content.\n  - `children.comment` returns all comments on the content.\n  - `restrictions.read.restrictions.user` returns the users that have permission to read the content.\n  - `restrictions.read.restrictions.group` returns the groups that have permission to read the content.\n  - `restrictions.update.restrictions.user` returns the users that have permission to update the content.\n  - `restrictions.update.restrictions.group` returns the groups that have permission to update the content.\n  - `history` returns the history of the content, including the date it was created.\n  - `history.lastUpdated` returns information about the most recent update of the content, including who updated it and when it was updated.\n  - `history.previousVersion` returns information about the update prior to the current content update.\n  - `history.contributors` returns all of the users who have contributed to the content.\n  - `history.nextVersion` returns information about the update after to the current content update.\n  - `ancestors` returns the parent page, if the content is a page.\n  - `body` returns the body of the content in different formats, including the editor format, view format, and export format.\n  - `version` returns information about the most recent update of the content, including who updated it and when it was updated.\n  - `descendants.page` returns pages that are descendants at any level below the content.\n  - `descendants.attachment` returns all attachments for the content, same as `children.attachment`.\n  - `descendants.comment` returns all comments on the content, same as `children.comment`.\n  - `space` returns the space that the content is in. This is the same as the information returned by [Get space](#api-space-spaceKey-get)."
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "default": 0,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The starting index of the returned content."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "default": 25,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The maximum number of content objects to return per page. Note, this \nmay be restricted by fixed system limits."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested content is returned.",
            "schema": {
              "$ref": "#/definitions/ContentArray"
            },
            "headers": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing \nfrom the request.",
            "schema": {}
          },
          "404": {
            "description": "Returned if any of the following is true:\n\n- There is no space with the given key.\n- The calling user does not have permission to view the space.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/space/{spaceKey}/settings": {
      "get": {
        "description": "Returns the settings of a space. Currently only the\n`routeOverrideEnabled` setting can be returned.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\n'View' permission for the space.",
        "summary": "Get space settings",
        "tags": [
          "/space"
        ],
        "operationId": "SpaceSettingsBySpaceKeyGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "spaceKey",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The key of the space to be queried for its settings."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the space settings are returned.",
            "schema": {
              "$ref": "#/definitions/SpaceSettings"
            },
            "headers": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing \nfrom the request.",
            "schema": {}
          },
          "404": {
            "description": "Returned if;\n\n- There is no space with the given key.\n- The calling user does not have permission to view the space.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "put": {
        "description": "Updates the settings for a space. Currently only the\n`routeOverrideEnabled` setting can be updated.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\n'Admin' permission for the space.",
        "summary": "Update space settings",
        "tags": [
          "/space"
        ],
        "operationId": "SpaceSettingsBySpaceKeyPut",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "spaceKey",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The key of the space whose settings will be updated."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "The space settings to update.",
            "schema": {
              "$ref": "#/definitions/SpaceSettingsUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if space settings are updated.",
            "schema": {
              "$ref": "#/definitions/SpaceSettings"
            },
            "headers": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing \nfrom the request.",
            "schema": {}
          },
          "404": {
            "description": "Returned if;\n\n- There is no space with the given key.\n- The calling user does not have permission to update the space.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/space/{spaceKey}/property": {
      "get": {
        "description": "Returns all properties for the given space. Space properties are a key-value storage associated with a space.\n\n**[Permissions required](https://confluence.atlassian.com/x/_AozKw)**: ‘View’ permission for the space.",
        "summary": "Get space properties",
        "tags": [
          "/space/{spaceKey}/property"
        ],
        "operationId": "SpacePropertyBySpaceKeyGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "spaceKey",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The key of the space to be queried for its properties."
          },
          {
            "name": "expand",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "version",
                "space"
              ]
            },
            "description": "A multi-value parameter indicating which properties of the space\nproperty to expand. By default, the `version` object is expanded.\n\n- `version` returns information about the version of the content.\n- `space` returns the space that the properties are in."
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "default": 0,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The starting index of the returned objects."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "default": 10,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The maximum number of properties to return per page. Note, this may be\nrestricted by fixed system limits."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested space properties are returned.",
            "schema": {
              "$ref": "#/definitions/SpacePropertyArray"
            },
            "headers": {}
          },
          "404": {
            "description": "Returned if any of the following is true:\n\n- There is no space with the given key.\n- The calling user does not have permission to view the space.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "post": {
        "description": "Creates a new space property.\n\n**[Permissions required](https://confluence.atlassian.com/x/_AozKw)**:\n‘Admin’ permission for the space.",
        "summary": "Create space property",
        "tags": [
          "/space/{spaceKey}/property"
        ],
        "operationId": "SpacePropertyBySpaceKeyPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "spaceKey",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The key of the space that the property will be created in."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "The space property to be created.",
            "schema": {
              "$ref": "#/definitions/SpacePropertyCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the space property is created.",
            "schema": {
              "$ref": "#/definitions/SpaceProperty"
            },
            "headers": {}
          },
          "400": {
            "description": "Returned if any of the following is true:\n\n- The space already has a value with the given key.\n- No property value was provided.",
            "schema": {}
          },
          "403": {
            "description": "Returned if the user does not have 'Admin' permission for the space.",
            "schema": {}
          },
          "413": {
            "description": "Returned if the value for the property is too long.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/space/{spaceKey}/property/{key}": {
      "get": {
        "description": "Returns a space property.\n\n**[Permissions required](https://confluence.atlassian.com/x/_AozKw)**: ‘View’ permission for the space.",
        "summary": "Get space property",
        "tags": [
          "/space/{spaceKey}/property"
        ],
        "operationId": "SpacePropertyBySpaceKeyAndKeyGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "spaceKey",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The key of the space that the property is in."
          },
          {
            "name": "key",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The key of the space property."
          },
          {
            "name": "expand",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "version",
                "space"
              ]
            },
            "description": "A multi-value parameter indicating which properties of the space\nproperty to expand. By default, the `version` object is expanded.\n\n- `version` returns information about the version of the content.\n- `space` returns the space that the properties are in."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested space property is returned.",
            "schema": {
              "$ref": "#/definitions/SpaceProperty"
            },
            "headers": {}
          },
          "404": {
            "description": "Returned if any of the following is true:\n\n- There is no space with the given key.\n- There is no property with the given key.\n- The calling user does not have permission to view the space.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "post": {
        "description": "Creates a new space property. This is the same as `POST\n/space/{spaceKey}/property` but the key for the property is passed as a\npath parameter, rather than in the request body.\n\n**[Permissions required](https://confluence.atlassian.com/x/_AozKw)**:\n‘Admin’ permission for the space.",
        "summary": "Create space property for key",
        "tags": [
          "/space/{spaceKey}/property"
        ],
        "operationId": "SpacePropertyBySpaceKeyAndKeyPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "spaceKey",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The key of the space that the property will be created in."
          },
          {
            "name": "key",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The key of the property to be created."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "The space property to be created.",
            "schema": {
              "$ref": "#/definitions/SpacePropertyCreateNoKey"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the space property is created.",
            "schema": {
              "$ref": "#/definitions/SpaceProperty"
            },
            "headers": {}
          },
          "400": {
            "description": "Returned if any of the following is true:\n\n- The space already has a value with the given key.\n- No property value was provided.",
            "schema": {}
          },
          "403": {
            "description": "Returned if the user does not have the 'Admin' permission for the\nspace.",
            "schema": {}
          },
          "413": {
            "description": "Returned if the value for the property is too long.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "put": {
        "description": "Updates a space property. Note, you cannot update the key of a space\nproperty, only the value.\n\n**[Permissions required](https://confluence.atlassian.com/x/_AozKw)**:\n‘Admin’ permission for the space.",
        "summary": "Update space property",
        "tags": [
          "/space/{spaceKey}/property"
        ],
        "operationId": "SpacePropertyBySpaceKeyAndKeyPut",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "spaceKey",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The key of the space that the property is in."
          },
          {
            "name": "key",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The key of the property to be updated."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "The space property being updated.",
            "schema": {
              "$ref": "#/definitions/SpacePropertyUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the space property is updated.",
            "schema": {
              "$ref": "#/definitions/SpaceProperty"
            },
            "headers": {}
          },
          "400": {
            "description": "Returned if any of the following is true:\n\n- The given property has a different spaceKey to the one in the path.\n- The property has a different key to the one in the path.",
            "schema": {}
          },
          "403": {
            "description": "Returned if the user does not have permission to edit the space with\nthe given spaceKey",
            "schema": {}
          },
          "404": {
            "description": "Returned if any of the following is true:\n\n- There is no space with the given spaceKey\n- There is no property with the given key.\n- The calling user does not have permission to view the space.",
            "schema": {}
          },
          "409": {
            "description": "Returned if the given version is does not match the expected target\nversion of the updated property",
            "schema": {}
          },
          "413": {
            "description": "Returned if the value of the property is too long.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "delete": {
        "description": "Deletes a space property.\n\n**[Permissions required](https://confluence.atlassian.com/x/_AozKw)**:\n‘Admin’ permission for the space.",
        "summary": "Delete space property",
        "tags": [
          "/space/{spaceKey}/property"
        ],
        "operationId": "SpacePropertyBySpaceKeyAndKeyDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "spaceKey",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The key of the space that the property is in."
          },
          {
            "name": "key",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The key of the property to be deleted."
          }
        ],
        "responses": {
          "204": {
            "description": "Returned if the space property is deleted.",
            "headers": {}
          },
          "404": {
            "description": "Returned if any of the following is true:\n\n- There is no space with the given spaceKey\n- There is no property with the given key.\n- The calling user does not have permission to view the space.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/space/{spaceKey}/theme": {
      "get": {
        "description": "Returns the theme selected for a space, if one is set. If no space \ntheme is set, this means that the space is inheriting the global look \nand feel settings.\n\n**[Permissions required](https://confluence.atlassian.com/x/_AozKw)**: ‘View’ permission for the space.",
        "summary": "Get space theme",
        "tags": [
          "/space/{spaceKey}/theme"
        ],
        "operationId": "SpaceThemeBySpaceKeyGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "spaceKey",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The key of the space to be queried for its theme."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested theme is returned.",
            "schema": {
              "$ref": "#/definitions/Theme"
            },
            "headers": {}
          },
          "404": {
            "description": "Returned if any of the following is true:\n\n- There is no space with the given key.\n- The space does not have a theme assigned to it.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "put": {
        "description": "Sets the theme for a space. Note, if you want to reset the space theme to \nthe default Confluence theme, use the 'Reset space theme' method instead \nof this method.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\n'Admin' permission for the space.",
        "summary": "Set space theme",
        "tags": [
          "/space/{spaceKey}/theme"
        ],
        "operationId": "SpaceThemeBySpaceKeyPut",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "spaceKey",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The key of the space to set the theme for."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/ThemeUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the theme was set for the space.",
            "schema": {
              "$ref": "#/definitions/Theme"
            },
            "headers": {}
          },
          "403": {
            "description": "Returned if the theme key is invalid.",
            "schema": {}
          },
          "404": {
            "description": "Returned if there is no space with the given key.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "delete": {
        "description": "Resets the space theme. This means that the space will inherit the \nglobal look and feel settings\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:\n'Admin' permission for the space.",
        "summary": "Reset space theme",
        "tags": [
          "/space/{spaceKey}/theme"
        ],
        "operationId": "SpaceThemeBySpaceKeyDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "spaceKey",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The key of the space to reset the theme for."
          }
        ],
        "responses": {
          "204": {
            "description": "Returned if the theme was reset for the space.",
            "headers": {}
          },
          "404": {
            "description": "Returned if there is no space with the given key.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/template": {
      "post": {
        "description": "Creates a new content template. Note, blueprint templates cannot be created via the REST API.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \n'Admin' permission for the space to create a space template or 'Confluence Administrator' \nglobal permission to create a global template.",
        "summary": "Create content template",
        "tags": [
          "/template"
        ],
        "operationId": "TemplatePost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "The content template to be created.\nThe content body must be in 'storage' format.",
            "schema": {
              "$ref": "#/definitions/ContentTemplateCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the template is created.",
            "schema": {
              "$ref": "#/definitions/ContentTemplate"
            },
            "headers": {}
          },
          "403": {
            "description": "Returned if the calling user does not have permission to create the\ntemplate.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "put": {
        "description": "Updates a content template. Note, blueprint templates cannot be updated\nvia the REST API.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \n'Admin' permission for the space to create a space template or 'Confluence Administrator' \nglobal permission to create a global template.",
        "summary": "Update content template",
        "tags": [
          "/template"
        ],
        "operationId": "TemplatePut",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "The updated content template.",
            "schema": {
              "$ref": "#/definitions/ContentTemplateUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the template is updated.",
            "schema": {
              "$ref": "#/definitions/ContentTemplate"
            },
            "headers": {}
          },
          "403": {
            "description": "Returned if the calling user does not have permission to update the\ntemplate.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/template/blueprint": {
      "get": {
        "description": "Returns all templates provided by blueprints. Use this method to retrieve \nall global blueprint templates or all blueprint templates in a space.\n\nNote, all global blueprints are inherited by each space. Space blueprints \ncan be customised without affecting the global blueprints.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \nPermission to access the Confluence site ('Can use' global permission).",
        "summary": "Get blueprint templates",
        "tags": [
          "/template"
        ],
        "operationId": "TemplateBlueprintGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "spaceKey",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The key of the space to be queried for templates. If the `spaceKey` \nis not specified, global blueprint templates will be returned."
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "default": 0,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The starting index of the returned templates."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "default": 25,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The maximum number of templates to return per page. \nNote, this may be restricted by fixed system limits."
          },
          {
            "name": "expand",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "body"
              ]
            },
            "description": "A multi-value parameter indicating which properties of the template\nto expand.\n\n- `body` returns the content of the template in storage format."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested templates are returned.",
            "schema": {
              "$ref": "#/definitions/BlueprintTemplateArray"
            },
            "headers": {}
          },
          "403": {
            "description": "Returned if the calling user does not have permission to view \nblueprint templates.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/template/page": {
      "get": {
        "description": "Returns all content templates. Use this method to retrieve all global\ncontent templates or all content templates in a space.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \n'Admin' permission for the space to view space templates and 'Confluence \nAdministrator' global permission to view global templates.",
        "summary": "Get content templates",
        "tags": [
          "/template"
        ],
        "operationId": "TemplatePageGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "spaceKey",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The key of the space to be queried for templates. If the `spaceKey` \nis not specified, global templates will be returned."
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "default": 0,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The starting index of the returned templates."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "default": 25,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The maximum number of templates to return per page. \nNote, this may be restricted by fixed system limits."
          },
          {
            "name": "expand",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "body"
              ]
            },
            "description": "A multi-value parameter indicating which properties of the template\nto expand.\n\n- `body` returns the content of the template in storage format."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested templates are returned.",
            "schema": {
              "$ref": "#/definitions/ContentTemplateArray"
            },
            "headers": {}
          },
          "403": {
            "description": "Returned if the calling user does not have permission to view the\ncontent templates.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/template/{contentTemplateId}": {
      "get": {
        "description": "Returns a content template. This includes information about template, \nlike the name, the space or blueprint that the template is in, the body \nof the template, and more.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \n'Admin' permission for the space to view space templates and 'Confluence \nAdministrator' global permission to view global templates.",
        "summary": "Get content template",
        "tags": [
          "/template"
        ],
        "operationId": "TemplateByContentTemplateIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "contentTemplateId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the content template to be returned."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested template is returned.",
            "schema": {
              "$ref": "#/definitions/ContentTemplate"
            },
            "headers": {}
          },
          "403": {
            "description": "Returned if;\n\n- There is no template with the given ID.\n- The calling user does not have permission to view the template.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "delete": {
        "description": "Deletes a template. This results in different actions depending on the \ntype of template:\n\n- If the template is a content template, it is deleted.\n- If the template is a modified space-level blueprint template, it reverts \nto the template inherited from the global-level blueprint template.\n- If the template is a modified global-level blueprint template, it reverts \nto the default global-level blueprint template.\n\n Note, unmodified blueprint templates cannot be deleted.",
        "summary": "Remove template",
        "tags": [
          "/template"
        ],
        "operationId": "TemplateByContentTemplateIdDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "contentTemplateId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the template to be deleted."
          }
        ],
        "responses": {
          "204": {
            "description": "Returned if the template has been successfully been deleted.",
            "headers": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/user": {
      "get": {
        "description": "Returns a user. This includes information about the user, like the\ndisplay name, userKey, account ID, profile picture, and more.\n\nThe `username`, `key`, or `accountId` parameter must be specified, in \norder to identify the user.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \nPermission to access the Confluence site ('Can use' global permission).",
        "summary": "Get user",
        "tags": [
          "/user"
        ],
        "operationId": "UserGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "This parameter has been deprecated due to privacy changes. Use `accountId` instead. See the\n[migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)\nfor details.\n\nThe userKey of the user to be returned. Required, unless the \n`username` or `accountId` is specified. The `key` uniquely identifies \na user in a Confluence instance and does not change."
          },
          {
            "name": "username",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "This parameter has been deprecated due to privacy changes. Use `accountId` instead. See the\n[migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)\nfor details.\n\nThe username of the user to be returned. Required, unless the `key` \nor `accountId` is specified. The `username` uniquely identifies a \nuser in a Confluence instance but can change if the user is renamed."
          },
          {
            "name": "accountId",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The account ID of the user, which uniquely identifies the user across all Atlassian products.\nFor example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`. Required, unless `username` or `userKey` is specified."
          },
          {
            "name": "expand",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "operations",
                "details.personal",
                "details.business",
                "personalSpace"
              ]
            },
            "description": "A multi-value parameter indicating which properties of the user to\nexpand.\n\n  - `operations` returns the operations that the user is allowed to do.\n  - `details.personal` returns the 'Personal' details in the user's profile, like the 'Email' and 'Phone'.\n  Note that these fields have been deprecated due to privacy changes. See the\n  [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)\n  for details.\n  - `details.business` returns the 'Company' details in the user's profile, like the 'Position' and 'Department'.\n  Note that these fields have been deprecated due to privacy changes. See the\n  [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)\n  for details.\n  - personalSpace returns the user's personal space, if it exists."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested user is returned.",
            "schema": {
              "$ref": "#/definitions/User"
            },
            "headers": {}
          },
          "401": {
            "description": "Returned if the authentication credentials are incorrect or missing \nfrom the request.",
            "schema": {}
          },
          "403": {
            "description": "Returned if the calling user does not have permission to view users.",
            "schema": {}
          },
          "404": {
            "description": "Returned if a user with the given username, userkey, or accountId\ndoes not exist.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/user/anonymous": {
      "get": {
        "description": "Returns information about how anonymous users are represented, like the\nprofile picture and display name.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \nPermission to access the Confluence site ('Can use' global permission).",
        "summary": "Get anonymous user",
        "tags": [
          "/user"
        ],
        "operationId": "UserAnonymousGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "operations"
              ]
            },
            "description": "A multi-value parameter indicating which properties of the user to\nexpand.\n\n  - `operations` returns the operations that the user is allowed to do."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the anonymous user representation is returned.",
            "schema": {
              "$ref": "#/definitions/UserAnonymous"
            },
            "headers": {}
          },
          "403": {
            "description": "Returned if the calling user does not have permission to use\nConfluence.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/user/current": {
      "get": {
        "description": "Returns the currently logged-in user. This includes information about\nthe user, like the display name, userKey, account ID, profile picture,\nand more.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \nPermission to access the Confluence site ('Can use' global permission).",
        "summary": "Get current user",
        "tags": [
          "/user"
        ],
        "operationId": "UserCurrentGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "operations",
                "details.personal",
                "details.business",
                "personalSpace"
              ]
            },
            "description": "A multi-value parameter indicating which properties of the user to\nexpand.\n\n  - `operations` returns the operations that the user is allowed to do.\n  - `details.personal` returns the 'Personal' details in the user's profile, like the 'Email' and 'Phone'.\n  Note that these fields have been deprecated due to privacy changes. See the\n  [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)\n  for details.\n  - `details.business` returns the 'Company' details in the user's profile, like the 'Position' and 'Department'.\n  Note that these fields have been deprecated due to privacy changes. See the\n  [migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)\n  for details.\n  - personalSpace returns the user's personal space, if it exists."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the current user is returned.",
            "schema": {
              "$ref": "#/definitions/User"
            },
            "headers": {}
          },
          "403": {
            "description": "Returned if the calling user does not have permission to use\nConfluence.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/user/memberof": {
      "get": {
        "description": "Returns the groups that a user is a member of.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \nPermission to access the Confluence site ('Can use' global permission).",
        "summary": "Get group memberships for user",
        "tags": [
          "/user"
        ],
        "operationId": "UserMemberofGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "This parameter has been deprecated due to privacy changes. Use `accountId` instead. See the\n[migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)\nfor details.\n\nThe userKey of the user. Required, unless the `username` or `accountId` is specified. The `key` uniquely identifies\na user in a Confluence instance and does not change."
          },
          {
            "name": "username",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "This parameter has been deprecated due to privacy changes. Use `accountId` instead. See the\n[migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)\nfor details.\n\nThe username of the user. Required, unless the `key` or `accountId` is specified. The `username` uniquely identifies a\nuser in a Confluence instance but can change if the user is renamed."
          },
          {
            "name": "accountId",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The account ID of the user, which uniquely identifies the user across all Atlassian products.\nFor example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`. Required, unless `username` or `userKey` is specified."
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "default": 0,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The starting index of the returned groups."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "default": 200,
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The maximum number of groups to return per page. \nNote, this may be restricted by fixed system limits."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested groups are returned.",
            "schema": {
              "$ref": "#/definitions/GroupArray"
            },
            "headers": {}
          },
          "403": {
            "description": "Returned if the calling user does not have permission to use\nConfluence.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/user/watch/content/{contentId}": {
      "get": {
        "description": "Returns whether a user is watching a piece of content. Choose the user by \ndoing one of the following:\n\n- Specify a user via a query parameter: Use the `username`, `key`, or `accountId` to identify the user.\nNote that `username` and `key` have been deprecated in favor of `accountId`. See the\n[migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)\nfor details.\n- Do not specify a user: The currently logged-in user will be used.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \n'Confluence Administrator' global permission if specifying a user, otherwise \npermission to access the Confluence site ('Can use' global permission).",
        "summary": "Get content watch status",
        "tags": [
          "/user"
        ],
        "operationId": "UserWatchContentByContentIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "contentId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the content to be queried for whether the specified user is \nwatching it."
          },
          {
            "name": "key",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "This parameter has been deprecated due to privacy changes. Use `accountId` instead. See the\n[migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)\nfor details.\n\nThe `key` of the user to be queried for whether they are watching the \ncontent. Required, unless the `username` or `accountId` is specified."
          },
          {
            "name": "username",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The `username` of the user to be queried for whether they are watching \nthe content. Only one of `username`, `key`, `accountId` can be used to \nidentify the user in the request."
          },
          {
            "name": "accountId",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The `accountId` of the user to be queried for whether they are watching the content. The accountId uniquely\nidentifies the user across all Atlassian products. For example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`.\nRequired, unless `username` or `userKey` is specified."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested watch status is returned.",
            "schema": {
              "$ref": "#/definitions/UserWatch"
            },
            "headers": {}
          },
          "403": {
            "description": "Returned if;\n\n- The calling user does not have permission to view the\ncontent.\n- A user is specified via a query parameter and the calling user is \nnot a Confluence administrator.\n- No content exists for the specified `contentId`.",
            "schema": {}
          },
          "404": {
            "description": "Returned if no `contentId` is specified.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "post": {
        "description": "Adds a user as a watcher to a piece of content. Choose the user by doing \none of the following:\n\n- Specify a user via a query parameter: Use the `username`, `key`, or `accountId` to identify the user.\nNote that `username` and `key` have been deprecated in favor of `accountId`. See the\n[migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)\nfor details.\n- Do not specify a user: The currently logged-in user will be used.\n\nNote, you must add the `X-Atlassian-Token: no-check` header when making a \nrequest, as this operation has XSRF protection.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \n'Confluence Administrator' global permission if specifying a user, otherwise \npermission to access the Confluence site ('Can use' global permission).",
        "summary": "Add content watcher",
        "tags": [
          "/user"
        ],
        "operationId": "UserWatchContentByContentIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "contentId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the content to add the watcher to."
          },
          {
            "name": "key",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "This parameter has been deprecated due to privacy changes. Use `accountId` instead. See the\n[migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)\nfor details.\n\nThe `key` of the user to be added as a watcher. Required, unless the `username` or `accountId` is specified."
          },
          {
            "name": "username",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "This parameter has been deprecated due to privacy changes. Use `accountId` instead. See the\n[migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)\nfor details.\n\nThe `username` of the user to be added as a watcher. Required, unless the `key` or `accountId` is specified."
          },
          {
            "name": "accountId",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The `accountId` of the user to be added as a watcher. The accountId uniquely identifies the user across all Atlassian products.\nFor example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`. Required, unless `username` or `userKey` is specified."
          }
        ],
        "responses": {
          "204": {
            "description": "Returned if the watcher was successfully created. No response body is \nreturned.",
            "headers": {}
          },
          "403": {
            "description": "Returned if;\n\n- The `X-Atlassian-Token: no-check` header is not specified.\n- The calling user does not have permission to view the\ncontent.\n- A user is specified via a query parameter and the calling user is \nnot a Confluence administrator.\n- No content exists for the specified `contentId`.",
            "schema": {}
          },
          "404": {
            "description": "Returned if no `contentId` is specified.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "delete": {
        "description": "Removes a user as a watcher from a piece of content. Choose the user by \ndoing one of the following:\n\n- Specify a user via a query parameter: Use the `username`, `key`, or `accountId` to identify the user.\nNote that `username` and `key` have been deprecated in favor of `accountId`. See the\n[migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)\nfor details.\n- Do not specify a user: The currently logged-in user will be used.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \n'Confluence Administrator' global permission if specifying a user, otherwise \npermission to access the Confluence site ('Can use' global permission).",
        "summary": "Remove content watcher",
        "tags": [
          "/user"
        ],
        "operationId": "UserWatchContentByContentIdDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "contentId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of the content to remove the watcher from."
          },
          {
            "name": "key",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "This parameter has been deprecated due to privacy changes. Use `accountId` instead. See the\n[migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)\nfor details.\n\nThe `key` of the user to be removed as a watcher. Required, unless the `username` or `accountId` is specified."
          },
          {
            "name": "username",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "This parameter has been deprecated due to privacy changes. Use `accountId` instead. See the\n[migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)\nfor details.\n\nThe `username` of the user to be removed as a watcher. Required, unless the `key` or `accountId` is specified."
          },
          {
            "name": "accountId",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The `accountId` of the user to be removed as a watcher. The accountId uniquely identifies the user across all Atlassian products.\nFor example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`. Required, unless `username` or `userKey` is specified."
          }
        ],
        "responses": {
          "204": {
            "description": "Returned if the watcher was successfully deleted. No response body is \nreturned.",
            "headers": {}
          },
          "403": {
            "description": "Returned if;\n\n- The `X-Atlassian-Token: no-check` header is not specified.\n- The calling user does not have permission to view the\ncontent.\n- A user is specified via a query parameter and the calling user is \nnot a Confluence administrator.\n- No content exists for the specified `contentId`.",
            "schema": {}
          },
          "404": {
            "description": "Returned if no `contentId` is specified.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/user/watch/label/{labelName}": {
      "get": {
        "description": "Returns whether a user is watching a label. Choose the user by doing one \nof the following:\n\n- Specify a user via a query parameter: Use the `username`, `key`, or `accountId` to identify the user.\nNote that `username` and `key` have been deprecated in favor of `accountId`. See the\n[migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)\nfor details.\n- Do not specify a user: The currently logged-in user will be used.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \n'Confluence Administrator' global permission if specifying a user, otherwise \npermission to access the Confluence site ('Can use' global permission).",
        "summary": "Get label watch status",
        "tags": [
          "/user"
        ],
        "operationId": "UserWatchLabelByLabelNameGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "labelName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the label to be queried for whether the specified user is \nwatching it."
          },
          {
            "name": "key",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "This parameter has been deprecated due to privacy changes. Use `accountId` instead. See the\n[migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)\nfor details.\n\nThe `key` of the user to be queried for whether they are watching the label. Required, unless the `username` or `accountId` is specified."
          },
          {
            "name": "username",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "This parameter has been deprecated due to privacy changes. Use `accountId` instead. See the\n[migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)\nfor details.\n\nThe `username` of the user to be queried for whether they are watching the label. Required, unless the `key` or `accountId` is specified."
          },
          {
            "name": "accountId",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The `accountId` of the user to be queried for whether they are watching the label. The accountId uniquely identifies\nthe user across all Atlassian products. For example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`.\nRequired, unless `username` or `userKey` is specified."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested watch status is returned.",
            "schema": {
              "$ref": "#/definitions/UserWatch"
            },
            "headers": {}
          },
          "403": {
            "description": "Returned if;\n\n- A user is specified via a query parameter and the calling user is \nnot a Confluence administrator.\n- No label exists for the specified `labelName`.",
            "schema": {}
          },
          "404": {
            "description": "Returned if no `labelName` is specified.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "post": {
        "description": "Adds a user as a watcher to a label. Choose the user by doing one of the \nfollowing:\n\n- Specify a user via a query parameter: Use the `username`, `key`, or `accountId` to identify the user.\nNote that `username` and `key` have been deprecated in favor of `accountId`. See the\n[migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)\nfor details.\n- Do not specify a user: The currently logged-in user will be used.\n\nNote, you must add the `X-Atlassian-Token: no-check` header when making a \nrequest, as this operation has XSRF protection.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \n'Confluence Administrator' global permission if specifying a user, otherwise \npermission to access the Confluence site ('Can use' global permission).",
        "summary": "Add label watcher",
        "tags": [
          "/user"
        ],
        "operationId": "UserWatchLabelByLabelNamePost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "labelName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the label to add the watcher to."
          },
          {
            "name": "key",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "This parameter has been deprecated due to privacy changes. Use `accountId` instead. See the\n[migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)\nfor details.\n\nThe `key` of the user to be added as a watcher. Required, unless the `username` or `accountId` is specified."
          },
          {
            "name": "username",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "This parameter has been deprecated due to privacy changes. Use `accountId` instead. See the\n[migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)\nfor details.\n\nThe `username` of the user to be added as a watcher. Required, unless the `key` or `accountId` is specified."
          },
          {
            "name": "accountId",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The `accountId` of the user to be added as a watcher. The accountId uniquely identifies the user across all Atlassian products.\nFor example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`. Required, unless `username` or `userKey` is specified."
          }
        ],
        "responses": {
          "204": {
            "description": "Returned if the watcher was successfully created. No response body is \nreturned.",
            "headers": {}
          },
          "403": {
            "description": "Returned if;\n\n- The `X-Atlassian-Token: no-check` header is not specified.\n- A user is specified via a query parameter and the calling user is \nnot a Confluence administrator.\n- No label exists for the specified `labelName`.",
            "schema": {}
          },
          "404": {
            "description": "Returned if no `labelName` is specified.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "delete": {
        "description": "Removes a user as a watcher from a label. Choose the user by doing one of \nthe following:\n\n- Specify a user via a query parameter: Use the `username`, `key`, or `accountId` to identify the user.\nNote that `username` and `key` have been deprecated in favor of `accountId`. See the\n[migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)\nfor details.\n- Do not specify a user: The currently logged-in user will be used.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \n'Confluence Administrator' global permission if specifying a user, otherwise \npermission to access the Confluence site ('Can use' global permission).",
        "summary": "Remove label watcher",
        "tags": [
          "/user"
        ],
        "operationId": "UserWatchLabelByLabelNameDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "labelName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the label to remove the watcher from."
          },
          {
            "name": "key",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "This parameter has been deprecated due to privacy changes. Use `accountId` instead. See the\n[migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)\nfor details.\n\nThe `key` of the user to be removed as a watcher. Required, unless the `username` or `accountId` is specified."
          },
          {
            "name": "username",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "This parameter has been deprecated due to privacy changes. Use `accountId` instead. See the\n[migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)\nfor details.\n\nThe `username` of the user to be removed as a watcher. Required, unless the `key` or `accountId` is specified."
          },
          {
            "name": "accountId",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The `accountId` of the user to be removed as a watcher. The accountId uniquely identifies the user across all Atlassian products.\nFor example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`. Required, unless `username` or `userKey` is specified."
          }
        ],
        "responses": {
          "204": {
            "description": "Returned if the watcher was successfully deleted. No response body is \nreturned.",
            "headers": {}
          },
          "403": {
            "description": "Returned if;\n\n- The `X-Atlassian-Token: no-check` header is not specified.\n- A user is specified via a query parameter and the calling user is \nnot a Confluence administrator.\n- No label exists for the specified `labelName`.",
            "schema": {}
          },
          "404": {
            "description": "Returned if no `labelName` is specified.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/user/watch/space/{spaceKey}": {
      "get": {
        "description": "Returns whether a user is watching a space. Choose the user by \ndoing one of the following:\n\n- Specify a user via a query parameter: Use the `username`, `key`, or `accountId` to identify the user.\nNote that `username` and `key` have been deprecated in favor of `accountId`. See the\n[migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)\nfor details.\n- Do not specify a user: The currently logged-in user will be used.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \n'Confluence Administrator' global permission if specifying a user, otherwise \npermission to access the Confluence site ('Can use' global permission).",
        "summary": "Get space watch status",
        "tags": [
          "/user"
        ],
        "operationId": "UserWatchSpaceBySpaceKeyGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "spaceKey",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The key of the space to be queried for whether the specified user is \nwatching it."
          },
          {
            "name": "key",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "This parameter has been deprecated due to privacy changes. Use `accountId` instead. See the\n[migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)\nfor details.\n\nThe `key` of the user to be queried for whether they are watching the space. Required, unless the `username` or `accountId` is specified."
          },
          {
            "name": "username",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "This parameter has been deprecated due to privacy changes. Use `accountId` instead. See the\n[migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)\nfor details.\n\nThe `username` of the user to be queried for whether they are watching the space. Required, unless the `key` or `accountId` is specified."
          },
          {
            "name": "accountId",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The `accountId` of the user to be queried for whether they are watching the space. The accountId uniquely identifies\nthe user across all Atlassian products. For example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`.\nRequired, unless `username` or `userKey` is specified."
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the requested watch status is returned.",
            "schema": {
              "$ref": "#/definitions/UserWatch"
            },
            "headers": {}
          },
          "403": {
            "description": "Returned if;\n\n- The calling user does not have permission to view the\nspace.\n- A user is specified via a query parameter and the calling user is \nnot a Confluence administrator.\n- No space exists for the specified `spaceKey`.",
            "schema": {}
          },
          "404": {
            "description": "Returned if no `spaceKey` is specified.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "post": {
        "description": "Adds a user as a watcher to a space. Choose the user by doing one of the \nfollowing:\n\n- Specify a user via a query parameter: Use the `username`, `key`, or `accountId` to identify the user.\nNote that `username` and `key` have been deprecated in favor of `accountId`. See the\n[migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)\nfor details.\n- Do not specify a user: The currently logged-in user will be used.\n\nNote, you must add the `X-Atlassian-Token: no-check` header when making a \nrequest, as this operation has XSRF protection.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \n'Confluence Administrator' global permission if specifying a user, otherwise \npermission to access the Confluence site ('Can use' global permission).",
        "summary": "Add space watcher",
        "tags": [
          "/user"
        ],
        "operationId": "UserWatchSpaceBySpaceKeyPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "spaceKey",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The key of the space to add the watcher to."
          },
          {
            "name": "key",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "This parameter has been deprecated due to privacy changes. Use `accountId` instead. See the\n[migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)\nfor details.\n\nThe `key` of the user to be added as a watcher. Required, unless the `username` or `accountId` is specified."
          },
          {
            "name": "username",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "This parameter has been deprecated due to privacy changes. Use `accountId` instead. See the\n[migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)\nfor details.\n\nThe `username` of the user to be added as a watcher. Required, unless the `key` or `accountId` is specified."
          },
          {
            "name": "accountId",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The `accountId` of the user to be added as a watcher. The accountId uniquely identifies the user across all\nAtlassian products. For example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`.\nRequired, unless `username` or `userKey` is specified."
          }
        ],
        "responses": {
          "204": {
            "description": "Returned if the watcher was successfully created. No response body is \nreturned.",
            "headers": {}
          },
          "403": {
            "description": "Returned if;\n\n- The `X-Atlassian-Token: no-check` header is not specified.\n- The calling user does not have permission to view the\nspace.\n- A user is specified via a query parameter and the calling user is \nnot a Confluence administrator.\n- No space exists for the specified `spaceKey`.",
            "schema": {}
          },
          "404": {
            "description": "Returned if no `spaceKey` is specified.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      },
      "delete": {
        "description": "Removes a user as a watcher from a space. Choose the user by doing one of \nthe following:\n\n- Specify a user via a query parameter: Use the `username`, `key`, or `accountId` to identify the user.\nNote that `username` and `key` have been deprecated in favor of `accountId`. See the\n[migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)\nfor details.\n- Do not specify a user: The currently logged-in user will be used.\n\n**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**: \n'Confluence Administrator' global permission if specifying a user, otherwise \npermission to access the Confluence site ('Can use' global permission).",
        "summary": "Remove space watch",
        "tags": [
          "/user"
        ],
        "operationId": "UserWatchSpaceBySpaceKeyDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "spaceKey",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The key of the space to remove the watcher from."
          },
          {
            "name": "key",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "This parameter has been deprecated due to privacy changes. Use `accountId` instead. See the\n[migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)\nfor details.\n\nThe `key` of the user to be removed as a watcher. Required, unless the `username` or `accountId` is specified."
          },
          {
            "name": "username",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "This parameter has been deprecated due to privacy changes. Use `accountId` instead. See the\n[migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)\nfor details.\n\nThe `username` of the user to be removed as a watcher. Required, unless the `key` or `accountId` is specified."
          },
          {
            "name": "accountId",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The `accountId` of the user to be removed as a watcher. The accountId uniquely identifies the user across all\nAtlassian products. For example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`.\nRequired, unless `username` or `userKey` is specified."
          }
        ],
        "responses": {
          "204": {
            "description": "Returned if the watcher was successfully deleted. No response body is returned.",
            "headers": {}
          },
          "403": {
            "description": "Returned if;\n\n- The `X-Atlassian-Token: no-check` header is not specified.\n- The calling user does not have permission to view the space.\n- A user is specified via a query parameter and the calling user is \nnot a Confluence administrator.\n- No space exists for the specified `spaceKey`.",
            "schema": {}
          },
          "404": {
            "description": "Returned if no `spaceKey` is specified.",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    },
    "/content/{id}/pagehierarchy/copy": {
      "post": {
        "description": "Copy page hierarchy allows the copying of an entire hierarchy of pages and their associated properties, permissions and attachments.\n The id path parameter refers to the content id of the page to copy, and the new parent of this copied page is defined using the destinationPageId in the request body.\n The titleOptions object defines the rules of renaming page titles during the copy;\n for example, search and replace can be used in conjunction to rewrite the copied page titles.\n\n Response example:\n <pre><code>\n {\n      \"id\" : \"1180606\",\n      \"links\" : {\n           \"status\" : \"/rest/api/longtask/1180606\"\n      }\n }\n </code></pre>\n Use the /longtask/<taskId> REST API to get the copy task status.",
        "summary": "Copy page hierarchy",
        "operationId": "ContentPagehierarchyCopyByIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Request object from json post body",
            "schema": {
              "$ref": "#/definitions/CopyPageHierarchyRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a full JSON representation of a long running task",
            "headers": {}
          },
          "400": {
            "description": "Returned if original page or destination page doesn't exist.",
            "schema": {}
          },
          "403": {
            "description": "Returned if the user does not have permission to create content at destination",
            "schema": {}
          }
        },
        "security": [
          {
            "auth": []
          }
        ]
      }
    }
  },
  "definitions": {
    "AffectedObject": {
      "title": "AffectedObject",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "objectType": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "objectType"
      ]
    },
    "AttachmentUpdate": {
      "title": "AttachmentUpdate",
      "type": "object",
      "properties": {
        "version": {
          "$ref": "#/definitions/Version8"
        },
        "id": {
          "description": "The ID of the attachment to be updated.",
          "type": "string"
        },
        "type": {
          "description": "Set this to `attachment`.",
          "example": "attachment",
          "type": "string",
          "default": "attachment"
        },
        "title": {
          "description": "The updated name of the attachment.",
          "type": "string",
          "maxLength": 255
        },
        "metadata": {
          "$ref": "#/definitions/Metadata"
        },
        "container": {
          "$ref": "#/definitions/Container"
        }
      },
      "required": [
        "version",
        "id",
        "type"
      ]
    },
    "AuditRecord": {
      "title": "AuditRecord",
      "type": "object",
      "properties": {
        "author": {
          "$ref": "#/definitions/Author"
        },
        "remoteAddress": {
          "type": "string"
        },
        "creationDate": {
          "description": "The creation date-time of the audit record, as a timestamp.",
          "type": "integer",
          "format": "int64"
        },
        "summary": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "category": {
          "type": "string"
        },
        "sysAdmin": {
          "type": "boolean"
        },
        "affectedObject": {
          "$ref": "#/definitions/AffectedObject"
        },
        "changedValues": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ChangedValue"
          }
        },
        "associatedObjects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AffectedObject"
          }
        }
      },
      "required": [
        "author",
        "remoteAddress",
        "creationDate",
        "summary",
        "description",
        "category",
        "sysAdmin",
        "affectedObject",
        "changedValues",
        "associatedObjects"
      ]
    },
    "AuditRecordArray": {
      "title": "AuditRecordArray",
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AuditRecord"
          }
        },
        "start": {
          "type": "integer",
          "format": "int32"
        },
        "limit": {
          "type": "integer",
          "format": "int32"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "_links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "results",
        "start",
        "limit",
        "size",
        "_links"
      ]
    },
    "AuditRecordCreate": {
      "title": "AuditRecordCreate",
      "type": "object",
      "properties": {
        "author": {
          "$ref": "#/definitions/Author1"
        },
        "remoteAddress": {
          "description": "The IP address of the computer where the event was initiated from.",
          "type": "string"
        },
        "creationDate": {
          "description": "The creation date-time of the audit record, as a timestamp. This is converted \nto a date-time display in the Confluence UI. If the `creationDate` is not \nspecified, then it will be set to the timestamp for the current date-time.",
          "type": "integer",
          "format": "int64"
        },
        "summary": {
          "description": "The summary of the event, which is displayed in the 'Change' column on \nthe audit log in the Confluence UI.",
          "type": "string"
        },
        "description": {
          "description": "A long description of the event, which is displayed in the 'Description' \nfield on the audit log in the Confluence UI.",
          "type": "string"
        },
        "category": {
          "description": "The category of the event, which is displayed in the 'Event type' column \non the audit log in the Confluence UI.",
          "type": "string"
        },
        "sysAdmin": {
          "description": "Indicates whether the event was actioned by a system administrator.",
          "example": false,
          "type": "boolean",
          "default": false
        },
        "affectedObject": {
          "$ref": "#/definitions/AffectedObject"
        },
        "changedValues": {
          "description": "The values that were changed in the event.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ChangedValue"
          }
        },
        "associatedObjects": {
          "description": "Objects that were associated with the event. For example, if the event \nwas a space permission change then the associated object would be the \nspace.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AffectedObject"
          }
        }
      },
      "required": [
        "remoteAddress"
      ]
    },
    "BlueprintTemplate": {
      "title": "BlueprintTemplate",
      "type": "object",
      "properties": {
        "templateId": {
          "type": "string"
        },
        "originalTemplate": {
          "$ref": "#/definitions/OriginalTemplate"
        },
        "referencingBlueprint": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Label"
          }
        },
        "templateType": {
          "type": "string"
        },
        "body": {
          "$ref": "#/definitions/ContentBody"
        },
        "_expandable": {
          "$ref": "#/definitions/Expandable1"
        },
        "_links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "templateId",
        "originalTemplate",
        "referencingBlueprint",
        "name",
        "description",
        "labels",
        "templateType",
        "_expandable",
        "_links"
      ]
    },
    "BlueprintTemplateArray": {
      "title": "BlueprintTemplateArray",
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BlueprintTemplate"
          }
        },
        "start": {
          "type": "integer",
          "format": "int32"
        },
        "limit": {
          "type": "integer",
          "format": "int32"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "_links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "results",
        "start",
        "limit",
        "size",
        "_links"
      ]
    },
    "ButtonLookAndFeel": {
      "title": "ButtonLookAndFeel",
      "type": "object",
      "properties": {
        "backgroundColor": {
          "type": "string"
        },
        "color": {
          "type": "string"
        }
      },
      "required": [
        "backgroundColor",
        "color"
      ]
    },
    "Breadcrumb": {
      "title": "Breadcrumb",
      "type": "object",
      "properties": {
        "label": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "separator": {
          "type": "string"
        }
      },
      "required": [
        "label",
        "url",
        "separator"
      ]
    },
    "ChangedValue": {
      "title": "ChangedValue",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "oldValue": {
          "type": "string"
        },
        "newValue": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "oldValue",
        "newValue"
      ]
    },
    "ContainerLookAndFeel": {
      "title": "ContainerLookAndFeel",
      "type": "object",
      "properties": {
        "background": {
          "type": "string"
        },
        "backgroundColor": {
          "type": "string"
        },
        "backgroundImage": {
          "type": "string"
        },
        "backgroundSize": {
          "type": "string"
        },
        "padding": {
          "type": "string"
        },
        "borderRadius": {
          "type": "string"
        }
      },
      "required": [
        "background",
        "backgroundColor",
        "backgroundImage",
        "backgroundSize",
        "padding",
        "borderRadius"
      ]
    },
    "ContainerSummary": {
      "title": "ContainerSummary",
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "displayUrl": {
          "type": "string"
        }
      },
      "required": [
        "title",
        "displayUrl"
      ]
    },
    "Content": {
      "title": "Content",
      "description": "Base object for all content types.",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "space": {
          "$ref": "#/definitions/Space"
        },
        "history": {
          "$ref": "#/definitions/ContentHistory"
        },
        "version": {
          "$ref": "#/definitions/Version"
        },
        "ancestors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Content"
          }
        },
        "operations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OperationCheckResult"
          }
        },
        "children": {
          "$ref": "#/definitions/ContentChildren"
        },
        "childTypes": {
          "$ref": "#/definitions/ContentChildType"
        },
        "descendants": {
          "$ref": "#/definitions/ContentChildren"
        },
        "container": {
          "description": "Container for content. This can be either a space (containing a page or blogpost) \nor a page/blog post (containing an attachment or comment)",
          "type": "object"
        },
        "body": {
          "$ref": "#/definitions/Body"
        },
        "restrictions": {
          "$ref": "#/definitions/Restrictions"
        },
        "_expandable": {
          "$ref": "#/definitions/Expandable12"
        },
        "_links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "type",
        "status",
        "title",
        "_expandable"
      ]
    },
    "ContentArray": {
      "title": "ContentArray",
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Content"
          }
        },
        "start": {
          "type": "integer",
          "format": "int32"
        },
        "limit": {
          "type": "integer",
          "format": "int32"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "_links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "results",
        "start",
        "limit",
        "size",
        "_links"
      ]
    },
    "ContentAttachment": {
      "title": "ContentAttachment",
      "description": "Representation of an attachment (content)",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/Metadata2"
        },
        "extensions": {
          "$ref": "#/definitions/Extensions"
        },
        "_links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "metadata",
        "extensions",
        "_links"
      ]
    },
    "ContentBlogpost": {
      "title": "ContentBlogpost",
      "description": "Representation of a blogpost (content)",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/ContentMetadata"
        },
        "_links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "metadata",
        "_links"
      ]
    },
    "ContentBlueprintDraft": {
      "title": "ContentBlueprintDraft",
      "type": "object",
      "properties": {
        "version": {
          "$ref": "#/definitions/Version2"
        },
        "title": {
          "description": "The title of the content. If you don't want to change the title, \nset this to the current title of the draft.",
          "type": "string",
          "maxLength": 255
        },
        "type": {
          "description": "The type of content. Set this to `page`.",
          "example": "page",
          "type": "string",
          "default": "page"
        },
        "status": {
          "$ref": "#/definitions/Status"
        },
        "space": {
          "$ref": "#/definitions/Space1"
        },
        "ancestors": {
          "description": "The new ancestor (i.e. parent page) for the content. If you have \nspecified an ancestor, you must also specify a `space` property \nin the request body for the space that the ancestor is in.\n\nNote, if you specify more than one ancestor, the last ID in the array \nwill be selected as the parent page for the content.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Ancestor"
          }
        }
      },
      "required": [
        "version",
        "title",
        "type"
      ]
    },
    "ContentBody": {
      "title": "ContentBody",
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        },
        "representation": {
          "$ref": "#/definitions/Representation"
        },
        "embeddedContent": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EmbeddedContent"
          }
        },
        "webresource": {
          "$ref": "#/definitions/WebResourceDependencies"
        },
        "_expandable": {
          "$ref": "#/definitions/Expandable"
        }
      },
      "required": [
        "value",
        "representation",
        "_expandable"
      ]
    },
    "ContentBodyCreate": {
      "title": "ContentBodyCreate",
      "description": "This object is used when creating or updating content.",
      "type": "object",
      "properties": {
        "value": {
          "description": "The body of the content in the relevant format.",
          "type": "string"
        },
        "representation": {
          "$ref": "#/definitions/Representation2"
        }
      },
      "required": [
        "value",
        "representation"
      ]
    },
    "ContentChildren": {
      "title": "ContentChildren",
      "type": "object",
      "properties": {
        "attachment": {
          "$ref": "#/definitions/ContentArray"
        },
        "comment": {
          "$ref": "#/definitions/ContentArray"
        },
        "page": {
          "$ref": "#/definitions/ContentArray"
        },
        "_expandable": {
          "$ref": "#/definitions/Expandable7"
        },
        "_links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "_expandable",
        "_links"
      ]
    },
    "ContentChildType": {
      "title": "ContentChildType",
      "description": "Shows whether a piece of content has attachments, comments, or child pages.\nNote, this doesn't actually contain the child objects.",
      "type": "object",
      "properties": {
        "attachment": {
          "$ref": "#/definitions/Attachment"
        },
        "comment": {
          "$ref": "#/definitions/Comment"
        },
        "page": {
          "$ref": "#/definitions/Page"
        },
        "_expandable": {
          "$ref": "#/definitions/Expandable8"
        }
      },
      "required": [
        "_expandable"
      ]
    },
    "ContentComment": {
      "title": "ContentComment",
      "description": "Representation of a comment (content)",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/ContentMetadata"
        },
        "extensions": {
          "$ref": "#/definitions/Extensions1"
        },
        "_links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "metadata",
        "extensions",
        "_links"
      ]
    },
    "ContentCreate": {
      "title": "ContentCreate",
      "type": "object",
      "properties": {
        "id": {
          "description": "The ID of the draft content. Required when publishing a draft.",
          "type": "string"
        },
        "title": {
          "type": "string",
          "maxLength": 255
        },
        "type": {
          "$ref": "#/definitions/Type1"
        },
        "space": {
          "$ref": "#/definitions/Space2"
        },
        "status": {
          "$ref": "#/definitions/Status1"
        },
        "ancestors": {
          "description": "The parent content of the new content. Only one parent content \n`id` can be specified.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Ancestor1"
          }
        },
        "body": {
          "$ref": "#/definitions/Body1"
        }
      },
      "required": [
        "title",
        "type",
        "space",
        "body"
      ]
    },
    "ContentHistory": {
      "title": "ContentHistory",
      "type": "object",
      "properties": {
        "latest": {
          "type": "boolean"
        },
        "createdBy": {
          "$ref": "#/definitions/User"
        },
        "createdDate": {
          "type": "string",
          "format": "date-time"
        },
        "lastUpdated": {
          "$ref": "#/definitions/Version"
        },
        "previousVersion": {
          "$ref": "#/definitions/Version"
        },
        "contributors": {
          "$ref": "#/definitions/Contributors"
        },
        "nextVersion": {
          "$ref": "#/definitions/Version"
        },
        "_expandable": {
          "$ref": "#/definitions/Expandable6"
        },
        "_links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "latest",
        "createdBy",
        "createdDate"
      ]
    },
    "ContentLookAndFeel": {
      "title": "ContentLookAndFeel",
      "type": "object",
      "properties": {
        "screen": {
          "$ref": "#/definitions/ScreenLookAndFeel"
        },
        "container": {
          "$ref": "#/definitions/ContainerLookAndFeel"
        },
        "header": {
          "$ref": "#/definitions/ContainerLookAndFeel"
        },
        "body": {
          "$ref": "#/definitions/ContainerLookAndFeel"
        }
      },
      "required": [
        "screen",
        "container",
        "header",
        "body"
      ]
    },
    "ContentMetadata": {
      "title": "ContentMetadata",
      "description": "Metadata object for page, blogpost, comment content",
      "type": "object",
      "properties": {
        "currentuser": {
          "$ref": "#/definitions/Currentuser"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "frontend": {
          "type": "object"
        },
        "labels": {
          "$ref": "#/definitions/LabelArray"
        }
      }
    },
    "ContentPage": {
      "title": "ContentPage",
      "description": "Representation of a page (content)",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/ContentMetadata"
        },
        "extensions": {
          "$ref": "#/definitions/Extensions"
        },
        "_links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "metadata",
        "extensions",
        "_links"
      ]
    },
    "ContentProperty": {
      "title": "ContentProperty",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "key": {
          "type": "string"
        },
        "value": {
          "description": "The value of the content property. This can be empty or a complex object.",
          "type": "object"
        },
        "version": {
          "$ref": "#/definitions/Version3"
        },
        "content": {
          "$ref": "#/definitions/Content"
        },
        "_links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "key",
        "value",
        "_links"
      ]
    },
    "ContentPropertyArray": {
      "title": "ContentPropertyArray",
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContentProperty"
          }
        },
        "start": {
          "type": "integer",
          "format": "int32"
        },
        "limit": {
          "type": "integer",
          "format": "int32"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "_links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "results",
        "start",
        "limit",
        "size",
        "_links"
      ]
    },
    "ContentPropertyCreate": {
      "title": "ContentPropertyCreate",
      "type": "object",
      "properties": {
        "key": {
          "description": "The key of the new property.",
          "type": "string",
          "maxLength": 255
        },
        "value": {
          "description": "The value of the property. This can be empty or a complex object. \nFor example,\n```\n\"value\": {\n  \"example1\": \"value\",\n  \"example2\": true,\n  \"example3\": 123\n}\n```",
          "type": "object"
        }
      },
      "required": [
        "key",
        "value"
      ]
    },
    "ContentPropertyCreateNoKey": {
      "title": "ContentPropertyCreateNoKey",
      "type": "object",
      "properties": {
        "value": {
          "description": "The value of the property. This can be empty or a complex object. \nFor example,\n```\n\"value\": {\n  \"example1\": \"value\",\n  \"example2\": true,\n  \"example3\": 123\n}\n```",
          "type": "object"
        }
      },
      "required": [
        "value"
      ]
    },
    "ContentPropertyUpdate": {
      "title": "ContentPropertyUpdate",
      "type": "object",
      "properties": {
        "value": {
          "description": "The value of the property.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "version": {
          "$ref": "#/definitions/Version4"
        }
      },
      "required": [
        "value",
        "version"
      ]
    },
    "ContentRestriction": {
      "title": "ContentRestriction",
      "type": "object",
      "properties": {
        "operation": {
          "$ref": "#/definitions/Operation1"
        },
        "restrictions": {
          "$ref": "#/definitions/Restrictions1"
        },
        "content": {
          "$ref": "#/definitions/Content"
        },
        "_expandable": {
          "$ref": "#/definitions/Expandable11"
        },
        "_links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "operation",
        "_expandable",
        "_links"
      ]
    },
    "ContentRestrictionArray": {
      "title": "ContentRestrictionArray",
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContentRestriction"
          }
        },
        "start": {
          "type": "integer",
          "format": "int32"
        },
        "limit": {
          "type": "integer",
          "format": "int32"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "restrictionsHash": {
          "description": "This property is used by the UI to figure out whether a set of restrictions \nhas changed.",
          "type": "string"
        },
        "_links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "results",
        "start",
        "limit",
        "size",
        "restrictionsHash",
        "_links"
      ]
    },
    "ContentRestrictionUpdate": {
      "title": "ContentRestrictionUpdate",
      "type": "object",
      "properties": {
        "operation": {
          "$ref": "#/definitions/Operation2"
        },
        "restrictions": {
          "$ref": "#/definitions/Restrictions2"
        }
      },
      "required": [
        "operation",
        "restrictions"
      ]
    },
    "ContentTemplate": {
      "title": "ContentTemplate",
      "type": "object",
      "properties": {
        "templateId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Label"
          }
        },
        "templateType": {
          "type": "string"
        },
        "body": {
          "$ref": "#/definitions/ContentBody"
        },
        "_expandable": {
          "$ref": "#/definitions/Expandable1"
        },
        "_links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "templateId",
        "name",
        "description",
        "labels",
        "templateType",
        "_expandable",
        "_links"
      ]
    },
    "ContentTemplateArray": {
      "title": "ContentTemplateArray",
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContentTemplate"
          }
        },
        "start": {
          "type": "integer",
          "format": "int32"
        },
        "limit": {
          "type": "integer",
          "format": "int32"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "_links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "results",
        "start",
        "limit",
        "size",
        "_links"
      ]
    },
    "ContentTemplateCreate": {
      "title": "ContentTemplateCreate",
      "description": "This object is used to create content templates.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the new template.",
          "type": "string"
        },
        "templateType": {
          "description": "The type of the new template. Set to `page`.",
          "type": "string"
        },
        "body": {
          "$ref": "#/definitions/ContentBodyCreate"
        },
        "description": {
          "description": "A description of the new template.",
          "type": "string",
          "maxLength": 255
        },
        "labels": {
          "description": "Labels for the new template.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Label"
          }
        },
        "space": {
          "$ref": "#/definitions/Space3"
        }
      },
      "required": [
        "name",
        "templateType",
        "body"
      ]
    },
    "ContentTemplateUpdate": {
      "title": "ContentTemplateUpdate",
      "description": "This object is used to update content templates.",
      "type": "object",
      "properties": {
        "templateId": {
          "description": "The ID of the template being updated.",
          "type": "string"
        },
        "name": {
          "description": "The name of the template. Set to the current `name` if this field is \nnot being updated.",
          "type": "string"
        },
        "templateType": {
          "description": "The type of the template. Set to `page`.",
          "example": "page",
          "type": "string",
          "default": "page"
        },
        "body": {
          "$ref": "#/definitions/ContentBodyCreate"
        },
        "description": {
          "description": "A description of the template.",
          "type": "string",
          "maxLength": 100
        },
        "labels": {
          "description": "Labels for the template.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Label"
          }
        },
        "space": {
          "$ref": "#/definitions/Space4"
        }
      },
      "required": [
        "templateId",
        "name",
        "templateType",
        "body"
      ]
    },
    "ContentUpdate": {
      "title": "ContentUpdate",
      "type": "object",
      "properties": {
        "version": {
          "$ref": "#/definitions/Version5"
        },
        "title": {
          "description": "The updated title of the content. If you are not changing this field, set this to the current `title`.",
          "type": "string",
          "maxLength": 255
        },
        "type": {
          "$ref": "#/definitions/Type3"
        },
        "status": {
          "$ref": "#/definitions/Status2"
        },
        "ancestors": {
          "description": "The new parent for the content. Only one parent content 'id' can be specified.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Ancestor1"
          }
        },
        "body": {
          "$ref": "#/definitions/Body2"
        }
      },
      "required": [
        "version",
        "title",
        "type"
      ]
    },
    "CopyPageHierarchyRequest": {
      "title": "CopyPageHierarchyRequest",
      "type": "object",
      "properties": {
        "copyAttachments": {
          "type": "boolean"
        },
        "copyPermissions": {
          "type": "boolean"
        },
        "copyProperties": {
          "type": "boolean"
        },
        "copyLabels": {
          "type": "boolean"
        },
        "originalPageId": {
          "type": "string"
        },
        "destinationPageId": {
          "type": "string"
        },
        "titleOptions": {
          "$ref": "#/definitions/CopyPageHierarchyTitleOptions"
        }
      }
    },
    "CopyPageHierarchyTitleOptions": {
      "title": "CopyPageHierarchyTitleOptions",
      "type": "object",
      "properties": {
        "prefix": {
          "type": "string"
        },
        "replace": {
          "type": "string"
        },
        "search": {
          "type": "string"
        }
      }
    },
    "EmbeddedContent": {
      "title": "EmbeddedContent",
      "type": "object",
      "properties": {
        "entityId": {
          "type": "integer",
          "format": "int64"
        },
        "entity": {
          "type": "object"
        }
      }
    },
    "Group": {
      "title": "Group",
      "type": "object",
      "properties": {
        "type": {
          "example": "group",
          "type": "string",
          "default": "group"
        },
        "name": {
          "type": "string"
        },
        "_links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "type",
        "name",
        "_links"
      ]
    },
    "GroupArray": {
      "title": "GroupArray",
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Group"
          }
        },
        "start": {
          "type": "integer",
          "format": "int32"
        },
        "limit": {
          "type": "integer",
          "format": "int32"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "results",
        "start",
        "limit",
        "size"
      ]
    },
    "GroupArrayWithLinks": {
      "title": "GroupArrayWithLinks",
      "description": "Same as GroupArray but with `_links` property.",
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Group"
          }
        },
        "start": {
          "type": "integer",
          "format": "int32"
        },
        "limit": {
          "type": "integer",
          "format": "int32"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "_links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "results",
        "start",
        "limit",
        "size",
        "_links"
      ]
    },
    "HeaderLookAndFeel": {
      "title": "HeaderLookAndFeel",
      "type": "object",
      "properties": {
        "backgroundColor": {
          "type": "string"
        },
        "button": {
          "$ref": "#/definitions/ButtonLookAndFeel"
        },
        "primaryNavigation": {
          "$ref": "#/definitions/NavigationLookAndFeel"
        },
        "secondaryNavigation": {
          "$ref": "#/definitions/NavigationLookAndFeel"
        },
        "search": {
          "$ref": "#/definitions/SearchFieldLookAndFeel"
        }
      },
      "required": [
        "backgroundColor",
        "button",
        "primaryNavigation",
        "secondaryNavigation",
        "search"
      ]
    },
    "Icon": {
      "title": "Icon",
      "description": "This object represents an icon. If used as a profilePicture, this may be returned as null, depending on the user's privacy setting.",
      "type": "object",
      "properties": {
        "path": {
          "type": "string"
        },
        "width": {
          "type": "integer",
          "format": "int32"
        },
        "height": {
          "type": "integer",
          "format": "int32"
        },
        "isDefault": {
          "type": "boolean"
        }
      },
      "required": [
        "path",
        "width",
        "height",
        "isDefault"
      ]
    },
    "Label": {
      "title": "Label",
      "type": "object",
      "properties": {
        "prefix": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "label": {
          "type": "string"
        }
      },
      "required": [
        "prefix",
        "name",
        "id",
        "label"
      ]
    },
    "LabelArray": {
      "title": "LabelArray",
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Label"
          }
        },
        "start": {
          "type": "integer",
          "format": "int32"
        },
        "limit": {
          "type": "integer",
          "format": "int32"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "_links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "results",
        "start",
        "limit",
        "size",
        "_links"
      ]
    },
    "LabelCreate": {
      "title": "LabelCreate",
      "type": "object",
      "properties": {
        "prefix": {
          "$ref": "#/definitions/Prefix"
        },
        "name": {
          "description": "The name of the label, which will be shown in the UI.",
          "type": "string"
        }
      },
      "required": [
        "prefix",
        "name"
      ]
    },
    "LookAndFeel": {
      "title": "LookAndFeel",
      "type": "object",
      "properties": {
        "headings": {
          "$ref": "#/definitions/Headings"
        },
        "links": {
          "$ref": "#/definitions/Links"
        },
        "menus": {
          "$ref": "#/definitions/MenusLookAndFeel"
        },
        "header": {
          "$ref": "#/definitions/HeaderLookAndFeel"
        },
        "content": {
          "$ref": "#/definitions/ContentLookAndFeel"
        },
        "bordersAndDividers": {
          "$ref": "#/definitions/BordersAndDividers"
        }
      },
      "required": [
        "headings",
        "links",
        "menus",
        "header",
        "content",
        "bordersAndDividers"
      ]
    },
    "LookAndFeelUpdated": {
      "title": "LookAndFeelUpdated",
      "description": "Look and feel settings returned after an update.",
      "type": "object",
      "properties": {
        "headings": {
          "$ref": "#/definitions/Headings"
        },
        "links": {
          "$ref": "#/definitions/Links"
        },
        "menus": {
          "$ref": "#/definitions/MenusLookAndFeel"
        },
        "header": {
          "$ref": "#/definitions/HeaderLookAndFeel"
        },
        "content": {
          "$ref": "#/definitions/ContentLookAndFeel"
        },
        "bordersAndDividers": {
          "$ref": "#/definitions/BordersAndDividers"
        }
      },
      "required": [
        "headings",
        "links",
        "menus",
        "header",
        "content",
        "bordersAndDividers"
      ]
    },
    "LookAndFeelSettings": {
      "title": "LookAndFeelSettings",
      "type": "object",
      "properties": {
        "selected": {
          "$ref": "#/definitions/Selected"
        },
        "global": {
          "$ref": "#/definitions/LookAndFeel"
        },
        "theme": {
          "$ref": "#/definitions/LookAndFeel"
        },
        "custom": {
          "$ref": "#/definitions/LookAndFeel"
        }
      },
      "required": [
        "selected",
        "global",
        "custom"
      ]
    },
    "LookAndFeelType": {
      "title": "LookAndFeelType",
      "description": "The object for choosing the look and feel settings for the site or a space.",
      "type": "object",
      "properties": {
        "selected": {
          "$ref": "#/definitions/Selected1"
        },
        "global": {
          "$ref": "#/definitions/LookAndFeel"
        },
        "custom": {
          "$ref": "#/definitions/LookAndFeel"
        }
      },
      "required": [
        "selected"
      ]
    },
    "LongTaskStatus": {
      "title": "LongTaskStatus",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "$ref": "#/definitions/Name"
        },
        "elapsedTime": {
          "type": "integer",
          "format": "int64"
        },
        "percentageComplete": {
          "type": "integer",
          "format": "int32"
        },
        "successful": {
          "type": "boolean"
        },
        "messages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Message"
          }
        }
      },
      "required": [
        "id",
        "name",
        "elapsedTime",
        "percentageComplete",
        "successful",
        "messages"
      ]
    },
    "LongTaskStatusArray": {
      "title": "LongTaskStatusArray",
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LongTaskStatus"
          }
        },
        "start": {
          "type": "integer",
          "format": "int32"
        },
        "limit": {
          "type": "integer",
          "format": "int32"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "_links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "results",
        "start",
        "limit",
        "size",
        "_links"
      ]
    },
    "LongTaskStatusWithLinks": {
      "title": "LongTaskStatusWithLinks",
      "description": "Same as LongTaskStatus but with `_links` property.",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "$ref": "#/definitions/Name"
        },
        "elapsedTime": {
          "type": "integer",
          "format": "int64"
        },
        "percentageComplete": {
          "type": "integer",
          "format": "int32"
        },
        "successful": {
          "type": "boolean"
        },
        "messages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Message"
          }
        },
        "_links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "name",
        "elapsedTime",
        "percentageComplete",
        "successful",
        "messages",
        "_links"
      ]
    },
    "MacroInstance": {
      "title": "MacroInstance",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "body": {
          "type": "string"
        },
        "parameters": {
          "type": "object"
        },
        "_links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "MenusLookAndFeel": {
      "title": "MenusLookAndFeel",
      "type": "object",
      "properties": {
        "hoverOrFocus": {
          "$ref": "#/definitions/HoverOrFocus"
        },
        "color": {
          "type": "string"
        }
      },
      "required": [
        "hoverOrFocus",
        "color"
      ]
    },
    "Message": {
      "title": "Message",
      "type": "object",
      "properties": {
        "translation": {
          "type": "string"
        },
        "args": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      },
      "required": [
        "translation",
        "args"
      ]
    },
    "NavigationLookAndFeel": {
      "title": "NavigationLookAndFeel",
      "type": "object",
      "properties": {
        "color": {
          "type": "string"
        },
        "hoverOrFocus": {
          "$ref": "#/definitions/ButtonLookAndFeel"
        }
      },
      "required": [
        "color",
        "hoverOrFocus"
      ]
    },
    "OperationCheckResult": {
      "title": "OperationCheckResult",
      "description": "An operation and the target entity that it applies to, e.g. create page.",
      "type": "object",
      "properties": {
        "operation": {
          "$ref": "#/definitions/Operation"
        },
        "targetType": {
          "$ref": "#/definitions/TargetType"
        }
      },
      "required": [
        "operation",
        "targetType"
      ]
    },
    "Relation": {
      "title": "Relation",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "relationData": {
          "$ref": "#/definitions/RelationData"
        },
        "source": {
          "type": "object"
        },
        "target": {
          "type": "object"
        },
        "_expandable": {
          "$ref": "#/definitions/Expandable14"
        },
        "_links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "name",
        "_expandable",
        "_links"
      ]
    },
    "RelationArray": {
      "title": "RelationArray",
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Relation"
          }
        },
        "start": {
          "type": "integer",
          "format": "int32"
        },
        "limit": {
          "type": "integer",
          "format": "int32"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "_links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "results",
        "start",
        "limit",
        "size",
        "_links"
      ]
    },
    "RelationData": {
      "title": "RelationData",
      "type": "object",
      "properties": {
        "createdBy": {
          "$ref": "#/definitions/User"
        },
        "createdDate": {
          "type": "string",
          "format": "date-time"
        },
        "friendlyCreatedDate": {
          "type": "string"
        }
      }
    },
    "RetentionPeriod": {
      "title": "RetentionPeriod",
      "type": "object",
      "properties": {
        "number": {
          "description": "The number of units for the retention period.",
          "type": "integer",
          "format": "int32"
        },
        "units": {
          "$ref": "#/definitions/Units"
        }
      },
      "required": [
        "number",
        "units"
      ]
    },
    "ScreenLookAndFeel": {
      "title": "ScreenLookAndFeel",
      "type": "object",
      "properties": {
        "background": {
          "type": "string"
        },
        "backgroundColor": {
          "type": "string"
        },
        "backgroundImage": {
          "type": "string"
        },
        "backgroundSize": {
          "type": "string"
        },
        "gutterTop": {
          "type": "string"
        },
        "gutterRight": {
          "type": "string"
        },
        "gutterBottom": {
          "type": "string"
        },
        "gutterLeft": {
          "type": "string"
        }
      },
      "required": [
        "background",
        "backgroundColor",
        "backgroundImage",
        "backgroundSize",
        "gutterTop",
        "gutterRight",
        "gutterBottom",
        "gutterLeft"
      ]
    },
    "SearchFieldLookAndFeel": {
      "title": "SearchFieldLookAndFeel",
      "type": "object",
      "properties": {
        "backgroundColor": {
          "type": "string"
        },
        "color": {
          "type": "string"
        }
      },
      "required": [
        "backgroundColor",
        "color"
      ]
    },
    "SearchPageResponseSearchResult": {
      "title": "SearchPageResponseSearchResult",
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SearchResult"
          }
        },
        "start": {
          "type": "integer",
          "format": "int32"
        },
        "limit": {
          "type": "integer",
          "format": "int32"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "totalSize": {
          "type": "integer",
          "format": "int32"
        },
        "cqlQuery": {
          "type": "string"
        },
        "searchDuration": {
          "type": "integer",
          "format": "int32"
        },
        "_links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "results",
        "start",
        "limit",
        "size",
        "totalSize",
        "cqlQuery",
        "searchDuration",
        "_links"
      ]
    },
    "SearchResult": {
      "title": "SearchResult",
      "type": "object",
      "properties": {
        "content": {
          "$ref": "#/definitions/Content"
        },
        "title": {
          "type": "string"
        },
        "excerpt": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "resultParentContainer": {
          "$ref": "#/definitions/ContainerSummary"
        },
        "resultGlobalContainer": {
          "$ref": "#/definitions/ContainerSummary"
        },
        "breadcrumbs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Breadcrumb"
          }
        },
        "entityType": {
          "type": "string"
        },
        "iconCssClass": {
          "type": "string"
        },
        "lastModified": {
          "type": "string",
          "format": "date-time"
        },
        "friendlyLastModified": {
          "type": "string"
        }
      },
      "required": [
        "content",
        "title",
        "excerpt",
        "url",
        "resultParentContainer",
        "resultGlobalContainer",
        "breadcrumbs",
        "entityType",
        "iconCssClass",
        "lastModified",
        "friendlyLastModified"
      ]
    },
    "Space": {
      "title": "Space",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "key": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "icon": {
          "$ref": "#/definitions/Icon"
        },
        "description": {
          "$ref": "#/definitions/Description"
        },
        "homepage": {
          "$ref": "#/definitions/Content"
        },
        "type": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/Metadata1"
        },
        "operations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OperationCheckResult"
          }
        },
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SpacePermission"
          }
        },
        "status": {
          "type": "string"
        },
        "settings": {
          "$ref": "#/definitions/SpaceSettings"
        },
        "theme": {
          "$ref": "#/definitions/Theme"
        },
        "lookAndFeel": {
          "$ref": "#/definitions/LookAndFeel"
        },
        "history": {
          "$ref": "#/definitions/History"
        },
        "_expandable": {
          "$ref": "#/definitions/Expandable4"
        },
        "_links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "key",
        "name",
        "type",
        "status",
        "_expandable",
        "_links"
      ]
    },
    "SpaceArray": {
      "title": "SpaceArray",
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Space"
          }
        },
        "start": {
          "type": "integer",
          "format": "int32"
        },
        "limit": {
          "type": "integer",
          "format": "int32"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "_links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "results",
        "start",
        "limit",
        "size",
        "_links"
      ]
    },
    "SpaceCreate": {
      "title": "SpaceCreate",
      "description": "This is the request object used when creating a new space.",
      "type": "object",
      "properties": {
        "key": {
          "description": "The key for the new space. Format: See [Space\nkeys](https://confluence.atlassian.com/x/lqNMMQ).",
          "type": "string"
        },
        "name": {
          "description": "The name of the new space.",
          "type": "string",
          "maxLength": 200
        },
        "description": {
          "$ref": "#/definitions/SpaceDescriptionCreate"
        },
        "permissions": {
          "description": "The permissions for the new space. If no permissions are provided, the \n[Confluence default space permissions](https://confluence.atlassian.com/x/UAgzKw#CreateaSpace-Spacepermissions)\nare applied. Note, for security reasons, permissions cannot be changed\nvia the API after the space has been created, and must be changed via\nthe user interface instead.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SpacePermission"
          }
        }
      },
      "required": [
        "key",
        "name"
      ]
    },
    "SpaceDescription": {
      "title": "SpaceDescription",
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        },
        "representation": {
          "$ref": "#/definitions/Representation1"
        },
        "embeddedContent": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      },
      "required": [
        "value",
        "representation",
        "embeddedContent"
      ]
    },
    "SpaceDescriptionCreate": {
      "title": "SpaceDescriptionCreate",
      "description": "The description of the new/updated space. Note, only the 'plain' representation \ncan be used for the description when creating or updating a space.",
      "type": "object",
      "properties": {
        "plain": {
          "$ref": "#/definitions/Plain"
        }
      },
      "required": [
        "plain"
      ]
    },
    "SpacePermission": {
      "title": "SpacePermission",
      "description": "This object represents the permissions for a space. Permissions consist of \nat least one operation object with an accompanying subjects object.\n\nThe following combinations of `operation` and `targetType` values are \nvalid for the `operation` object:\n\n  - 'create': 'page', 'blogpost', 'comment', 'attachment'\n  - 'read': 'space'\n  - 'delete': 'page', 'blogpost', 'comment', 'attachment'\n  - 'export': 'space'\n  - 'administer': 'space'",
      "type": "object",
      "properties": {
        "subjects": {
          "$ref": "#/definitions/Subjects"
        },
        "operation": {
          "$ref": "#/definitions/OperationCheckResult"
        },
        "anonymousAccess": {
          "description": "Grant anonymous users permission to use the operation.",
          "example": false,
          "type": "boolean",
          "default": "false"
        },
        "unlicensedAccess": {
          "description": "Grants access to unlicensed users from JIRA Service Desk when used\nwith the 'read space' operation.",
          "example": false,
          "type": "boolean",
          "default": "false"
        }
      },
      "required": [
        "subjects",
        "operation",
        "anonymousAccess",
        "unlicensedAccess"
      ]
    },
    "SpacePrivateCreate": {
      "title": "SpacePrivateCreate",
      "description": "This is the request object used when creating a new private space.",
      "type": "object",
      "properties": {
        "key": {
          "description": "The key for the new space. Format: See [Space\nkeys](https://confluence.atlassian.com/x/lqNMMQ).",
          "type": "string"
        },
        "name": {
          "description": "The name of the new space.",
          "type": "string",
          "maxLength": 200
        },
        "description": {
          "$ref": "#/definitions/SpaceDescriptionCreate"
        }
      },
      "required": [
        "key",
        "name"
      ]
    },
    "SpaceProperty": {
      "title": "SpaceProperty",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "key": {
          "type": "string"
        },
        "value": {
          "type": "object"
        },
        "version": {
          "$ref": "#/definitions/Version3"
        },
        "space": {
          "$ref": "#/definitions/Space"
        },
        "_expandable": {
          "$ref": "#/definitions/Expandable15"
        }
      },
      "required": [
        "id",
        "key",
        "value",
        "_expandable"
      ]
    },
    "SpacePropertyArray": {
      "title": "SpacePropertyArray",
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SpaceProperty"
          }
        },
        "start": {
          "type": "integer",
          "format": "int32"
        },
        "limit": {
          "type": "integer",
          "format": "int32"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "_links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "results",
        "start",
        "limit",
        "size",
        "_links"
      ]
    },
    "SpacePropertyCreate": {
      "title": "SpacePropertyCreate",
      "type": "object",
      "properties": {
        "key": {
          "description": "The key of the new property.",
          "type": "string"
        },
        "value": {
          "description": "The value of the property. This can be empty or a complex object. \nFor example,\n```\n\"value\": {\n  \"example1\": \"value\",\n  \"example2\": true,\n  \"example3\": 123\n}\n```",
          "type": "object"
        }
      },
      "required": [
        "key",
        "value"
      ]
    },
    "SpacePropertyCreateNoKey": {
      "title": "SpacePropertyCreateNoKey",
      "type": "object",
      "properties": {
        "value": {
          "description": "The value of the property. This can be empty or a complex object. \nFor example,\n```\n\"value\": {\n  \"example1\": \"value\",\n  \"example2\": true,\n  \"example3\": 123\n}\n```",
          "type": "object"
        }
      },
      "required": [
        "value"
      ]
    },
    "SpacePropertyUpdate": {
      "title": "SpacePropertyUpdate",
      "type": "object",
      "properties": {
        "value": {
          "description": "The value of the property.",
          "type": "object"
        },
        "version": {
          "$ref": "#/definitions/Version7"
        }
      },
      "required": [
        "value",
        "version"
      ]
    },
    "SpaceSettings": {
      "title": "SpaceSettings",
      "type": "object",
      "properties": {
        "routeOverrideEnabled": {
          "description": "Defines whether an override for the space home should be used. This is\nused in conjunction with a space theme provided by an app. For\nexample, if this property is set to true, a theme can display a page\nother than the space homepage when users visit the root URL for a\nspace. This property allows apps to provide content-only theming\nwithout overriding the space home.",
          "type": "boolean"
        },
        "_links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "routeOverrideEnabled",
        "_links"
      ]
    },
    "SpaceSettingsUpdate": {
      "title": "SpaceSettingsUpdate",
      "type": "object",
      "properties": {
        "routeOverrideEnabled": {
          "description": "Defines whether an override for the space home should be used. This is\nused in conjunction with a space theme provided by an app. For\nexample, if this property is set to true, a theme can display a page\nother than the space homepage when users visit the root URL for a\nspace. This property allows apps to provide content-only theming\nwithout overriding the space home.",
          "type": "boolean"
        }
      }
    },
    "SpaceUpdate": {
      "title": "SpaceUpdate",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the space.",
          "type": "string",
          "maxLength": 200
        },
        "description": {
          "$ref": "#/definitions/SpaceDescriptionCreate"
        },
        "homepage": {
          "$ref": "#/definitions/Homepage"
        }
      }
    },
    "SuperBatchWebResources": {
      "title": "SuperBatchWebResources",
      "type": "object",
      "properties": {
        "uris": {
          "$ref": "#/definitions/Uris"
        },
        "tags": {
          "$ref": "#/definitions/Tags"
        },
        "metatags": {
          "type": "string"
        }
      }
    },
    "SystemInfoEntity": {
      "title": "SystemInfoEntity",
      "type": "object",
      "properties": {
        "cloudId": {
          "type": "string"
        },
        "commitHash": {
          "type": "string"
        }
      },
      "required": [
        "cloudId",
        "commitHash"
      ]
    },
    "Theme": {
      "title": "Theme",
      "type": "object",
      "properties": {
        "themeKey": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "icon": {
          "$ref": "#/definitions/Icon"
        },
        "_links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "themeKey",
        "name",
        "description",
        "icon",
        "_links"
      ]
    },
    "ThemeArray": {
      "title": "ThemeArray",
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ThemeNoLinks"
          }
        },
        "start": {
          "type": "integer",
          "format": "int32"
        },
        "limit": {
          "type": "integer",
          "format": "int32"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "_links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "results",
        "start",
        "limit",
        "size",
        "_links"
      ]
    },
    "ThemeNoLinks": {
      "title": "ThemeNoLinks",
      "description": "Theme object without links. Used in ThemeArray.",
      "type": "object",
      "properties": {
        "themeKey": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "icon": {
          "$ref": "#/definitions/Icon"
        }
      },
      "required": [
        "themeKey",
        "name",
        "description",
        "icon"
      ]
    },
    "ThemeUpdate": {
      "title": "ThemeUpdate",
      "type": "object",
      "properties": {
        "themeKey": {
          "description": "The key of the theme to be set as the space theme.",
          "type": "string"
        }
      },
      "required": [
        "themeKey"
      ]
    },
    "User": {
      "title": "User",
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/Type"
        },
        "username": {
          "description": "This property has been deprecated in favor of `accountId`, due to privacy changes. See the\n[migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)\nfor details.\n\nThe username of the user. For example, _admin_.",
          "type": "string"
        },
        "userKey": {
          "description": "This property has been deprecated in favor of `accountId`, due to privacy changes. See the\n[migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)\nfor details.\n\nThe user key of the user.",
          "type": "string"
        },
        "accountId": {
          "description": "The account ID of the user, which uniquely identifies the user across all Atlassian products.\nFor example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`.",
          "type": "string"
        },
        "profilePicture": {
          "$ref": "#/definitions/Icon"
        },
        "displayName": {
          "description": "The display name of the user. Depending on the user’s privacy setting, this may be returned as null.",
          "type": "string"
        },
        "operations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OperationCheckResult"
          }
        },
        "details": {
          "$ref": "#/definitions/UserDetails"
        },
        "personalSpace": {
          "$ref": "#/definitions/Space"
        },
        "_expandable": {
          "$ref": "#/definitions/Expandable2"
        },
        "_links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "type",
        "username",
        "userKey",
        "accountId",
        "profilePicture",
        "displayName",
        "_expandable",
        "_links"
      ]
    },
    "UserAnonymous": {
      "title": "UserAnonymous",
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "profilePicture": {
          "$ref": "#/definitions/Icon"
        },
        "displayName": {
          "type": "string"
        },
        "operations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OperationCheckResult"
          }
        },
        "_expandable": {
          "$ref": "#/definitions/Expandable16"
        },
        "_links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "type",
        "profilePicture",
        "displayName",
        "_expandable",
        "_links"
      ]
    },
    "UserArray": {
      "title": "UserArray",
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        },
        "start": {
          "type": "integer",
          "format": "int32"
        },
        "limit": {
          "type": "integer",
          "format": "int32"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "results",
        "start",
        "limit",
        "size"
      ]
    },
    "UserArrayWithLinks": {
      "title": "UserArrayWithLinks",
      "description": "Same as UserArray but with `_links` property.",
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        },
        "start": {
          "type": "integer",
          "format": "int32"
        },
        "limit": {
          "type": "integer",
          "format": "int32"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "_links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "results",
        "start",
        "limit",
        "size",
        "_links"
      ]
    },
    "UserDetails": {
      "title": "UserDetails",
      "type": "object",
      "properties": {
        "business": {
          "$ref": "#/definitions/Business"
        },
        "personal": {
          "$ref": "#/definitions/Personal"
        }
      }
    },
    "UsersUserKeys": {
      "title": "UsersUserKeys",
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        },
        "userKeys": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "_links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "users",
        "userKeys"
      ]
    },
    "UserWatch": {
      "title": "UserWatch",
      "type": "object",
      "properties": {
        "watching": {
          "type": "boolean"
        }
      },
      "required": [
        "watching"
      ]
    },
    "Version": {
      "title": "Version",
      "type": "object",
      "properties": {
        "by": {
          "$ref": "#/definitions/User"
        },
        "when": {
          "type": "string",
          "format": "date-time"
        },
        "friendlyWhen": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "minorEdit": {
          "type": "boolean"
        },
        "content": {
          "$ref": "#/definitions/Content"
        },
        "collaborators": {
          "$ref": "#/definitions/UsersUserKeys"
        },
        "_expandable": {
          "$ref": "#/definitions/Expandable5"
        },
        "_links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "by",
        "when",
        "friendlyWhen",
        "message",
        "number",
        "minorEdit",
        "_expandable",
        "_links"
      ]
    },
    "VersionArray": {
      "title": "VersionArray",
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Version"
          }
        },
        "start": {
          "type": "integer",
          "format": "int32"
        },
        "limit": {
          "type": "integer",
          "format": "int32"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "_links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "results",
        "start",
        "limit",
        "size",
        "_links"
      ]
    },
    "VersionRestore": {
      "title": "VersionRestore",
      "type": "object",
      "properties": {
        "operationKey": {
          "description": "Set to 'RESTORE'.",
          "example": "RESTORE",
          "type": "string",
          "default": "RESTORE"
        },
        "params": {
          "$ref": "#/definitions/Params"
        }
      },
      "required": [
        "operationKey",
        "params"
      ]
    },
    "Watch": {
      "title": "Watch",
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "watcher": {
          "$ref": "#/definitions/WatchUser"
        },
        "contentId": {
          "type": "string"
        }
      },
      "required": [
        "type",
        "watcher",
        "contentId"
      ]
    },
    "WatchArray": {
      "title": "WatchArray",
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Watch"
          }
        },
        "start": {
          "type": "integer",
          "format": "int32"
        },
        "limit": {
          "type": "integer",
          "format": "int32"
        },
        "size": {
          "type": "integer",
          "format": "int32"
        },
        "_links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "results",
        "start",
        "limit",
        "size",
        "_links"
      ]
    },
    "WatchUser": {
      "title": "WatchUser",
      "description": "This essentially the same as the `User` object, but no `_links` property and \nno `_expandable` property (therefore, different required fields).",
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "username": {
          "description": "This property has been deprecated in favor of `accountId`. See the\n[migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)\nfor details.\n\nThe username of the user. For example, _admin_.",
          "type": "string"
        },
        "userKey": {
          "description": "This property has been deprecated in favor of `accountId`. See the\n[migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)\nfor details.\n\nThe user key of the user.",
          "type": "string"
        },
        "accountId": {
          "description": "The account ID of the user, which uniquely identifies the user across all Atlassian products.\nFor example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`.",
          "type": "string"
        },
        "profilePicture": {
          "$ref": "#/definitions/Icon"
        },
        "displayName": {
          "type": "string"
        },
        "operations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OperationCheckResult"
          }
        },
        "details": {
          "$ref": "#/definitions/UserDetails"
        }
      },
      "required": [
        "type",
        "username",
        "userKey",
        "accountId",
        "profilePicture",
        "displayName",
        "operations",
        "details"
      ]
    },
    "WebResourceDependencies": {
      "title": "WebResourceDependencies",
      "type": "object",
      "properties": {
        "keys": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contexts": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "uris": {
          "$ref": "#/definitions/Uris"
        },
        "tags": {
          "$ref": "#/definitions/Tags"
        },
        "superbatch": {
          "$ref": "#/definitions/SuperBatchWebResources"
        }
      }
    },
    "Ancestor": {
      "title": "Ancestor",
      "type": "object",
      "properties": {
        "id": {
          "description": "The content ID of the ancestor.",
          "type": "string"
        }
      },
      "required": [
        "id"
      ]
    },
    "Ancestor1": {
      "title": "Ancestor1",
      "type": "object",
      "properties": {
        "id": {
          "description": "The `id` of the parent content.",
          "type": "string"
        }
      },
      "required": [
        "id"
      ]
    },
    "Attachment": {
      "title": "Attachment",
      "type": "object",
      "properties": {
        "value": {
          "type": "boolean"
        },
        "_links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "value",
        "_links"
      ]
    },
    "Author": {
      "title": "Author",
      "type": "object",
      "properties": {
        "type": {
          "example": "user",
          "type": "string",
          "default": "user"
        },
        "displayName": {
          "type": "string"
        },
        "operations": {
          "type": "object"
        },
        "username": {
          "type": "string"
        },
        "userKey": {
          "type": "string"
        }
      },
      "required": [
        "type",
        "displayName",
        "operations",
        "username",
        "userKey"
      ]
    },
    "Author1": {
      "title": "Author1",
      "description": "The user that actioned the event. If `author` is not specified, then all \n`author` properties will be set to null/empty, except for `type` which \nwill be set to 'user'.",
      "type": "object",
      "properties": {
        "type": {
          "description": "Set to 'user'.",
          "example": "user",
          "type": "string",
          "default": "user"
        },
        "displayName": {
          "description": "The name that is displayed on the audit log in the Confluence UI.",
          "type": "string"
        },
        "operations": {
          "description": "Always defaults to null.",
          "type": "object"
        },
        "username": {
          "description": "The username of the user that actioned the event.",
          "type": "string"
        },
        "userKey": {
          "description": "The userKey of the user that actioned the event.",
          "type": "string"
        }
      },
      "required": [
        "type"
      ]
    },
    "Body": {
      "title": "Body",
      "type": "object",
      "properties": {
        "view": {
          "$ref": "#/definitions/ContentBody"
        },
        "export_view": {
          "$ref": "#/definitions/ContentBody"
        },
        "styled_view": {
          "$ref": "#/definitions/ContentBody"
        },
        "storage": {
          "$ref": "#/definitions/ContentBody"
        },
        "editor2": {
          "$ref": "#/definitions/ContentBody"
        },
        "anonymous_export_view": {
          "$ref": "#/definitions/ContentBody"
        },
        "_expandable": {
          "$ref": "#/definitions/Expandable9"
        }
      },
      "required": [
        "_expandable"
      ],
      "minProperties": 1,
      "maxProperties": 1
    },
    "Body1": {
      "title": "Body1",
      "description": "The body of the new content. Does not apply to attachments. \nOnly one body format should be specified as the property for \nthis object, e.g. `storage`.\n\nNote, `editor2` format is used by Atlassian only. `anonymous_export_view` is \nthe same as 'export_view' format but only content viewable by an anonymous \nuser is included.",
      "type": "object",
      "properties": {
        "view": {
          "$ref": "#/definitions/ContentBodyCreate"
        },
        "export_view": {
          "$ref": "#/definitions/ContentBodyCreate"
        },
        "styled_view": {
          "$ref": "#/definitions/ContentBodyCreate"
        },
        "storage": {
          "$ref": "#/definitions/ContentBodyCreate"
        },
        "editor2": {
          "$ref": "#/definitions/ContentBodyCreate"
        },
        "anonymous_export_view": {
          "$ref": "#/definitions/ContentBodyCreate"
        }
      },
      "minProperties": 1,
      "maxProperties": 1
    },
    "Body2": {
      "title": "Body2",
      "description": "The updated body of the content. Does not apply to attachments.\nIf you are not sure how to generate these formats, you can create a page in the \nConfluence application, retrieve the content using [Get content](#api-content-get), \nand expand the desired content format, e.g. `expand=body.storage`.",
      "type": "object",
      "properties": {
        "view": {
          "$ref": "#/definitions/ContentBodyCreate"
        },
        "export_view": {
          "$ref": "#/definitions/ContentBodyCreate"
        },
        "styled_view": {
          "$ref": "#/definitions/ContentBodyCreate"
        },
        "storage": {
          "$ref": "#/definitions/ContentBodyCreate"
        },
        "editor2": {
          "$ref": "#/definitions/ContentBodyCreate"
        },
        "anonymous_export_view": {
          "$ref": "#/definitions/ContentBodyCreate"
        }
      },
      "minProperties": 1,
      "maxProperties": 1
    },
    "BordersAndDividers": {
      "title": "BordersAndDividers",
      "type": "object",
      "properties": {
        "color": {
          "type": "string"
        }
      },
      "required": [
        "color"
      ]
    },
    "Business": {
      "title": "Business",
      "type": "object",
      "properties": {
        "position": {
          "description": "This property has been deprecated due to privacy changes. There is no replacement. See the\n[migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)\nfor details.",
          "type": "string"
        },
        "department": {
          "description": "This property has been deprecated due to privacy changes. There is no replacement. See the\n[migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)\nfor details.",
          "type": "string"
        },
        "location": {
          "description": "This property has been deprecated due to privacy changes. There is no replacement. See the\n[migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)\nfor details.",
          "type": "string"
        }
      },
      "required": [
        "position",
        "department",
        "location"
      ]
    },
    "Comment": {
      "title": "Comment",
      "type": "object",
      "properties": {
        "value": {
          "type": "boolean"
        },
        "_links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "value",
        "_links"
      ]
    },
    "conflictPolicy": {
      "title": "conflictPolicy",
      "example": "abort",
      "type": "string",
      "enum": [
        "abort"
      ]
    },
    "Container": {
      "title": "Container",
      "description": "The new content to attach the attachment to.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The `id` of the parent content.",
          "type": "string"
        },
        "type": {
          "description": "The content type. You can only attach attachments to content \nof type: `page`, `blogpost`.",
          "type": "string"
        }
      },
      "required": [
        "id",
        "type"
      ]
    },
    "ContentRestrictionByOperationResponse": {
      "title": "ContentRestrictionByOperationResponse",
      "type": "object",
      "properties": {
        "_links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "_links"
      ]
    },
    "Contributors": {
      "title": "Contributors",
      "type": "object",
      "properties": {
        "publishers": {
          "$ref": "#/definitions/UsersUserKeys"
        }
      }
    },
    "Currentuser": {
      "title": "Currentuser",
      "type": "object",
      "properties": {
        "favourited": {
          "$ref": "#/definitions/Favourited"
        },
        "lastmodified": {
          "$ref": "#/definitions/Lastmodified"
        },
        "lastcontributed": {
          "$ref": "#/definitions/Lastcontributed"
        },
        "viewed": {
          "$ref": "#/definitions/Viewed"
        }
      }
    },
    "depth": {
      "title": "depth",
      "example": "all",
      "type": "string",
      "enum": [
        "all",
        "root"
      ]
    },
    "Description": {
      "title": "Description",
      "type": "object",
      "properties": {
        "plain": {
          "$ref": "#/definitions/SpaceDescription"
        },
        "view": {
          "$ref": "#/definitions/SpaceDescription"
        }
      }
    },
    "embeddedContentRender": {
      "title": "embeddedContentRender",
      "example": "current",
      "type": "string",
      "enum": [
        "current",
        "version-at-save"
      ]
    },
    "expand": {
      "title": "expand",
      "example": "childTypes.all",
      "type": "string",
      "enum": [
        "childTypes.all",
        "childTypes.attachment",
        "childTypes.comment",
        "childTypes.page",
        "container",
        "metadata.currentuser",
        "metadata.properties",
        "metadata.labels",
        "metadata.frontend",
        "operations",
        "children.page",
        "children.attachment",
        "children.comment",
        "restrictions.read.restrictions.user",
        "restrictions.read.restrictions.group",
        "restrictions.update.restrictions.user",
        "restrictions.update.restrictions.group",
        "history",
        "history.lastUpdated",
        "history.previousVersion",
        "history.contributors",
        "history.nextVersion",
        "ancestors",
        "body",
        "version",
        "descendants.page",
        "descendants.attachment",
        "descendants.comment",
        "space"
      ]
    },
    "expand5": {
      "title": "expand5",
      "example": "childTypes.all",
      "type": "string",
      "enum": [
        "childTypes.all",
        "childTypes.attachment",
        "childTypes.comment",
        "childTypes.page",
        "container",
        "metadata.currentuser",
        "metadata.properties",
        "metadata.labels",
        "metadata.frontend",
        "operations",
        "children.page",
        "children.attachment",
        "children.comment",
        "restrictions.read.restrictions.user",
        "restrictions.read.restrictions.group",
        "restrictions.update.restrictions.user",
        "restrictions.update.restrictions.group",
        "history",
        "history.lastUpdated",
        "history.previousVersion",
        "history.contributors",
        "history.nextVersion",
        "ancestors",
        "macroRenderedOutput",
        "body",
        "version",
        "descendants.page",
        "descendants.attachment",
        "descendants.comment",
        "space"
      ]
    },
    "expand6": {
      "title": "expand6",
      "example": "attachment",
      "type": "string",
      "enum": [
        "attachment",
        "comment",
        "page"
      ]
    },
    "expand8": {
      "title": "expand8",
      "example": "childTypes.all",
      "type": "string",
      "enum": [
        "childTypes.all",
        "childTypes.attachment",
        "childTypes.comment",
        "childTypes.page",
        "container",
        "metadata.currentuser",
        "metadata.properties",
        "metadata.labels",
        "metadata.frontend",
        "operations",
        "children.page",
        "children.attachment",
        "children.comment",
        "restrictions.read.restrictions.user",
        "restrictions.read.restrictions.group",
        "restrictions.update.restrictions.user",
        "restrictions.update.restrictions.group",
        "history",
        "history.lastUpdated",
        "history.previousVersion",
        "history.contributors",
        "history.nextVersion",
        "ancestors",
        "body",
        "version",
        "descendants.page",
        "descendants.attachment",
        "descendants.comment",
        "space",
        "extensions.inlineProperties",
        "extensions.resolution"
      ]
    },
    "expand12": {
      "title": "expand12",
      "example": "lastUpdated",
      "type": "string",
      "enum": [
        "lastUpdated",
        "previousVersion",
        "contributors",
        "nextVersion"
      ]
    },
    "expand13": {
      "title": "expand13",
      "example": "content",
      "type": "string",
      "enum": [
        "content",
        "version"
      ]
    },
    "expand15": {
      "title": "expand15",
      "example": "restrictions.user",
      "type": "string",
      "enum": [
        "restrictions.user",
        "restrictions.group",
        "content"
      ]
    },
    "expand21": {
      "title": "expand21",
      "example": "collaborators",
      "type": "string",
      "enum": [
        "collaborators",
        "content"
      ]
    },
    "expand25": {
      "title": "expand25",
      "example": "relationData",
      "type": "string",
      "enum": [
        "relationData",
        "source",
        "target"
      ]
    },
    "expand28": {
      "title": "expand28",
      "example": "settings",
      "type": "string",
      "enum": [
        "settings",
        "metadata.labels",
        "operations",
        "lookAndFeel",
        "permissions",
        "icon",
        "description.plain",
        "description.view",
        "theme",
        "homepage"
      ]
    },
    "expand32": {
      "title": "expand32",
      "example": "version",
      "type": "string",
      "enum": [
        "version",
        "space"
      ]
    },
    "expand34": {
      "title": "expand34",
      "example": "body",
      "type": "string",
      "enum": [
        "body"
      ]
    },
    "expand36": {
      "title": "expand36",
      "example": "operations",
      "type": "string",
      "enum": [
        "operations",
        "details.personal",
        "details.business",
        "personalSpace"
      ]
    },
    "expand37": {
      "title": "expand37",
      "example": "operations",
      "type": "string",
      "enum": [
        "operations"
      ]
    },
    "Expandable": {
      "title": "Expandable",
      "type": "object",
      "properties": {
        "content": {
          "type": "string"
        }
      }
    },
    "Expandable1": {
      "title": "Expandable1",
      "type": "object",
      "properties": {
        "body": {
          "type": "string"
        }
      }
    },
    "Expandable2": {
      "title": "Expandable2",
      "type": "object",
      "properties": {
        "operations": {
          "type": "string"
        },
        "details": {
          "type": "string"
        },
        "personalSpace": {
          "type": "string"
        }
      }
    },
    "Expandable3": {
      "title": "Expandable3",
      "type": "object",
      "properties": {
        "user": {
          "type": "string"
        },
        "group": {
          "type": "string"
        }
      }
    },
    "Expandable4": {
      "title": "Expandable4",
      "type": "object",
      "properties": {
        "settings": {
          "type": "string"
        },
        "metadata": {
          "type": "string"
        },
        "operations": {
          "type": "string"
        },
        "lookAndFeel": {
          "type": "string"
        },
        "permissions": {
          "type": "string"
        },
        "icon": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "theme": {
          "type": "string"
        },
        "history": {
          "type": "string"
        },
        "homepage": {
          "type": "string"
        }
      }
    },
    "Expandable5": {
      "title": "Expandable5",
      "type": "object",
      "properties": {
        "content": {
          "type": "string"
        },
        "collaborators": {
          "type": "string"
        }
      },
      "required": [
        "content",
        "collaborators"
      ]
    },
    "Expandable6": {
      "title": "Expandable6",
      "type": "object",
      "properties": {
        "lastUpdated": {
          "type": "string"
        },
        "previousVersion": {
          "type": "string"
        },
        "contributors": {
          "type": "string"
        },
        "nextVersion": {
          "type": "string"
        }
      }
    },
    "Expandable7": {
      "title": "Expandable7",
      "type": "object",
      "properties": {
        "attachment": {
          "type": "string"
        },
        "comment": {
          "type": "string"
        },
        "page": {
          "type": "string"
        }
      }
    },
    "Expandable8": {
      "title": "Expandable8",
      "type": "object",
      "properties": {
        "all": {
          "type": "string"
        },
        "attachment": {
          "type": "string"
        },
        "comment": {
          "type": "string"
        },
        "page": {
          "type": "string"
        }
      }
    },
    "Expandable9": {
      "title": "Expandable9",
      "type": "object",
      "properties": {
        "editor": {
          "type": "string"
        },
        "view": {
          "type": "string"
        },
        "export_view": {
          "type": "string"
        },
        "styled_view": {
          "type": "string"
        },
        "storage": {
          "type": "string"
        },
        "editor2": {
          "type": "string"
        },
        "anonymous_export_view": {
          "type": "string"
        }
      }
    },
    "Expandable11": {
      "title": "Expandable11",
      "type": "object",
      "properties": {
        "restrictions": {
          "type": "string"
        },
        "content": {
          "type": "string"
        }
      }
    },
    "Expandable12": {
      "title": "Expandable12",
      "type": "object",
      "properties": {
        "childTypes": {
          "type": "string"
        },
        "container": {
          "type": "string"
        },
        "metadata": {
          "type": "string"
        },
        "operations": {
          "type": "string"
        },
        "children": {
          "type": "string"
        },
        "restrictions": {
          "type": "string"
        },
        "history": {
          "type": "string"
        },
        "ancestors": {
          "type": "string"
        },
        "body": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "descendants": {
          "type": "string"
        },
        "space": {
          "type": "string"
        }
      }
    },
    "Expandable14": {
      "title": "Expandable14",
      "type": "object",
      "properties": {
        "relationData": {
          "type": "string"
        },
        "source": {
          "type": "string"
        },
        "target": {
          "type": "string"
        }
      },
      "required": [
        "relationData",
        "source",
        "target"
      ]
    },
    "Expandable15": {
      "title": "Expandable15",
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "space": {
          "type": "string"
        }
      }
    },
    "Expandable16": {
      "title": "Expandable16",
      "type": "object",
      "properties": {
        "operations": {
          "type": "string"
        }
      }
    },
    "Extensions": {
      "title": "Extensions",
      "type": "object",
      "properties": {
        "position": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Extensions1": {
      "title": "Extensions1",
      "type": "object",
      "properties": {
        "location": {
          "type": "string"
        },
        "inlineProperties": {
          "$ref": "#/definitions/InlineProperties"
        },
        "resolution": {
          "$ref": "#/definitions/Resolution"
        }
      },
      "required": [
        "location"
      ]
    },
    "Favourited": {
      "title": "Favourited",
      "type": "object",
      "properties": {
        "isFavourite": {
          "type": "boolean"
        },
        "favouritedDate": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "format": {
      "title": "format",
      "example": "csv",
      "type": "string",
      "enum": [
        "csv",
        "zip"
      ]
    },
    "Group2": {
      "title": "Group2",
      "description": "A group that the restriction will be applied to.",
      "type": "object",
      "properties": {
        "type": {
          "description": "Set to 'group'.",
          "example": "group",
          "type": "string",
          "default": "group"
        },
        "name": {
          "description": "The name of the group.",
          "type": "string"
        }
      },
      "required": [
        "type",
        "name"
      ]
    },
    "Group3": {
      "title": "Group3",
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Group"
          }
        },
        "size": {
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "results",
        "size"
      ]
    },
    "Headings": {
      "title": "Headings",
      "type": "object",
      "properties": {
        "color": {
          "type": "string"
        }
      },
      "required": [
        "color"
      ]
    },
    "History": {
      "title": "History",
      "type": "object",
      "properties": {
        "createdDate": {
          "type": "string",
          "format": "date-time"
        }
      },
      "required": [
        "createdDate"
      ]
    },
    "Homepage": {
      "title": "Homepage",
      "description": "The page to set as the homepage of the space.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The ID of the page.",
          "type": "string"
        }
      },
      "required": [
        "id"
      ]
    },
    "HoverOrFocus": {
      "title": "HoverOrFocus",
      "type": "object",
      "properties": {
        "backgroundColor": {
          "type": "string"
        }
      },
      "required": [
        "backgroundColor"
      ]
    },
    "InlineProperties": {
      "title": "InlineProperties",
      "type": "object",
      "properties": {
        "originalSelection": {
          "type": "string"
        },
        "markerRef": {
          "type": "string"
        }
      },
      "required": [
        "originalSelection",
        "markerRef"
      ]
    },
    "Lastcontributed": {
      "title": "Lastcontributed",
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        },
        "when": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "Lastmodified": {
      "title": "Lastmodified",
      "type": "object",
      "properties": {
        "version": {
          "$ref": "#/definitions/Version"
        },
        "friendlyLastModified": {
          "type": "string"
        }
      }
    },
    "LastModifier": {
      "title": "LastModifier",
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "profilePicture": {
          "$ref": "#/definitions/Icon"
        },
        "displayName": {
          "type": "string"
        },
        "operations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OperationCheckResult"
          }
        }
      }
    },
    "Links": {
      "title": "Links",
      "type": "object",
      "properties": {
        "color": {
          "type": "string"
        }
      },
      "required": [
        "color"
      ]
    },
    "location": {
      "title": "location",
      "example": "inline",
      "type": "string",
      "enum": [
        "inline",
        "footer",
        "resolved"
      ]
    },
    "Metadata": {
      "title": "Metadata",
      "type": "object",
      "properties": {
        "mediaType": {
          "description": "The media type of the attachment, e.g. 'img/jpg'.",
          "type": "string"
        },
        "comment": {
          "description": "The comment for this update.",
          "type": "string"
        }
      }
    },
    "Metadata1": {
      "title": "Metadata1",
      "type": "object",
      "properties": {
        "labels": {
          "$ref": "#/definitions/LabelArray"
        }
      },
      "required": [
        "labels"
      ]
    },
    "Metadata2": {
      "title": "Metadata2",
      "type": "object",
      "properties": {
        "mediaType": {
          "type": "string"
        }
      }
    },
    "Name": {
      "title": "Name",
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "args": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      },
      "required": [
        "key",
        "args"
      ]
    },
    "Operation": {
      "title": "Operation",
      "description": "The operation itself.",
      "example": "administer",
      "type": "string",
      "enum": [
        "administer",
        "copy",
        "create",
        "delete",
        "export",
        "move",
        "purge",
        "purge_version",
        "read",
        "restore",
        "update",
        "use"
      ]
    },
    "Operation1": {
      "title": "Operation1",
      "example": "administer",
      "type": "string",
      "enum": [
        "administer",
        "copy",
        "create",
        "delete",
        "export",
        "move",
        "purge",
        "purge_version",
        "read",
        "restore",
        "update",
        "use"
      ]
    },
    "Operation2": {
      "title": "Operation2",
      "description": "The restriction operation applied to content.",
      "example": "administer",
      "type": "string",
      "enum": [
        "administer",
        "copy",
        "create",
        "delete",
        "export",
        "move",
        "purge",
        "purge_version",
        "read",
        "restore",
        "update",
        "use"
      ]
    },
    "operationKey": {
      "title": "operationKey",
      "example": "read",
      "type": "string",
      "enum": [
        "read",
        "update"
      ]
    },
    "OriginalTemplate": {
      "title": "OriginalTemplate",
      "type": "object",
      "properties": {
        "pluginKey": {
          "type": "string"
        },
        "moduleKey": {
          "type": "string"
        }
      },
      "required": [
        "pluginKey",
        "moduleKey"
      ]
    },
    "Page": {
      "title": "Page",
      "type": "object",
      "properties": {
        "value": {
          "type": "boolean"
        },
        "_links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "value",
        "_links"
      ]
    },
    "Params": {
      "title": "Params",
      "type": "object",
      "properties": {
        "versionNumber": {
          "description": "The version number to be restored.",
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "description": "Description for the version.",
          "type": "string"
        }
      },
      "required": [
        "versionNumber",
        "message"
      ]
    },
    "Personal": {
      "title": "Personal",
      "type": "object",
      "properties": {
        "phone": {
          "description": "This property has been deprecated due to privacy changes. There is no replacement. See the\n[migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)\nfor details.",
          "type": "string"
        },
        "im": {
          "description": "This property has been deprecated due to privacy changes. There is no replacement. See the\n[migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)\nfor details.",
          "type": "string"
        },
        "website": {
          "description": "This property has been deprecated due to privacy changes. There is no replacement. See the\n[migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)\nfor details.",
          "type": "string"
        },
        "email": {
          "description": "This property has been deprecated due to privacy changes. There is no replacement. See the\n[migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)\nfor details.",
          "type": "string"
        }
      }
    },
    "Plain": {
      "title": "Plain",
      "type": "object",
      "properties": {
        "value": {
          "description": "The space description.",
          "type": "string"
        },
        "representation": {
          "description": "Set to 'plain'.",
          "type": "string"
        }
      }
    },
    "Prefix": {
      "title": "Prefix",
      "description": "The prefix for the label.",
      "example": "global",
      "type": "string",
      "enum": [
        "global",
        "my",
        "team"
      ]
    },
    "prefix1": {
      "title": "prefix1",
      "example": "global",
      "type": "string",
      "enum": [
        "global",
        "my",
        "team"
      ]
    },
    "Representation": {
      "title": "Representation",
      "example": "view",
      "type": "string",
      "enum": [
        "view",
        "export_view",
        "styled_view",
        "storage",
        "editor2",
        "anonymous_export_view"
      ]
    },
    "Representation1": {
      "title": "Representation1",
      "example": "plain",
      "type": "string",
      "enum": [
        "plain",
        "view"
      ]
    },
    "Representation2": {
      "title": "Representation2",
      "description": "The content format type. Set the value of this property to \nthe name of the format being used, e.g. 'storage'.",
      "example": "view",
      "type": "string",
      "enum": [
        "view",
        "export_view",
        "styled_view",
        "storage",
        "editor2",
        "anonymous_export_view"
      ]
    },
    "Resolution": {
      "title": "Resolution",
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        },
        "lastModifier": {
          "$ref": "#/definitions/LastModifier"
        },
        "lastModifiedDate": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "Restrictions": {
      "title": "Restrictions",
      "type": "object",
      "properties": {
        "read": {
          "$ref": "#/definitions/ContentRestriction"
        },
        "update": {
          "$ref": "#/definitions/ContentRestriction"
        },
        "_links": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "_links"
      ]
    },
    "Restrictions1": {
      "title": "Restrictions1",
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/UserArray"
        },
        "group": {
          "$ref": "#/definitions/GroupArray"
        },
        "_expandable": {
          "$ref": "#/definitions/Expandable3"
        }
      }
    },
    "Restrictions2": {
      "title": "Restrictions2",
      "description": "The users/groups that the restrictions will be applied to. At least one of \n`user` or `group` must be specified for this object.",
      "type": "object",
      "properties": {
        "user": {
          "description": "The users that the restrictions will be applied to. This array must \nhave at least one item, otherwise it should be omitted.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/User2"
          }
        },
        "group": {
          "description": "The groups that the restrictions will be applied to. This array must \nhave at least one item, otherwise it should be omitted.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Group2"
          }
        }
      }
    },
    "Selected": {
      "title": "Selected",
      "example": "global",
      "type": "string",
      "enum": [
        "global",
        "custom"
      ]
    },
    "Selected1": {
      "title": "Selected1",
      "description": "The look and feel scheme. If you set this to `global`, you must specify \nthe current global look and feel settings as a `global` object in this \nrequest. Similarly, if you set this to `custom`, you must specify the \ncurrent custom look and feel settings as a `custom` object in this request.",
      "example": "global",
      "type": "string",
      "enum": [
        "global",
        "custom"
      ]
    },
    "sourceType": {
      "title": "sourceType",
      "example": "user",
      "type": "string",
      "enum": [
        "user",
        "content",
        "space"
      ]
    },
    "Space1": {
      "title": "Space1",
      "description": "The space for the content.",
      "type": "object",
      "properties": {
        "key": {
          "description": "The key of the space",
          "type": "string"
        }
      },
      "required": [
        "key"
      ]
    },
    "Space2": {
      "title": "Space2",
      "description": "The space that the content is being created in.",
      "type": "object",
      "properties": {
        "key": {
          "description": "The key of the space.",
          "type": "string"
        }
      },
      "required": [
        "key"
      ]
    },
    "Space3": {
      "title": "Space3",
      "description": "The key for the space of the new template. Only applies to space templates. \nIf the spaceKey is not specified, the template will be created as a global \ntemplate.",
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        }
      },
      "required": [
        "key"
      ]
    },
    "Space4": {
      "title": "Space4",
      "description": "The key for the space of the template. Required if the template is a \nspace template. Set this to the current `space.key`.",
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        }
      },
      "required": [
        "key"
      ]
    },
    "Status": {
      "title": "Status",
      "description": "The status of the content. Set this to `current` or omit it altogether.",
      "example": "current",
      "type": "string",
      "enum": [
        "current"
      ]
    },
    "Status1": {
      "title": "Status1",
      "description": "The status of the new content.",
      "example": "current",
      "type": "string",
      "enum": [
        "current",
        "trashed",
        "historical",
        "draft"
      ]
    },
    "Status2": {
      "title": "Status2",
      "description": "The updated status of the content. Note, if you change the status of a page from \n'current' to 'draft' and it has an existing draft, the existing draft will be deleted \nin favor of the updated page.",
      "example": "current",
      "type": "string",
      "enum": [
        "current",
        "trashed",
        "historical",
        "draft"
      ]
    },
    "status3": {
      "title": "status3",
      "example": "current",
      "type": "string",
      "enum": [
        "current",
        "trashed",
        "draft",
        "any"
      ]
    },
    "status5": {
      "title": "status5",
      "example": "current",
      "type": "string",
      "enum": [
        "current",
        "trashed",
        "historical",
        "draft"
      ]
    },
    "status6": {
      "title": "status6",
      "example": "current",
      "type": "string",
      "enum": [
        "current",
        "draft"
      ]
    },
    "status8": {
      "title": "status8",
      "example": "current",
      "type": "string",
      "enum": [
        "current",
        "archived"
      ]
    },
    "Subjects": {
      "title": "Subjects",
      "description": "The users and/or groups that the permission applies to.",
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/User3"
        },
        "group": {
          "$ref": "#/definitions/Group3"
        },
        "_expandable": {
          "$ref": "#/definitions/Expandable3"
        }
      },
      "required": [
        "_expandable"
      ]
    },
    "Tags": {
      "title": "Tags",
      "type": "object",
      "properties": {
        "all": {
          "type": "string"
        },
        "css": {
          "type": "string"
        },
        "data": {
          "type": "string"
        },
        "js": {
          "type": "string"
        }
      }
    },
    "TargetType": {
      "title": "TargetType",
      "description": "The space or content type that the operation applies to.",
      "example": "page",
      "type": "string",
      "enum": [
        "page",
        "blogpost",
        "comment",
        "attachment",
        "space"
      ]
    },
    "targetType1": {
      "title": "targetType1",
      "example": "user",
      "type": "string",
      "enum": [
        "user",
        "content",
        "space"
      ]
    },
    "trigger": {
      "title": "trigger",
      "example": "viewed",
      "type": "string",
      "enum": [
        "viewed"
      ]
    },
    "Type": {
      "title": "Type",
      "example": "known",
      "type": "string",
      "enum": [
        "known",
        "unknown",
        "anonymous",
        "user"
      ]
    },
    "Type1": {
      "title": "Type1",
      "description": "The type of the new content. Custom content types defined by apps are also supported.",
      "example": "page",
      "type": "string",
      "enum": [
        "page",
        "blogpost",
        "comment",
        "attachment"
      ]
    },
    "Type2": {
      "title": "Type2",
      "description": "Set to 'known'.",
      "example": "known",
      "type": "string",
      "enum": [
        "known",
        "unknown",
        "anonymous",
        "user"
      ]
    },
    "Type3": {
      "title": "Type3",
      "description": "The type of content. Set this to the current type of the content.",
      "example": "page",
      "type": "string",
      "enum": [
        "page",
        "blogpost",
        "comment",
        "attachment"
      ]
    },
    "type4": {
      "title": "type4",
      "example": "page",
      "type": "string",
      "enum": [
        "page",
        "blogpost"
      ]
    },
    "type5": {
      "title": "type5",
      "example": "page",
      "type": "string",
      "enum": [
        "page",
        "comment",
        "attachment"
      ]
    },
    "type7": {
      "title": "type7",
      "example": "global",
      "type": "string",
      "enum": [
        "global",
        "personal"
      ]
    },
    "Units": {
      "title": "Units",
      "description": "The unit of time that the retention period is measured in.",
      "example": "NANOS",
      "type": "string",
      "enum": [
        "NANOS",
        "MICROS",
        "MILLIS",
        "SECONDS",
        "MINUTES",
        "HOURS",
        "HALF_DAYS",
        "DAYS",
        "WEEKS",
        "MONTHS",
        "YEARS",
        "DECADES",
        "CENTURIES",
        "MILLENNIA",
        "ERAS",
        "FOREVER"
      ]
    },
    "units1": {
      "title": "units1",
      "example": "NANOS",
      "type": "string",
      "enum": [
        "NANOS",
        "MICROS",
        "MILLIS",
        "SECONDS",
        "MINUTES",
        "HOURS",
        "HALF_DAYS",
        "DAYS",
        "WEEKS",
        "MONTHS",
        "YEARS",
        "DECADES",
        "CENTURIES"
      ]
    },
    "Uris": {
      "title": "Uris",
      "type": "object",
      "properties": {
        "all": {
          "type": "string"
        },
        "css": {
          "type": "string"
        },
        "js": {
          "type": "string"
        }
      }
    },
    "User2": {
      "title": "User2",
      "description": "A user that the restriction will be applied to. Either the `username` \nor the `userKey` must be specified to identify the user.",
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/Type2"
        },
        "username": {
          "description": "This property has been deprecated due to privacy changes. Use `accountId` instead. See the\n[migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)\nfor details.\n\nThe username of the user. For example, _admin_. Required, unless `accountId` or `userKey` is specified.",
          "type": "string"
        },
        "userKey": {
          "description": "This property has been deprecated due to privacy changes. Use `accountId` instead. See the\n[migration guide](https://developer.atlassian.com/cloud/confluence/deprecation-notice-user-privacy-api-migration-guide/)\nfor details.\n\nThe user key of the user. Required, unless `accountId` or `username` is specified.",
          "type": "string"
        },
        "accountId": {
          "description": "The account ID of the user, which uniquely identifies the user across all Atlassian products.\nFor example, `384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192`. Required, unless `username` or `userKey` is specified.",
          "type": "string"
        }
      },
      "required": [
        "type"
      ]
    },
    "User3": {
      "title": "User3",
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        },
        "size": {
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "results",
        "size"
      ]
    },
    "Version2": {
      "title": "Version2",
      "description": "The version for the new content.",
      "type": "object",
      "properties": {
        "number": {
          "description": "The version number. Set this to `1`.",
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "number"
      ]
    },
    "Version3": {
      "title": "Version3",
      "type": "object",
      "properties": {
        "when": {
          "type": "string",
          "format": "date-time"
        },
        "message": {
          "type": "string"
        },
        "number": {
          "type": "integer",
          "format": "int32"
        },
        "minorEdit": {
          "type": "boolean"
        }
      },
      "required": [
        "when",
        "message",
        "number",
        "minorEdit"
      ]
    },
    "Version4": {
      "title": "Version4",
      "description": "The version number of the property.",
      "type": "object",
      "properties": {
        "number": {
          "description": "The new version for the updated content property. Set this to the\ncurrent version number incremented by one. To get the current\nversion number, use 'Get content property' and retrieve\n`version.number`.",
          "type": "integer",
          "format": "int32"
        },
        "minorEdit": {
          "description": "If `minorEdit` is set to 'true', no notification email or activity\nstream will be generated for the change.",
          "example": true,
          "type": "boolean",
          "default": true
        }
      },
      "required": [
        "number"
      ]
    },
    "Version5": {
      "title": "Version5",
      "description": "The new version for the updated content. Set this to the current version number incremented by one, unless you are changing the status to 'draft' which must have a version number of 1. \n\nTo get the current version number, use [Get content by ID](#api-content-id-get) and retrieve `version.number`.",
      "type": "object",
      "properties": {
        "number": {
          "description": "The version number.",
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "number"
      ]
    },
    "Version7": {
      "title": "Version7",
      "description": "The version number of the property.",
      "type": "object",
      "properties": {
        "number": {
          "description": "The new version for the updated space property. Set this to the\ncurrent version number incremented by one. To get the current\nversion number, use 'Get space property' and retrieve\n`version.number`.",
          "type": "integer",
          "format": "int32"
        },
        "minorEdit": {
          "description": "If `minorEdit` is set to 'true', no notification email or activity\nstream will be generated for the change.",
          "example": true,
          "type": "boolean",
          "default": true
        }
      },
      "required": [
        "number"
      ]
    },
    "Version8": {
      "title": "Version8",
      "description": "The attachment version. Set this to the current version number of the \nattachment. Note, the version number only needs to be incremented when \nupdating the actual attachment, not its properties.",
      "type": "object",
      "properties": {
        "number": {
          "description": "The version number.",
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "number"
      ]
    },
    "Viewed": {
      "title": "Viewed",
      "type": "object",
      "properties": {
        "lastSeen": {
          "type": "string",
          "format": "date-time"
        },
        "friendlyLastSeen": {
          "type": "string"
        }
      }
    }
  },
  "tags": [
    {
      "name": "/audit",
      "description": ""
    },
    {
      "name": "/content",
      "description": ""
    },
    {
      "name": "/content/blueprint",
      "description": ""
    },
    {
      "name": "/content/{id}/child",
      "description": ""
    },
    {
      "name": "/content/{id}/child/attachment",
      "description": ""
    },
    {
      "name": "/content/{id}/descendant",
      "description": ""
    },
    {
      "name": "/content/{id}/label",
      "description": ""
    },
    {
      "name": "/content/{id}/notification",
      "description": ""
    },
    {
      "name": "/content/{id}/property",
      "description": ""
    },
    {
      "name": "/content/{id}/restriction",
      "description": ""
    },
    {
      "name": "/content/{id}/version",
      "description": ""
    },
    {
      "name": "/contentbody/convert/{to}",
      "description": ""
    },
    {
      "name": "/group",
      "description": ""
    },
    {
      "name": "/longtask",
      "description": ""
    },
    {
      "name": "/relation",
      "description": ""
    },
    {
      "name": "/search",
      "description": ""
    },
    {
      "name": "/settings/lookandfeel",
      "description": ""
    },
    {
      "name": "/settings",
      "description": ""
    },
    {
      "name": "/settings/theme",
      "description": ""
    },
    {
      "name": "/space",
      "description": ""
    },
    {
      "name": "/space/{spaceKey}/property",
      "description": ""
    },
    {
      "name": "/space/{spaceKey}/theme",
      "description": ""
    },
    {
      "name": "/template",
      "description": ""
    },
    {
      "name": "/user",
      "description": ""
    }
  ],
  "externalDocs": {
    "url": "https://developer.atlassian.com/cloud/confluence/rest/",
    "description": "The online and complete version of the Confluence Cloud REST API docs."
  }
}