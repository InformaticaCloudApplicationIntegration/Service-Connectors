{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Swappable Work Schedule Entries",
    "description": "This API is used by an employee to view potential swap eligible schedule entries for other employees.",
    "contact": {
      "email": "kshitij.shah@adp.com",
      "name": "Kshitij Shah"
    }
  },
  "host": "test-api.adp.com",
  "basePath": "/",
  "schemes": [],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/time/v1/workers/{aoid}/work-schedule-entries/{schedule-entry-id}/swappable-entries": {
      "get": {
        "description": "List of all available schedule entries of employees other than requestor eligible for swap",
        "summary": "b361c31d-962c-47eb-92fb-5b6d5fa2487d",
        "tags": [
          "Swap Eligibe Schedule Entries"
        ],
        "operationId": "TimeV1WorkersWorkScheduleEntriesSwappableEntriesByAoidAndScheduleEntryIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "aoid",
            "in": "path",
            "required": true,
            "default": "G4O73G9Z62SL2NFM",
            "type": "string",
            "description": "Associate OID"
          },
          {
            "name": "roleCode",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "The role the user is playing during the transaction.  Possible values: employee,manager,practitioner,administrator,supervisor.  The roleCode header will be passed in all calls. When coming from Myself capabilities rolecode=employee. When coming from Team capabilities roleCode=manager. When coming from Practitioner capabilities roleCode=practitioner."
          },
          {
            "name": "schedule-entry-id",
            "in": "path",
            "required": true,
            "default": "123434",
            "type": "string",
            "description": "Schedule Entry ID"
          },
          {
            "name": "$filter",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The OData $filter parameter MUST be used to specify the filter criterionPlease refer \"RESTful Web API Design Standard\" for more details.<br/>\n<ul>\n    <li>$filter=scheduleEntries/dateTimePeriod/startDateTime ge â€˜{scheduleStartDateTime}' and   /scheduleEntries/dateTimePeriod/startDateTime le {scheduleEndDateTime}\n        <ul style=\"list-style-type: circle;\">\n            <li style=\"padding-bottom: 15.0px;\">Returns the schedule entries where swappable schedule entries intime falls between  {scheduleStartDateTime} and {scheduleEndDateTime}. {scheduleStartDateTime} and {scheduleEndDateTime} must be in ISO format</li>\n        </ul>\n    </li>\n\n<li>$filter=substringof({name}, workerName/formattedName) eq true\n    <ul style=\"list-style-type: circle;\">\n        <li style=\"padding-bottom: 15.0px;\">Returns the schedule entries where work name contains {name} in swappable schedule entries</li>\n    </ul>\n</li>\n</ul>"
          }
        ],
        "responses": {
          "204": {
            "description": "List of all available schedule entries of employees other than requestor eligible for swap",
            "schema": {
              "$ref": "#/definitions/WorkScheduleEntries"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/workScheduleEntries_sample_v01_00_rev001.json"
              }
            },
            "headers": {
              "ETag": {
                "type": "string"
              },
              "Cache-Control": {
                "type": "string"
              }
            }
          },
          "304": {
            "description": "Not Modified",
            "schema": {}
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TimeV1WorkersWorkScheduleEntriesSwappableEntries400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TimeV1WorkersWorkScheduleEntriesSwappableEntries400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TimeV1WorkersWorkScheduleEntriesSwappableEntries400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "schema": {
              "$ref": "#/definitions/TimeV1WorkersWorkScheduleEntriesSwappableEntries400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/TimeV1WorkersWorkScheduleEntriesSwappableEntries400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/TimeV1WorkersWorkScheduleEntriesSwappableEntries400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "413": {
            "description": "Request Entity Too Large",
            "schema": {
              "$ref": "#/definitions/TimeV1WorkersWorkScheduleEntriesSwappableEntries400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/TimeV1WorkersWorkScheduleEntriesSwappableEntries400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "default": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TimeV1WorkersWorkScheduleEntriesSwappableEntries400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "$ref": "#/definitions/TimeV1WorkersWorkScheduleEntriesSwappableEntries400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          }
        }
      }
    },
    "/time/v1/workers/{aoid}/work-schedule-entries/{schedule-entry-id}/swappable-entries/meta": {
      "get": {
        "description": "Returns API metadata",
        "summary": "d5351e14-e606-4e6f-bf1f-27a6230517e8",
        "tags": [
          "Swap Eligibe Schedule Entries"
        ],
        "operationId": "TimeV1WorkersWorkScheduleEntriesSwappableEntriesMetaByAoidAndScheduleEntryIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "aoid",
            "in": "path",
            "required": true,
            "default": "G4O73G9Z62SL2NFM",
            "type": "string",
            "description": "Associate OID"
          },
          {
            "name": "roleCode",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "The role the user is playing during the transaction.  Possible values: employee,manager,practitioner,administrator,supervisor.  The roleCode header will be passed in all calls. When coming from Myself capabilities rolecode=employee. When coming from Team capabilities roleCode=manager. When coming from Practitioner capabilities roleCode=practitioner."
          },
          {
            "name": "schedule-entry-id",
            "in": "path",
            "required": true,
            "default": "123434",
            "type": "string",
            "description": "Schedule Entry ID"
          }
        ],
        "responses": {
          "204": {
            "description": "Returns API metadata",
            "schema": {
              "$ref": "#/definitions/workScheduleEntriesMetaType"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/workScheduleEntries_meta_sample_v01_00_rev001.json"
              }
            },
            "headers": {
              "ETag": {
                "type": "string"
              },
              "Cache-Control": {
                "type": "string"
              }
            }
          },
          "304": {
            "description": "Not Modified",
            "schema": {}
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TimeV1WorkersWorkScheduleEntriesSwappableEntries400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TimeV1WorkersWorkScheduleEntriesSwappableEntries400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TimeV1WorkersWorkScheduleEntriesSwappableEntries400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "schema": {
              "$ref": "#/definitions/TimeV1WorkersWorkScheduleEntriesSwappableEntries400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/TimeV1WorkersWorkScheduleEntriesSwappableEntries400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/TimeV1WorkersWorkScheduleEntriesSwappableEntries400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "413": {
            "description": "Request Entity Too Large",
            "schema": {
              "$ref": "#/definitions/TimeV1WorkersWorkScheduleEntriesSwappableEntries400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/TimeV1WorkersWorkScheduleEntriesSwappableEntries400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "default": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TimeV1WorkersWorkScheduleEntriesSwappableEntries400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "$ref": "#/definitions/TimeV1WorkersWorkScheduleEntriesSwappableEntries400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "WorkScheduleEntries": {
      "title": "WorkScheduleEntries",
      "description": "Collection of the  work schedule entries employees for a single employee",
      "example": {
        "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/workScheduleEntries_sample_v01_00_rev001.json"
      },
      "type": "object",
      "properties": {
        "scheduleEntries": {
          "description": "A collection of schedule entries.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/workScheduleEntry"
          }
        },
        "meta": {
          "$ref": "#/definitions/metaType_v02"
        },
        "confirmMessage": {
          "$ref": "#/definitions/confirmMessageType_v01"
        }
      }
    },
    "workScheduleEntry": {
      "title": "workScheduleEntry",
      "type": "object",
      "properties": {
        "entryTypeCode": {
          "$ref": "#/definitions/codeType_v02"
        },
        "payCode": {
          "$ref": "#/definitions/codeType_v02"
        },
        "entryStatusCode": {
          "$ref": "#/definitions/statusType_v02"
        },
        "dateTimePeriod": {
          "$ref": "#/definitions/dateTimePeriodType_v01"
        },
        "datePeriod": {
          "$ref": "#/definitions/datePeriodType_v02"
        },
        "totalQuantity": {
          "$ref": "#/definitions/quantityTimeType_v02"
        },
        "totalTime": {
          "$ref": "#/definitions/TotalTimeEntry"
        },
        "durationTypeCode": {
          "$ref": "#/definitions/codeType_v02"
        },
        "categoryTypeCode": {
          "$ref": "#/definitions/codeType_v02"
        },
        "dayPeriodCode": {
          "$ref": "#/definitions/codeType_v02"
        },
        "shiftTypeCode": {
          "$ref": "#/definitions/codeType_v02"
        },
        "duration": {
          "description": "Represents the duration of time as represented by ISO 8601. Where the value space is a six dimensional space where the coordinates designate the Gregorian year, month, day, hour, minute, and second. The number of seconds can include decimal digits to arbitary pecision. PnYn MnDTnH nMnS, where: [n] is replaced by the value for each of the date and time elements that follow the [n]. Leading zeros are not required, but the maximum number of digits for each element should be agreed to by the communicating parties. The capital letters 'P', 'Y', 'M', 'W', 'D', 'T', 'H', 'M', and 'S' are designators for each of the date and time elements and are not replaced. P is the duration designator (historically called 'period') placed at the start of the duration representation. Y is the year designator that follows the value for the number of years. M is the month designator that follows the value for the number of months. D is the day designator that follows the value for the number of days. T is the time designator that precedes the time components of the representation. H is the hour designator that follows the value for the number of hours. M is the minute designator that follows the value for the number of minutes. S is the second designator that follows the value for the number of seconds. The number of seconds can include decimal digits to arbitrary precision",
          "type": "string"
        },
        "earningAllocations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EarningAllocationType"
          }
        },
        "entryComments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntryComment"
          }
        },
        "scheduleEntryID": {
          "description": "The simple (string) identifier of an object",
          "type": "string"
        },
        "shiftGroupID": {
          "description": "The simple (string) identifier of an object",
          "type": "string"
        },
        "overrideWholeShiftIndicator": {
          "description": "Boolean expression",
          "type": "boolean"
        },
        "overridePartialShiftIndicator": {
          "description": "Boolean expression",
          "type": "boolean"
        },
        "actions": {
          "description": "Actions which the user is allowed to initiate against the related shift entry for shift swap",
          "type": "array",
          "items": {
            "$ref": "#/definitions/actionType_v02"
          }
        },
        "payCodeCategory": {
          "$ref": "#/definitions/codeType_v02"
        },
        "entryTags": {
          "$ref": "#/definitions/EntryTags"
        },
        "associateOID": {
          "description": "The simple (string) identifier of an object",
          "type": "string"
        },
        "workAssignmentID": {
          "description": "The simple (string) identifier of an object",
          "type": "string"
        },
        "workerName": {
          "$ref": "#/definitions/contactNameType_v02"
        }
      }
    },
    "codeType_v02": {
      "title": "codeType_v02",
      "description": "The code for the related entity.  If this is a coded value, codeValue and shortName should be used. If this is just a string value, only shortName is necessary",
      "type": "object",
      "properties": {
        "codeValue": {
          "description": "The code for the related entity",
          "type": "string"
        },
        "shortName": {
          "description": "Short description of the related code",
          "type": "string"
        },
        "longName": {
          "description": "Long description of the related code",
          "type": "string"
        }
      }
    },
    "statusType_v02": {
      "title": "statusType_v02",
      "description": "Status to include the status code and effective date (ISO-8601:2000 format)",
      "type": "object",
      "properties": {
        "codeValue": {
          "description": "The code for the related entity",
          "type": "string"
        },
        "shortName": {
          "description": "Short description of the related code",
          "type": "string"
        },
        "longName": {
          "description": "Long description of the related code",
          "type": "string"
        },
        "effectiveDate": {
          "description": "The string representation of the date value. Follows the ISO-8601:2000 format",
          "type": "string",
          "format": "date"
        }
      }
    },
    "dateTimePeriodType_v01": {
      "title": "dateTimePeriodType_v01",
      "description": "The string reprersentation of the date range. Used to specify effective period.  Follows the ISO-8601:2000 format.",
      "type": "object",
      "properties": {
        "startDateTime": {
          "description": "The string reprersentation of the date-time value. Follows the ISO-8601:2000 format",
          "type": "string",
          "format": "date-time"
        },
        "endDateTime": {
          "description": "The string reprersentation of the date-time value. Follows the ISO-8601:2000 format",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "datePeriodType_v02": {
      "title": "datePeriodType_v02",
      "description": "The string reprersentation of the date range. Used to specify effective period.  Follows the ISO-8601:2000 format",
      "type": "object",
      "properties": {
        "startDate": {
          "description": "The string representation of the date value. Follows the ISO-8601:2000 format",
          "type": "string",
          "format": "date"
        },
        "startTime": {
          "description": "The startTime represented as hh:mm. This is communicated in military notation and presented in the UI based on the timeNotationCode",
          "type": "string"
        },
        "endDate": {
          "description": "The string representation of the date value. Follows the ISO-8601:2000 format",
          "type": "string",
          "format": "date"
        },
        "endTime": {
          "description": "The endTime represented as hh:mm. This is communicated in military notation and presented in the UI based on the timeNotationCode.",
          "type": "string"
        }
      }
    },
    "quantityTimeType_v02": {
      "title": "quantityTimeType_v02",
      "description": "Quantity of time (unit based)",
      "type": "object",
      "properties": {
        "quantityValue": {
          "description": "Quantity value",
          "type": "number",
          "format": "double"
        },
        "unitTimeCode": {
          "$ref": "#/definitions/codeType_v02"
        }
      }
    },
    "TotalTimeEntry": {
      "title": "TotalTimeEntry",
      "description": "Total time represented as hh:mm",
      "type": "object",
      "properties": {
        "timeValue": {
          "description": "The string reprersentation of the time value usually expressed as hh:mm",
          "type": "string"
        },
        "nameCode": {
          "$ref": "#/definitions/codeType_v02"
        }
      }
    },
    "EarningAllocationType": {
      "title": "EarningAllocationType",
      "type": "object",
      "properties": {
        "allocationCode": {
          "$ref": "#/definitions/codeType_v02"
        },
        "allocationTypeCode": {
          "$ref": "#/definitions/codeType_v02"
        },
        "itemID": {
          "description": "The simple (string) identifier of an object",
          "type": "string"
        }
      }
    },
    "EntryComment": {
      "title": "EntryComment",
      "type": "object",
      "properties": {
        "textValue": {
          "description": "The text entered by the user",
          "type": "string"
        },
        "commentTypeCode": {
          "$ref": "#/definitions/codeType_v02"
        },
        "appliesToCode": {
          "$ref": "#/definitions/codeType_v02"
        },
        "privateIndicator": {
          "description": "Boolean expression",
          "type": "boolean"
        },
        "itemID": {
          "description": "The simple (string) identifier of an object",
          "type": "string"
        }
      }
    },
    "actionType_v02": {
      "title": "actionType_v02",
      "description": "Actions which the user is allowed to initiate against the related entity",
      "type": "object",
      "properties": {
        "operationID": {
          "description": "Identifies the operation of an action",
          "type": "string"
        },
        "canonicalUri": {
          "description": "The URI of the related entity",
          "type": "string"
        },
        "actionTypeCode": {
          "$ref": "#/definitions/ActionTypeCode"
        },
        "confirmationRequiredIndicator": {
          "description": "Boolean expression",
          "example": false,
          "type": "boolean",
          "default": false
        },
        "commentAllowedIndicator": {
          "description": "Boolean expression",
          "example": false,
          "type": "boolean",
          "default": false
        },
        "defaultIndicator": {
          "description": "Boolean expression",
          "example": false,
          "type": "boolean",
          "default": false
        },
        "sequence": {
          "description": "Sequence of a related entity when included in the collection or a group",
          "type": "integer",
          "format": "int32"
        },
        "attestation": {
          "$ref": "#/definitions/attestationType_v02"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/linkType_v02"
          }
        }
      }
    },
    "ActionTypeCode": {
      "title": "ActionTypeCode",
      "description": "Identifies the type of action to be taken to fulfill the request.  Action can be a callback to a service to complete the action.  A callback requires the methodCode and uris to be returned.  An external link i.e. open a web page - requires the uris of the external link; An object reference is a reference to a related object within the application.  This is a canonical name which represents the object.  Based on this identifier, the application knows what view it needs to open.  The uris returns the data for the view.  For an object reference, the objectRefID, methodCode, and uris are required . modify indicates that a property is being modified",
      "example": "callback",
      "type": "string",
      "enum": [
        "callback",
        "externalLink",
        "objectReference",
        "modify"
      ]
    },
    "attestationType_v02": {
      "title": "attestationType_v02",
      "description": "Optional text provided to the user when they take an action to affirm to be correct, true, or genuine. Requires confirmation indicator to be set to true",
      "type": "object",
      "properties": {
        "actionBlockIndicator": {
          "description": "Boolean expression",
          "example": false,
          "type": "boolean",
          "default": false
        },
        "messageTxt": {
          "description": "Message to present to the user.  This is mutuallly exclusive with the messageUri which is an external link to the message.  If the text is sizable and fairly static then it should be an external link which may be cached",
          "type": "string"
        },
        "messageUri": {
          "description": "The URI of the related entity",
          "type": "string"
        }
      }
    },
    "linkType_v02": {
      "title": "linkType_v02",
      "description": "A link description object is used to describe link relations.  In the context of a schema, it defines the link relations of the instances of the schema, and can be parameterized by the instance values.  The link description format can be used on its own in regular (non-schema documents), and use of this format can be declared by referencing the normative link description schema as the the schema for the data structure that uses the links",
      "type": "object",
      "properties": {
        "href": {
          "description": "The URI of the related entity",
          "type": "string"
        },
        "rel": {
          "$ref": "#/definitions/Rel"
        },
        "canonicalUri": {
          "description": "The URI of the related entity",
          "type": "string"
        },
        "title": {
          "description": "This property defines a title for the link.  The value must be a string. User agents MAY use this title when presenting the link to the user",
          "type": "string"
        },
        "targetSchema": {
          "description": "This property is a schema that defines the expected structure of the JSON representation of the target of the link, if the target of the link is returned using JSON representation",
          "type": "string"
        },
        "mediaType": {
          "$ref": "#/definitions/MediaType"
        },
        "method": {
          "$ref": "#/definitions/Method"
        },
        "encType": {
          "$ref": "#/definitions/EncType"
        },
        "schema": {
          "description": "This property contains a schema which defines the acceptable structure of the submitted request.  For a GET request, this schema would define the properties for the query string and for a POST request, this would define the body",
          "type": "string"
        },
        "payLoadArguments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PayLoadArgument"
          }
        }
      }
    },
    "Rel": {
      "title": "Rel",
      "description": "Indicates the nature of the relationship of the related resource to the resource that generated this representation",
      "example": "alternate",
      "type": "string",
      "enum": [
        "alternate",
        "create",
        "canonical",
        "describedby",
        "edit-form",
        "enclosure",
        "full",
        "related",
        "root",
        "self",
        "up",
        "search",
        "first",
        "last",
        "next",
        "previous",
        "/adp/invoke",
        "/adp/image",
        "/adp/confirm-message",
        "/adp/status-monitor",
        "/adp/codelist",
        "/adp/template",
        "/adp/externalLink",
        "/adp/validation",
        "/adp/deeplink",
        "/adp/attachment",
        "/adp/workflow"
      ]
    },
    "MediaType": {
      "title": "MediaType",
      "description": "The media type that the linked resource will return (Response)",
      "example": "application/gzip",
      "type": "string",
      "enum": [
        "application/gzip",
        "application/json",
        "application/msword",
        "application/pdf",
        "application/postscript",
        "application/vnd.ms-excel",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
        "application/xml",
        "application/x-www-form-urlencoded",
        "image/gif",
        "image/jpeg",
        "image/png",
        "image/tiff",
        "multipart/mixed",
        "text/html",
        "text/plain",
        "application/vnd.visio",
        "image/bmp",
        "image/x-ms-bmp",
        "application/vnd.openxmlformats-officedocument.presentationml.presentation",
        "application/vnd.ms-powerpoint",
        "video/mp4",
        "audio/mpeg",
        "video/x-msvideo",
        "video/x-ms-wmv",
        "application/rtf",
        "application/vnd.ms-outlook",
        "text/csv",
        "video/quicktime",
        "application/zip",
        "application/illustrator",
        "text/xml"
      ]
    },
    "Method": {
      "title": "Method",
      "description": "The HTTP method code (HTTP Verb) traverse the link (GET, POST, PUT or DELETE)",
      "example": "GET",
      "type": "string",
      "enum": [
        "GET",
        "POST",
        "DELETE",
        "PUT"
      ]
    },
    "EncType": {
      "title": "EncType",
      "description": "If present, this property indicates a query media type format that the server supports for querying or posting to the collection of instances at the target resource.  The query can be suffixed to the target URI to query the collection with property-based constraints on the resources that SHOULD be returned from the server or used to post data to the resource (depending on the method). (Request)",
      "example": "application/json",
      "type": "string",
      "enum": [
        "application/json",
        "application/x-www-form-urlencoded"
      ]
    },
    "PayLoadArgument": {
      "title": "PayLoadArgument",
      "type": "object",
      "properties": {
        "argumentPath": {
          "description": "Code value (typically a key field) of the code list item",
          "type": "string"
        },
        "argumentValue": {
          "description": "Code value (typically a key field) of the code list item",
          "type": "string"
        }
      }
    },
    "EntryTags": {
      "title": "EntryTags",
      "description": "This is genric object which can be use forvarious purpose.  e.g employee job in organzational map",
      "type": "object",
      "properties": {
        "tagCode": {
          "description": "A code identifying a tag",
          "type": "string"
        },
        "tagType": {
          "$ref": "#/definitions/TagType"
        },
        "tagValues": {
          "description": "The the values for the given instance",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "TagType": {
      "title": "TagType",
      "description": "The type of tag",
      "type": "object",
      "properties": {
        "dataTypeCode": {
          "description": "Code identifying the type of data",
          "type": "string"
        },
        "currencyCode": {
          "description": "A simple (string) code.  Can have a code list reference",
          "type": "string"
        },
        "formatCode": {
          "description": "The format of the property.  Possible values are date, date-time, uri",
          "type": "string"
        }
      }
    },
    "contactNameType_v02": {
      "title": "contactNameType_v02",
      "description": "The name of the contact",
      "type": "object",
      "properties": {
        "givenName": {
          "description": "The first name of the person",
          "type": "string"
        },
        "middleName": {
          "description": "Person middle name or initial",
          "type": "string"
        },
        "familyName1": {
          "description": "Person family name 1",
          "type": "string"
        },
        "familyName2": {
          "description": "Person family name 2",
          "type": "string"
        },
        "formattedName": {
          "description": "A formatted version of the person name",
          "type": "string"
        }
      }
    },
    "metaType_v02": {
      "title": "metaType_v02",
      "description": "Meta contains the metadata associated with a response.  A GET response may include metadata to support pagination",
      "type": "object",
      "properties": {
        "startSequence": {
          "description": "Sequence of a related entity when included in the collection or a group",
          "type": "integer",
          "format": "int32"
        },
        "completeIndicator": {
          "description": "Boolean expression",
          "type": "boolean"
        },
        "totalNumber": {
          "description": "Number of total instance resources in an instance resource set. Note: An instance resource set is a set of instance resources that is determined by a server to satisfy the sets membership criteria (i.e., selection, filter, expansion and search criteria) of a resource management operation (e.g. GET request) upon a collection resource",
          "type": "integer",
          "format": "int32"
        },
        "resourceSetID": {
          "description": "The simple (string) identifier of an object",
          "type": "string"
        },
        "links": {
          "description": "A link description object is used to describe link relations.  In the context of a schema, it defines the link relations of the instances of the schema, and can be parameterized by the instance values.  The link description format can be used on its own in regular (non-schema documents), and use of this format can be declared by referencing the normative link description schema as the the schema for the data structure that uses the links",
          "type": "array",
          "items": {
            "$ref": "#/definitions/linkType_v02"
          }
        }
      }
    },
    "confirmMessageType_v01": {
      "title": "confirmMessageType_v01",
      "description": "The ConfirmMessage contains the processing results for the corresponding request.  A request may have its processing reported as: succeeded, partially failed, or failed.",
      "type": "object",
      "properties": {
        "confirmMessageID": {
          "$ref": "#/definitions/IDType_v01"
        },
        "createDateTime": {
          "description": "The string reprersentation of the date-time value. Follows the ISO-8601:2000 format",
          "type": "string",
          "format": "date-time"
        },
        "requestReceiptDateTime": {
          "description": "The string reprersentation of the date-time value. Follows the ISO-8601:2000 format",
          "type": "string",
          "format": "date-time"
        },
        "protocolStatusCode": {
          "$ref": "#/definitions/codeType_v01"
        },
        "protocolCode": {
          "$ref": "#/definitions/codeType_v01"
        },
        "requestID": {
          "$ref": "#/definitions/IDType_v01"
        },
        "requestStatusCode": {
          "$ref": "#/definitions/RequestStatusCode"
        },
        "requestMethodCode": {
          "$ref": "#/definitions/RequestMethodCode"
        },
        "sessionID": {
          "$ref": "#/definitions/IDType_v01"
        },
        "requestETag": {
          "description": "The entity tag of the entity in the request.",
          "type": "string"
        },
        "requestLink": {
          "$ref": "#/definitions/linkType_v02"
        },
        "processingStatusCode": {
          "$ref": "#/definitions/ProcessingStatusCode"
        },
        "processMessages": {
          "description": "processMessage is optional and contains processing information for either the request (at the ConfirmMessage level) or a resource being managed in the request (at the ResourceMessage level).  Most often there will be a single instance for an associated request or resource, but this structure allows for more than one if needed, for example, if multiple errors exist for a single resource.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/processMessage_v01"
          }
        },
        "resourceMessages": {
          "description": "resource Message contains the resource-specific processing results for resources being managed in the request.  A resource may have its processing reported as:  succeeded or failed.  It must be used to represent resource-specific messages.  In the case of a request managing multiple resources and resource-specific messages are to be returned, then this array will contain one object for each such resource of the request.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceMessage"
          }
        }
      }
    },
    "IDType_v01": {
      "title": "IDType_v01",
      "description": "The unique identifier of the related entity",
      "type": "object",
      "properties": {
        "idValue": {
          "description": "An ID",
          "type": "string"
        },
        "schemeName": {
          "description": "The type of ID",
          "type": "string"
        },
        "schemeAgencyName": {
          "description": "The agency that issues the ID",
          "type": "string"
        }
      }
    },
    "codeType_v01": {
      "title": "codeType_v01",
      "description": "The code for the related entity",
      "type": "object",
      "properties": {
        "codeValue": {
          "description": "The code for the related entity.",
          "type": "string"
        },
        "shortName": {
          "description": "Short description of the related code not to exceed 25 characters",
          "type": "string"
        },
        "longName": {
          "description": "Long description of the related code",
          "type": "string"
        }
      }
    },
    "RequestStatusCode": {
      "title": "RequestStatusCode",
      "description": "The process results status code for the request.",
      "type": "object",
      "properties": {
        "shortName": {
          "description": "Short description of the related code",
          "type": "string"
        },
        "longName": {
          "description": "Long description of the related code",
          "type": "string"
        },
        "codeValue": {
          "$ref": "#/definitions/CodeValue"
        }
      }
    },
    "CodeValue": {
      "title": "CodeValue",
      "description": "The code for the related entity.",
      "example": "succeeded",
      "type": "string",
      "enum": [
        "succeeded",
        "partiallyFailed",
        "failed"
      ]
    },
    "RequestMethodCode": {
      "title": "RequestMethodCode",
      "description": "The method that was used on the request corresponding to this message instance.",
      "type": "object",
      "properties": {
        "shortName": {
          "description": "Short description of the related code",
          "type": "string"
        },
        "longName": {
          "description": "Long description of the related code",
          "type": "string"
        },
        "codeValue": {
          "$ref": "#/definitions/CodeValue1"
        }
      }
    },
    "CodeValue1": {
      "title": "CodeValue1",
      "description": "The code for the related entity.",
      "example": "GET",
      "type": "string",
      "enum": [
        "GET",
        "PUT",
        "POST",
        "PATCH",
        "DELETE"
      ]
    },
    "ProcessingStatusCode": {
      "title": "ProcessingStatusCode",
      "description": "Processing status of the related request message.",
      "type": "object",
      "properties": {
        "shortName": {
          "description": "Short description of the related code",
          "type": "string"
        },
        "longName": {
          "description": "Long description of the related code",
          "type": "string"
        },
        "codeValue": {
          "$ref": "#/definitions/CodeValue2"
        }
      }
    },
    "CodeValue2": {
      "title": "CodeValue2",
      "description": "The code for the related entity.",
      "example": "received",
      "type": "string",
      "enum": [
        "received",
        "validated",
        "started",
        "completed"
      ]
    },
    "processMessage_v01": {
      "title": "processMessage_v01",
      "description": "Each object contains processing information for either the request (at the ConfirmMessage level) or a resource being managed in the request (at the ResourceMessage level).",
      "type": "object",
      "properties": {
        "processMessageID": {
          "$ref": "#/definitions/IDType_v01"
        },
        "messageTypeCode": {
          "$ref": "#/definitions/messageTypeCodeType_v01"
        },
        "sourceLocationExpression": {
          "description": "Expression that provides the location (or source) of content in a message instance that is associated with a process message. Examples of expression languages include: XPath, XQuery, JSON Pointer.",
          "type": "string"
        },
        "expressionLanguageCode": {
          "$ref": "#/definitions/ExpressionLanguageCode"
        },
        "links": {
          "description": "A link description object is used to describe link relations.  In the context of a schema, it defines the link relations of the instances of the schema, and can be parameterized by the instance values.  The link description format can be used on its own in regular (non-schema documents), and use of this format can be declared by referencing the normative link description schema as the the schema for the data structure that uses the links.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/linkType_v02"
          }
        },
        "userMessage": {
          "$ref": "#/definitions/messageType_v01"
        },
        "developerMessage": {
          "$ref": "#/definitions/messageType_v01"
        }
      }
    },
    "messageTypeCodeType_v01": {
      "title": "messageTypeCodeType_v01",
      "description": "Schema describing the type of the user or developer message",
      "type": "object",
      "properties": {
        "shortName": {
          "description": "Short description of the related code",
          "type": "string"
        },
        "longName": {
          "description": "Long description of the related code",
          "type": "string"
        },
        "codeValue": {
          "$ref": "#/definitions/CodeValue3"
        }
      }
    },
    "CodeValue3": {
      "title": "CodeValue3",
      "description": "The code for the related entity.",
      "example": "success",
      "type": "string",
      "enum": [
        "success",
        "warning",
        "error",
        "info"
      ]
    },
    "ExpressionLanguageCode": {
      "title": "ExpressionLanguageCode",
      "description": "Identifies the language used for expressions communicated in this message.",
      "type": "object",
      "properties": {
        "shortName": {
          "description": "Short description of the related code",
          "type": "string"
        },
        "longName": {
          "description": "Long description of the related code",
          "type": "string"
        },
        "codeValue": {
          "$ref": "#/definitions/CodeValue4"
        }
      }
    },
    "CodeValue4": {
      "title": "CodeValue4",
      "description": "The code for the related entity.",
      "example": "jPath",
      "type": "string",
      "enum": [
        "jPath"
      ]
    },
    "messageType_v01": {
      "title": "messageType_v01",
      "description": "Representation of a message.",
      "type": "object",
      "properties": {
        "codeValue": {
          "description": "The code associated with the message description.",
          "type": "string"
        },
        "title": {
          "description": "Title of the message description.",
          "type": "string"
        },
        "messageTxt": {
          "description": "The value/content of the message description.",
          "type": "string"
        },
        "links": {
          "description": "A link description object is used to describe link relations.  In the context of a schema, it defines the link relations of the instances of the schema, and can be parameterized by the instance values.  The link description format can be used on its own in regular (non-schema documents), and use of this format can be declared by referencing the normative link description schema as the the schema for the data structure that uses the links.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/linkType_v02"
          }
        }
      }
    },
    "ResourceMessage": {
      "title": "ResourceMessage",
      "description": "Each object contains detailed information for a resource referenced in the original request.",
      "type": "object",
      "properties": {
        "resourceMessageID": {
          "$ref": "#/definitions/IDType_v01"
        },
        "resourceStatusCode": {
          "$ref": "#/definitions/ResourceMessageResourceStatus"
        },
        "resourceLink": {
          "$ref": "#/definitions/linkType_v02"
        },
        "processMessages": {
          "description": "processMessage is optional and contains processing information for either the request (at the ConfirmMessage level) or a resource being managed in the request (at the ResourceMessage level).  Most often there will be a single instance for an associated request or resource, but this structure allows for more than one if needed, for example, if multiple errors exist for a single resource.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProcessMessageWithResourceStatusCode"
          }
        }
      }
    },
    "ResourceMessageResourceStatus": {
      "title": "ResourceMessageResourceStatus",
      "description": "The processing results status code of the resource of the request.",
      "type": "object",
      "properties": {
        "shortName": {
          "description": "Short description of the related code",
          "type": "string"
        },
        "longName": {
          "description": "Long description of the related code",
          "type": "string"
        },
        "codeValue": {
          "$ref": "#/definitions/CodeValue5"
        }
      }
    },
    "CodeValue5": {
      "title": "CodeValue5",
      "description": "The code for the related entity.",
      "example": "succeeded",
      "type": "string",
      "enum": [
        "succeeded",
        "failed",
        "warning"
      ]
    },
    "ProcessMessageWithResourceStatusCode": {
      "title": "ProcessMessageWithResourceStatusCode",
      "description": "Each object contains processing information for either the request (at the ConfirmMessage level) or a resource being managed in the request (at the ResourceMessage level).",
      "type": "object",
      "properties": {
        "processMessageID": {
          "$ref": "#/definitions/IDType_v01"
        },
        "messageTypeCode": {
          "$ref": "#/definitions/messageTypeCodeType_v01"
        },
        "sourceLocationExpression": {
          "description": "Expression that provides the location (or source) of content in a message instance that is associated with a process message. Examples of expression languages include: XPath, XQuery, JSON Pointer.",
          "type": "string"
        },
        "expressionLanguageCode": {
          "$ref": "#/definitions/ExpressionLanguageCode"
        },
        "links": {
          "description": "A link description object is used to describe link relations.  In the context of a schema, it defines the link relations of the instances of the schema, and can be parameterized by the instance values.  The link description format can be used on its own in regular (non-schema documents), and use of this format can be declared by referencing the normative link description schema as the the schema for the data structure that uses the links.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/linkType_v02"
          }
        },
        "userMessage": {
          "$ref": "#/definitions/messageType_v01"
        },
        "developerMessage": {
          "$ref": "#/definitions/messageType_v01"
        },
        "resourceStatusCode": {
          "$ref": "#/definitions/codeType_v01"
        }
      }
    },
    "TimeV1WorkersWorkScheduleEntriesSwappableEntries400Error": {
      "title": "TimeV1WorkersWorkScheduleEntriesSwappableEntries400Error",
      "example": {
        "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
      },
      "type": "object",
      "properties": {
        "externalValue": {
          "type": "string"
        }
      },
      "required": [
        "externalValue"
      ]
    },
    "workScheduleEntriesMetaType": {
      "title": "workScheduleEntriesMetaType",
      "description": "Collection of the  work schedule entries employees for a single employee - Meta",
      "example": {
        "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/workScheduleEntries_meta_sample_v01_00_rev001.json"
      },
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/workScheduleEntriesMeta"
        }
      }
    },
    "workScheduleEntriesMeta": {
      "title": "workScheduleEntriesMeta",
      "description": "workScheduleEntries meta schema for - workScheduleEntries_schema_v01_00_rev003.json",
      "type": "object",
      "properties": {
        "queryCriteria": {
          "description": "A collection of query criteria",
          "type": "array",
          "items": {
            "$ref": "#/definitions/workScheduleEntriesQueryCriterion"
          }
        },
        "/scheduleEntries": {
          "$ref": "#/definitions/arrayType"
        },
        "/scheduleEntries/entryTypeCode": {
          "$ref": "#/definitions/stringCodeListType"
        },
        "/scheduleEntries/entryTypeCode/codeValue": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/entryTypeCode/shortName": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/entryTypeCode/longName": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/payCode": {
          "$ref": "#/definitions/stringCodeListType"
        },
        "/scheduleEntries/payCode/codeValue": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/payCode/shortName": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/payCode/longName": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/entryStatusCode": {
          "$ref": "#/definitions/stringCodeListType"
        },
        "/scheduleEntries/entryStatusCode/codeValue": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/entryStatusCode/shortName": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/entryStatusCode/longName": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/entryStatusCode/effectiveDate": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/dateTimePeriod": {
          "$ref": "#/definitions/objectType"
        },
        "/scheduleEntries/dateTimePeriod/startDateTime": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/dateTimePeriod/endDateTime": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/datePeriod": {
          "$ref": "#/definitions/objectType"
        },
        "/scheduleEntries/datePeriod/startDate": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/datePeriod/startTime": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/datePeriod/endDate": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/datePeriod/endTime": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/totalQuantity": {
          "$ref": "#/definitions/objectType"
        },
        "/scheduleEntries/totalQuantity/quantityValue": {
          "$ref": "#/definitions/numberType"
        },
        "/scheduleEntries/totalQuantity/unitTimeCode": {
          "$ref": "#/definitions/stringCodeListType"
        },
        "/scheduleEntries/totalQuantity/unitTimeCode/codeValue": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/totalQuantity/unitTimeCode/shortName": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/totalQuantity/unitTimeCode/longName": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/totalTime": {
          "$ref": "#/definitions/objectType"
        },
        "/scheduleEntries/totalTime/timeValue": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/totalTime/nameCode": {
          "$ref": "#/definitions/stringCodeListType"
        },
        "/scheduleEntries/totalTime/nameCode/codeValue": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/totalTime/nameCode/shortName": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/totalTime/nameCode/longName": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/durationTypeCode": {
          "$ref": "#/definitions/stringCodeListType"
        },
        "/scheduleEntries/durationTypeCode/codeValue": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/durationTypeCode/shortName": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/durationTypeCode/longName": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/categoryTypeCode": {
          "$ref": "#/definitions/stringCodeListType"
        },
        "/scheduleEntries/categoryTypeCode/codeValue": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/categoryTypeCode/shortName": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/categoryTypeCode/longName": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/dayPeriodCode": {
          "$ref": "#/definitions/stringCodeListType"
        },
        "/scheduleEntries/dayPeriodCode/codeValue": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/dayPeriodCode/shortName": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/dayPeriodCode/longName": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/shiftTypeCode": {
          "$ref": "#/definitions/stringCodeListType"
        },
        "/scheduleEntries/shiftTypeCode/codeValue": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/shiftTypeCode/shortName": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/shiftTypeCode/longName": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/duration": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/earningAllocations": {
          "$ref": "#/definitions/arrayType"
        },
        "/scheduleEntries/earningAllocations/allocationCode": {
          "$ref": "#/definitions/stringCodeListType"
        },
        "/scheduleEntries/earningAllocations/allocationCode/codeValue": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/earningAllocations/allocationCode/shortName": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/earningAllocations/allocationCode/longName": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/earningAllocations/allocationTypeCode": {
          "$ref": "#/definitions/stringCodeListType"
        },
        "/scheduleEntries/earningAllocations/allocationTypeCode/codeValue": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/earningAllocations/allocationTypeCode/shortName": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/earningAllocations/allocationTypeCode/longName": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/earningAllocations/itemID": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/entryComments": {
          "$ref": "#/definitions/arrayType"
        },
        "/scheduleEntries/entryComments/textValue": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/entryComments/commentTypeCode": {
          "$ref": "#/definitions/stringCodeListType"
        },
        "/scheduleEntries/entryComments/commentTypeCode/codeValue": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/entryComments/commentTypeCode/shortName": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/entryComments/commentTypeCode/longName": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/entryComments/appliesToCode": {
          "$ref": "#/definitions/stringCodeListType"
        },
        "/scheduleEntries/entryComments/appliesToCode/codeValue": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/entryComments/appliesToCode/shortName": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/entryComments/appliesToCode/longName": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/entryComments/privateIndicator": {
          "$ref": "#/definitions/booleanType"
        },
        "/scheduleEntries/entryComments/itemID": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/scheduleEntryID": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/shiftGroupID": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/overrideWholeShiftIndicator": {
          "$ref": "#/definitions/booleanType"
        },
        "/scheduleEntries/overridePartialShiftIndicator": {
          "$ref": "#/definitions/booleanType"
        },
        "/scheduleEntries/actions": {
          "$ref": "#/definitions/arrayType"
        },
        "/scheduleEntries/actions/operationID": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/actions/canonicalUri": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/actions/actionTypeCode": {
          "$ref": "#/definitions/stringCodeListType"
        },
        "/scheduleEntries/actions/confirmationRequiredIndicator": {
          "$ref": "#/definitions/booleanType"
        },
        "/scheduleEntries/actions/commentAllowedIndicator": {
          "$ref": "#/definitions/booleanType"
        },
        "/scheduleEntries/actions/defaultIndicator": {
          "$ref": "#/definitions/booleanType"
        },
        "/scheduleEntries/actions/sequence": {
          "$ref": "#/definitions/numberType"
        },
        "/scheduleEntries/actions/attestation": {
          "$ref": "#/definitions/objectType"
        },
        "/scheduleEntries/actions/attestation/actionBlockIndicator": {
          "$ref": "#/definitions/booleanType"
        },
        "/scheduleEntries/actions/attestation/messageTxt": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/actions/attestation/messageUri": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/actions/links": {
          "$ref": "#/definitions/arrayType"
        },
        "/scheduleEntries/actions/links/href": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/actions/links/rel": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/actions/links/canonicalUri": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/actions/links/title": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/actions/links/targetSchema": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/actions/links/mediaType": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/actions/links/method": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/actions/links/encType": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/actions/links/schema": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/actions/links/payLoadArguments": {
          "$ref": "#/definitions/arrayType"
        },
        "/scheduleEntries/actions/links/payLoadArguments/argumentPath": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/actions/links/payLoadArguments/argumentValue": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/payCodeCategory": {
          "$ref": "#/definitions/stringCodeListType"
        },
        "/scheduleEntries/payCodeCategory/codeValue": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/payCodeCategory/shortName": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/payCodeCategory/longName": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/entryTags": {
          "$ref": "#/definitions/objectType"
        },
        "/scheduleEntries/entryTags/tagCode": {
          "$ref": "#/definitions/stringCodeListType"
        },
        "/scheduleEntries/entryTags/tagType": {
          "$ref": "#/definitions/objectType"
        },
        "/scheduleEntries/entryTags/tagType/dataTypeCode": {
          "$ref": "#/definitions/stringCodeListType"
        },
        "/scheduleEntries/entryTags/tagType/currencyCode": {
          "$ref": "#/definitions/stringCodeListType"
        },
        "/scheduleEntries/entryTags/tagType/formatCode": {
          "$ref": "#/definitions/stringCodeListType"
        },
        "/scheduleEntries/entryTags/tagValues": {
          "$ref": "#/definitions/arrayType"
        },
        "/scheduleEntries/associateOID": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/workAssignmentID": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/workerName": {
          "$ref": "#/definitions/objectType"
        },
        "/scheduleEntries/workerName/givenName": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/workerName/middleName": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/workerName/familyName1": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/workerName/familyName2": {
          "$ref": "#/definitions/stringType"
        },
        "/scheduleEntries/workerName/formattedName": {
          "$ref": "#/definitions/stringType"
        }
      }
    },
    "workScheduleEntriesQueryCriterion": {
      "title": "workScheduleEntriesQueryCriterion",
      "description": "A single query parameter",
      "type": "object",
      "properties": {
        "queryOptionCode": {
          "description": "A simple (string) code.  Can have a code list reference",
          "type": "string"
        },
        "obligationCode": {
          "description": "A simple (string) code.  Can have a code list reference",
          "type": "string"
        },
        "queryOptionTypeCode": {
          "description": "A simple (string) code.  Can have a code list reference",
          "type": "string"
        },
        "defaultNumberValue": {
          "description": "The default number value",
          "type": "number",
          "format": "double"
        },
        "defaultStringValue": {
          "description": "The default string value",
          "type": "string"
        },
        "resourcePathMax": {
          "description": "Maximum number of resource paths supported",
          "type": "integer",
          "format": "int32"
        },
        "pattern": {
          "description": "Indicates a regular expression on the required pattern for the value",
          "type": "string"
        },
        "resourcePaths": {
          "description": "A collection of acceptable resource paths to pass to the query option",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "excludedResourcePaths": {
          "description": "A collection of resource paths which may not be passed to the query option.  An example use of this is where you allow all paths except 1 or 2.  You would want to only specify those which are excluded",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "queryValueCodeList": {
          "$ref": "#/definitions/codeListType_v03"
        },
        "logicalOperators": {
          "description": "A collection of logical operators",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LogicalOperator"
          }
        },
        "itemID": {
          "description": "The simple (string) identifier of an object",
          "type": "string"
        }
      }
    },
    "codeListType_v03": {
      "title": "codeListType_v03",
      "type": "object",
      "properties": {
        "codeListTitle": {
          "description": "Code list title",
          "type": "string"
        },
        "exclusiveIndicator": {
          "description": "Boolean expression",
          "type": "boolean"
        },
        "listItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/codeListItemType_v02"
          }
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/linkType_v02"
          }
        }
      }
    },
    "codeListItemType_v02": {
      "title": "codeListItemType_v02",
      "type": "object",
      "properties": {
        "codeValue": {
          "description": "The code for the related entity",
          "type": "string"
        },
        "shortName": {
          "description": "Short description of the related code",
          "type": "string"
        },
        "longName": {
          "description": "Long description of the related code",
          "type": "string"
        },
        "itemID": {
          "description": "The simple (string) identifier of an object",
          "type": "string"
        },
        "valueDescription": {
          "description": "Additional list item description",
          "type": "string"
        },
        "foreignKey": {
          "description": "Allows for filtering the code list",
          "type": "string"
        },
        "inactiveIndicator": {
          "description": "Boolean expression",
          "type": "boolean"
        },
        "defaultIndicator": {
          "description": "Boolean expression",
          "type": "boolean"
        }
      }
    },
    "LogicalOperator": {
      "title": "LogicalOperator",
      "description": "A logical operation",
      "type": "object",
      "properties": {
        "logicalOperatorCode": {
          "description": "A simple (string) code.  Can have a code list reference",
          "type": "string"
        },
        "mutuallyExclusiveIndicator": {
          "description": "Boolean expression",
          "type": "boolean"
        },
        "mutuallyExclusiveLogicalOperatorCodes": {
          "description": "A list of mutually exclusive operator codes.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "arrayType": {
      "title": "arrayType",
      "type": "object",
      "properties": {
        "minItems": {
          "description": "Indicates the minimum items required for an array type.  This is only relevant if the given property is an array.",
          "type": "integer",
          "format": "int32"
        },
        "maxItems": {
          "description": "Indicates the maximum items supported for an array type.  This is only relevant if the given property is an array.",
          "type": "integer",
          "format": "int32"
        },
        "sameValueProperties": {
          "description": "A list of properties which must have the exact same value within the array",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "uniqueProperties": {
          "description": "A list of properties which together must be unique",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "uniqueItems": {
          "type": "boolean"
        },
        "dependencies": {
          "description": "List conditional dependencies of supported properties (readOnly, pattern, hidden, disallow etc.) of an attribute or an object. Dependencies can be defined using oneOf (OR) / allOf (AND) object. oneOf - successful if one of the conditions satisfies, allOf - successful if all the conditions satisfies. Refer API specification for dependencies context object syntax and rules. Dependencies context cannot be validated against context schema if dependencies is defined context JSON, because the dependencies JSON structure is dynamically defined for attributes and the not defined in the context schema. Attribute level properties and dependencies properties are mutually exclusive, example - readOnly property can be set either at attribute level or inside dependencies. If both hidden and disallow properties are set inside dependencies or at attribute level, hidden property takes precedence.",
          "type": "object"
        },
        "helperMessage": {
          "$ref": "#/definitions/helperMessageType"
        },
        "dataType": {
          "$ref": "#/definitions/metaDataType"
        },
        "dependencyLinks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/linkType_v02"
          }
        }
      }
    },
    "helperMessageType": {
      "title": "helperMessageType",
      "description": "Helper text provided to the user when they take an action to affirm to be correct, true, or genuine.",
      "type": "object",
      "properties": {
        "messageTxt": {
          "description": "Message to present to the user.",
          "type": "string"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/linkType_v02"
          }
        }
      }
    },
    "metaDataType": {
      "title": "metaDataType",
      "example": "string",
      "type": "string",
      "enum": [
        "string",
        "number",
        "integer",
        "boolean",
        "object",
        "array",
        "null",
        "any",
        "string[date-time]",
        "string[date]",
        "string[time]",
        "string[duration]",
        "string[regex]",
        "string[phone]",
        "string[uri]",
        "string[email]",
        "string[ip-address]",
        "string[ipv6]",
        "string[host-name]",
        "integer[regex]",
        "integer[utc-millisec]",
        "number[regex]",
        "number[utc-millisec]"
      ]
    },
    "stringCodeListType": {
      "title": "stringCodeListType",
      "type": "object",
      "properties": {
        "codeList": {
          "$ref": "#/definitions/codeListType_v03"
        },
        "readOnly": {
          "type": "boolean"
        },
        "optional": {
          "type": "boolean"
        },
        "hidden": {
          "type": "boolean"
        },
        "sequence": {
          "type": "integer",
          "format": "int32"
        },
        "disallow": {
          "description": "Specified on a target property.  If the passed conditions are true then this property is disallowed and therefore, not presented to a user.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/disallowItemType"
          }
        },
        "shortLabelName": {
          "description": "Provides a client defined UI label for the property which is less than an average of 20 characters in length.",
          "type": "string"
        },
        "longLabelName": {
          "description": "Provides a client defined UI long label for the property.",
          "type": "string"
        },
        "minLength": {
          "description": "Indicates the minimum length required for a property.",
          "type": "integer",
          "format": "int32"
        },
        "maxLength": {
          "description": "Indicates the maximum length supported for a property",
          "type": "integer",
          "format": "int32"
        },
        "default": {
          "description": "Indicates the default value which should be populated by default",
          "type": "string"
        },
        "pattern": {
          "description": "Indicates a regular expression on the required pattern for the value",
          "type": "string"
        },
        "masking": {
          "$ref": "#/definitions/maskingRuleType"
        },
        "equals": {
          "description": "Provides 1 to many properties which the value of this property must be equal to.  If the property is equal to any of the value of the properties then the validation is successful.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "greaterThan": {
          "description": "The value of the related property must be greater than the value of  all the given properties in the array.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "lessThan": {
          "description": "The value of the related property must be less than the value of all the given properties in the array.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "dependencies": {
          "description": "List conditional dependencies of supported properties (readOnly, pattern, hidden, disallow etc.) of an attribute or an object. Dependencies can be defined using oneOf (OR) / allOf (AND) object. oneOf - successful if one of the conditions satisfies, allOf - successful if all the conditions satisfies. Refer API specification for dependencies context object syntax and rules. Dependencies context cannot be validated against context schema if dependencies is defined context JSON, because the dependencies JSON structure is dynamically defined for attributes and the not defined in the context schema. Attribute level properties and dependencies properties are mutually exclusive, example - readOnly property can be set either at attribute level or inside dependencies. If both hidden and disallow properties are set inside dependencies or at attribute level, hidden property takes precedence.",
          "type": "object"
        },
        "helperMessage": {
          "$ref": "#/definitions/helperMessageType"
        },
        "dataType": {
          "$ref": "#/definitions/metaDataType"
        },
        "valueSet": {
          "$ref": "#/definitions/valueSetType"
        },
        "dependencyLinks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/linkType_v02"
          }
        }
      }
    },
    "disallowItemType": {
      "title": "disallowItemType",
      "type": "object",
      "properties": {
        "itemID": {
          "description": "A unique identifier of an object within the collection",
          "type": "string"
        }
      }
    },
    "maskingRuleType": {
      "title": "maskingRuleType",
      "type": "object",
      "properties": {
        "authorizationRequiredIndicator": {
          "type": "boolean"
        },
        "authorizationResourceID": {
          "type": "string"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/linkType_v02"
          }
        }
      }
    },
    "valueSetType": {
      "title": "valueSetType",
      "description": "A reference to the codelist extended with values",
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/ValueSetMeta"
        },
        "valueSetListItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/valueSetItemType"
          }
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/linkType_v02"
          }
        }
      }
    },
    "ValueSetMeta": {
      "title": "ValueSetMeta",
      "type": "object",
      "properties": {
        "idValuePath": {
          "description": "Code value (typically a key field) of the code list item",
          "type": "string"
        },
        "itemDescriptionPath": {
          "description": "Short name field of the code list item",
          "type": "string"
        }
      }
    },
    "valueSetItemType": {
      "title": "valueSetItemType",
      "description": "The value set item type",
      "type": "object",
      "properties": {
        "idValue": {
          "description": "The code for the related entity",
          "type": "string"
        },
        "itemDescription": {
          "description": "Short description of the related code",
          "type": "string"
        },
        "defaultIndicator": {
          "description": "Indicates if the current value is a default (pre-selected)",
          "type": "boolean"
        }
      }
    },
    "stringType": {
      "title": "stringType",
      "type": "object",
      "properties": {
        "readOnly": {
          "type": "boolean"
        },
        "optional": {
          "type": "boolean"
        },
        "hidden": {
          "type": "boolean"
        },
        "sequence": {
          "type": "integer",
          "format": "int32"
        },
        "disallow": {
          "description": "Specified on a target property.  If the passed conditions are true then this property is disallowed and therefore, not presented to a user.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/disallowItemType"
          }
        },
        "shortLabelName": {
          "description": "Provides a client defined UI label for the property which is less than an average of 20 characters in length.",
          "type": "string"
        },
        "longLabelName": {
          "description": "Provides a client defined UI long label for the property.",
          "type": "string"
        },
        "minLength": {
          "description": "Indicates the minimum length required for a property.",
          "type": "integer",
          "format": "int32"
        },
        "maxLength": {
          "description": "Indicates the maximum length supported for a property",
          "type": "integer",
          "format": "int32"
        },
        "default": {
          "description": "Indicates the default value which should be populated by default",
          "type": "string"
        },
        "pattern": {
          "description": "Indicates a regular expression on the required pattern for the value",
          "type": "string"
        },
        "masking": {
          "$ref": "#/definitions/maskingRuleType"
        },
        "equals": {
          "description": "Provides 1 to many properties which the value of this property must be equal to.  If the property is equal to any of the value of the properties then the validation is successful.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "greaterThan": {
          "description": "The value of the related property must be greater than the value of  all the given properties in the array.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "lessThan": {
          "description": "The value of the related property must be less than the value of all the given properties in the array.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "dependencies": {
          "description": "List conditional dependencies of supported properties (readOnly, pattern, hidden, disallow etc.) of an attribute or an object. Dependencies can be defined using oneOf (OR) / allOf (AND) object. oneOf - successful if one of the conditions satisfies, allOf - successful if all the conditions satisfies. Refer API specification for dependencies context object syntax and rules. Dependencies context cannot be validated against context schema if dependencies is defined context JSON, because the dependencies JSON structure is dynamically defined for attributes and the not defined in the context schema. Attribute level properties and dependencies properties are mutually exclusive, example - readOnly property can be set either at attribute level or inside dependencies. If both hidden and disallow properties are set inside dependencies or at attribute level, hidden property takes precedence.",
          "type": "object"
        },
        "helperMessage": {
          "$ref": "#/definitions/helperMessageType"
        },
        "dataType": {
          "$ref": "#/definitions/metaDataType"
        },
        "valueSet": {
          "$ref": "#/definitions/valueSetType"
        },
        "dependencyLinks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/linkType_v02"
          }
        }
      }
    },
    "objectType": {
      "title": "objectType",
      "type": "object",
      "properties": {
        "readOnly": {
          "description": "True indicates that the property is marked read only in the given context",
          "example": false,
          "type": "boolean",
          "default": false
        },
        "optional": {
          "description": "True indicates that this property does not need to be valued",
          "example": true,
          "type": "boolean",
          "default": true
        },
        "hidden": {
          "description": "True indicates that the property is carried in the message - to and from the System of Record, but is not exposed in the UI",
          "example": false,
          "type": "boolean",
          "default": false
        },
        "sequence": {
          "type": "integer",
          "format": "int32"
        },
        "disallow": {
          "description": "Specified on a target property.  If the passed conditions are true then this property is disallowed and therefore, not presented to a user.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/disallowItemType"
          }
        },
        "dependencies": {
          "description": "List conditional dependencies of supported properties (readOnly, pattern, hidden, disallow etc.) of an attribute or an object. Dependencies can be defined using oneOf (OR) / allOf (AND) object. oneOf - successful if one of the conditions satisfies, allOf - successful if all the conditions satisfies. Refer API specification for dependencies context object syntax and rules. Dependencies context cannot be validated against context schema if dependencies is defined context JSON, because the dependencies JSON structure is dynamically defined for attributes and the not defined in the context schema. Attribute level properties and dependencies properties are mutually exclusive, example - readOnly property can be set either at attribute level or inside dependencies. If both hidden and disallow properties are set inside dependencies or at attribute level, hidden property takes precedence.",
          "type": "object"
        },
        "helperMessage": {
          "$ref": "#/definitions/helperMessageType"
        },
        "dataType": {
          "$ref": "#/definitions/metaDataType"
        },
        "dependencyLinks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/linkType_v02"
          }
        }
      }
    },
    "numberType": {
      "title": "numberType",
      "type": "object",
      "properties": {
        "readOnly": {
          "description": "True indicates that the property is marked read only in the given context",
          "example": false,
          "type": "boolean",
          "default": false
        },
        "optional": {
          "description": "True indicates that this property does not need to be valued",
          "example": false,
          "type": "boolean",
          "default": false
        },
        "hidden": {
          "description": "True indicates that the property is carried in the message - to and from the System of Record, but is not exposed in the UI",
          "example": false,
          "type": "boolean",
          "default": false
        },
        "sequence": {
          "type": "integer",
          "format": "int32"
        },
        "disallow": {
          "description": "Specified on a target property.  If the passed conditions are true then this property is disallowed and therefore, not presented to a user.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/disallowItemType"
          }
        },
        "shortLabelName": {
          "description": "Provides a client defined UI label for the property which is less than an average of 20 characters in length.",
          "type": "string"
        },
        "longLabelName": {
          "description": "Provides a client defined UI long label for the property.",
          "type": "string"
        },
        "minLength": {
          "description": "Indicates the minimum length required for a property.",
          "type": "integer",
          "format": "int32"
        },
        "maxLength": {
          "description": "Indicates the maximum length supported for a property",
          "type": "integer",
          "format": "int32"
        },
        "minValue": {
          "description": "Indicates the minimum value required for a property.",
          "type": "number",
          "format": "double"
        },
        "maxValue": {
          "description": "Indicates the maximum value supported for a property",
          "type": "number",
          "format": "double"
        },
        "multipleOf": {
          "description": "Indicates that the value must be a multiple of this value or divisible by this value.",
          "type": "number",
          "format": "double"
        },
        "default": {
          "description": "Indicates the default value which should be populated by default",
          "type": "number",
          "format": "double"
        },
        "pattern": {
          "description": "Indicates a regular expression on the required pattern for the value",
          "type": "string"
        },
        "masking": {
          "$ref": "#/definitions/maskingRuleType"
        },
        "equals": {
          "description": "Provides 1 to many properties which the value of this property must be equal to.  If the property is equal to any of the value of the properties then the validation is successful.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "greaterThan": {
          "description": "The value of the related property must be greater than the value of  all the given properties in the array.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "lessThan": {
          "description": "The value of the related property must be less than the value of all the given properties in the array.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "dependencies": {
          "description": "List conditional dependencies of supported properties (readOnly, pattern, hidden, disallow etc.) of an attribute or an object. Dependencies can be defined using oneOf (OR) / allOf (AND) object. oneOf - successful if one of the conditions satisfies, allOf - successful if all the conditions satisfies. Refer API specification for dependencies context object syntax and rules. Dependencies context cannot be validated against context schema if dependencies is defined context JSON, because the dependencies JSON structure is dynamically defined for attributes and the not defined in the context schema. Attribute level properties and dependencies properties are mutually exclusive, example - readOnly property can be set either at attribute level or inside dependencies. If both hidden and disallow properties are set inside dependencies or at attribute level, hidden property takes precedence.",
          "type": "object"
        },
        "helperMessage": {
          "$ref": "#/definitions/helperMessageType"
        },
        "dataType": {
          "$ref": "#/definitions/metaDataType"
        },
        "dependencyLinks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/linkType_v02"
          }
        }
      }
    },
    "booleanType": {
      "title": "booleanType",
      "type": "object",
      "properties": {
        "readOnly": {
          "description": "True indicates that the property is marked read only in the given context",
          "example": false,
          "type": "boolean",
          "default": false
        },
        "optional": {
          "description": "True indicates that this property does not need to be valued",
          "example": false,
          "type": "boolean",
          "default": false
        },
        "hidden": {
          "description": "True indicates that the property is carried in the message - to and from the System of Record, but is not exposed in the UI",
          "type": "boolean"
        },
        "sequence": {
          "type": "integer",
          "format": "int32"
        },
        "disallow": {
          "description": "Specified on a target property.  If the passed conditions are true then this property is disallowed and therefore, not presented to a user.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/disallowItemType"
          }
        },
        "shortLabelName": {
          "description": "Provides a client defined UI label for the property which is less than an average of 20 characters in length.",
          "type": "string"
        },
        "longLabelName": {
          "description": "Provides a client defined UI long label for the property",
          "type": "string"
        },
        "default": {
          "description": "Indicates the default value which should be populated by default",
          "type": "boolean"
        },
        "equals": {
          "description": "Provides 1 to many properties which the value of this property must be equal to.  If the property is equal to any of the value of the properties then the validation is successful.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "dependencies": {
          "description": "List conditional dependencies of supported properties (readOnly, pattern, hidden, disallow etc.) of an attribute or an object. Dependencies can be defined using oneOf (OR) / allOf (AND) object. oneOf - successful if one of the conditions satisfies, allOf - successful if all the conditions satisfies. Refer API specification for dependencies context object syntax and rules. Dependencies context cannot be validated against context schema if dependencies is defined context JSON, because the dependencies JSON structure is dynamically defined for attributes and the not defined in the context schema. Attribute level properties and dependencies properties are mutually exclusive, example - readOnly property can be set either at attribute level or inside dependencies. If both hidden and disallow properties are set inside dependencies or at attribute level, hidden property takes precedence.",
          "type": "object"
        },
        "helperMessage": {
          "$ref": "#/definitions/helperMessageType"
        },
        "dataType": {
          "$ref": "#/definitions/DataType"
        },
        "dependencyLinks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/linkType_v02"
          }
        }
      }
    },
    "DataType": {
      "title": "DataType",
      "description": "Data type of the attribute",
      "example": "string",
      "type": "string",
      "enum": [
        "string",
        "number",
        "integer",
        "boolean",
        "object",
        "array",
        "null",
        "any",
        "string[date-time]",
        "string[date]",
        "string[time]",
        "string[regex]",
        "string[phone]",
        "string[uri]",
        "string[email]",
        "string[ip-address]",
        "string[ipv6]",
        "string[host-name]",
        "integer[regex]",
        "integer[utc-millisec]",
        "number[regex]",
        "number[utc-millisec]"
      ]
    }
  },
  "tags": [
    {
      "name": "Swap Eligibe Schedule Entries",
      "description": "List swappable work schedule entries"
    }
  ]
}