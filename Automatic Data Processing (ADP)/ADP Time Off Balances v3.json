{
  "swagger": "2.0",
  "info": {
    "version": "3.0.0",
    "title": "Time Off Balances",
    "description": "This API is used by an employee to view time off balances or by a manager to view the balances for a team.",
    "contact": {
      "email": "Boris.Vernoff@adp.com",
      "name": "Boris Vernoff"
    }
  },
  "host": "test-api.adp.com",
  "basePath": "/",
  "schemes": [],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/time/v3/workers/{aoid}/time-off-balances/meta": {
      "get": {
        "description": "Returns API metadata",
        "summary": "21f25bcf-25bf-449a-8fe5-99eb448e3d0d",
        "tags": [
          "Worker Time Off Balances"
        ],
        "operationId": "TimeV3WorkersTimeOffBalancesMetaByAoidGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "aoid",
            "in": "path",
            "required": true,
            "default": "G4O73G9Z62SL2NFM",
            "type": "string",
            "description": "<li>Returns the timeCards that fall into the symbolic time periods. </li>"
          },
          {
            "name": "roleCode",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "The role the user is playing during the transaction.  Possible values: employee,manager,practitioner,administrator,supervisor.  The roleCode header will be passed in all calls. When coming from Myself capabilities rolecode=employee. When coming from Team capabilities roleCode=manager. When coming from Practitioner capabilities roleCode=practitioner."
          }
        ],
        "responses": {
          "200": {
            "description": "Returns API metadata",
            "schema": {
              "$ref": "#/definitions/timeOffBalancesMetaType"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/timeOffBalances_meta_sample_v03_00_rev001.json"
              }
            },
            "headers": {
              "ETag": {
                "type": "string"
              },
              "Cache-Control": {
                "type": "string"
              }
            }
          },
          "304": {
            "description": "Not Modified",
            "schema": {}
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TimeV3WorkersTimeOffBalancesMeta400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TimeV3WorkersTimeOffBalancesMeta400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TimeV3WorkersTimeOffBalancesMeta400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "schema": {
              "$ref": "#/definitions/TimeV3WorkersTimeOffBalancesMeta400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/TimeV3WorkersTimeOffBalancesMeta400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/TimeV3WorkersTimeOffBalancesMeta400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "413": {
            "description": "Request Entity Too Large",
            "schema": {
              "$ref": "#/definitions/TimeV3WorkersTimeOffBalancesMeta400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/TimeV3WorkersTimeOffBalancesMeta400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "default": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TimeV3WorkersTimeOffBalancesMeta400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "$ref": "#/definitions/TimeV3WorkersTimeOffBalancesMeta400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          }
        }
      }
    },
    "/time/v3/workers/{aoid}/team-time-off-balances/meta": {
      "get": {
        "description": "Returns API metadata",
        "summary": "4a569b55-7d4b-4c3e-a3a7-5abb48200e07",
        "tags": [
          "Worker Time Off Balances"
        ],
        "operationId": "TimeV3WorkersTeamTimeOffBalancesMetaByAoidGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "aoid",
            "in": "path",
            "required": true,
            "default": "G4O73G9Z62SL2NFM",
            "type": "string",
            "description": "<li style=\"padding-bottom: 15.0px;\">Returns the timeCards that have a timePeriod with the startDate equal to {startDate} and an endDate equal to the {endDate}</li>"
          },
          {
            "name": "roleCode",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "The role the user is playing during the transaction.  Possible values: employee,manager,practitioner,administrator,supervisor.  The roleCode header will be passed in all calls. When coming from Myself capabilities rolecode=employee. When coming from Team capabilities roleCode=manager. When coming from Practitioner capabilities roleCode=practitioner."
          }
        ],
        "responses": {
          "200": {
            "description": "Returns API metadata",
            "schema": {
              "$ref": "#/definitions/timeOffBalancesMetaType"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/timeOffBalances_team_meta_sample_v03_00_rev001.json"
              }
            },
            "headers": {
              "ETag": {
                "type": "string"
              },
              "Cache-Control": {
                "type": "string"
              }
            }
          },
          "304": {
            "description": "Not Modified",
            "schema": {}
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/TimeV3WorkersTimeOffBalancesMeta400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/TimeV3WorkersTimeOffBalancesMeta400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/TimeV3WorkersTimeOffBalancesMeta400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "schema": {
              "$ref": "#/definitions/TimeV3WorkersTimeOffBalancesMeta400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/TimeV3WorkersTimeOffBalancesMeta400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/TimeV3WorkersTimeOffBalancesMeta400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "413": {
            "description": "Request Entity Too Large",
            "schema": {
              "$ref": "#/definitions/TimeV3WorkersTimeOffBalancesMeta400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/TimeV3WorkersTimeOffBalancesMeta400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "default": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/TimeV3WorkersTimeOffBalancesMeta400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "$ref": "#/definitions/TimeV3WorkersTimeOffBalancesMeta400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "timeOffBalancesMetaType": {
      "title": "timeOffBalancesMetaType",
      "description": "Collection of the time off balances for a single or multiple workers - Meta",
      "example": {
        "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/timeOffBalances_meta_sample_v03_00_rev001.json"
      },
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/timeOffBalancesMeta"
        }
      }
    },
    "timeOffBalancesMeta": {
      "title": "timeOffBalancesMeta",
      "description": "timeOffBalances meta schema for - timeOffBalances_schema_v03_00_rev001.json",
      "type": "object",
      "properties": {
        "queryCriteria": {
          "description": "A collection of query criteria",
          "type": "array",
          "items": {
            "$ref": "#/definitions/timeOffBalancesQueryCriterion"
          }
        },
        "/timeOffBalances": {
          "$ref": "#/definitions/arrayType"
        },
        "/timeOffBalances/associateOID": {
          "$ref": "#/definitions/stringType"
        },
        "/timeOffBalances/workAssignmentID": {
          "$ref": "#/definitions/stringType"
        },
        "/timeOffBalances/itemID": {
          "$ref": "#/definitions/stringType"
        },
        "/timeOffBalances/workerName": {
          "$ref": "#/definitions/objectType"
        },
        "/timeOffBalances/workerName/givenName": {
          "$ref": "#/definitions/stringType"
        },
        "/timeOffBalances/workerName/middleName": {
          "$ref": "#/definitions/stringType"
        },
        "/timeOffBalances/workerName/familyName1": {
          "$ref": "#/definitions/stringType"
        },
        "/timeOffBalances/workerName/familyName2": {
          "$ref": "#/definitions/stringType"
        },
        "/timeOffBalances/workerName/formattedName": {
          "$ref": "#/definitions/stringType"
        },
        "/timeOffBalances/workAssignmentTitle": {
          "$ref": "#/definitions/stringType"
        },
        "/timeOffBalances/balanceAsOfDate": {
          "$ref": "#/definitions/stringType"
        },
        "/timeOffBalances/timeOffPolicyBalances": {
          "$ref": "#/definitions/arrayType"
        },
        "/timeOffBalances/timeOffPolicyBalances/timeOffPolicyCode": {
          "$ref": "#/definitions/stringCodeListType"
        },
        "/timeOffBalances/timeOffPolicyBalances/timeOffPolicyCode/codeValue": {
          "$ref": "#/definitions/stringType"
        },
        "/timeOffBalances/timeOffPolicyBalances/timeOffPolicyCode/shortName": {
          "$ref": "#/definitions/stringType"
        },
        "/timeOffBalances/timeOffPolicyBalances/timeOffPolicyCode/longName": {
          "$ref": "#/definitions/stringType"
        },
        "/timeOffBalances/timeOffPolicyBalances/policyBalances": {
          "$ref": "#/definitions/arrayType"
        },
        "/timeOffBalances/timeOffPolicyBalances/policyBalances/balanceTypeCode": {
          "$ref": "#/definitions/stringCodeListType"
        },
        "/timeOffBalances/timeOffPolicyBalances/policyBalances/balanceTypeCode/codeValue": {
          "$ref": "#/definitions/stringType"
        },
        "/timeOffBalances/timeOffPolicyBalances/policyBalances/balanceTypeCode/shortName": {
          "$ref": "#/definitions/stringType"
        },
        "/timeOffBalances/timeOffPolicyBalances/policyBalances/balanceTypeCode/longName": {
          "$ref": "#/definitions/stringType"
        },
        "/timeOffBalances/timeOffPolicyBalances/policyBalances/totalQuantity": {
          "$ref": "#/definitions/objectType"
        },
        "/timeOffBalances/timeOffPolicyBalances/policyBalances/totalQuantity/quantityValue": {
          "$ref": "#/definitions/numberType"
        },
        "/timeOffBalances/timeOffPolicyBalances/policyBalances/totalQuantity/unitTimeCode": {
          "$ref": "#/definitions/stringCodeListType"
        },
        "/timeOffBalances/timeOffPolicyBalances/policyBalances/totalQuantity/unitTimeCode/codeValue": {
          "$ref": "#/definitions/stringType"
        },
        "/timeOffBalances/timeOffPolicyBalances/policyBalances/totalQuantity/unitTimeCode/shortName": {
          "$ref": "#/definitions/stringType"
        },
        "/timeOffBalances/timeOffPolicyBalances/policyBalances/totalQuantity/unitTimeCode/longName": {
          "$ref": "#/definitions/stringType"
        },
        "/timeOffBalances/timeOffPolicyBalances/policyBalances/totalTime": {
          "$ref": "#/definitions/objectType"
        },
        "/timeOffBalances/timeOffPolicyBalances/policyBalances/totalTime/timeValue": {
          "$ref": "#/definitions/stringType"
        },
        "/timeOffBalances/timeOffPolicyBalances/policyBalances/totalTime/nameCode": {
          "$ref": "#/definitions/stringCodeListType"
        },
        "/timeOffBalances/timeOffPolicyBalances/policyBalances/totalTime/nameCode/codeValue": {
          "$ref": "#/definitions/stringType"
        },
        "/timeOffBalances/timeOffPolicyBalances/policyBalances/totalTime/nameCode/shortName": {
          "$ref": "#/definitions/stringType"
        },
        "/timeOffBalances/timeOffPolicyBalances/policyBalances/totalTime/nameCode/longName": {
          "$ref": "#/definitions/stringType"
        },
        "/timeOffBalances/timeOffPolicyBalances/policyBalances/accrualBalances": {
          "$ref": "#/definitions/arrayType"
        },
        "/timeOffBalances/timeOffPolicyBalances/policyBalances/accrualBalances/accrualTypeCode": {
          "$ref": "#/definitions/stringCodeListType"
        },
        "/timeOffBalances/timeOffPolicyBalances/policyBalances/accrualBalances/accrualTypeCode/codeValue": {
          "$ref": "#/definitions/stringType"
        },
        "/timeOffBalances/timeOffPolicyBalances/policyBalances/accrualBalances/accrualTypeCode/shortName": {
          "$ref": "#/definitions/stringType"
        },
        "/timeOffBalances/timeOffPolicyBalances/policyBalances/accrualBalances/accrualTypeCode/longName": {
          "$ref": "#/definitions/stringType"
        },
        "/timeOffBalances/timeOffPolicyBalances/policyBalances/accrualBalances/totalQuantity": {
          "$ref": "#/definitions/objectType"
        },
        "/timeOffBalances/timeOffPolicyBalances/policyBalances/accrualBalances/totalQuantity/quantityValue": {
          "$ref": "#/definitions/numberType"
        },
        "/timeOffBalances/timeOffPolicyBalances/policyBalances/accrualBalances/totalQuantity/unitTimeCode": {
          "$ref": "#/definitions/stringCodeListType"
        },
        "/timeOffBalances/timeOffPolicyBalances/policyBalances/accrualBalances/totalQuantity/unitTimeCode/codeValue": {
          "$ref": "#/definitions/stringType"
        },
        "/timeOffBalances/timeOffPolicyBalances/policyBalances/accrualBalances/totalQuantity/unitTimeCode/shortName": {
          "$ref": "#/definitions/stringType"
        },
        "/timeOffBalances/timeOffPolicyBalances/policyBalances/accrualBalances/totalQuantity/unitTimeCode/longName": {
          "$ref": "#/definitions/stringType"
        },
        "/timeOffBalances/timeOffPolicyBalances/policyBalances/accrualBalances/totalTime": {
          "$ref": "#/definitions/objectType"
        },
        "/timeOffBalances/timeOffPolicyBalances/policyBalances/accrualBalances/totalTime/timeValue": {
          "$ref": "#/definitions/stringType"
        },
        "/timeOffBalances/timeOffPolicyBalances/policyBalances/accrualBalances/totalTime/nameCode": {
          "$ref": "#/definitions/stringCodeListType"
        },
        "/timeOffBalances/timeOffPolicyBalances/policyBalances/accrualBalances/totalTime/nameCode/codeValue": {
          "$ref": "#/definitions/stringType"
        },
        "/timeOffBalances/timeOffPolicyBalances/policyBalances/accrualBalances/totalTime/nameCode/shortName": {
          "$ref": "#/definitions/stringType"
        },
        "/timeOffBalances/timeOffPolicyBalances/policyBalances/accrualBalances/totalTime/nameCode/longName": {
          "$ref": "#/definitions/stringType"
        },
        "/timeOffBalances/timeOffPolicyBalances/policyBalances/accrualBalances/expiringTotalQuantity": {
          "$ref": "#/definitions/objectType"
        },
        "/timeOffBalances/timeOffPolicyBalances/policyBalances/accrualBalances/expiringTotalQuantity/quantityValue": {
          "$ref": "#/definitions/numberType"
        },
        "/timeOffBalances/timeOffPolicyBalances/policyBalances/accrualBalances/expiringTotalQuantity/unitTimeCode": {
          "$ref": "#/definitions/stringCodeListType"
        },
        "/timeOffBalances/timeOffPolicyBalances/policyBalances/accrualBalances/expiringTotalQuantity/unitTimeCode/codeValue": {
          "$ref": "#/definitions/stringType"
        },
        "/timeOffBalances/timeOffPolicyBalances/policyBalances/accrualBalances/expiringTotalQuantity/unitTimeCode/shortName": {
          "$ref": "#/definitions/stringType"
        },
        "/timeOffBalances/timeOffPolicyBalances/policyBalances/accrualBalances/expiringTotalQuantity/unitTimeCode/longName": {
          "$ref": "#/definitions/stringType"
        },
        "/timeOffBalances/timeOffPolicyBalances/policyBalances/accrualBalances/expiringTotalTime": {
          "$ref": "#/definitions/objectType"
        },
        "/timeOffBalances/timeOffPolicyBalances/policyBalances/accrualBalances/expiringTotalTime/timeValue": {
          "$ref": "#/definitions/stringType"
        },
        "/timeOffBalances/timeOffPolicyBalances/policyBalances/accrualBalances/expiringTotalTime/nameCode": {
          "$ref": "#/definitions/stringCodeListType"
        },
        "/timeOffBalances/timeOffPolicyBalances/policyBalances/accrualBalances/expiringTotalTime/nameCode/codeValue": {
          "$ref": "#/definitions/stringType"
        },
        "/timeOffBalances/timeOffPolicyBalances/policyBalances/accrualBalances/expiringTotalTime/nameCode/shortName": {
          "$ref": "#/definitions/stringType"
        },
        "/timeOffBalances/timeOffPolicyBalances/policyBalances/accrualBalances/expiringTotalTime/nameCode/longName": {
          "$ref": "#/definitions/stringType"
        },
        "/timeOffBalances/timeOffPolicyBalances/policyBalances/accrualBalances/expireDateTime": {
          "$ref": "#/definitions/stringType"
        }
      }
    },
    "timeOffBalancesQueryCriterion": {
      "title": "timeOffBalancesQueryCriterion",
      "description": "A single query parameter",
      "type": "object",
      "properties": {
        "queryOptionCode": {
          "description": "A simple (string) code.  Can have a code list reference",
          "type": "string"
        },
        "obligationCode": {
          "description": "A simple (string) code.  Can have a code list reference",
          "type": "string"
        },
        "queryOptionTypeCode": {
          "description": "A simple (string) code.  Can have a code list reference",
          "type": "string"
        },
        "defaultNumberValue": {
          "description": "The default number value",
          "type": "number",
          "format": "double"
        },
        "defaultStringValue": {
          "description": "The default string value",
          "type": "string"
        },
        "resourcePathMax": {
          "description": "Maximum number of resource paths supported",
          "type": "integer",
          "format": "int32"
        },
        "pattern": {
          "description": "Indicates a regular expression on the required pattern for the value",
          "type": "string"
        },
        "resourcePaths": {
          "description": "A collection of acceptable resource paths to pass to the query option",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "excludedResourcePaths": {
          "description": "A collection of resource paths which may not be passed to the query option.  An example use of this is where you allow all paths except 1 or 2.  You would want to only specify those which are excluded",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "queryValueCodeList": {
          "$ref": "#/definitions/codeListType_v03"
        },
        "logicalOperators": {
          "description": "A collection of logical operators",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LogicalOperator"
          }
        },
        "itemID": {
          "description": "The simple (string) identifier of an object",
          "type": "string"
        }
      }
    },
    "codeListType_v03": {
      "title": "codeListType_v03",
      "type": "object",
      "properties": {
        "codeListTitle": {
          "description": "Code list title",
          "type": "string"
        },
        "exclusiveIndicator": {
          "description": "Boolean expression",
          "type": "boolean"
        },
        "listItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/codeListItemType_v02"
          }
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/linkType_v02"
          }
        }
      }
    },
    "codeListItemType_v02": {
      "title": "codeListItemType_v02",
      "type": "object",
      "properties": {
        "codeValue": {
          "description": "The code for the related entity",
          "type": "string"
        },
        "shortName": {
          "description": "Short description of the related code",
          "type": "string"
        },
        "longName": {
          "description": "Long description of the related code",
          "type": "string"
        },
        "itemID": {
          "description": "The simple (string) identifier of an object",
          "type": "string"
        },
        "valueDescription": {
          "description": "Additional list item description",
          "type": "string"
        },
        "foreignKey": {
          "description": "Allows for filtering the code list",
          "type": "string"
        },
        "inactiveIndicator": {
          "description": "Boolean expression",
          "type": "boolean"
        },
        "defaultIndicator": {
          "description": "Boolean expression",
          "type": "boolean"
        }
      }
    },
    "linkType_v02": {
      "title": "linkType_v02",
      "description": "A link description object is used to describe link relations.  In the context of a schema, it defines the link relations of the instances of the schema, and can be parameterized by the instance values.  The link description format can be used on its own in regular (non-schema documents), and use of this format can be declared by referencing the normative link description schema as the the schema for the data structure that uses the links",
      "type": "object",
      "properties": {
        "href": {
          "description": "The URI of the related entity",
          "type": "string"
        },
        "rel": {
          "$ref": "#/definitions/Rel"
        },
        "canonicalUri": {
          "description": "The URI of the related entity",
          "type": "string"
        },
        "title": {
          "description": "This property defines a title for the link.  The value must be a string. User agents MAY use this title when presenting the link to the user",
          "type": "string"
        },
        "targetSchema": {
          "description": "This property is a schema that defines the expected structure of the JSON representation of the target of the link, if the target of the link is returned using JSON representation",
          "type": "string"
        },
        "mediaType": {
          "$ref": "#/definitions/MediaType"
        },
        "method": {
          "$ref": "#/definitions/Method"
        },
        "encType": {
          "$ref": "#/definitions/EncType"
        },
        "schema": {
          "description": "This property contains a schema which defines the acceptable structure of the submitted request.  For a GET request, this schema would define the properties for the query string and for a POST request, this would define the body",
          "type": "string"
        },
        "payLoadArguments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PayLoadArgument"
          }
        }
      }
    },
    "Rel": {
      "title": "Rel",
      "description": "Indicates the nature of the relationship of the related resource to the resource that generated this representation",
      "example": "alternate",
      "type": "string",
      "enum": [
        "alternate",
        "create",
        "canonical",
        "describedby",
        "edit-form",
        "enclosure",
        "full",
        "related",
        "root",
        "self",
        "up",
        "search",
        "first",
        "last",
        "next",
        "previous",
        "/adp/invoke",
        "/adp/image",
        "/adp/confirm-message",
        "/adp/status-monitor",
        "/adp/codelist",
        "/adp/template",
        "/adp/externalLink",
        "/adp/validation",
        "/adp/deeplink",
        "/adp/attachment",
        "/adp/workflow"
      ]
    },
    "MediaType": {
      "title": "MediaType",
      "description": "The media type that the linked resource will return (Response)",
      "example": "application/gzip",
      "type": "string",
      "enum": [
        "application/gzip",
        "application/json",
        "application/msword",
        "application/pdf",
        "application/postscript",
        "application/vnd.ms-excel",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
        "application/xml",
        "application/x-www-form-urlencoded",
        "image/gif",
        "image/jpeg",
        "image/png",
        "image/tiff",
        "multipart/mixed",
        "text/html",
        "text/plain",
        "application/vnd.visio",
        "image/bmp",
        "image/x-ms-bmp",
        "application/vnd.openxmlformats-officedocument.presentationml.presentation",
        "application/vnd.ms-powerpoint",
        "video/mp4",
        "audio/mpeg",
        "video/x-msvideo",
        "video/x-ms-wmv",
        "application/rtf",
        "application/vnd.ms-outlook",
        "text/csv",
        "video/quicktime",
        "application/zip",
        "application/illustrator",
        "text/xml"
      ]
    },
    "Method": {
      "title": "Method",
      "description": "The HTTP method code (HTTP Verb) traverse the link (GET, POST, PUT or DELETE)",
      "example": "GET",
      "type": "string",
      "enum": [
        "GET",
        "POST",
        "DELETE",
        "PUT"
      ]
    },
    "EncType": {
      "title": "EncType",
      "description": "If present, this property indicates a query media type format that the server supports for querying or posting to the collection of instances at the target resource.  The query can be suffixed to the target URI to query the collection with property-based constraints on the resources that SHOULD be returned from the server or used to post data to the resource (depending on the method). (Request)",
      "example": "application/json",
      "type": "string",
      "enum": [
        "application/json",
        "application/x-www-form-urlencoded"
      ]
    },
    "PayLoadArgument": {
      "title": "PayLoadArgument",
      "type": "object",
      "properties": {
        "argumentPath": {
          "description": "Code value (typically a key field) of the code list item",
          "type": "string"
        },
        "argumentValue": {
          "description": "Code value (typically a key field) of the code list item",
          "type": "string"
        }
      }
    },
    "LogicalOperator": {
      "title": "LogicalOperator",
      "description": "A logical operation",
      "type": "object",
      "properties": {
        "logicalOperatorCode": {
          "description": "A simple (string) code.  Can have a code list reference",
          "type": "string"
        },
        "mutuallyExclusiveIndicator": {
          "description": "Boolean expression",
          "type": "boolean"
        },
        "mutuallyExclusiveLogicalOperatorCodes": {
          "description": "A list of mutually exclusive operator codes.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "arrayType": {
      "title": "arrayType",
      "type": "object",
      "properties": {
        "minItems": {
          "description": "Indicates the minimum items required for an array type.  This is only relevant if the given property is an array.",
          "type": "integer",
          "format": "int32"
        },
        "maxItems": {
          "description": "Indicates the maximum items supported for an array type.  This is only relevant if the given property is an array.",
          "type": "integer",
          "format": "int32"
        },
        "sameValueProperties": {
          "description": "A list of properties which must have the exact same value within the array",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "uniqueProperties": {
          "description": "A list of properties which together must be unique",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "uniqueItems": {
          "type": "boolean"
        },
        "dependencies": {
          "description": "List conditional dependencies of supported properties (readOnly, pattern, hidden, disallow etc.) of an attribute or an object. Dependencies can be defined using oneOf (OR) / allOf (AND) object. oneOf - successful if one of the conditions satisfies, allOf - successful if all the conditions satisfies. Refer API specification for dependencies context object syntax and rules. Dependencies context cannot be validated against context schema if dependencies is defined context JSON, because the dependencies JSON structure is dynamically defined for attributes and the not defined in the context schema. Attribute level properties and dependencies properties are mutually exclusive, example - readOnly property can be set either at attribute level or inside dependencies. If both hidden and disallow properties are set inside dependencies or at attribute level, hidden property takes precedence.",
          "type": "object"
        },
        "helperMessage": {
          "$ref": "#/definitions/helperMessageType"
        },
        "dataType": {
          "$ref": "#/definitions/metaDataType"
        },
        "dependencyLinks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/linkType_v02"
          }
        }
      }
    },
    "helperMessageType": {
      "title": "helperMessageType",
      "description": "Helper text provided to the user when they take an action to affirm to be correct, true, or genuine.",
      "type": "object",
      "properties": {
        "messageTxt": {
          "description": "Message to present to the user.",
          "type": "string"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/linkType_v02"
          }
        }
      }
    },
    "metaDataType": {
      "title": "metaDataType",
      "example": "string",
      "type": "string",
      "enum": [
        "string",
        "number",
        "integer",
        "boolean",
        "object",
        "array",
        "null",
        "any",
        "string[date-time]",
        "string[date]",
        "string[time]",
        "string[duration]",
        "string[regex]",
        "string[phone]",
        "string[uri]",
        "string[email]",
        "string[ip-address]",
        "string[ipv6]",
        "string[host-name]",
        "integer[regex]",
        "integer[utc-millisec]",
        "number[regex]",
        "number[utc-millisec]"
      ]
    },
    "stringType": {
      "title": "stringType",
      "type": "object",
      "properties": {
        "readOnly": {
          "type": "boolean"
        },
        "optional": {
          "type": "boolean"
        },
        "hidden": {
          "type": "boolean"
        },
        "sequence": {
          "type": "integer",
          "format": "int32"
        },
        "disallow": {
          "description": "Specified on a target property.  If the passed conditions are true then this property is disallowed and therefore, not presented to a user.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/disallowItemType"
          }
        },
        "shortLabelName": {
          "description": "Provides a client defined UI label for the property which is less than an average of 20 characters in length.",
          "type": "string"
        },
        "longLabelName": {
          "description": "Provides a client defined UI long label for the property.",
          "type": "string"
        },
        "minLength": {
          "description": "Indicates the minimum length required for a property.",
          "type": "integer",
          "format": "int32"
        },
        "maxLength": {
          "description": "Indicates the maximum length supported for a property",
          "type": "integer",
          "format": "int32"
        },
        "default": {
          "description": "Indicates the default value which should be populated by default",
          "type": "string"
        },
        "pattern": {
          "description": "Indicates a regular expression on the required pattern for the value",
          "type": "string"
        },
        "masking": {
          "$ref": "#/definitions/maskingRuleType"
        },
        "equals": {
          "description": "Provides 1 to many properties which the value of this property must be equal to.  If the property is equal to any of the value of the properties then the validation is successful.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "greaterThan": {
          "description": "The value of the related property must be greater than the value of  all the given properties in the array.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "lessThan": {
          "description": "The value of the related property must be less than the value of all the given properties in the array.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "dependencies": {
          "description": "List conditional dependencies of supported properties (readOnly, pattern, hidden, disallow etc.) of an attribute or an object. Dependencies can be defined using oneOf (OR) / allOf (AND) object. oneOf - successful if one of the conditions satisfies, allOf - successful if all the conditions satisfies. Refer API specification for dependencies context object syntax and rules. Dependencies context cannot be validated against context schema if dependencies is defined context JSON, because the dependencies JSON structure is dynamically defined for attributes and the not defined in the context schema. Attribute level properties and dependencies properties are mutually exclusive, example - readOnly property can be set either at attribute level or inside dependencies. If both hidden and disallow properties are set inside dependencies or at attribute level, hidden property takes precedence.",
          "type": "object"
        },
        "helperMessage": {
          "$ref": "#/definitions/helperMessageType"
        },
        "dataType": {
          "$ref": "#/definitions/metaDataType"
        },
        "valueSet": {
          "$ref": "#/definitions/valueSetType"
        },
        "dependencyLinks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/linkType_v02"
          }
        }
      }
    },
    "disallowItemType": {
      "title": "disallowItemType",
      "type": "object",
      "properties": {
        "itemID": {
          "description": "A unique identifier of an object within the collection",
          "type": "string"
        }
      }
    },
    "maskingRuleType": {
      "title": "maskingRuleType",
      "type": "object",
      "properties": {
        "authorizationRequiredIndicator": {
          "type": "boolean"
        },
        "authorizationResourceID": {
          "type": "string"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/linkType_v02"
          }
        }
      }
    },
    "valueSetType": {
      "title": "valueSetType",
      "description": "A reference to the codelist extended with values",
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/ValueSetMeta"
        },
        "valueSetListItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/valueSetItemType"
          }
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/linkType_v02"
          }
        }
      }
    },
    "ValueSetMeta": {
      "title": "ValueSetMeta",
      "type": "object",
      "properties": {
        "idValuePath": {
          "description": "Code value (typically a key field) of the code list item",
          "type": "string"
        },
        "itemDescriptionPath": {
          "description": "Short name field of the code list item",
          "type": "string"
        }
      }
    },
    "valueSetItemType": {
      "title": "valueSetItemType",
      "description": "The value set item type",
      "type": "object",
      "properties": {
        "idValue": {
          "description": "The code for the related entity",
          "type": "string"
        },
        "itemDescription": {
          "description": "Short description of the related code",
          "type": "string"
        },
        "defaultIndicator": {
          "description": "Indicates if the current value is a default (pre-selected)",
          "type": "boolean"
        }
      }
    },
    "objectType": {
      "title": "objectType",
      "type": "object",
      "properties": {
        "readOnly": {
          "description": "True indicates that the property is marked read only in the given context",
          "example": false,
          "type": "boolean",
          "default": false
        },
        "optional": {
          "description": "True indicates that this property does not need to be valued",
          "example": true,
          "type": "boolean",
          "default": true
        },
        "hidden": {
          "description": "True indicates that the property is carried in the message - to and from the System of Record, but is not exposed in the UI",
          "example": false,
          "type": "boolean",
          "default": false
        },
        "sequence": {
          "type": "integer",
          "format": "int32"
        },
        "disallow": {
          "description": "Specified on a target property.  If the passed conditions are true then this property is disallowed and therefore, not presented to a user.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/disallowItemType"
          }
        },
        "dependencies": {
          "description": "List conditional dependencies of supported properties (readOnly, pattern, hidden, disallow etc.) of an attribute or an object. Dependencies can be defined using oneOf (OR) / allOf (AND) object. oneOf - successful if one of the conditions satisfies, allOf - successful if all the conditions satisfies. Refer API specification for dependencies context object syntax and rules. Dependencies context cannot be validated against context schema if dependencies is defined context JSON, because the dependencies JSON structure is dynamically defined for attributes and the not defined in the context schema. Attribute level properties and dependencies properties are mutually exclusive, example - readOnly property can be set either at attribute level or inside dependencies. If both hidden and disallow properties are set inside dependencies or at attribute level, hidden property takes precedence.",
          "type": "object"
        },
        "helperMessage": {
          "$ref": "#/definitions/helperMessageType"
        },
        "dataType": {
          "$ref": "#/definitions/metaDataType"
        },
        "dependencyLinks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/linkType_v02"
          }
        }
      }
    },
    "stringCodeListType": {
      "title": "stringCodeListType",
      "type": "object",
      "properties": {
        "codeList": {
          "$ref": "#/definitions/codeListType_v03"
        },
        "readOnly": {
          "type": "boolean"
        },
        "optional": {
          "type": "boolean"
        },
        "hidden": {
          "type": "boolean"
        },
        "sequence": {
          "type": "integer",
          "format": "int32"
        },
        "disallow": {
          "description": "Specified on a target property.  If the passed conditions are true then this property is disallowed and therefore, not presented to a user.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/disallowItemType"
          }
        },
        "shortLabelName": {
          "description": "Provides a client defined UI label for the property which is less than an average of 20 characters in length.",
          "type": "string"
        },
        "longLabelName": {
          "description": "Provides a client defined UI long label for the property.",
          "type": "string"
        },
        "minLength": {
          "description": "Indicates the minimum length required for a property.",
          "type": "integer",
          "format": "int32"
        },
        "maxLength": {
          "description": "Indicates the maximum length supported for a property",
          "type": "integer",
          "format": "int32"
        },
        "default": {
          "description": "Indicates the default value which should be populated by default",
          "type": "string"
        },
        "pattern": {
          "description": "Indicates a regular expression on the required pattern for the value",
          "type": "string"
        },
        "masking": {
          "$ref": "#/definitions/maskingRuleType"
        },
        "equals": {
          "description": "Provides 1 to many properties which the value of this property must be equal to.  If the property is equal to any of the value of the properties then the validation is successful.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "greaterThan": {
          "description": "The value of the related property must be greater than the value of  all the given properties in the array.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "lessThan": {
          "description": "The value of the related property must be less than the value of all the given properties in the array.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "dependencies": {
          "description": "List conditional dependencies of supported properties (readOnly, pattern, hidden, disallow etc.) of an attribute or an object. Dependencies can be defined using oneOf (OR) / allOf (AND) object. oneOf - successful if one of the conditions satisfies, allOf - successful if all the conditions satisfies. Refer API specification for dependencies context object syntax and rules. Dependencies context cannot be validated against context schema if dependencies is defined context JSON, because the dependencies JSON structure is dynamically defined for attributes and the not defined in the context schema. Attribute level properties and dependencies properties are mutually exclusive, example - readOnly property can be set either at attribute level or inside dependencies. If both hidden and disallow properties are set inside dependencies or at attribute level, hidden property takes precedence.",
          "type": "object"
        },
        "helperMessage": {
          "$ref": "#/definitions/helperMessageType"
        },
        "dataType": {
          "$ref": "#/definitions/metaDataType"
        },
        "valueSet": {
          "$ref": "#/definitions/valueSetType"
        },
        "dependencyLinks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/linkType_v02"
          }
        }
      }
    },
    "numberType": {
      "title": "numberType",
      "type": "object",
      "properties": {
        "readOnly": {
          "description": "True indicates that the property is marked read only in the given context",
          "example": false,
          "type": "boolean",
          "default": false
        },
        "optional": {
          "description": "True indicates that this property does not need to be valued",
          "example": false,
          "type": "boolean",
          "default": false
        },
        "hidden": {
          "description": "True indicates that the property is carried in the message - to and from the System of Record, but is not exposed in the UI",
          "example": false,
          "type": "boolean",
          "default": false
        },
        "sequence": {
          "type": "integer",
          "format": "int32"
        },
        "disallow": {
          "description": "Specified on a target property.  If the passed conditions are true then this property is disallowed and therefore, not presented to a user.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/disallowItemType"
          }
        },
        "shortLabelName": {
          "description": "Provides a client defined UI label for the property which is less than an average of 20 characters in length.",
          "type": "string"
        },
        "longLabelName": {
          "description": "Provides a client defined UI long label for the property.",
          "type": "string"
        },
        "minLength": {
          "description": "Indicates the minimum length required for a property.",
          "type": "integer",
          "format": "int32"
        },
        "maxLength": {
          "description": "Indicates the maximum length supported for a property",
          "type": "integer",
          "format": "int32"
        },
        "minValue": {
          "description": "Indicates the minimum value required for a property.",
          "type": "number",
          "format": "double"
        },
        "maxValue": {
          "description": "Indicates the maximum value supported for a property",
          "type": "number",
          "format": "double"
        },
        "multipleOf": {
          "description": "Indicates that the value must be a multiple of this value or divisible by this value.",
          "type": "number",
          "format": "double"
        },
        "default": {
          "description": "Indicates the default value which should be populated by default",
          "type": "number",
          "format": "double"
        },
        "pattern": {
          "description": "Indicates a regular expression on the required pattern for the value",
          "type": "string"
        },
        "masking": {
          "$ref": "#/definitions/maskingRuleType"
        },
        "equals": {
          "description": "Provides 1 to many properties which the value of this property must be equal to.  If the property is equal to any of the value of the properties then the validation is successful.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "greaterThan": {
          "description": "The value of the related property must be greater than the value of  all the given properties in the array.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "lessThan": {
          "description": "The value of the related property must be less than the value of all the given properties in the array.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "dependencies": {
          "description": "List conditional dependencies of supported properties (readOnly, pattern, hidden, disallow etc.) of an attribute or an object. Dependencies can be defined using oneOf (OR) / allOf (AND) object. oneOf - successful if one of the conditions satisfies, allOf - successful if all the conditions satisfies. Refer API specification for dependencies context object syntax and rules. Dependencies context cannot be validated against context schema if dependencies is defined context JSON, because the dependencies JSON structure is dynamically defined for attributes and the not defined in the context schema. Attribute level properties and dependencies properties are mutually exclusive, example - readOnly property can be set either at attribute level or inside dependencies. If both hidden and disallow properties are set inside dependencies or at attribute level, hidden property takes precedence.",
          "type": "object"
        },
        "helperMessage": {
          "$ref": "#/definitions/helperMessageType"
        },
        "dataType": {
          "$ref": "#/definitions/metaDataType"
        },
        "dependencyLinks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/linkType_v02"
          }
        }
      }
    },
    "TimeV3WorkersTimeOffBalancesMeta400Error": {
      "title": "TimeV3WorkersTimeOffBalancesMeta400Error",
      "example": {
        "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
      },
      "type": "object",
      "properties": {
        "externalValue": {
          "type": "string"
        }
      },
      "required": [
        "externalValue"
      ]
    }
  },
  "tags": [
    {
      "name": "Worker Time Off Balances",
      "description": "List worker time off balances"
    }
  ]
}