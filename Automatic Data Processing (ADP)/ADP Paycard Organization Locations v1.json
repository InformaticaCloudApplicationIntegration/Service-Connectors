{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Paycard Organization Locations",
    "description": "Paycard Organization Locations",
    "contact": {
      "email": "Boris.Vernoff@ADP.com",
      "name": "Boris Vernoff"
    }
  },
  "host": "test-api.adp.com",
  "basePath": "/",
  "schemes": [],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/core/v1/paycard/organization-locations": {
      "get": {
        "description": "The API returns the organization locations that support Paycard processing",
        "summary": "15939643-b576-45f8-9f1d-672ee8bdf562",
        "tags": [
          "Paycard Organization Locations"
        ],
        "operationId": "CoreV1PaycardOrganizationLocationsGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "roleCode",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "The role the user is playing during the transaction.  Possible values: employee,manager,practitioner,administrator,supervisor.  The roleCode header will be passed in all calls. When coming from Myself capabilities rolecode=employee. When coming from Team capabilities roleCode=manager. When coming from Practitioner capabilities roleCode=practitioner."
          }
        ],
        "responses": {
          "204": {
            "description": "The API returns the organization locations that support Paycard processing",
            "schema": {
              "$ref": "#/definitions/OrganizationLocations"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/organizationLocations_sample_v01_00_rev002.json"
              }
            },
            "headers": {
              "ETag": {
                "type": "string"
              },
              "Cache-Control": {
                "type": "string"
              }
            }
          },
          "304": {
            "description": "Not Modified",
            "schema": {}
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/CoreV1PaycardOrganizationLocations400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/CoreV1PaycardOrganizationLocations400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/CoreV1PaycardOrganizationLocations400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "schema": {
              "$ref": "#/definitions/CoreV1PaycardOrganizationLocations400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/CoreV1PaycardOrganizationLocations400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/CoreV1PaycardOrganizationLocations400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "413": {
            "description": "Request Entity Too Large",
            "schema": {
              "$ref": "#/definitions/CoreV1PaycardOrganizationLocations400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/CoreV1PaycardOrganizationLocations400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "default": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/CoreV1PaycardOrganizationLocations400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "$ref": "#/definitions/CoreV1PaycardOrganizationLocations400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          }
        }
      }
    },
    "/core/v1/paycard/organization-locations/{location-id}": {
      "get": {
        "description": "Request the details of a single organization location that the requester is authorized to view",
        "summary": "53eb0092-0c85-43a5-8441-4a1035e32f69",
        "tags": [
          "Paycard Organization Locations"
        ],
        "operationId": "CoreV1PaycardOrganizationLocationsByLocationIdGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "location-id",
            "in": "path",
            "required": true,
            "default": "123",
            "type": "string",
            "description": "Location ID"
          },
          {
            "name": "roleCode",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "The role the user is playing during the transaction.  Possible values: employee,manager,practitioner,administrator,supervisor.  The roleCode header will be passed in all calls. When coming from Myself capabilities rolecode=employee. When coming from Team capabilities roleCode=manager. When coming from Practitioner capabilities roleCode=practitioner."
          }
        ],
        "responses": {
          "204": {
            "description": "Request the details of a single organization location that the requester is authorized to view",
            "schema": {
              "$ref": "#/definitions/OrganizationLocations"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/organizationLocations_sample_v01_00_rev002.json"
              }
            },
            "headers": {
              "ETag": {
                "type": "string"
              },
              "Cache-Control": {
                "type": "string"
              }
            }
          },
          "304": {
            "description": "Not Modified",
            "schema": {}
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/CoreV1PaycardOrganizationLocations400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/CoreV1PaycardOrganizationLocations400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/CoreV1PaycardOrganizationLocations400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "schema": {
              "$ref": "#/definitions/CoreV1PaycardOrganizationLocations400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/CoreV1PaycardOrganizationLocations400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/CoreV1PaycardOrganizationLocations400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "413": {
            "description": "Request Entity Too Large",
            "schema": {
              "$ref": "#/definitions/CoreV1PaycardOrganizationLocations400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/CoreV1PaycardOrganizationLocations400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "default": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/CoreV1PaycardOrganizationLocations400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "$ref": "#/definitions/CoreV1PaycardOrganizationLocations400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          }
        }
      }
    },
    "/core/v1/paycard/organization-locations/meta": {
      "get": {
        "description": "Request a service meta information",
        "summary": "6fb384f6-5d27-4ce2-ad67-98103a1da195",
        "tags": [
          "Paycard Organization Locations"
        ],
        "operationId": "CoreV1PaycardOrganizationLocationsMetaGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "roleCode",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "The role the user is playing during the transaction.  Possible values: employee,manager,practitioner,administrator,supervisor.  The roleCode header will be passed in all calls. When coming from Myself capabilities rolecode=employee. When coming from Team capabilities roleCode=manager. When coming from Practitioner capabilities roleCode=practitioner."
          }
        ],
        "responses": {
          "200": {
            "description": "Request a service meta information",
            "schema": {
              "$ref": "#/definitions/organizationLocationsMetaType"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/organizationLocations_meta_sample_v01_00_rev002.json"
              }
            },
            "headers": {
              "ETag": {
                "type": "string"
              },
              "Cache-Control": {
                "type": "string"
              }
            }
          },
          "304": {
            "description": "Not Modified",
            "schema": {}
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/CoreV1PaycardOrganizationLocations400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/CoreV1PaycardOrganizationLocations400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/CoreV1PaycardOrganizationLocations400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "schema": {
              "$ref": "#/definitions/CoreV1PaycardOrganizationLocations400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/CoreV1PaycardOrganizationLocations400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/CoreV1PaycardOrganizationLocations400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "413": {
            "description": "Request Entity Too Large",
            "schema": {
              "$ref": "#/definitions/CoreV1PaycardOrganizationLocations400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/CoreV1PaycardOrganizationLocations400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "default": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/CoreV1PaycardOrganizationLocations400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "$ref": "#/definitions/CoreV1PaycardOrganizationLocations400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "OrganizationLocations": {
      "title": "OrganizationLocations",
      "description": "A list of organization locations",
      "example": {
        "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/organizationLocations_sample_v01_00_rev002.json"
      },
      "type": "object",
      "properties": {
        "locations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Location"
          }
        }
      }
    },
    "Location": {
      "title": "Location",
      "type": "object",
      "properties": {
        "itemID": {
          "description": "The unique identifier of the disclosure within a collection",
          "type": "string"
        },
        "nameCode": {
          "$ref": "#/definitions/NameCode"
        },
        "aliasNames": {
          "description": "The list of other names, by which a location is known",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AliasName"
          }
        },
        "addresses": {
          "description": "A list of addresses related to the associated entity",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrganizationLocationAddress"
          }
        },
        "communication": {
          "$ref": "#/definitions/Communication"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "NameCode": {
      "title": "NameCode",
      "description": "The location type code and description, e.g. HDQ, headquarters",
      "type": "object",
      "properties": {
        "codeValue": {
          "description": "The code for the related entity",
          "type": "string"
        },
        "shortName": {
          "description": "Short description of the related code",
          "type": "string"
        },
        "longName": {
          "description": "Long description of the related code",
          "type": "string"
        }
      }
    },
    "AliasName": {
      "title": "AliasName",
      "description": "The code for the related entity.  If this is a coded value, codeValue and shortName should be used. If this is just a string value, only shortName is necessary",
      "type": "object",
      "properties": {
        "typeCode": {
          "$ref": "#/definitions/TypeCode"
        },
        "nameValue": {
          "description": "The name for the related location",
          "type": "string"
        }
      }
    },
    "TypeCode": {
      "title": "TypeCode",
      "description": "The code for the related entity, e.g. division, region, district",
      "type": "object",
      "properties": {
        "codeValue": {
          "description": "The code for the related entity",
          "type": "string"
        },
        "shortName": {
          "description": "Short description of the related code",
          "type": "string"
        },
        "longName": {
          "description": "Long description of the related code",
          "type": "string"
        }
      }
    },
    "OrganizationLocationAddress": {
      "title": "OrganizationLocationAddress",
      "type": "object",
      "properties": {
        "nameCode": {
          "$ref": "#/definitions/NameCode1"
        },
        "scriptCode": {
          "$ref": "#/definitions/ScriptCode"
        },
        "attentionOfName": {
          "description": "Attention of Name",
          "type": "string"
        },
        "careOfName": {
          "description": "Care Of Name",
          "type": "string"
        },
        "lineOne": {
          "description": "Line One of Street Address Information",
          "type": "string"
        },
        "lineTwo": {
          "description": "Line Two of Street Address Information",
          "type": "string"
        },
        "lineThree": {
          "description": "Line Three of Street Address Information",
          "type": "string"
        },
        "lineFour": {
          "description": "Line Four of Street Address Information",
          "type": "string"
        },
        "lineFive": {
          "description": "Line Five of Street Address Information",
          "type": "string"
        },
        "buildingNumber": {
          "description": "The number of a building in the context of a physical address, e.g. House Number",
          "type": "string"
        },
        "buildingName": {
          "description": "The name of a building in the context of a physical address, e.g. Rockefeller Center",
          "type": "string"
        },
        "blockName": {
          "description": "The name the block",
          "type": "string"
        },
        "streetName": {
          "description": "The name of the street",
          "type": "string"
        },
        "streetTypeCode": {
          "$ref": "#/definitions/StreetTypeCode"
        },
        "unit": {
          "description": "A unit in the context of an address, e.g. an Apartment Number or an Office",
          "type": "string"
        },
        "floor": {
          "description": "A floor in the context of an address",
          "type": "string"
        },
        "stairCase": {
          "description": "A reference to a particular staircase in the context of an address",
          "type": "string"
        },
        "door": {
          "description": "A reference to a particular door in the context of an address. e.g. Apartment Number",
          "type": "string"
        },
        "postOfficeBox": {
          "description": "A post office box",
          "type": "string"
        },
        "deliveryPoint": {
          "description": "A way to identify a specific delivery location, e.g. a mail-stop",
          "type": "string"
        },
        "plotID": {
          "description": "A way to identify a building plot, e.g. a specific building construction site",
          "type": "string"
        },
        "cityName": {
          "description": "A city in the context of an address",
          "type": "string"
        },
        "countrySubdivisionLevel1": {
          "$ref": "#/definitions/CountrySubdivisionLevel1"
        },
        "countrySubdivisionLevel2": {
          "$ref": "#/definitions/CountrySubdivisionLevel2"
        },
        "countryCode": {
          "description": "A simple (string) code.  Can have a code list reference",
          "type": "string"
        },
        "postalCode": {
          "description": "The string of characters used to identify the postal code",
          "type": "string"
        },
        "geoCoordinate": {
          "$ref": "#/definitions/GeoCoordinate"
        },
        "itemID": {
          "description": "The unique identifier of the object in a collection",
          "type": "string"
        }
      }
    },
    "NameCode1": {
      "title": "NameCode1",
      "description": "A descriptive coded name of the address",
      "type": "object",
      "properties": {
        "codeValue": {
          "description": "The code for the related entity",
          "type": "string"
        },
        "shortName": {
          "description": "Short description of the related code",
          "type": "string"
        },
        "longName": {
          "description": "Long description of the related code",
          "type": "string"
        }
      }
    },
    "ScriptCode": {
      "title": "ScriptCode",
      "description": "The type of script the in which the associated entity is represented. Associated codelist is ISO15924-A. Use the alpha-4 representation versus the single digit numeric representation. Format is lowercase with initial letter capitalized. For example, Cyrillic is Cyrl",
      "type": "object",
      "properties": {
        "codeValue": {
          "description": "The code for the related entity",
          "type": "string"
        },
        "shortName": {
          "description": "Short description of the related code",
          "type": "string"
        },
        "longName": {
          "description": "Long description of the related code",
          "type": "string"
        }
      }
    },
    "StreetTypeCode": {
      "title": "StreetTypeCode",
      "description": "The type of street, e.g. Lane, Passage, Way",
      "type": "object",
      "properties": {
        "codeValue": {
          "description": "The code for the related entity",
          "type": "string"
        },
        "shortName": {
          "description": "Short description of the related code",
          "type": "string"
        },
        "longName": {
          "description": "Long description of the related code",
          "type": "string"
        }
      }
    },
    "CountrySubdivisionLevel1": {
      "title": "CountrySubdivisionLevel1",
      "description": "A country subdivision correlating to a administrative level one level below country. For example, in the United States, this would be a state",
      "type": "object",
      "properties": {
        "codeValue": {
          "description": "The code for the related entity",
          "type": "string"
        },
        "shortName": {
          "description": "Short description of the related code",
          "type": "string"
        },
        "longName": {
          "description": "Long description of the related code",
          "type": "string"
        },
        "subdivisionType": {
          "description": "The type of a country sub-division, e.g. state, county",
          "type": "string"
        }
      }
    },
    "CountrySubdivisionLevel2": {
      "title": "CountrySubdivisionLevel2",
      "description": "A country subdivision correlating to a administrative level two levels below country. For example, in the United States, this might be a county",
      "type": "object",
      "properties": {
        "codeValue": {
          "description": "The code for the related entity",
          "type": "string"
        },
        "shortName": {
          "description": "Short description of the related code",
          "type": "string"
        },
        "longName": {
          "description": "Long description of the related code",
          "type": "string"
        },
        "subdivisionType": {
          "description": "The type of a country sub-division, e.g. state, county",
          "type": "string"
        }
      }
    },
    "GeoCoordinate": {
      "title": "GeoCoordinate",
      "description": "The coordinates of the location of the address",
      "type": "object",
      "properties": {
        "latitude": {
          "description": "The angle, in degrees, of a position on Earth above the equator. (Latitude is negative for a place below the equator.) specified in decimal degrees",
          "type": "number",
          "format": "double"
        },
        "longitude": {
          "description": "The angle, in degrees, of a position on Earth around the equator from the Greenwich Meridian specified in decimal degrees",
          "type": "number",
          "format": "double"
        }
      }
    },
    "Communication": {
      "title": "Communication",
      "description": "Communication objects to include various communication mechanisms, e,g, phone, email, etc.",
      "type": "object",
      "properties": {
        "landlines": {
          "description": "A list of land-line telephone numbers",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Landline"
          }
        },
        "mobiles": {
          "description": "A list of mobile telephone numbers",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Mobile"
          }
        },
        "faxes": {
          "description": "A list of fax telephone numbers",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Faxis"
          }
        },
        "pagers": {
          "description": "A list of pager telephone numbers",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Pager"
          }
        },
        "emails": {
          "description": "A list of email addresses",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Email"
          }
        },
        "internetAddresses": {
          "description": "A list of internet URIs",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InternetAddressWithItemID"
          }
        },
        "instantMessages": {
          "description": "A list of instant messages URIs",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InstantMessage"
          }
        },
        "socialNetworks": {
          "description": "A list of social networks addresses",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SocialNetwork"
          }
        }
      }
    },
    "Landline": {
      "title": "Landline",
      "type": "object",
      "properties": {
        "nameCode": {
          "$ref": "#/definitions/NameCode2"
        },
        "countryDialing": {
          "description": "The country dialing code is the national prefix to be used when dialing TO that particular country FROM another country.",
          "type": "string"
        },
        "areaDialing": {
          "description": "The local area dialing code for a telephone number.",
          "type": "string"
        },
        "dialNumber": {
          "description": "The local communication number, not including country dialing or area dialing codes.   If component parts of the telephone number are being communicated then the dialNumber is required.",
          "type": "string"
        },
        "extension": {
          "description": "The extension of the local communication number.  In the case of a Telephone Number accessing a Pager Network, the extension may be the Pager Identification Number required to leave a message for the Pager Number (i.e. Pager Pin).  These are mutually exclusive.",
          "type": "string"
        },
        "access": {
          "description": "National Direct Dialing Prefix.  Also known as the trunk prefix or National Prefix.  It is the number to be dialed in a domestic telephone call, preceding any necessary area code and subscriber number (i.e. dial number).  When calling from outside of the country, the national direct dial prefix is omitted by the caller.  In Australia, Germany, and United Kingdom the trunk prefix is 0.  In the US and Canada it is 1.",
          "type": "string"
        },
        "formattedNumber": {
          "description": "The formatted telephone number.  The component parts of the telephone are put together into a presentation pattern as defined by the regex format specified.  Please note that \\ is used as an escape character in regex, but a double \\ is needed to escape within the json schema.  The regex will accept +CC NNNNNNNNNNNNNN where + is the symbol indicating the caller to enter their country specific code to call from outside the country.  CC is the country code for an international number (optional), and the area code and dial number.  The local access code (i.e. 1 (201) 333 4444. 1 is the access code in US) is not passed.  The UI will present the phone number following its own presentation convention",
          "type": "string"
        },
        "itemID": {
          "description": "The unique identifier of the object in a collection",
          "type": "string"
        }
      }
    },
    "NameCode2": {
      "title": "NameCode2",
      "description": "A coded name or descriptive label of the associated entity. If this is a coded value, codeValue and shortName should be used. If this is just a string value, only shortName is necessary",
      "type": "object",
      "properties": {
        "codeValue": {
          "description": "The code for the related entity",
          "type": "string"
        },
        "shortName": {
          "description": "Short description of the related code",
          "type": "string"
        },
        "longName": {
          "description": "Long description of the related code",
          "type": "string"
        }
      }
    },
    "Mobile": {
      "title": "Mobile",
      "type": "object",
      "properties": {
        "nameCode": {
          "$ref": "#/definitions/NameCode2"
        },
        "countryDialing": {
          "description": "The country dialing code is the national prefix to be used when dialing TO that particular country FROM another country.",
          "type": "string"
        },
        "areaDialing": {
          "description": "The local area dialing code for a telephone number.",
          "type": "string"
        },
        "dialNumber": {
          "description": "The local communication number, not including country dialing or area dialing codes.   If component parts of the telephone number are being communicated then the dialNumber is required.",
          "type": "string"
        },
        "extension": {
          "description": "The extension of the local communication number.  In the case of a Telephone Number accessing a Pager Network, the extension may be the Pager Identification Number required to leave a message for the Pager Number (i.e. Pager Pin).  These are mutually exclusive.",
          "type": "string"
        },
        "access": {
          "description": "National Direct Dialing Prefix.  Also known as the trunk prefix or National Prefix.  It is the number to be dialed in a domestic telephone call, preceding any necessary area code and subscriber number (i.e. dial number).  When calling from outside of the country, the national direct dial prefix is omitted by the caller.  In Australia, Germany, and United Kingdom the trunk prefix is 0.  In the US and Canada it is 1.",
          "type": "string"
        },
        "formattedNumber": {
          "description": "The formatted telephone number.  The component parts of the telephone are put together into a presentation pattern as defined by the regex format specified.  Please note that \\ is used as an escape character in regex, but a double \\ is needed to escape within the json schema.  The regex will accept +CC NNNNNNNNNNNNNN where + is the symbol indicating the caller to enter their country specific code to call from outside the country.  CC is the country code for an international number (optional), and the area code and dial number.  The local access code (i.e. 1 (201) 333 4444. 1 is the access code in US) is not passed.  The UI will present the phone number following its own presentation convention",
          "type": "string"
        },
        "itemID": {
          "description": "The unique identifier of the object in a collection",
          "type": "string"
        }
      }
    },
    "Faxis": {
      "title": "Faxis",
      "type": "object",
      "properties": {
        "nameCode": {
          "$ref": "#/definitions/NameCode2"
        },
        "countryDialing": {
          "description": "The country dialing code is the national prefix to be used when dialing TO that particular country FROM another country.",
          "type": "string"
        },
        "areaDialing": {
          "description": "The local area dialing code for a telephone number.",
          "type": "string"
        },
        "dialNumber": {
          "description": "The local communication number, not including country dialing or area dialing codes.   If component parts of the telephone number are being communicated then the dialNumber is required.",
          "type": "string"
        },
        "extension": {
          "description": "The extension of the local communication number.  In the case of a Telephone Number accessing a Pager Network, the extension may be the Pager Identification Number required to leave a message for the Pager Number (i.e. Pager Pin).  These are mutually exclusive.",
          "type": "string"
        },
        "access": {
          "description": "National Direct Dialing Prefix.  Also known as the trunk prefix or National Prefix.  It is the number to be dialed in a domestic telephone call, preceding any necessary area code and subscriber number (i.e. dial number).  When calling from outside of the country, the national direct dial prefix is omitted by the caller.  In Australia, Germany, and United Kingdom the trunk prefix is 0.  In the US and Canada it is 1.",
          "type": "string"
        },
        "formattedNumber": {
          "description": "The formatted telephone number.  The component parts of the telephone are put together into a presentation pattern as defined by the regex format specified.  Please note that \\ is used as an escape character in regex, but a double \\ is needed to escape within the json schema.  The regex will accept +CC NNNNNNNNNNNNNN where + is the symbol indicating the caller to enter their country specific code to call from outside the country.  CC is the country code for an international number (optional), and the area code and dial number.  The local access code (i.e. 1 (201) 333 4444. 1 is the access code in US) is not passed.  The UI will present the phone number following its own presentation convention",
          "type": "string"
        },
        "itemID": {
          "description": "The unique identifier of the object in a collection",
          "type": "string"
        }
      }
    },
    "Pager": {
      "title": "Pager",
      "type": "object",
      "properties": {
        "nameCode": {
          "$ref": "#/definitions/NameCode2"
        },
        "countryDialing": {
          "description": "The country dialing code is the national prefix to be used when dialing TO that particular country FROM another country.",
          "type": "string"
        },
        "areaDialing": {
          "description": "The local area dialing code for a telephone number.",
          "type": "string"
        },
        "dialNumber": {
          "description": "The local communication number, not including country dialing or area dialing codes.   If component parts of the telephone number are being communicated then the dialNumber is required.",
          "type": "string"
        },
        "extension": {
          "description": "The extension of the local communication number.  In the case of a Telephone Number accessing a Pager Network, the extension may be the Pager Identification Number required to leave a message for the Pager Number (i.e. Pager Pin).  These are mutually exclusive.",
          "type": "string"
        },
        "access": {
          "description": "National Direct Dialing Prefix.  Also known as the trunk prefix or National Prefix.  It is the number to be dialed in a domestic telephone call, preceding any necessary area code and subscriber number (i.e. dial number).  When calling from outside of the country, the national direct dial prefix is omitted by the caller.  In Australia, Germany, and United Kingdom the trunk prefix is 0.  In the US and Canada it is 1.",
          "type": "string"
        },
        "formattedNumber": {
          "description": "The formatted telephone number.  The component parts of the telephone are put together into a presentation pattern as defined by the regex format specified.  Please note that \\ is used as an escape character in regex, but a double \\ is needed to escape within the json schema.  The regex will accept +CC NNNNNNNNNNNNNN where + is the symbol indicating the caller to enter their country specific code to call from outside the country.  CC is the country code for an international number (optional), and the area code and dial number.  The local access code (i.e. 1 (201) 333 4444. 1 is the access code in US) is not passed.  The UI will present the phone number following its own presentation convention",
          "type": "string"
        },
        "itemID": {
          "description": "The unique identifier of the object in a collection",
          "type": "string"
        }
      }
    },
    "Email": {
      "title": "Email",
      "type": "object",
      "properties": {
        "nameCode": {
          "$ref": "#/definitions/NameCode2"
        },
        "emailUri": {
          "description": "The URI of the associated email address",
          "type": "string"
        },
        "itemID": {
          "description": "The unique identifier of the object in a collection",
          "type": "string"
        }
      }
    },
    "InternetAddressWithItemID": {
      "title": "InternetAddressWithItemID",
      "type": "object",
      "properties": {
        "nameCode": {
          "$ref": "#/definitions/NameCode2"
        },
        "uri": {
          "description": "The URI of the associated email address",
          "type": "string"
        },
        "itemID": {
          "description": "The unique identifier of the object in a collection",
          "type": "string"
        }
      }
    },
    "InstantMessage": {
      "title": "InstantMessage",
      "type": "object",
      "properties": {
        "nameCode": {
          "$ref": "#/definitions/NameCode2"
        },
        "uri": {
          "description": "The URI of the associated email address",
          "type": "string"
        },
        "itemID": {
          "description": "The unique identifier of the object in a collection",
          "type": "string"
        }
      }
    },
    "SocialNetwork": {
      "title": "SocialNetwork",
      "type": "object",
      "properties": {
        "nameCode": {
          "$ref": "#/definitions/NameCode2"
        },
        "uri": {
          "description": "The URI of the associated email address",
          "type": "string"
        },
        "itemID": {
          "description": "The unique identifier of the object in a collection",
          "type": "string"
        }
      }
    },
    "Link": {
      "title": "Link",
      "description": "A link description object is used to describe link relations.  In the context of a schema, it defines the link relations of the instances of the schema, and can be parameterized by the instance values.  The link description format can be used on its own in regular (non-schema documents), and use of this format can be declared by referencing the normative link description schema as the the schema for the data structure that uses the links",
      "type": "object",
      "properties": {
        "href": {
          "description": "The URI of the related entity",
          "type": "string"
        },
        "rel": {
          "$ref": "#/definitions/Rel"
        },
        "title": {
          "description": "This property defines a title for the link.  The value must be a string. User agents MAY use this title when presenting the link to the user.",
          "type": "string"
        },
        "targetSchema": {
          "description": "This property is a schema that defines the expected structure of the JSON representation of the target of the link, if the target of the link is returned using JSON representation.",
          "type": "string"
        },
        "mediaType": {
          "$ref": "#/definitions/MediaType"
        },
        "method": {
          "$ref": "#/definitions/Method"
        },
        "encType": {
          "$ref": "#/definitions/EncType"
        },
        "schema": {
          "description": "This property contains a schema which defines the acceptable structure of the submitted request.  For a GET request, this schema would define the properties for the query string and for a POST request, this would define the body.",
          "type": "string"
        }
      }
    },
    "Rel": {
      "title": "Rel",
      "description": "Indicates the nature of the relationship of the related resource to the resource that generated this representation",
      "example": "alternate",
      "type": "string",
      "enum": [
        "alternate",
        "create",
        "canonical",
        "describedby",
        "edit-form",
        "enclosure",
        "full",
        "related",
        "root",
        "self",
        "up",
        "search",
        "first",
        "last",
        "next",
        "previous",
        "/adp/invoke",
        "/adp/image",
        "/adp/confirm-message",
        "/adp/status-monitor",
        "/adp/codelist",
        "/adp/template",
        "/adp/externalLink"
      ]
    },
    "MediaType": {
      "title": "MediaType",
      "description": "The media type that the linked resource will return (Response)",
      "example": "application/json",
      "type": "string",
      "enum": [
        "application/json",
        "text/html",
        "text/plain",
        "image/jpeg",
        "image/gif",
        "image/png",
        "image/tiff",
        "application/pdf",
        "application/postscript",
        "application/msword",
        "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
        "application/vnd.ms-excel",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
      ]
    },
    "Method": {
      "title": "Method",
      "description": "The HTTP method code (HTTP Verb) traverse the link (GET, POST, PUT or DELETE)",
      "example": "GET",
      "type": "string",
      "enum": [
        "GET",
        "POST",
        "DELETE",
        "PUT"
      ]
    },
    "EncType": {
      "title": "EncType",
      "description": "If present, this property indicates a query media type format that the server supports for querying or posting to the collection of instances at the target resource.  The query can be suffixed to the target URI to query the collection with property-based constraints on the resources that SHOULD be returned from the server or used to post data to the resource (depending on the method). (Request)",
      "example": "application/json",
      "type": "string",
      "enum": [
        "application/json",
        "application/x-www-form-urlencoded"
      ]
    },
    "CoreV1PaycardOrganizationLocations400Error": {
      "title": "CoreV1PaycardOrganizationLocations400Error",
      "example": {
        "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
      },
      "type": "object",
      "properties": {
        "externalValue": {
          "type": "string"
        }
      },
      "required": [
        "externalValue"
      ]
    },
    "organizationLocationsMetaType": {
      "title": "organizationLocationsMetaType",
      "description": "A list of organization locations - Meta",
      "example": {
        "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/organizationLocations_meta_sample_v01_00_rev002.json"
      },
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/organizationLocationsMeta"
        }
      }
    },
    "organizationLocationsMeta": {
      "title": "organizationLocationsMeta",
      "description": "organizationLocations meta schema for - organizationLocations_schema_v01_00_rev002.json",
      "type": "object",
      "properties": {
        "queryCriteria": {
          "description": "A collection of query criteria",
          "type": "array",
          "items": {
            "$ref": "#/definitions/organizationLocationsQueryCriterion"
          }
        },
        "/locations": {
          "$ref": "#/definitions/arrayType"
        },
        "/locations/nameCode": {
          "$ref": "#/definitions/stringCodeListType"
        },
        "/locations/nameCode/codeValue": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/nameCode/shortName": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/nameCode/longName": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/communication": {
          "$ref": "#/definitions/objectType"
        },
        "/locations/communication/landlines": {
          "$ref": "#/definitions/arrayType"
        },
        "/locations/communication/landlines/nameCode": {
          "$ref": "#/definitions/stringCodeListType"
        },
        "/locations/communication/landlines/nameCode/codeValue": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/communication/landlines/nameCode/shortName": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/communication/landlines/nameCode/longName": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/communication/landlines/countryDialing": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/communication/landlines/areaDialing": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/communication/landlines/dialNumber": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/communication/landlines/extension": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/communication/landlines/access": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/communication/landlines/formattedNumber": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/communication/landlines/itemID": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/communication/landlines/notificationIndicator": {
          "$ref": "#/definitions/booleanType"
        },
        "/locations/communication/mobiles": {
          "$ref": "#/definitions/arrayType"
        },
        "/locations/communication/mobiles/nameCode": {
          "$ref": "#/definitions/stringCodeListType"
        },
        "/locations/communication/mobiles/nameCode/codeValue": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/communication/mobiles/nameCode/shortName": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/communication/mobiles/nameCode/longName": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/communication/mobiles/countryDialing": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/communication/mobiles/areaDialing": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/communication/mobiles/dialNumber": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/communication/mobiles/extension": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/communication/mobiles/access": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/communication/mobiles/formattedNumber": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/communication/mobiles/itemID": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/communication/mobiles/notificationIndicator": {
          "$ref": "#/definitions/booleanType"
        },
        "/locations/communication/emails": {
          "$ref": "#/definitions/arrayType"
        },
        "/locations/communication/emails/nameCode": {
          "$ref": "#/definitions/stringCodeListType"
        },
        "/locations/communication/emails/nameCode/codeValue": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/communication/emails/nameCode/shortName": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/communication/emails/nameCode/longName": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/communication/emails/emailUri": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/communication/emails/itemID": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/communication/emails/notificationIndicator": {
          "$ref": "#/definitions/booleanType"
        },
        "/locations/communication/socialNetworks": {
          "$ref": "#/definitions/arrayType"
        },
        "/locations/communication/socialNetworks/nameCode": {
          "$ref": "#/definitions/stringCodeListType"
        },
        "/locations/communication/socialNetworks/nameCode/codeValue": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/communication/socialNetworks/nameCode/shortName": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/communication/socialNetworks/nameCode/longName": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/communication/socialNetworks/uri": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/communication/socialNetworks/itemID": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/communication/socialNetworks/notificationIndicator": {
          "$ref": "#/definitions/booleanType"
        },
        "/locations/communication/faxes": {
          "$ref": "#/definitions/arrayType"
        },
        "/locations/communication/faxes/nameCode": {
          "$ref": "#/definitions/stringCodeListType"
        },
        "/locations/communication/faxes/nameCode/codeValue": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/communication/faxes/nameCode/shortName": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/communication/faxes/nameCode/longName": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/communication/faxes/countryDialing": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/communication/faxes/areaDialing": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/communication/faxes/dialNumber": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/communication/faxes/extension": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/communication/faxes/access": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/communication/faxes/formattedNumber": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/communication/faxes/itemID": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/communication/faxes/notificationIndicator": {
          "$ref": "#/definitions/booleanType"
        },
        "/locations/communication/pagers": {
          "$ref": "#/definitions/arrayType"
        },
        "/locations/communication/pagers/nameCode": {
          "$ref": "#/definitions/stringCodeListType"
        },
        "/locations/communication/pagers/nameCode/codeValue": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/communication/pagers/nameCode/shortName": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/communication/pagers/nameCode/longName": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/communication/pagers/countryDialing": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/communication/pagers/areaDialing": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/communication/pagers/dialNumber": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/communication/pagers/extension": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/communication/pagers/access": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/communication/pagers/formattedNumber": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/communication/pagers/itemID": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/communication/pagers/notificationIndicator": {
          "$ref": "#/definitions/booleanType"
        },
        "/locations/communication/internetAddresses": {
          "$ref": "#/definitions/arrayType"
        },
        "/locations/communication/internetAddresses/nameCode": {
          "$ref": "#/definitions/stringCodeListType"
        },
        "/locations/communication/internetAddresses/nameCode/codeValue": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/communication/internetAddresses/nameCode/shortName": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/communication/internetAddresses/nameCode/longName": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/communication/internetAddresses/uri": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/communication/internetAddresses/itemID": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/communication/instantMessages": {
          "$ref": "#/definitions/arrayType"
        },
        "/locations/communication/instantMessages/nameCode": {
          "$ref": "#/definitions/stringCodeListType"
        },
        "/locations/communication/instantMessages/nameCode/codeValue": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/communication/instantMessages/nameCode/shortName": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/communication/instantMessages/nameCode/longName": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/communication/instantMessages/uri": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/communication/instantMessages/itemID": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/communication/instantMessages/notificationIndicator": {
          "$ref": "#/definitions/booleanType"
        },
        "/locations/addresses": {
          "$ref": "#/definitions/arrayType"
        },
        "/locations/addresses/nameCode": {
          "$ref": "#/definitions/stringCodeListType"
        },
        "/locations/addresses/nameCode/codeValue": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/addresses/nameCode/shortName": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/addresses/nameCode/longName": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/addresses/attentionOfName": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/addresses/careOfName": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/addresses/lineOne": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/addresses/lineTwo": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/addresses/lineThree": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/addresses/cityName": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/addresses/countrySubdivisionLevel1": {
          "$ref": "#/definitions/stringCodeListType"
        },
        "/locations/addresses/countrySubdivisionLevel1/codeValue": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/addresses/countrySubdivisionLevel1/shortName": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/addresses/countrySubdivisionLevel1/longName": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/addresses/countrySubdivisionLevel1/subdivisionType": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/addresses/countryCode": {
          "$ref": "#/definitions/stringCodeListType"
        },
        "/locations/addresses/postalCode": {
          "$ref": "#/definitions/stringCodeListType"
        },
        "/locations/addresses/geoCoordinate": {
          "$ref": "#/definitions/objectType"
        },
        "/locations/addresses/geoCoordinate/latitude": {
          "$ref": "#/definitions/numberType"
        },
        "/locations/addresses/geoCoordinate/longitude": {
          "$ref": "#/definitions/numberType"
        },
        "/locations/addresses/scriptCode": {
          "$ref": "#/definitions/stringCodeListType"
        },
        "/locations/addresses/scriptCode/codeValue": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/addresses/scriptCode/shortName": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/addresses/scriptCode/longName": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/addresses/lineFour": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/addresses/lineFive": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/addresses/buildingNumber": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/addresses/buildingName": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/addresses/blockName": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/addresses/streetName": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/addresses/streetTypeCode": {
          "$ref": "#/definitions/stringCodeListType"
        },
        "/locations/addresses/streetTypeCode/codeValue": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/addresses/streetTypeCode/shortName": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/addresses/streetTypeCode/longName": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/addresses/unit": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/addresses/floor": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/addresses/stairCase": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/addresses/door": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/addresses/postOfficeBox": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/addresses/deliveryPoint": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/addresses/plotID": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/addresses/countrySubdivisionLevel2": {
          "$ref": "#/definitions/stringCodeListType"
        },
        "/locations/addresses/countrySubdivisionLevel2/codeValue": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/addresses/countrySubdivisionLevel2/shortName": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/addresses/countrySubdivisionLevel2/longName": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/addresses/countrySubdivisionLevel2/subdivisionType": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/addresses/itemID": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/itemID": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/aliasNames": {
          "$ref": "#/definitions/arrayType"
        },
        "/locations/aliasNames/typeCode": {
          "$ref": "#/definitions/stringCodeListType"
        },
        "/locations/aliasNames/typeCode/codeValue": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/aliasNames/typeCode/shortName": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/aliasNames/typeCode/longName": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/aliasNames/nameValue": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/links": {
          "$ref": "#/definitions/arrayType"
        },
        "/locations/links/href": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/links/rel": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/links/canonicalUri": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/links/title": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/links/targetSchema": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/links/mediaType": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/links/method": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/links/encType": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/links/schema": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/links/payLoadArguments": {
          "$ref": "#/definitions/arrayType"
        },
        "/locations/links/payLoadArguments/argumentPath": {
          "$ref": "#/definitions/stringType"
        },
        "/locations/links/payLoadArguments/argumentValue": {
          "$ref": "#/definitions/stringType"
        }
      }
    },
    "organizationLocationsQueryCriterion": {
      "title": "organizationLocationsQueryCriterion",
      "description": "A single query parameter",
      "type": "object",
      "properties": {
        "queryOptionCode": {
          "description": "A simple (string) code.  Can have a code list reference",
          "type": "string"
        },
        "obligationCode": {
          "description": "A simple (string) code.  Can have a code list reference",
          "type": "string"
        },
        "queryOptionTypeCode": {
          "description": "A simple (string) code.  Can have a code list reference",
          "type": "string"
        },
        "defaultNumberValue": {
          "description": "The default number value",
          "type": "number",
          "format": "double"
        },
        "defaultStringValue": {
          "description": "The default string value",
          "type": "string"
        },
        "resourcePathMax": {
          "description": "Maximum number of resource paths supported",
          "type": "integer",
          "format": "int32"
        },
        "pattern": {
          "description": "Indicates a regular expression on the required pattern for the value",
          "type": "string"
        },
        "resourcePaths": {
          "description": "A collection of acceptable resource paths to pass to the query option",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "excludedResourcePaths": {
          "description": "A collection of resource paths which may not be passed to the query option.  An example use of this is where you allow all paths except 1 or 2.  You would want to only specify those which are excluded",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "queryValueCodeList": {
          "$ref": "#/definitions/codeListType_v03"
        },
        "logicalOperators": {
          "description": "A collection of logical operators",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LogicalOperator"
          }
        },
        "itemID": {
          "description": "The simple (string) identifier of an object",
          "type": "string"
        }
      }
    },
    "codeListType_v03": {
      "title": "codeListType_v03",
      "type": "object",
      "properties": {
        "codeListTitle": {
          "description": "Code list title",
          "type": "string"
        },
        "exclusiveIndicator": {
          "description": "Boolean expression",
          "type": "boolean"
        },
        "listItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/codeListItemType_v02"
          }
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/linkType_v02"
          }
        }
      }
    },
    "codeListItemType_v02": {
      "title": "codeListItemType_v02",
      "type": "object",
      "properties": {
        "codeValue": {
          "description": "The code for the related entity",
          "type": "string"
        },
        "shortName": {
          "description": "Short description of the related code",
          "type": "string"
        },
        "longName": {
          "description": "Long description of the related code",
          "type": "string"
        },
        "itemID": {
          "description": "The simple (string) identifier of an object",
          "type": "string"
        },
        "valueDescription": {
          "description": "Additional list item description",
          "type": "string"
        },
        "foreignKey": {
          "description": "Allows for filtering the code list",
          "type": "string"
        },
        "inactiveIndicator": {
          "description": "Boolean expression",
          "type": "boolean"
        },
        "defaultIndicator": {
          "description": "Boolean expression",
          "type": "boolean"
        }
      }
    },
    "linkType_v02": {
      "title": "linkType_v02",
      "description": "A link description object is used to describe link relations.  In the context of a schema, it defines the link relations of the instances of the schema, and can be parameterized by the instance values.  The link description format can be used on its own in regular (non-schema documents), and use of this format can be declared by referencing the normative link description schema as the the schema for the data structure that uses the links",
      "type": "object",
      "properties": {
        "href": {
          "description": "The URI of the related entity",
          "type": "string"
        },
        "rel": {
          "$ref": "#/definitions/Rel1"
        },
        "canonicalUri": {
          "description": "The URI of the related entity",
          "type": "string"
        },
        "title": {
          "description": "This property defines a title for the link.  The value must be a string. User agents MAY use this title when presenting the link to the user",
          "type": "string"
        },
        "targetSchema": {
          "description": "This property is a schema that defines the expected structure of the JSON representation of the target of the link, if the target of the link is returned using JSON representation",
          "type": "string"
        },
        "mediaType": {
          "$ref": "#/definitions/MediaType1"
        },
        "method": {
          "$ref": "#/definitions/Method"
        },
        "encType": {
          "$ref": "#/definitions/EncType"
        },
        "schema": {
          "description": "This property contains a schema which defines the acceptable structure of the submitted request.  For a GET request, this schema would define the properties for the query string and for a POST request, this would define the body",
          "type": "string"
        },
        "payLoadArguments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PayLoadArgument"
          }
        }
      }
    },
    "Rel1": {
      "title": "Rel1",
      "description": "Indicates the nature of the relationship of the related resource to the resource that generated this representation",
      "example": "alternate",
      "type": "string",
      "enum": [
        "alternate",
        "create",
        "canonical",
        "describedby",
        "edit-form",
        "enclosure",
        "full",
        "related",
        "root",
        "self",
        "up",
        "search",
        "first",
        "last",
        "next",
        "previous",
        "/adp/invoke",
        "/adp/image",
        "/adp/confirm-message",
        "/adp/status-monitor",
        "/adp/codelist",
        "/adp/template",
        "/adp/externalLink",
        "/adp/validation",
        "/adp/deeplink",
        "/adp/attachment",
        "/adp/workflow"
      ]
    },
    "MediaType1": {
      "title": "MediaType1",
      "description": "The media type that the linked resource will return (Response)",
      "example": "application/gzip",
      "type": "string",
      "enum": [
        "application/gzip",
        "application/json",
        "application/msword",
        "application/pdf",
        "application/postscript",
        "application/vnd.ms-excel",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
        "application/xml",
        "application/x-www-form-urlencoded",
        "image/gif",
        "image/jpeg",
        "image/png",
        "image/tiff",
        "multipart/mixed",
        "text/html",
        "text/plain",
        "application/vnd.visio",
        "image/bmp",
        "image/x-ms-bmp",
        "application/vnd.openxmlformats-officedocument.presentationml.presentation",
        "application/vnd.ms-powerpoint",
        "video/mp4",
        "audio/mpeg",
        "video/x-msvideo",
        "video/x-ms-wmv",
        "application/rtf",
        "application/vnd.ms-outlook",
        "text/csv",
        "video/quicktime",
        "application/zip",
        "application/illustrator",
        "text/xml"
      ]
    },
    "PayLoadArgument": {
      "title": "PayLoadArgument",
      "type": "object",
      "properties": {
        "argumentPath": {
          "description": "Code value (typically a key field) of the code list item",
          "type": "string"
        },
        "argumentValue": {
          "description": "Code value (typically a key field) of the code list item",
          "type": "string"
        }
      }
    },
    "LogicalOperator": {
      "title": "LogicalOperator",
      "description": "A logical operation",
      "type": "object",
      "properties": {
        "logicalOperatorCode": {
          "description": "A simple (string) code.  Can have a code list reference",
          "type": "string"
        },
        "mutuallyExclusiveIndicator": {
          "description": "Boolean expression",
          "type": "boolean"
        },
        "mutuallyExclusiveLogicalOperatorCodes": {
          "description": "A list of mutually exclusive operator codes.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "arrayType": {
      "title": "arrayType",
      "type": "object",
      "properties": {
        "minItems": {
          "description": "Indicates the minimum items required for an array type.  This is only relevant if the given property is an array.",
          "type": "integer",
          "format": "int32"
        },
        "maxItems": {
          "description": "Indicates the maximum items supported for an array type.  This is only relevant if the given property is an array.",
          "type": "integer",
          "format": "int32"
        },
        "sameValueProperties": {
          "description": "A list of properties which must have the exact same value within the array",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "uniqueProperties": {
          "description": "A list of properties which together must be unique",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "uniqueItems": {
          "type": "boolean"
        },
        "dependencies": {
          "description": "List conditional dependencies of supported properties (readOnly, pattern, hidden, disallow etc.) of an attribute or an object. Dependencies can be defined using oneOf (OR) / allOf (AND) object. oneOf - successful if one of the conditions satisfies, allOf - successful if all the conditions satisfies. Refer API specification for dependencies context object syntax and rules. Dependencies context cannot be validated against context schema if dependencies is defined context JSON, because the dependencies JSON structure is dynamically defined for attributes and the not defined in the context schema. Attribute level properties and dependencies properties are mutually exclusive, example - readOnly property can be set either at attribute level or inside dependencies. If both hidden and disallow properties are set inside dependencies or at attribute level, hidden property takes precedence.",
          "type": "object"
        },
        "helperMessage": {
          "$ref": "#/definitions/helperMessageType"
        },
        "dataType": {
          "$ref": "#/definitions/metaDataType"
        },
        "dependencyLinks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/linkType_v02"
          }
        }
      }
    },
    "helperMessageType": {
      "title": "helperMessageType",
      "description": "Helper text provided to the user when they take an action to affirm to be correct, true, or genuine.",
      "type": "object",
      "properties": {
        "messageTxt": {
          "description": "Message to present to the user.",
          "type": "string"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/linkType_v02"
          }
        }
      }
    },
    "metaDataType": {
      "title": "metaDataType",
      "example": "string",
      "type": "string",
      "enum": [
        "string",
        "number",
        "integer",
        "boolean",
        "object",
        "array",
        "null",
        "any",
        "string[date-time]",
        "string[date]",
        "string[time]",
        "string[duration]",
        "string[regex]",
        "string[phone]",
        "string[uri]",
        "string[email]",
        "string[ip-address]",
        "string[ipv6]",
        "string[host-name]",
        "integer[regex]",
        "integer[utc-millisec]",
        "number[regex]",
        "number[utc-millisec]"
      ]
    },
    "stringCodeListType": {
      "title": "stringCodeListType",
      "type": "object",
      "properties": {
        "codeList": {
          "$ref": "#/definitions/codeListType_v03"
        },
        "readOnly": {
          "type": "boolean"
        },
        "optional": {
          "type": "boolean"
        },
        "hidden": {
          "type": "boolean"
        },
        "sequence": {
          "type": "integer",
          "format": "int32"
        },
        "disallow": {
          "description": "Specified on a target property.  If the passed conditions are true then this property is disallowed and therefore, not presented to a user.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/disallowItemType"
          }
        },
        "shortLabelName": {
          "description": "Provides a client defined UI label for the property which is less than an average of 20 characters in length.",
          "type": "string"
        },
        "longLabelName": {
          "description": "Provides a client defined UI long label for the property.",
          "type": "string"
        },
        "minLength": {
          "description": "Indicates the minimum length required for a property.",
          "type": "integer",
          "format": "int32"
        },
        "maxLength": {
          "description": "Indicates the maximum length supported for a property",
          "type": "integer",
          "format": "int32"
        },
        "default": {
          "description": "Indicates the default value which should be populated by default",
          "type": "string"
        },
        "pattern": {
          "description": "Indicates a regular expression on the required pattern for the value",
          "type": "string"
        },
        "masking": {
          "$ref": "#/definitions/maskingRuleType"
        },
        "equals": {
          "description": "Provides 1 to many properties which the value of this property must be equal to.  If the property is equal to any of the value of the properties then the validation is successful.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "greaterThan": {
          "description": "The value of the related property must be greater than the value of  all the given properties in the array.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "lessThan": {
          "description": "The value of the related property must be less than the value of all the given properties in the array.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "dependencies": {
          "description": "List conditional dependencies of supported properties (readOnly, pattern, hidden, disallow etc.) of an attribute or an object. Dependencies can be defined using oneOf (OR) / allOf (AND) object. oneOf - successful if one of the conditions satisfies, allOf - successful if all the conditions satisfies. Refer API specification for dependencies context object syntax and rules. Dependencies context cannot be validated against context schema if dependencies is defined context JSON, because the dependencies JSON structure is dynamically defined for attributes and the not defined in the context schema. Attribute level properties and dependencies properties are mutually exclusive, example - readOnly property can be set either at attribute level or inside dependencies. If both hidden and disallow properties are set inside dependencies or at attribute level, hidden property takes precedence.",
          "type": "object"
        },
        "helperMessage": {
          "$ref": "#/definitions/helperMessageType"
        },
        "dataType": {
          "$ref": "#/definitions/metaDataType"
        },
        "valueSet": {
          "$ref": "#/definitions/valueSetType"
        },
        "dependencyLinks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/linkType_v02"
          }
        }
      }
    },
    "disallowItemType": {
      "title": "disallowItemType",
      "type": "object",
      "properties": {
        "itemID": {
          "description": "A unique identifier of an object within the collection",
          "type": "string"
        }
      }
    },
    "maskingRuleType": {
      "title": "maskingRuleType",
      "type": "object",
      "properties": {
        "authorizationRequiredIndicator": {
          "type": "boolean"
        },
        "authorizationResourceID": {
          "type": "string"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/linkType_v02"
          }
        }
      }
    },
    "valueSetType": {
      "title": "valueSetType",
      "description": "A reference to the codelist extended with values",
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/ValueSetMeta"
        },
        "valueSetListItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/valueSetItemType"
          }
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/linkType_v02"
          }
        }
      }
    },
    "ValueSetMeta": {
      "title": "ValueSetMeta",
      "type": "object",
      "properties": {
        "idValuePath": {
          "description": "Code value (typically a key field) of the code list item",
          "type": "string"
        },
        "itemDescriptionPath": {
          "description": "Short name field of the code list item",
          "type": "string"
        }
      }
    },
    "valueSetItemType": {
      "title": "valueSetItemType",
      "description": "The value set item type",
      "type": "object",
      "properties": {
        "idValue": {
          "description": "The code for the related entity",
          "type": "string"
        },
        "itemDescription": {
          "description": "Short description of the related code",
          "type": "string"
        },
        "defaultIndicator": {
          "description": "Indicates if the current value is a default (pre-selected)",
          "type": "boolean"
        }
      }
    },
    "stringType": {
      "title": "stringType",
      "type": "object",
      "properties": {
        "readOnly": {
          "type": "boolean"
        },
        "optional": {
          "type": "boolean"
        },
        "hidden": {
          "type": "boolean"
        },
        "sequence": {
          "type": "integer",
          "format": "int32"
        },
        "disallow": {
          "description": "Specified on a target property.  If the passed conditions are true then this property is disallowed and therefore, not presented to a user.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/disallowItemType"
          }
        },
        "shortLabelName": {
          "description": "Provides a client defined UI label for the property which is less than an average of 20 characters in length.",
          "type": "string"
        },
        "longLabelName": {
          "description": "Provides a client defined UI long label for the property.",
          "type": "string"
        },
        "minLength": {
          "description": "Indicates the minimum length required for a property.",
          "type": "integer",
          "format": "int32"
        },
        "maxLength": {
          "description": "Indicates the maximum length supported for a property",
          "type": "integer",
          "format": "int32"
        },
        "default": {
          "description": "Indicates the default value which should be populated by default",
          "type": "string"
        },
        "pattern": {
          "description": "Indicates a regular expression on the required pattern for the value",
          "type": "string"
        },
        "masking": {
          "$ref": "#/definitions/maskingRuleType"
        },
        "equals": {
          "description": "Provides 1 to many properties which the value of this property must be equal to.  If the property is equal to any of the value of the properties then the validation is successful.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "greaterThan": {
          "description": "The value of the related property must be greater than the value of  all the given properties in the array.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "lessThan": {
          "description": "The value of the related property must be less than the value of all the given properties in the array.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "dependencies": {
          "description": "List conditional dependencies of supported properties (readOnly, pattern, hidden, disallow etc.) of an attribute or an object. Dependencies can be defined using oneOf (OR) / allOf (AND) object. oneOf - successful if one of the conditions satisfies, allOf - successful if all the conditions satisfies. Refer API specification for dependencies context object syntax and rules. Dependencies context cannot be validated against context schema if dependencies is defined context JSON, because the dependencies JSON structure is dynamically defined for attributes and the not defined in the context schema. Attribute level properties and dependencies properties are mutually exclusive, example - readOnly property can be set either at attribute level or inside dependencies. If both hidden and disallow properties are set inside dependencies or at attribute level, hidden property takes precedence.",
          "type": "object"
        },
        "helperMessage": {
          "$ref": "#/definitions/helperMessageType"
        },
        "dataType": {
          "$ref": "#/definitions/metaDataType"
        },
        "valueSet": {
          "$ref": "#/definitions/valueSetType"
        },
        "dependencyLinks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/linkType_v02"
          }
        }
      }
    },
    "objectType": {
      "title": "objectType",
      "type": "object",
      "properties": {
        "readOnly": {
          "description": "True indicates that the property is marked read only in the given context",
          "example": false,
          "type": "boolean",
          "default": false
        },
        "optional": {
          "description": "True indicates that this property does not need to be valued",
          "example": true,
          "type": "boolean",
          "default": true
        },
        "hidden": {
          "description": "True indicates that the property is carried in the message - to and from the System of Record, but is not exposed in the UI",
          "example": false,
          "type": "boolean",
          "default": false
        },
        "sequence": {
          "type": "integer",
          "format": "int32"
        },
        "disallow": {
          "description": "Specified on a target property.  If the passed conditions are true then this property is disallowed and therefore, not presented to a user.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/disallowItemType"
          }
        },
        "dependencies": {
          "description": "List conditional dependencies of supported properties (readOnly, pattern, hidden, disallow etc.) of an attribute or an object. Dependencies can be defined using oneOf (OR) / allOf (AND) object. oneOf - successful if one of the conditions satisfies, allOf - successful if all the conditions satisfies. Refer API specification for dependencies context object syntax and rules. Dependencies context cannot be validated against context schema if dependencies is defined context JSON, because the dependencies JSON structure is dynamically defined for attributes and the not defined in the context schema. Attribute level properties and dependencies properties are mutually exclusive, example - readOnly property can be set either at attribute level or inside dependencies. If both hidden and disallow properties are set inside dependencies or at attribute level, hidden property takes precedence.",
          "type": "object"
        },
        "helperMessage": {
          "$ref": "#/definitions/helperMessageType"
        },
        "dataType": {
          "$ref": "#/definitions/metaDataType"
        },
        "dependencyLinks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/linkType_v02"
          }
        }
      }
    },
    "booleanType": {
      "title": "booleanType",
      "type": "object",
      "properties": {
        "readOnly": {
          "description": "True indicates that the property is marked read only in the given context",
          "example": false,
          "type": "boolean",
          "default": false
        },
        "optional": {
          "description": "True indicates that this property does not need to be valued",
          "example": false,
          "type": "boolean",
          "default": false
        },
        "hidden": {
          "description": "True indicates that the property is carried in the message - to and from the System of Record, but is not exposed in the UI",
          "type": "boolean"
        },
        "sequence": {
          "type": "integer",
          "format": "int32"
        },
        "disallow": {
          "description": "Specified on a target property.  If the passed conditions are true then this property is disallowed and therefore, not presented to a user.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/disallowItemType"
          }
        },
        "shortLabelName": {
          "description": "Provides a client defined UI label for the property which is less than an average of 20 characters in length.",
          "type": "string"
        },
        "longLabelName": {
          "description": "Provides a client defined UI long label for the property",
          "type": "string"
        },
        "default": {
          "description": "Indicates the default value which should be populated by default",
          "type": "boolean"
        },
        "equals": {
          "description": "Provides 1 to many properties which the value of this property must be equal to.  If the property is equal to any of the value of the properties then the validation is successful.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "dependencies": {
          "description": "List conditional dependencies of supported properties (readOnly, pattern, hidden, disallow etc.) of an attribute or an object. Dependencies can be defined using oneOf (OR) / allOf (AND) object. oneOf - successful if one of the conditions satisfies, allOf - successful if all the conditions satisfies. Refer API specification for dependencies context object syntax and rules. Dependencies context cannot be validated against context schema if dependencies is defined context JSON, because the dependencies JSON structure is dynamically defined for attributes and the not defined in the context schema. Attribute level properties and dependencies properties are mutually exclusive, example - readOnly property can be set either at attribute level or inside dependencies. If both hidden and disallow properties are set inside dependencies or at attribute level, hidden property takes precedence.",
          "type": "object"
        },
        "helperMessage": {
          "$ref": "#/definitions/helperMessageType"
        },
        "dataType": {
          "$ref": "#/definitions/DataType"
        },
        "dependencyLinks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/linkType_v02"
          }
        }
      }
    },
    "DataType": {
      "title": "DataType",
      "description": "Data type of the attribute",
      "example": "string",
      "type": "string",
      "enum": [
        "string",
        "number",
        "integer",
        "boolean",
        "object",
        "array",
        "null",
        "any",
        "string[date-time]",
        "string[date]",
        "string[time]",
        "string[regex]",
        "string[phone]",
        "string[uri]",
        "string[email]",
        "string[ip-address]",
        "string[ipv6]",
        "string[host-name]",
        "integer[regex]",
        "integer[utc-millisec]",
        "number[regex]",
        "number[utc-millisec]"
      ]
    },
    "numberType": {
      "title": "numberType",
      "type": "object",
      "properties": {
        "readOnly": {
          "description": "True indicates that the property is marked read only in the given context",
          "example": false,
          "type": "boolean",
          "default": false
        },
        "optional": {
          "description": "True indicates that this property does not need to be valued",
          "example": false,
          "type": "boolean",
          "default": false
        },
        "hidden": {
          "description": "True indicates that the property is carried in the message - to and from the System of Record, but is not exposed in the UI",
          "example": false,
          "type": "boolean",
          "default": false
        },
        "sequence": {
          "type": "integer",
          "format": "int32"
        },
        "disallow": {
          "description": "Specified on a target property.  If the passed conditions are true then this property is disallowed and therefore, not presented to a user.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/disallowItemType"
          }
        },
        "shortLabelName": {
          "description": "Provides a client defined UI label for the property which is less than an average of 20 characters in length.",
          "type": "string"
        },
        "longLabelName": {
          "description": "Provides a client defined UI long label for the property.",
          "type": "string"
        },
        "minLength": {
          "description": "Indicates the minimum length required for a property.",
          "type": "integer",
          "format": "int32"
        },
        "maxLength": {
          "description": "Indicates the maximum length supported for a property",
          "type": "integer",
          "format": "int32"
        },
        "minValue": {
          "description": "Indicates the minimum value required for a property.",
          "type": "number",
          "format": "double"
        },
        "maxValue": {
          "description": "Indicates the maximum value supported for a property",
          "type": "number",
          "format": "double"
        },
        "multipleOf": {
          "description": "Indicates that the value must be a multiple of this value or divisible by this value.",
          "type": "number",
          "format": "double"
        },
        "default": {
          "description": "Indicates the default value which should be populated by default",
          "type": "number",
          "format": "double"
        },
        "pattern": {
          "description": "Indicates a regular expression on the required pattern for the value",
          "type": "string"
        },
        "masking": {
          "$ref": "#/definitions/maskingRuleType"
        },
        "equals": {
          "description": "Provides 1 to many properties which the value of this property must be equal to.  If the property is equal to any of the value of the properties then the validation is successful.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "greaterThan": {
          "description": "The value of the related property must be greater than the value of  all the given properties in the array.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "lessThan": {
          "description": "The value of the related property must be less than the value of all the given properties in the array.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "dependencies": {
          "description": "List conditional dependencies of supported properties (readOnly, pattern, hidden, disallow etc.) of an attribute or an object. Dependencies can be defined using oneOf (OR) / allOf (AND) object. oneOf - successful if one of the conditions satisfies, allOf - successful if all the conditions satisfies. Refer API specification for dependencies context object syntax and rules. Dependencies context cannot be validated against context schema if dependencies is defined context JSON, because the dependencies JSON structure is dynamically defined for attributes and the not defined in the context schema. Attribute level properties and dependencies properties are mutually exclusive, example - readOnly property can be set either at attribute level or inside dependencies. If both hidden and disallow properties are set inside dependencies or at attribute level, hidden property takes precedence.",
          "type": "object"
        },
        "helperMessage": {
          "$ref": "#/definitions/helperMessageType"
        },
        "dataType": {
          "$ref": "#/definitions/metaDataType"
        },
        "dependencyLinks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/linkType_v02"
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Paycard Organization Locations",
      "description": "List all organization locations that support ALINE paycard"
    }
  ]
}