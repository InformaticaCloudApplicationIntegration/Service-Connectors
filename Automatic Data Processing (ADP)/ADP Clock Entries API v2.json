{
  "swagger": "2.0",
  "info": {
    "version": "2.0.0",
    "title": "Clock Entries",
    "description": "The list of clock entries for a worker",
    "contact": {
      "email": "Isabel.Espina.Carvajal@adp.com",
      "name": "Isabel Espina Carvajal"
    }
  },
  "host": "test-api.adp.com",
  "basePath": "/",
  "schemes": [],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/time/v2/workers/{aoid}/clock-entries": {
      "get": {
        "description": "Returns the list of clock entries for a worker",
        "summary": "f2dcd13b-9c7b-47aa-be12-e815f6421fbc",
        "tags": [
          "Clock Entries"
        ],
        "operationId": "TimeV2WorkersClockEntriesByAoidGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "aoid",
            "in": "path",
            "required": true,
            "default": "G4O73G9Z62SL2NFM",
            "type": "string",
            "description": "Associate OID"
          },
          {
            "name": "roleCode",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "The role the user is playing during the transaction.  Possible values: employee,manager,practitioner,administrator,supervisor.  The roleCode header will be passed in all calls. When coming from Myself capabilities rolecode=employee. When coming from Team capabilities roleCode=manager. When coming from Practitioner capabilities roleCode=practitioner."
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list of clock entries for a worker",
            "schema": {
              "$ref": "#/definitions/WorkerClockEntries"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/clockEntries_sample_v02_00_rev002.json"
              }
            },
            "headers": {
              "ETag": {
                "type": "string"
              },
              "Cache-Control": {
                "type": "string"
              }
            }
          },
          "304": {
            "description": "Not Modified",
            "schema": {}
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/EventsTimeV1ClockPunch400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/EventsTimeV1ClockPunch400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/EventsTimeV1ClockPunch400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "schema": {
              "$ref": "#/definitions/EventsTimeV1ClockPunch400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/EventsTimeV1ClockPunch400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/EventsTimeV1ClockPunch400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "413": {
            "description": "Request Entity Too Large",
            "schema": {
              "$ref": "#/definitions/EventsTimeV1ClockPunch400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/EventsTimeV1ClockPunch400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "default": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/EventsTimeV1ClockPunch400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "$ref": "#/definitions/EventsTimeV1ClockPunch400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          }
        }
      }
    },
    "/events/time/v1/clock.punch": {
      "post": {
        "description": "Clock punch event instance",
        "summary": "ed5259f0-5500-4699-9f46-f9eceee89e8b",
        "tags": [
          "Clock Punch"
        ],
        "operationId": "EventsTimeV1ClockPunchPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "roleCode",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "The role the user is playing during the transaction.  Possible values: employee,manager,practitioner,administrator,supervisor.  The roleCode header will be passed in all calls. When coming from Myself capabilities rolecode=employee. When coming from Team capabilities roleCode=manager. When coming from Practitioner capabilities roleCode=practitioner."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "posted contents",
            "schema": {
              "$ref": "#/definitions/ClockPunchEvent"
            }
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "“Accept-Language” “: ” ( language | “*” ) [“;” “q” “=”qvalue]. Specifies the language(s) that are acceptable for the response. The optional qvalue represents a quality level for acceptable languages."
          }
        ],
        "responses": {
          "200": {
            "description": "Clock punch event instance",
            "schema": {
              "$ref": "#/definitions/ClockPunchEvent"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/events_time.clock.punch_v01_00_rev001_response_sample.json"
              }
            },
            "headers": {
              "ETag": {
                "type": "string"
              },
              "Cache-Control": {
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/EventsTimeV1ClockPunch400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/EventsTimeV1ClockPunch400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "schema": {
              "$ref": "#/definitions/EventsTimeV1ClockPunch400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/EventsTimeV1ClockPunch400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/EventsTimeV1ClockPunch400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/EventsTimeV1ClockPunch400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "default": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/EventsTimeV1ClockPunch400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "$ref": "#/definitions/EventsTimeV1ClockPunch400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          }
        }
      }
    },
    "/events/time/v1/clock.punch/meta": {
      "get": {
        "description": "Retrieve event metadata",
        "summary": "620be082-7e6f-4b5a-ae83-31ff60c223a8",
        "tags": [
          "Clock Punch"
        ],
        "operationId": "EventsTimeV1ClockPunchMetaGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "roleCode",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "The role the user is playing during the transaction.  Possible values: employee,manager,practitioner,administrator,supervisor.  The roleCode header will be passed in all calls. When coming from Myself capabilities rolecode=employee. When coming from Team capabilities roleCode=manager. When coming from Practitioner capabilities roleCode=practitioner."
          },
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The OData $filter parameter MUST be used to specify the filter criterion.  Please refer RESTful Web API Design Standard document for this query parameter specification details."
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "“Accept-Language” “: ” ( language | “*” ) [“;” “q” “=”qvalue]. Specifies the language(s) that are acceptable for the response. The optional qvalue represents a quality level for acceptable languages."
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve event metadata",
            "schema": {
              "$ref": "#/definitions/ClockPunchEventMeta"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/events_time.clock.punch_v01_00_rev001_meta_sample.json"
              }
            },
            "headers": {
              "ETag": {
                "type": "string"
              },
              "Cache-Control": {
                "type": "string"
              }
            }
          },
          "304": {
            "description": "Not Modified",
            "schema": {}
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/EventsTimeV1ClockPunch400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/EventsTimeV1ClockPunch400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/EventsTimeV1ClockPunch400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "schema": {
              "$ref": "#/definitions/EventsTimeV1ClockPunch400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/EventsTimeV1ClockPunch400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/EventsTimeV1ClockPunch400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "413": {
            "description": "Request Entity Too Large",
            "schema": {
              "$ref": "#/definitions/EventsTimeV1ClockPunch400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/EventsTimeV1ClockPunch400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "default": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/EventsTimeV1ClockPunch400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "$ref": "#/definitions/EventsTimeV1ClockPunch400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          }
        }
      }
    },
    "/events/time/v1/clock-offline.punch": {
      "post": {
        "description": "Clock punch event instance",
        "summary": "9fb5b4c4-1917-41fb-9519-baf56f93187f",
        "tags": [
          "Offline Clock Punch"
        ],
        "operationId": "EventsTimeV1ClockOfflinePunchPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "roleCode",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "The role the user is playing during the transaction.  Possible values: employee,manager,practitioner,administrator,supervisor.  The roleCode header will be passed in all calls. When coming from Myself capabilities rolecode=employee. When coming from Team capabilities roleCode=manager. When coming from Practitioner capabilities roleCode=practitioner."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "posted contents",
            "schema": {
              "$ref": "#/definitions/ClockPunchEvent"
            }
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "“Accept-Language” “: ” ( language | “*” ) [“;” “q” “=”qvalue]. Specifies the language(s) that are acceptable for the response. The optional qvalue represents a quality level for acceptable languages."
          }
        ],
        "responses": {
          "200": {
            "description": "Clock punch event instance",
            "schema": {
              "$ref": "#/definitions/ClockPunchEvent"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/events_time.clock.punch_v01_00_rev001_offline_response_sample.json"
              }
            },
            "headers": {
              "ETag": {
                "type": "string"
              },
              "Cache-Control": {
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/EventsTimeV1ClockPunch400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/EventsTimeV1ClockPunch400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "schema": {
              "$ref": "#/definitions/EventsTimeV1ClockPunch400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/EventsTimeV1ClockPunch400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/EventsTimeV1ClockPunch400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/EventsTimeV1ClockPunch400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "default": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/EventsTimeV1ClockPunch400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "$ref": "#/definitions/EventsTimeV1ClockPunch400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          }
        }
      }
    },
    "/events/time/v1/clock-offline.punch/meta": {
      "get": {
        "description": "Retrieve event metadata",
        "summary": "6a8cad46-4792-49bf-a1b2-c0e28191bf49",
        "tags": [
          "Offline Clock Punch"
        ],
        "operationId": "EventsTimeV1ClockOfflinePunchMetaGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "roleCode",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "The role the user is playing during the transaction.  Possible values: employee,manager,practitioner,administrator,supervisor.  The roleCode header will be passed in all calls. When coming from Myself capabilities rolecode=employee. When coming from Team capabilities roleCode=manager. When coming from Practitioner capabilities roleCode=practitioner."
          },
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The OData $filter parameter MUST be used to specify the filter criterion.  Please refer RESTful Web API Design Standard document for this query parameter specification details."
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "“Accept-Language” “: ” ( language | “*” ) [“;” “q” “=”qvalue]. Specifies the language(s) that are acceptable for the response. The optional qvalue represents a quality level for acceptable languages."
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve event metadata",
            "schema": {
              "$ref": "#/definitions/ClockPunchEventMeta"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/events_time.clock.punch_v01_00_rev001_meta_sample.json"
              }
            },
            "headers": {
              "ETag": {
                "type": "string"
              },
              "Cache-Control": {
                "type": "string"
              }
            }
          },
          "304": {
            "description": "Not Modified",
            "schema": {}
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/EventsTimeV1ClockPunch400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/EventsTimeV1ClockPunch400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/EventsTimeV1ClockPunch400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "schema": {
              "$ref": "#/definitions/EventsTimeV1ClockPunch400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/EventsTimeV1ClockPunch400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/EventsTimeV1ClockPunch400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "413": {
            "description": "Request Entity Too Large",
            "schema": {
              "$ref": "#/definitions/EventsTimeV1ClockPunch400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/EventsTimeV1ClockPunch400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "default": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/EventsTimeV1ClockPunch400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "$ref": "#/definitions/EventsTimeV1ClockPunch400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          }
        }
      }
    },
    "/events/time/v1/crew-clock.punch": {
      "post": {
        "description": "Crew clock punch event instance",
        "summary": "19459416-fec7-4763-b570-3608cfa3cf4f",
        "tags": [
          "Crew Clock Punch"
        ],
        "operationId": "EventsTimeV1CrewClockPunchPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "roleCode",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "The role the user is playing during the transaction.  Possible values: employee,manager,practitioner,administrator,supervisor.  The roleCode header will be passed in all calls. When coming from Myself capabilities rolecode=employee. When coming from Team capabilities roleCode=manager. When coming from Practitioner capabilities roleCode=practitioner."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "posted contents",
            "schema": {
              "$ref": "#/definitions/ClockPunchEvent"
            }
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "“Accept-Language” “: ” ( language | “*” ) [“;” “q” “=”qvalue]. Specifies the language(s) that are acceptable for the response. The optional qvalue represents a quality level for acceptable languages."
          }
        ],
        "responses": {
          "200": {
            "description": "Crew clock punch event instance",
            "schema": {
              "$ref": "#/definitions/ClockPunchEvent"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/events_time.clock.punch_v01_00_rev001_response_sample.json"
              }
            },
            "headers": {
              "ETag": {
                "type": "string"
              },
              "Cache-Control": {
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/EventsTimeV1ClockPunch400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/EventsTimeV1ClockPunch400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "schema": {
              "$ref": "#/definitions/EventsTimeV1ClockPunch400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/EventsTimeV1ClockPunch400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/EventsTimeV1ClockPunch400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/EventsTimeV1ClockPunch400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "default": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/EventsTimeV1ClockPunch400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "$ref": "#/definitions/EventsTimeV1ClockPunch400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          }
        }
      }
    },
    "/events/time/v1/crew-clock.punch/meta": {
      "get": {
        "description": "Retrieve event metadata",
        "summary": "a601cfdf-3c16-46a2-88be-dfcb6a3d3009",
        "tags": [
          "Crew Clock Punch"
        ],
        "operationId": "EventsTimeV1CrewClockPunchMetaGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "roleCode",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "The role the user is playing during the transaction.  Possible values: employee,manager,practitioner,administrator,supervisor.  The roleCode header will be passed in all calls. When coming from Myself capabilities rolecode=employee. When coming from Team capabilities roleCode=manager. When coming from Practitioner capabilities roleCode=practitioner."
          },
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The OData $filter parameter MUST be used to specify the filter criterion.  Please refer RESTful Web API Design Standard document for this query parameter specification details."
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "required": false,
            "type": "string",
            "description": "“Accept-Language” “: ” ( language | “*” ) [“;” “q” “=”qvalue]. Specifies the language(s) that are acceptable for the response. The optional qvalue represents a quality level for acceptable languages."
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve event metadata",
            "schema": {
              "$ref": "#/definitions/ClockPunchEventMeta"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/events_time.clock.punch_v01_00_rev001_meta_sample.json"
              }
            },
            "headers": {
              "ETag": {
                "type": "string"
              },
              "Cache-Control": {
                "type": "string"
              }
            }
          },
          "304": {
            "description": "Not Modified",
            "schema": {}
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/EventsTimeV1ClockPunch400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/EventsTimeV1ClockPunch400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/EventsTimeV1ClockPunch400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "schema": {
              "$ref": "#/definitions/EventsTimeV1ClockPunch400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "schema": {
              "$ref": "#/definitions/EventsTimeV1ClockPunch400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "412": {
            "description": "Precondition Failed",
            "schema": {
              "$ref": "#/definitions/EventsTimeV1ClockPunch400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "413": {
            "description": "Request Entity Too Large",
            "schema": {
              "$ref": "#/definitions/EventsTimeV1ClockPunch400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "schema": {
              "$ref": "#/definitions/EventsTimeV1ClockPunch400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "default": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/EventsTimeV1ClockPunch400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "$ref": "#/definitions/EventsTimeV1ClockPunch400Error"
            },
            "examples": {
              "application/json": {
                "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "WorkerClockEntries": {
      "title": "WorkerClockEntries",
      "description": "The list of clock entries for a worker",
      "example": {
        "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/clockEntries_sample_v02_00_rev002.json"
      },
      "type": "object",
      "properties": {
        "clockEntries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/clockEntry"
          }
        },
        "meta": {
          "$ref": "#/definitions/Meta"
        },
        "confirmMessage": {
          "$ref": "#/definitions/ConfirmMessage"
        }
      }
    },
    "clockEntry": {
      "title": "clockEntry",
      "description": "Clock Entry is a timestamp based entry made through a clock device such as a phsycial wall clock or via an application an a device such as mobile, kiosk, desktop",
      "type": "object",
      "properties": {
        "deviceDateTime": {
          "description": "Date Time of the entering device.  This time is to be logged by the System of Record to maintain forensics on the time logged based on synchronization with the server clock and that of the user's mobile device. Data Representation Temporal Data Element Specification following ISO-8601:2000 specification.  The granularity for date-time for this API will always be the following: YYYY-MM-DDThh:mm:ss-+hh:mm.  where -+ is either minus or plus depending on whether the offset from GMT is positive or negative hours minutes.",
          "type": "string",
          "format": "date-time"
        },
        "entryDateTime": {
          "description": "The date as logged by the device based on the clock reference time from the server. Data Representation Temporal Data Element Specification following ISO-8601:2000 specification.  The granularity for date-time for this API will always be the following: YYYY-MM-DDThh:mm:ss-+hh:mm.  where -+ is either minus or plus depending on whether the offset from GMT is positive or negative hours minutes.",
          "type": "string",
          "format": "date-time"
        },
        "actionCode": {
          "$ref": "#/definitions/ActionCode"
        },
        "validGeoLocationID": {
          "description": "Identifier if the geo location which the device was within a valid range.  This identifier is sent in the timeEntryDetails json (//clockPolicy/validGeoLocations/id)",
          "type": "string"
        },
        "laborAllocations": {
          "description": "Time may be allocated to a department, project, location, etc...",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LaborAllocation"
          }
        },
        "entryOverrideCodes": {
          "description": "Codes that represent overrides that a user may select for the entry,e.g. if the worker is requesting to override the standard meal deduction for this entry, the code would identify the rule.  Example is that the worker is scheduled for lunch, but is working through lunch.  This tells the system that the worker is working through lunch and to not count the regularly scheduled lunch time",
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntryOverrideCode"
          }
        },
        "workAssignmentID": {
          "description": "A unique identifier of a work assignment",
          "type": "string"
        },
        "badgeID": {
          "description": "A badgeID for any employee position used for clock punch",
          "type": "string"
        },
        "punchLocation": {
          "$ref": "#/definitions/PunchLocation"
        },
        "comments": {
          "description": "The comments entered by the submitter or the reviewer.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Comment"
          }
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        },
        "entryID": {
          "description": "The unique identifier of the entry",
          "type": "string"
        }
      }
    },
    "ActionCode": {
      "title": "ActionCode",
      "description": "The Action Code.  Punch, ClockIn/ClockOut, lunchout, transfer",
      "type": "object",
      "properties": {
        "codeValue": {
          "description": "The code for the related entity",
          "type": "string"
        },
        "shortName": {
          "description": "Short description of the related code",
          "type": "string"
        },
        "longName": {
          "description": "Long description of the related code",
          "type": "string"
        }
      }
    },
    "LaborAllocation": {
      "title": "LaborAllocation",
      "type": "object",
      "properties": {
        "allocationCode": {
          "$ref": "#/definitions/AllocationCode"
        },
        "allocationTypeCode": {
          "$ref": "#/definitions/AllocationTypeCode"
        },
        "itemID": {
          "description": "The unique identifier of the object in a collection",
          "type": "string"
        }
      }
    },
    "AllocationCode": {
      "title": "AllocationCode",
      "description": "The code identifying the allocation",
      "type": "object",
      "properties": {
        "codeValue": {
          "description": "The code for the related entity",
          "type": "string"
        },
        "shortName": {
          "description": "Short description of the related code",
          "type": "string"
        },
        "longName": {
          "description": "Long description of the related code",
          "type": "string"
        }
      }
    },
    "AllocationTypeCode": {
      "title": "AllocationTypeCode",
      "description": "The type of allocation",
      "type": "object",
      "properties": {
        "codeValue": {
          "description": "The code for the related entity",
          "type": "string"
        },
        "shortName": {
          "description": "Short description of the related code",
          "type": "string"
        },
        "longName": {
          "description": "Long description of the related code",
          "type": "string"
        }
      }
    },
    "EntryOverrideCode": {
      "title": "EntryOverrideCode",
      "type": "object",
      "properties": {
        "itemID": {
          "description": "The unique identifier of the object in a collection",
          "type": "string"
        },
        "overrideCode": {
          "$ref": "#/definitions/OverrideCode"
        },
        "overrideTypeCode": {
          "$ref": "#/definitions/OverrideTypeCode"
        }
      }
    },
    "OverrideCode": {
      "title": "OverrideCode",
      "description": "The code identifying the entry override",
      "type": "object",
      "properties": {
        "codeValue": {
          "description": "The code for the related entity",
          "type": "string"
        },
        "shortName": {
          "description": "Short description of the related code",
          "type": "string"
        },
        "longName": {
          "description": "Long description of the related code",
          "type": "string"
        }
      }
    },
    "OverrideTypeCode": {
      "title": "OverrideTypeCode",
      "description": "The type of override (i.e. cancelmealdeduct, workrule)",
      "type": "object",
      "properties": {
        "codeValue": {
          "description": "The code for the related entity",
          "type": "string"
        },
        "shortName": {
          "description": "Short description of the related code",
          "type": "string"
        },
        "longName": {
          "description": "Long description of the related code",
          "type": "string"
        }
      }
    },
    "PunchLocation": {
      "title": "PunchLocation",
      "description": "The location where the punch was made.  Requires geo coordiates to be captured",
      "type": "object",
      "properties": {
        "nameCode": {
          "$ref": "#/definitions/NameCode"
        },
        "address": {
          "$ref": "#/definitions/Address"
        },
        "accuracy": {
          "$ref": "#/definitions/Accuracy"
        }
      }
    },
    "NameCode": {
      "title": "NameCode",
      "description": "The location type code and description, e.g. HDQ, headquarters",
      "type": "object",
      "properties": {
        "codeValue": {
          "description": "The code for the related entity",
          "type": "string"
        },
        "shortName": {
          "description": "Short description of the related code",
          "type": "string"
        },
        "longName": {
          "description": "Long description of the related code",
          "type": "string"
        }
      }
    },
    "Address": {
      "title": "Address",
      "description": "An address related to the associated entity",
      "type": "object",
      "properties": {
        "nameCode": {
          "$ref": "#/definitions/NameCode1"
        },
        "attentionOfName": {
          "description": "Attention of Name",
          "type": "string"
        },
        "careOfName": {
          "description": "Care Of Name",
          "type": "string"
        },
        "lineOne": {
          "description": "Line One of Street Address Information",
          "type": "string"
        },
        "lineTwo": {
          "description": "Line Two of Street Address Information",
          "type": "string"
        },
        "lineThree": {
          "description": "Line Three of Street Address Information",
          "type": "string"
        },
        "cityName": {
          "description": "A city in the context of an address",
          "type": "string"
        },
        "countrySubdivisionLevel1": {
          "$ref": "#/definitions/CountrySubdivisionLevel1"
        },
        "countryCode": {
          "description": "A simple (string) code.  Can have a code list reference",
          "type": "string"
        },
        "postalCode": {
          "description": "The string of characters used to identify the postal code",
          "type": "string"
        },
        "geoCoordinate": {
          "$ref": "#/definitions/GeoCoordinate"
        },
        "scriptCode": {
          "$ref": "#/definitions/ScriptCode"
        },
        "lineFour": {
          "description": "Line Four of Street Address Information",
          "type": "string"
        },
        "lineFive": {
          "description": "Line Five of Street Address Information",
          "type": "string"
        },
        "buildingNumber": {
          "description": "The number of a building in the context of a physical address, e.g. House Number",
          "type": "string"
        },
        "buildingName": {
          "description": "The name of a building in the context of a physical address, e.g. Rockefeller Center",
          "type": "string"
        },
        "blockName": {
          "description": "The name the block",
          "type": "string"
        },
        "streetName": {
          "description": "The name of the street",
          "type": "string"
        },
        "streetTypeCode": {
          "$ref": "#/definitions/StreetTypeCode"
        },
        "unit": {
          "description": "A unit in the context of an address, e.g. an Apartment Number or an Office",
          "type": "string"
        },
        "floor": {
          "description": "A floor in the context of an address",
          "type": "string"
        },
        "stairCase": {
          "description": "A reference to a particular staircase in the context of an address",
          "type": "string"
        },
        "door": {
          "description": "A reference to a particular door in the context of an address. e.g. Apartment Number",
          "type": "string"
        },
        "postOfficeBox": {
          "description": "A post office box",
          "type": "string"
        },
        "deliveryPoint": {
          "description": "A way to identify a specific delivery location, e.g. a mail-stop",
          "type": "string"
        },
        "plotID": {
          "description": "A way to identify a building plot, e.g. a specific building construction site",
          "type": "string"
        },
        "countrySubdivisionLevel2": {
          "$ref": "#/definitions/CountrySubdivisionLevel2"
        }
      }
    },
    "NameCode1": {
      "title": "NameCode1",
      "description": "A descriptive coded name of the address",
      "type": "object",
      "properties": {
        "codeValue": {
          "description": "The code for the related entity",
          "type": "string"
        },
        "shortName": {
          "description": "Short description of the related code",
          "type": "string"
        },
        "longName": {
          "description": "Long description of the related code",
          "type": "string"
        }
      }
    },
    "CountrySubdivisionLevel1": {
      "title": "CountrySubdivisionLevel1",
      "description": "A country subdivision correlating to a administrative level one level below country. For example, in the United States, this would be a state",
      "type": "object",
      "properties": {
        "codeValue": {
          "description": "The code for the related entity",
          "type": "string"
        },
        "shortName": {
          "description": "Short description of the related code",
          "type": "string"
        },
        "longName": {
          "description": "Long description of the related code",
          "type": "string"
        },
        "subdivisionType": {
          "description": "The type of a country sub-division, e.g. state, county",
          "type": "string"
        }
      }
    },
    "GeoCoordinate": {
      "title": "GeoCoordinate",
      "description": "The coordinates of the location of the address",
      "type": "object",
      "properties": {
        "latitude": {
          "description": "The angle, in degrees, of a position on Earth above the equator. (Latitude is negative for a place below the equator.) specified in decimal degrees",
          "type": "number",
          "format": "double"
        },
        "longitude": {
          "description": "The angle, in degrees, of a position on Earth around the equator from the Greenwich Meridian specified in decimal degrees",
          "type": "number",
          "format": "double"
        }
      }
    },
    "ScriptCode": {
      "title": "ScriptCode",
      "description": "The type of script the in which the associated entity is represented. Associated codelist is ISO15924-A. Use the alpha-4 representation versus the single digit numeric representation. Format is lowercase with initial letter capitalized. For example, Cyrillic is Cyrl",
      "type": "object",
      "properties": {
        "codeValue": {
          "description": "The code for the related entity",
          "type": "string"
        },
        "shortName": {
          "description": "Short description of the related code",
          "type": "string"
        },
        "longName": {
          "description": "Long description of the related code",
          "type": "string"
        }
      }
    },
    "StreetTypeCode": {
      "title": "StreetTypeCode",
      "description": "The type of street, e.g. Lane, Passage, Way",
      "type": "object",
      "properties": {
        "codeValue": {
          "description": "The code for the related entity",
          "type": "string"
        },
        "shortName": {
          "description": "Short description of the related code",
          "type": "string"
        },
        "longName": {
          "description": "Long description of the related code",
          "type": "string"
        }
      }
    },
    "CountrySubdivisionLevel2": {
      "title": "CountrySubdivisionLevel2",
      "description": "A country subdivision correlating to a administrative level two levels below country. For example, in the United States, this might be a county",
      "type": "object",
      "properties": {
        "codeValue": {
          "description": "The code for the related entity",
          "type": "string"
        },
        "shortName": {
          "description": "Short description of the related code",
          "type": "string"
        },
        "longName": {
          "description": "Long description of the related code",
          "type": "string"
        },
        "subdivisionType": {
          "description": "The type of a country sub-division, e.g. state, county",
          "type": "string"
        }
      }
    },
    "Accuracy": {
      "title": "Accuracy",
      "description": "Denotes the accuracy level of the latitude and longitude coordinates.  It is specified in meters.  The value must be a non-negative real number.  The value should correspond to a 95% confidence level",
      "type": "object",
      "properties": {
        "unitValue": {
          "description": "the radius (distance) that the person may clock in from the coordinate.",
          "type": "number",
          "format": "double"
        },
        "unitCode": {
          "$ref": "#/definitions/UnitCode"
        }
      }
    },
    "UnitCode": {
      "title": "UnitCode",
      "description": "unit which the range is communicated in",
      "type": "object",
      "properties": {
        "codeValue": {
          "description": "The code for the related entity",
          "type": "string"
        },
        "shortName": {
          "description": "Short description of the related code",
          "type": "string"
        },
        "longName": {
          "description": "Long description of the related code",
          "type": "string"
        }
      }
    },
    "Comment": {
      "title": "Comment",
      "type": "object",
      "properties": {
        "textValue": {
          "description": "The text entered by the user",
          "type": "string"
        },
        "commentCode": {
          "$ref": "#/definitions/CommentCode"
        },
        "entryDateTime": {
          "description": "The date time of the entry",
          "type": "string",
          "format": "date-time"
        },
        "author": {
          "$ref": "#/definitions/Author"
        },
        "appliesToCode": {
          "description": "Code describing what part of the object the comment applies to, pre-defined by the backend SOR",
          "type": "string"
        },
        "itemID": {
          "description": "The unique identifier of the object in a collection",
          "type": "string"
        }
      }
    },
    "CommentCode": {
      "title": "CommentCode",
      "description": "Code describing the comment category, often with the verbiage pre-defined by the backend SOR",
      "type": "object",
      "properties": {
        "codeValue": {
          "description": "The code for the related entity",
          "type": "string"
        },
        "shortName": {
          "description": "Short description of the related code",
          "type": "string"
        },
        "longName": {
          "description": "Long description of the related code",
          "type": "string"
        }
      }
    },
    "Author": {
      "title": "Author",
      "description": "The autor of the comment",
      "type": "object",
      "properties": {
        "associateOID": {
          "description": "The unique identifier of the associate",
          "type": "string"
        },
        "roleCode": {
          "$ref": "#/definitions/RoleCode"
        },
        "formattedName": {
          "description": "The formatted name of the associate",
          "type": "string"
        }
      }
    },
    "RoleCode": {
      "title": "RoleCode",
      "description": "The code describing the role of the the associated person",
      "type": "object",
      "properties": {
        "codeValue": {
          "description": "The code for the related entity",
          "type": "string"
        },
        "shortName": {
          "description": "Short description of the related code",
          "type": "string"
        },
        "longName": {
          "description": "Long description of the related code",
          "type": "string"
        }
      }
    },
    "Link": {
      "title": "Link",
      "description": "A link description object is used to describe link relations.  In the context of a schema, it defines the link relations of the instances of the schema, and can be parameterized by the instance values.  The link description format can be used on its own in regular (non-schema documents), and use of this format can be declared by referencing the normative link description schema as the the schema for the data structure that uses the links",
      "type": "object",
      "properties": {
        "href": {
          "description": "The URI of the related entity",
          "type": "string"
        },
        "rel": {
          "$ref": "#/definitions/Rel"
        },
        "canonicalUri": {
          "description": "A unique identifier of the feature/function/operation, the link poins to",
          "type": "string"
        },
        "title": {
          "description": "This property defines a title for the link.  The value must be a string. User agents MAY use this title when presenting the link to the user",
          "type": "string"
        },
        "targetSchema": {
          "description": "This property is a schema that defines the expected structure of the JSON representation of the target of the link, if the target of the link is returned using JSON representation",
          "type": "string"
        },
        "mediaType": {
          "$ref": "#/definitions/MediaType"
        },
        "method": {
          "$ref": "#/definitions/Method"
        },
        "encType": {
          "$ref": "#/definitions/EncType"
        },
        "schema": {
          "description": "This property contains a schema which defines the acceptable structure of the submitted request.  For a GET request, this schema would define the properties for the query string and for a POST request, this would define the body",
          "type": "string"
        },
        "payLoadArguments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PayLoadArgument"
          }
        }
      }
    },
    "Rel": {
      "title": "Rel",
      "description": "Indicates the nature of the relationship of the related resource to the resource that generated this representation",
      "example": "alternate",
      "type": "string",
      "enum": [
        "alternate",
        "create",
        "canonical",
        "describedby",
        "edit-form",
        "enclosure",
        "full",
        "related",
        "root",
        "self",
        "up",
        "search",
        "first",
        "last",
        "next",
        "previous",
        "/adp/invoke",
        "/adp/image",
        "/adp/confirm-message",
        "/adp/status-monitor",
        "/adp/codelist",
        "/adp/template",
        "/adp/externalLink",
        "/adp/validation",
        "/adp/deeplink",
        "/adp/attachment",
        "/adp/workflow"
      ]
    },
    "MediaType": {
      "title": "MediaType",
      "description": "The media type that the linked resource will return (Response)",
      "example": "application/gzip",
      "type": "string",
      "enum": [
        "application/gzip",
        "application/json",
        "application/msword",
        "application/pdf",
        "application/postscript",
        "application/vnd.ms-excel",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
        "application/xml",
        "application/x-www-form-urlencoded",
        "image/gif",
        "image/jpeg",
        "image/png",
        "image/tiff",
        "multipart/mixed",
        "text/html",
        "text/plain",
        "application/vnd.visio",
        "image/bmp",
        "image/x-ms-bmp",
        "application/vnd.openxmlformats-officedocument.presentationml.presentation",
        "application/vnd.ms-powerpoint",
        "video/mp4",
        "audio/mpeg",
        "video/x-msvideo",
        "video/x-ms-wmv",
        "application/rtf",
        "application/vnd.ms-outlook",
        "text/csv",
        "video/quicktime",
        "application/zip",
        "application/illustrator",
        "text/xml"
      ]
    },
    "Method": {
      "title": "Method",
      "description": "The HTTP method code (HTTP Verb) traverse the link (GET, POST, PUT or DELETE)",
      "example": "GET",
      "type": "string",
      "enum": [
        "GET",
        "POST",
        "DELETE",
        "PUT"
      ]
    },
    "EncType": {
      "title": "EncType",
      "description": "If present, this property indicates a query media type format that the server supports for querying or posting to the collection of instances at the target resource.  The query can be suffixed to the target URI to query the collection with property-based constraints on the resources that SHOULD be returned from the server or used to post data to the resource (depending on the method). (Request)",
      "example": "application/json",
      "type": "string",
      "enum": [
        "application/json",
        "application/x-www-form-urlencoded"
      ]
    },
    "PayLoadArgument": {
      "title": "PayLoadArgument",
      "type": "object",
      "properties": {
        "argumentPath": {
          "description": "Code value (typically a key field) of the code list item",
          "type": "string"
        },
        "argumentValue": {
          "description": "Code value (typically a key field) of the code list item",
          "type": "string"
        }
      }
    },
    "Meta": {
      "title": "Meta",
      "description": "Meta contains the metadata associated with a response.  A GET response may include metadata to support pagination",
      "type": "object",
      "properties": {
        "startSequence": {
          "description": "The instance resource sequence (number) identifying the first resource returned in the response. The server generates this sequence.  It is used by the client to determine the start sequence of the subsequent Get request",
          "type": "integer",
          "format": "int32"
        },
        "completeIndicator": {
          "description": "Indicates whether the response completes the return of all of the resources of the instance resource set to the requesting system",
          "type": "boolean"
        },
        "totalNumber": {
          "description": "Number of total instance resources in an instance resource set. Note: An instance resource set is a set of instance resources that is determined by a server to satisfy the sets membership criteria (i.e., selection, filter, expansion and search criteria) of a resource management operation (e.g. GET request) upon a collection resource",
          "type": "integer",
          "format": "int32"
        },
        "resourceSetID": {
          "description": "Unique identifier of the instance resource set.  It is generated by the server as a result of the original Get request",
          "type": "string"
        },
        "links": {
          "description": "A link description object is used to describe link relations.  In the context of a schema, it defines the link relations of the instances of the schema, and can be parameterized by the instance values.  The link description format can be used on its own in regular (non-schema documents), and use of this format can be declared by referencing the normative link description schema as the the schema for the data structure that uses the links",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "ConfirmMessage": {
      "title": "ConfirmMessage",
      "description": "The ConfirmMessage contains the processing results for the corresponding request.  A request may have its processing reported as: succeeded, partially failed, or failed.",
      "type": "object",
      "properties": {
        "confirmMessageID": {
          "$ref": "#/definitions/ConfirmMessageID"
        },
        "createDateTime": {
          "description": "The date & time that the message instance was generated.; follows the ISO-8601:2000 format: 2008-05-11T15:30:00-06:00.",
          "type": "string",
          "format": "date-time"
        },
        "requestReceiptDateTime": {
          "description": "The date & time that the request submitted by the client was received. Note, this timestamp may not be the same as the time the client actually submitted the request if there is a queuing mechanism between the client and server processing the request; it follows the ISO-8601:2000 format: 2008-05-11T15:30:00-06:00.",
          "type": "string",
          "format": "date-time"
        },
        "protocolStatusCode": {
          "$ref": "#/definitions/ProtocolStatusCode"
        },
        "protocolCode": {
          "$ref": "#/definitions/ProtocolCode"
        },
        "requestID": {
          "$ref": "#/definitions/RequestID"
        },
        "requestStatusCode": {
          "$ref": "#/definitions/RequestStatusCode"
        },
        "requestMethodCode": {
          "$ref": "#/definitions/RequestMethodCode"
        },
        "sessionID": {
          "$ref": "#/definitions/SessionID"
        },
        "requestETag": {
          "description": "The entity tag of the entity in the request.",
          "type": "string"
        },
        "requestLink": {
          "$ref": "#/definitions/RequestLink"
        },
        "processingStatusCode": {
          "$ref": "#/definitions/ProcessingStatusCode"
        },
        "processMessages": {
          "description": "processMessage is optional and contains processing information for either the request (at the ConfirmMessage level) or a resource being managed in the request (at the ResourceMessage level).  Most often there will be a single instance for an associated request or resource, but this structure allows for more than one if needed, for example, if multiple errors exist for a single resource.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProcessMessage"
          }
        },
        "resourceMessages": {
          "description": "resource Message contains the resource-specific processing results for resources being managed in the request.  A resource may have its processing reported as:  succeeded or failed.  It must be used to represent resource-specific messages.  In the case of a request managing multiple resources and resource-specific messages are to be returned, then this array will contain one object for each such resource of the request.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceMessage"
          }
        }
      }
    },
    "ConfirmMessageID": {
      "title": "ConfirmMessageID",
      "description": "An identifier for the instance of the confirm message.",
      "type": "object",
      "properties": {
        "idValue": {
          "description": "An ID",
          "type": "string"
        },
        "schemeName": {
          "description": "The type of ID",
          "type": "string"
        },
        "schemeAgencyName": {
          "description": "The agency that issues the ID",
          "type": "string"
        }
      }
    },
    "ProtocolStatusCode": {
      "title": "ProtocolStatusCode",
      "description": "Protocol-specific response status code.",
      "type": "object",
      "properties": {
        "codeValue": {
          "description": "The code for the related entity.",
          "type": "string"
        },
        "shortName": {
          "description": "Short description of the related code not to exceed 25 characters",
          "type": "string"
        },
        "longName": {
          "description": "Long description of the related code",
          "type": "string"
        }
      }
    },
    "ProtocolCode": {
      "title": "ProtocolCode",
      "description": "Code that identifies the protocol used for the request.",
      "type": "object",
      "properties": {
        "codeValue": {
          "description": "The code for the related entity.",
          "type": "string"
        },
        "shortName": {
          "description": "Short description of the related code not to exceed 25 characters",
          "type": "string"
        },
        "longName": {
          "description": "Long description of the related code",
          "type": "string"
        }
      }
    },
    "RequestID": {
      "title": "RequestID",
      "description": "The identifier of the request that generated this response.",
      "type": "object",
      "properties": {
        "idValue": {
          "description": "An ID",
          "type": "string"
        },
        "schemeName": {
          "description": "The type of ID",
          "type": "string"
        },
        "schemeAgencyName": {
          "description": "The agency that issues the ID",
          "type": "string"
        }
      }
    },
    "RequestStatusCode": {
      "title": "RequestStatusCode",
      "description": "The process results status code for the request.",
      "type": "object",
      "properties": {
        "shortName": {
          "description": "Short description of the related code",
          "type": "string"
        },
        "longName": {
          "description": "Long description of the related code",
          "type": "string"
        },
        "codeValue": {
          "$ref": "#/definitions/CodeValue"
        }
      }
    },
    "CodeValue": {
      "title": "CodeValue",
      "description": "The code for the related entity.",
      "example": "succeeded",
      "type": "string",
      "enum": [
        "succeeded",
        "partiallyFailed",
        "failed"
      ]
    },
    "RequestMethodCode": {
      "title": "RequestMethodCode",
      "description": "The method that was used on the request corresponding to this message instance.",
      "type": "object",
      "properties": {
        "shortName": {
          "description": "Short description of the related code",
          "type": "string"
        },
        "longName": {
          "description": "Long description of the related code",
          "type": "string"
        },
        "codeValue": {
          "$ref": "#/definitions/CodeValue1"
        }
      }
    },
    "CodeValue1": {
      "title": "CodeValue1",
      "description": "The code for the related entity.",
      "example": "GET",
      "type": "string",
      "enum": [
        "GET",
        "PUT",
        "POST",
        "PATCH",
        "DELETE"
      ]
    },
    "SessionID": {
      "title": "SessionID",
      "description": "A session identifier if one is available.",
      "type": "object",
      "properties": {
        "idValue": {
          "description": "An ID",
          "type": "string"
        },
        "schemeName": {
          "description": "The type of ID",
          "type": "string"
        },
        "schemeAgencyName": {
          "description": "The agency that issues the ID",
          "type": "string"
        }
      }
    },
    "RequestLink": {
      "title": "RequestLink",
      "description": "The link of the request that generated this response.",
      "type": "object",
      "properties": {
        "href": {
          "description": "The URI of the related entity",
          "type": "string"
        },
        "rel": {
          "$ref": "#/definitions/Rel"
        },
        "canonicalUri": {
          "description": "A unique identifier of the feature/function/operation, the link poins to",
          "type": "string"
        },
        "title": {
          "description": "This property defines a title for the link.  The value must be a string. User agents MAY use this title when presenting the link to the user",
          "type": "string"
        },
        "targetSchema": {
          "description": "This property is a schema that defines the expected structure of the JSON representation of the target of the link, if the target of the link is returned using JSON representation",
          "type": "string"
        },
        "mediaType": {
          "$ref": "#/definitions/MediaType"
        },
        "method": {
          "$ref": "#/definitions/Method"
        },
        "encType": {
          "$ref": "#/definitions/EncType"
        },
        "schema": {
          "description": "This property contains a schema which defines the acceptable structure of the submitted request.  For a GET request, this schema would define the properties for the query string and for a POST request, this would define the body",
          "type": "string"
        },
        "payLoadArguments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PayLoadArgument"
          }
        }
      }
    },
    "ProcessingStatusCode": {
      "title": "ProcessingStatusCode",
      "description": "Processing status of the related request message.",
      "type": "object",
      "properties": {
        "shortName": {
          "description": "Short description of the related code",
          "type": "string"
        },
        "longName": {
          "description": "Long description of the related code",
          "type": "string"
        },
        "codeValue": {
          "$ref": "#/definitions/CodeValue2"
        }
      }
    },
    "CodeValue2": {
      "title": "CodeValue2",
      "description": "The code for the related entity.",
      "example": "received",
      "type": "string",
      "enum": [
        "received",
        "validated",
        "started",
        "completed"
      ]
    },
    "ProcessMessage": {
      "title": "ProcessMessage",
      "description": "Each object contains processing information for either the request (at the ConfirmMessage level) or a resource being managed in the request (at the ResourceMessage level).",
      "type": "object",
      "properties": {
        "processMessageID": {
          "$ref": "#/definitions/ProcessMessageID"
        },
        "messageTypeCode": {
          "$ref": "#/definitions/MessageTypeCode"
        },
        "sourceLocationExpression": {
          "description": "Expression that provides the location (or source) of content in a message instance that is associated with a process message. Examples of expression languages include: XPath, XQuery, JSON Pointer.",
          "type": "string"
        },
        "expressionLanguageCode": {
          "$ref": "#/definitions/ExpressionLanguageCode"
        },
        "links": {
          "description": "A link description object is used to describe link relations.  In the context of a schema, it defines the link relations of the instances of the schema, and can be parameterized by the instance values.  The link description format can be used on its own in regular (non-schema documents), and use of this format can be declared by referencing the normative link description schema as the the schema for the data structure that uses the links.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        },
        "userMessage": {
          "$ref": "#/definitions/UserMessage"
        },
        "developerMessage": {
          "$ref": "#/definitions/DeveloperMessage"
        }
      }
    },
    "ProcessMessageID": {
      "title": "ProcessMessageID",
      "description": "An identifier for the instance of the process message.",
      "type": "object",
      "properties": {
        "idValue": {
          "description": "An ID",
          "type": "string"
        },
        "schemeName": {
          "description": "The type of ID",
          "type": "string"
        },
        "schemeAgencyName": {
          "description": "The agency that issues the ID",
          "type": "string"
        }
      }
    },
    "MessageTypeCode": {
      "title": "MessageTypeCode",
      "description": "Process Message instances may be of type: success, warning, error, or info.",
      "type": "object",
      "properties": {
        "shortName": {
          "description": "Short description of the related code",
          "type": "string"
        },
        "longName": {
          "description": "Long description of the related code",
          "type": "string"
        },
        "codeValue": {
          "$ref": "#/definitions/CodeValue3"
        }
      }
    },
    "CodeValue3": {
      "title": "CodeValue3",
      "description": "The code for the related entity.",
      "example": "success",
      "type": "string",
      "enum": [
        "success",
        "warning",
        "error",
        "info"
      ]
    },
    "ExpressionLanguageCode": {
      "title": "ExpressionLanguageCode",
      "description": "Identifies the language used for expressions communicated in this message.",
      "type": "object",
      "properties": {
        "shortName": {
          "description": "Short description of the related code",
          "type": "string"
        },
        "longName": {
          "description": "Long description of the related code",
          "type": "string"
        },
        "codeValue": {
          "$ref": "#/definitions/CodeValue4"
        }
      }
    },
    "CodeValue4": {
      "title": "CodeValue4",
      "description": "The code for the related entity.",
      "example": "jPath",
      "type": "string",
      "enum": [
        "jPath"
      ]
    },
    "UserMessage": {
      "title": "UserMessage",
      "description": "Message returned to the user",
      "type": "object",
      "properties": {
        "codeValue": {
          "description": "The code associated with the message description.",
          "type": "string"
        },
        "title": {
          "description": "Title of the message description.",
          "type": "string"
        },
        "messageTxt": {
          "description": "The value/content of the message description.",
          "type": "string"
        },
        "links": {
          "description": "A link description object is used to describe link relations.  In the context of a schema, it defines the link relations of the instances of the schema, and can be parameterized by the instance values.  The link description format can be used on its own in regular (non-schema documents), and use of this format can be declared by referencing the normative link description schema as the the schema for the data structure that uses the links.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "DeveloperMessage": {
      "title": "DeveloperMessage",
      "description": "Message returned to the user",
      "type": "object",
      "properties": {
        "codeValue": {
          "description": "The code associated with the message description.",
          "type": "string"
        },
        "title": {
          "description": "Title of the message description.",
          "type": "string"
        },
        "messageTxt": {
          "description": "The value/content of the message description.",
          "type": "string"
        },
        "links": {
          "description": "A link description object is used to describe link relations.  In the context of a schema, it defines the link relations of the instances of the schema, and can be parameterized by the instance values.  The link description format can be used on its own in regular (non-schema documents), and use of this format can be declared by referencing the normative link description schema as the the schema for the data structure that uses the links.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        }
      }
    },
    "ResourceMessage": {
      "title": "ResourceMessage",
      "description": "Each object contains detailed information for a resource referenced in the original request.",
      "type": "object",
      "properties": {
        "resourceMessageID": {
          "$ref": "#/definitions/ResourceMessageID"
        },
        "resourceStatusCode": {
          "$ref": "#/definitions/ResourceMessageResourceStatus"
        },
        "resourceLink": {
          "$ref": "#/definitions/ResourceLink"
        },
        "processMessages": {
          "description": "processMessage is optional and contains processing information for either the request (at the ConfirmMessage level) or a resource being managed in the request (at the ResourceMessage level).  Most often there will be a single instance for an associated request or resource, but this structure allows for more than one if needed, for example, if multiple errors exist for a single resource.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProcessMessageWithResourceStatusCode"
          }
        }
      }
    },
    "ResourceMessageID": {
      "title": "ResourceMessageID",
      "description": "An identifier for the instance of the resource message.",
      "type": "object",
      "properties": {
        "idValue": {
          "description": "An ID",
          "type": "string"
        },
        "schemeName": {
          "description": "The type of ID",
          "type": "string"
        },
        "schemeAgencyName": {
          "description": "The agency that issues the ID",
          "type": "string"
        }
      }
    },
    "ResourceMessageResourceStatus": {
      "title": "ResourceMessageResourceStatus",
      "description": "The processing results status code of the resource of the request.",
      "type": "object",
      "properties": {
        "shortName": {
          "description": "Short description of the related code",
          "type": "string"
        },
        "longName": {
          "description": "Long description of the related code",
          "type": "string"
        },
        "codeValue": {
          "$ref": "#/definitions/CodeValue5"
        }
      }
    },
    "CodeValue5": {
      "title": "CodeValue5",
      "description": "The code for the related entity.",
      "example": "succeeded",
      "type": "string",
      "enum": [
        "succeeded",
        "failed",
        "warning"
      ]
    },
    "ResourceLink": {
      "title": "ResourceLink",
      "description": "The link of the request that generated this response.",
      "type": "object",
      "properties": {
        "href": {
          "description": "The URI of the related entity",
          "type": "string"
        },
        "rel": {
          "$ref": "#/definitions/Rel"
        },
        "canonicalUri": {
          "description": "A unique identifier of the feature/function/operation, the link poins to",
          "type": "string"
        },
        "title": {
          "description": "This property defines a title for the link.  The value must be a string. User agents MAY use this title when presenting the link to the user",
          "type": "string"
        },
        "targetSchema": {
          "description": "This property is a schema that defines the expected structure of the JSON representation of the target of the link, if the target of the link is returned using JSON representation",
          "type": "string"
        },
        "mediaType": {
          "$ref": "#/definitions/MediaType"
        },
        "method": {
          "$ref": "#/definitions/Method"
        },
        "encType": {
          "$ref": "#/definitions/EncType"
        },
        "schema": {
          "description": "This property contains a schema which defines the acceptable structure of the submitted request.  For a GET request, this schema would define the properties for the query string and for a POST request, this would define the body",
          "type": "string"
        },
        "payLoadArguments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PayLoadArgument"
          }
        }
      }
    },
    "ProcessMessageWithResourceStatusCode": {
      "title": "ProcessMessageWithResourceStatusCode",
      "description": "Each object contains processing information for either the request (at the ConfirmMessage level) or a resource being managed in the request (at the ResourceMessage level).",
      "type": "object",
      "properties": {
        "processMessageID": {
          "$ref": "#/definitions/ProcessMessageID"
        },
        "messageTypeCode": {
          "$ref": "#/definitions/MessageTypeCode"
        },
        "sourceLocationExpression": {
          "description": "Expression that provides the location (or source) of content in a message instance that is associated with a process message. Examples of expression languages include: XPath, XQuery, JSON Pointer.",
          "type": "string"
        },
        "expressionLanguageCode": {
          "$ref": "#/definitions/ExpressionLanguageCode"
        },
        "links": {
          "description": "A link description object is used to describe link relations.  In the context of a schema, it defines the link relations of the instances of the schema, and can be parameterized by the instance values.  The link description format can be used on its own in regular (non-schema documents), and use of this format can be declared by referencing the normative link description schema as the the schema for the data structure that uses the links.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        },
        "userMessage": {
          "$ref": "#/definitions/UserMessage"
        },
        "developerMessage": {
          "$ref": "#/definitions/DeveloperMessage"
        },
        "resourceStatusCode": {
          "$ref": "#/definitions/ResourceStatusCode"
        }
      }
    },
    "ResourceStatusCode": {
      "title": "ResourceStatusCode",
      "description": "DEPRECATED - Use messageTypeCode instead. The processing results status code of the resource of the request.",
      "type": "object",
      "properties": {
        "codeValue": {
          "description": "The code for the related entity.",
          "type": "string"
        },
        "shortName": {
          "description": "Short description of the related code not to exceed 25 characters",
          "type": "string"
        },
        "longName": {
          "description": "Long description of the related code",
          "type": "string"
        }
      }
    },
    "ClockPunchEvent": {
      "title": "ClockPunchEvent",
      "description": "An instance to capture when a worker punches a clock",
      "example": {
        "summary": "A sample file",
        "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/events_time.clock.punch_v01_00_rev001_request_sample.json"
      },
      "type": "object",
      "properties": {
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Event"
          }
        },
        "meta": {
          "$ref": "#/definitions/Meta"
        },
        "confirmMessage": {
          "$ref": "#/definitions/ConfirmMessage"
        }
      }
    },
    "Event": {
      "title": "Event",
      "description": "An instance to capture an event when a set of products are assigned",
      "type": "object",
      "properties": {
        "eventID": {
          "description": "The unique identifier of the event instance. This is set by the system of record once an event is recorded as in progress or complete",
          "type": "string"
        },
        "serviceCategoryCode": {
          "$ref": "#/definitions/ServiceCategoryCode"
        },
        "eventNameCode": {
          "$ref": "#/definitions/EventNameCode"
        },
        "eventTitle": {
          "description": "The event title offers a way to describe a particular instance of an event at a level more granular than the event name, e.g. 2014 Annual Enrollment",
          "type": "string"
        },
        "eventSubTitle": {
          "description": "The event sub title provides event instance summary details, e.g. All Annual Enrollment elections become effective on January 1, 2014",
          "type": "string"
        },
        "eventReasonCode": {
          "$ref": "#/definitions/EventReasonCode"
        },
        "eventStatusCode": {
          "$ref": "#/definitions/EventStatusCode"
        },
        "priorityCode": {
          "$ref": "#/definitions/PriorityCode"
        },
        "recordDateTime": {
          "description": "This is the date time the event is recorded in the system of record with an event status code equal to complete. This value is set by the system of record",
          "type": "string",
          "format": "date-time"
        },
        "creationDateTime": {
          "description": "This is the date time the event is created. If a system of record creates the event instance, as in the case of an annual enrollment for example, then is sets the creation date time. If a user declares an event, then this is set to the date time when the first call is made to the system of record",
          "type": "string",
          "format": "date-time"
        },
        "effectiveDateTime": {
          "description": "This is the effective date, or effective date time fo the event from a business perspective. In some systems, this may be referred to as the Event Date. For example, for a birth event, this is the date of birth. If there is no effective date from a business perspective, this is set equal to the record date time",
          "type": "string",
          "format": "date-time"
        },
        "expirationDateTime": {
          "description": "This value is set by the system of record and used to term the life cycle of an event instance.",
          "type": "string",
          "format": "date-time"
        },
        "dueDateTime": {
          "description": "This value is set by the system of record and allows for the presentation of a date by which the system of record would like the user to complete the event",
          "type": "string",
          "format": "date-time"
        },
        "notificationIndicator": {
          "description": "True indicates that the requestor wants notifications on the status of the request",
          "type": "boolean"
        },
        "originator": {
          "$ref": "#/definitions/Originator"
        },
        "actor": {
          "$ref": "#/definitions/Actor"
        },
        "actAsParty": {
          "$ref": "#/definitions/ActAsParty"
        },
        "onBehalfOfParty": {
          "$ref": "#/definitions/OnBehalfOfParty"
        },
        "eTag": {
          "description": "The entity tag of the entity in the request",
          "type": "string"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        },
        "data": {
          "$ref": "#/definitions/Data"
        }
      }
    },
    "ServiceCategoryCode": {
      "title": "ServiceCategoryCode",
      "description": "The service domain, e.g. HR, Payroll, Benefits, etc. This field is always present and valued based on a standard codelist",
      "type": "object",
      "properties": {
        "codeValue": {
          "description": "The code for the related entity",
          "type": "string"
        },
        "shortName": {
          "description": "Short description of the related code",
          "type": "string"
        },
        "longName": {
          "description": "Long description of the related code",
          "type": "string"
        }
      }
    },
    "EventNameCode": {
      "title": "EventNameCode",
      "description": "This is the canonical name of the event, e.g. dependent.add, worker.hire. This field is always present and valued based on a standard codelist",
      "type": "object",
      "properties": {
        "codeValue": {
          "description": "The code for the related entity",
          "type": "string"
        },
        "shortName": {
          "description": "Short description of the related code",
          "type": "string"
        },
        "longName": {
          "description": "Long description of the related code",
          "type": "string"
        }
      }
    },
    "EventReasonCode": {
      "title": "EventReasonCode",
      "description": "This allows for further refinement of the associated event. For example, for a worker.maritalStatus.change event, the reason code could be used to describe whether it is a Marriage or Divorce. This is optional and valued as defined by the system of record",
      "type": "object",
      "properties": {
        "codeValue": {
          "description": "The code for the related entity",
          "type": "string"
        },
        "shortName": {
          "description": "Short description of the related code",
          "type": "string"
        },
        "longName": {
          "description": "Long description of the related code",
          "type": "string"
        }
      }
    },
    "EventStatusCode": {
      "title": "EventStatusCode",
      "description": "This identifies the status of the event. An event that has been initiated by the system of record will have an event status code of created. An event that is saved in a work in progress state will have an event status code of inProgress. An event that has been recorded will have an event status code of complete. These values are set by the system of record and valued based on a standard codeslist",
      "type": "object",
      "properties": {
        "codeValue": {
          "description": "The code for the related entity",
          "type": "string"
        },
        "shortName": {
          "description": "Short description of the related code",
          "type": "string"
        },
        "longName": {
          "description": "Long description of the related code",
          "type": "string"
        }
      }
    },
    "PriorityCode": {
      "title": "PriorityCode",
      "description": "This allows the system of record to prioritize events and is valued based on a standard codelist",
      "type": "object",
      "properties": {
        "codeValue": {
          "description": "The code for the related entity",
          "type": "string"
        },
        "shortName": {
          "description": "Short description of the related code",
          "type": "string"
        },
        "longName": {
          "description": "Long description of the related code",
          "type": "string"
        }
      }
    },
    "Originator": {
      "title": "Originator",
      "description": "An originator is a user, machine or event that triggered the event",
      "type": "object",
      "properties": {
        "applicationID": {
          "$ref": "#/definitions/ApplicationID"
        },
        "associateOID": {
          "description": "The unique identifier of an associate who originated the event.",
          "type": "string"
        },
        "personOID": {
          "description": "The unique identifier of a person who originated the event or a process",
          "type": "string"
        },
        "formattedName": {
          "description": "Human readable name of the event originator",
          "type": "string"
        },
        "eventID": {
          "description": "The unique identifier of the event instance. This is generated once an event is recorded with an event status code equal to Complete. This value is set by the system of record.",
          "type": "string"
        },
        "eventNameCode": {
          "$ref": "#/definitions/EventNameCode1"
        },
        "deviceID": {
          "description": "The unique identifier of the device, e.g. a time clock, door entry beam",
          "type": "string"
        }
      }
    },
    "ApplicationID": {
      "title": "ApplicationID",
      "description": "The unique identifier of the application which originated the event or a process",
      "type": "object",
      "properties": {
        "idValue": {
          "description": "An actual ID value",
          "type": "string"
        },
        "schemeCode": {
          "$ref": "#/definitions/SchemeCode"
        }
      }
    },
    "SchemeCode": {
      "title": "SchemeCode",
      "description": "The scheme code",
      "type": "object",
      "properties": {
        "codeValue": {
          "description": "The code for the related entity",
          "type": "string"
        },
        "shortName": {
          "description": "Short description of the related code",
          "type": "string"
        },
        "longName": {
          "description": "Long description of the related code",
          "type": "string"
        }
      }
    },
    "EventNameCode1": {
      "title": "EventNameCode1",
      "description": "This is the canonical name of the event, e.g. dependent.add, worker.hire",
      "type": "object",
      "properties": {
        "codeValue": {
          "description": "The code for the related entity",
          "type": "string"
        },
        "shortName": {
          "description": "Short description of the related code",
          "type": "string"
        },
        "longName": {
          "description": "Long description of the related code",
          "type": "string"
        }
      }
    },
    "Actor": {
      "title": "Actor",
      "description": "The actor is the party that completed the recording of the event",
      "type": "object",
      "properties": {
        "applicationID": {
          "$ref": "#/definitions/ApplicationID1"
        },
        "associateOID": {
          "description": "The unique identifier of an associate who originated the event or a process",
          "type": "string"
        },
        "personOID": {
          "description": "The unique identifier of a person who originated the event or a process",
          "type": "string"
        },
        "formattedName": {
          "description": "Human readable name of the actor",
          "type": "string"
        },
        "deviceID": {
          "description": "The unique identifier of the device, e.g. a time clock, door entry beam.",
          "type": "string"
        },
        "geoCoordinate": {
          "$ref": "#/definitions/GeoCoordinate1"
        },
        "deviceUserAgentID": {
          "description": "Identifier of the user agent of the device used by the actor who worked on the event or process",
          "type": "string"
        },
        "assignedGroups": {
          "description": "An event instance",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssignedGroup"
          }
        }
      }
    },
    "ApplicationID1": {
      "title": "ApplicationID1",
      "description": "The unique identifier of the application which originated the event.",
      "type": "object",
      "properties": {
        "idValue": {
          "description": "An actual ID value",
          "type": "string"
        },
        "schemeCode": {
          "$ref": "#/definitions/SchemeCode"
        }
      }
    },
    "GeoCoordinate1": {
      "title": "GeoCoordinate1",
      "description": "The coordinates of the location of the actor",
      "type": "object",
      "properties": {
        "latitude": {
          "description": "The angle, in degrees, of a position on Earth above the equator. (Latitude is negative for a place below the equator.) specified in decimal degrees",
          "type": "number",
          "format": "double"
        },
        "longitude": {
          "description": "The angle, in degrees, of a position on Earth around the equator from the Greenwich Meridian specified in decimal degrees",
          "type": "number",
          "format": "double"
        }
      }
    },
    "AssignedGroup": {
      "title": "AssignedGroup",
      "type": "object",
      "properties": {
        "groupID": {
          "description": "The unique identifier of the group",
          "type": "string"
        },
        "groupName": {
          "description": "The name of the group",
          "type": "string"
        },
        "assignedGroupMembers": {
          "description": "Associates that are part of the group(s) assigned to the review event.  The actor is the member that actually completes the event.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssignedGroupMember"
          }
        }
      }
    },
    "AssignedGroupMember": {
      "title": "AssignedGroupMember",
      "description": "An instance of an Associate that is part of the group(s) assigned to the review event.  The actor is the member that actually completes the event.",
      "type": "object",
      "properties": {
        "associateOID": {
          "description": "The unique identifier of an associate who originated the event or a process",
          "type": "string"
        },
        "formattedName": {
          "description": "Human readable name of the actor",
          "type": "string"
        }
      }
    },
    "ActAsParty": {
      "title": "ActAsParty",
      "description": "The party (client employee) information that the actor is acting as to complete the recording of the event. Example:  An ADP Support User (principal A = Actor) views data within an ADP Application as a client employee (principal B) in read only mode.",
      "type": "object",
      "properties": {
        "applicationID": {
          "$ref": "#/definitions/ApplicationID1"
        },
        "associateOID": {
          "description": "The unique identifier of an associate who originated the event or a process",
          "type": "string"
        },
        "personOID": {
          "description": "The unique identifier of a person who originated the event or a process",
          "type": "string"
        },
        "formattedName": {
          "description": "Human readable name of the actor",
          "type": "string"
        },
        "deviceID": {
          "description": "The unique identifier of the device, e.g. a time clock, door entry beam.",
          "type": "string"
        },
        "geoCoordinate": {
          "$ref": "#/definitions/GeoCoordinate1"
        },
        "deviceUserAgentID": {
          "description": "Identifier of the user agent of the device used by the actor who worked on the event or process",
          "type": "string"
        },
        "assignedGroups": {
          "description": "An event instance",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssignedGroup"
          }
        },
        "organizationOID": {
          "description": "A unique identifier of a client employee's organization id",
          "type": "string"
        }
      }
    },
    "OnBehalfOfParty": {
      "title": "OnBehalfOfParty",
      "description": "The party (client employee) that the actor is acting on behalf of to complete the recording of the event. Example:  An ADP Support User (principal A = Actor) views data within an ADP Application as a client employee (principal B) and can take action on that person's behalf.  The Actor may have access to certain features or screens that the Client Employee cannot view, e.g. diagnostics screens.",
      "type": "object",
      "properties": {
        "applicationID": {
          "$ref": "#/definitions/ApplicationID1"
        },
        "associateOID": {
          "description": "The unique identifier of an associate who originated the event or a process",
          "type": "string"
        },
        "personOID": {
          "description": "The unique identifier of a person who originated the event or a process",
          "type": "string"
        },
        "formattedName": {
          "description": "Human readable name of the actor",
          "type": "string"
        },
        "deviceID": {
          "description": "The unique identifier of the device, e.g. a time clock, door entry beam.",
          "type": "string"
        },
        "geoCoordinate": {
          "$ref": "#/definitions/GeoCoordinate1"
        },
        "deviceUserAgentID": {
          "description": "Identifier of the user agent of the device used by the actor who worked on the event or process",
          "type": "string"
        },
        "assignedGroups": {
          "description": "An event instance",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssignedGroup"
          }
        },
        "organizationOID": {
          "description": "A unique identifier of a client employee's organization id",
          "type": "string"
        }
      }
    },
    "Data": {
      "title": "Data",
      "description": "Event Data",
      "type": "object",
      "properties": {
        "eventContext": {
          "$ref": "#/definitions/EventContext"
        },
        "control": {
          "$ref": "#/definitions/Control"
        },
        "transform": {
          "$ref": "#/definitions/Transform"
        },
        "output": {
          "$ref": "#/definitions/Output"
        }
      }
    },
    "EventContext": {
      "title": "EventContext",
      "description": "Data which sets the context for the event.  That is, the keys which set context",
      "type": "object",
      "properties": {
        "contextExpressionID": {
          "description": "A globally unique (GUID) identifier of the context expression. This conveys the context of the associated data. For example, if the context is set to Germany, the data would adhere to the business rules and formatting rules relevant to Germany",
          "type": "string"
        },
        "associateOID": {
          "description": "A unique identifier of an associate",
          "type": "string"
        },
        "workAssignmentID": {
          "description": "A unique identifier of a work assignment",
          "type": "string"
        },
        "badgeID": {
          "description": "A badgeID for any employee position used for clock punch",
          "type": "string"
        }
      }
    },
    "Control": {
      "title": "Control",
      "description": "Data used by the event but not modified by the event",
      "type": "object",
      "properties": {
        "attestation": {
          "$ref": "#/definitions/AttestationClockPunchControl"
        },
        "clockPolicy": {
          "$ref": "#/definitions/ClockPolicyClockPunchControl"
        },
        "badgeIDs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "AttestationClockPunchControl": {
      "title": "AttestationClockPunchControl",
      "description": "Attestation configuration data",
      "type": "object",
      "properties": {
        "attestationIndicator": {
          "description": "To indicate if the attestation is required",
          "type": "boolean"
        },
        "sections": {
          "description": "A group of questions that are logically related",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SectionClockPunchControl"
          }
        }
      }
    },
    "SectionClockPunchControl": {
      "title": "SectionClockPunchControl",
      "type": "object",
      "properties": {
        "sectionID": {
          "description": "The unique identifier of the section",
          "type": "string"
        },
        "sectionTitle": {
          "description": "The title of the related section",
          "type": "string"
        },
        "sectionDescription": {
          "description": "The description, which could be presented as a brief instruction set",
          "type": "string"
        },
        "currentSectionIndicator": {
          "description": "Indicates if the current section is current",
          "type": "boolean"
        },
        "completeIndicator": {
          "description": "Indicates if the current section has been completed",
          "type": "boolean"
        },
        "questions": {
          "description": "List of questions and possible answers",
          "type": "array",
          "items": {
            "$ref": "#/definitions/QuestionClockPunchControl"
          }
        }
      }
    },
    "QuestionClockPunchControl": {
      "title": "QuestionClockPunchControl",
      "type": "object",
      "properties": {
        "questionID": {
          "description": "The unique identifier of the question",
          "type": "string"
        },
        "questionText": {
          "description": "The actual text of the question",
          "type": "string"
        },
        "answerTypeCode": {
          "description": "Identifies the type of answer, e.g. single or multi-select, etc.",
          "type": "string"
        },
        "answerOptions": {
          "description": "List of possible answers for the given question",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnswerOption"
          }
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        },
        "requiredIndicator": {
          "description": "Indicates if the current question is mandatory",
          "type": "boolean"
        },
        "skipLogic": {
          "$ref": "#/definitions/SkipLogicClockPunchControl"
        }
      }
    },
    "AnswerOption": {
      "title": "AnswerOption",
      "type": "object",
      "properties": {
        "answerID": {
          "description": "The unique identifier of the answer",
          "type": "string"
        },
        "answerValue": {
          "description": "The answer",
          "type": "string"
        },
        "answerIndicator": {
          "description": "True indicates that the answer is true.  False indicates that the answer is false",
          "type": "boolean"
        },
        "defaultIndicator": {
          "description": "Indicates if the current answer is a default / pre-set",
          "type": "boolean"
        }
      }
    },
    "SkipLogicClockPunchControl": {
      "title": "SkipLogicClockPunchControl",
      "description": "Skip logic is used to skip to another question within the questionnaire. You can only apply skip logic to close-ended questions.",
      "type": "object",
      "properties": {
        "nextQuestionID": {
          "description": "The unique identifier of the question",
          "type": "string"
        }
      }
    },
    "ClockPolicyClockPunchControl": {
      "title": "ClockPolicyClockPunchControl",
      "description": "polices for the time clock paradigm for the user",
      "type": "object",
      "properties": {
        "policyExpireDateTime": {
          "description": "Based on the Server Policy it is the time when the request expires.  That is, the client will need to make another request to the server to determine if the user can clock.  Data Representation Temporal Data Element Specification following ISO-8601:2000 specification.  The granularity for date-time for this API will always be the following: YYYY-MM-DDThh:mm:ss-+hh:mm.  where -+ is either minus or plus depending on whether the offset from GMT is positive or negative hours minutes.",
          "type": "string",
          "format": "date-time"
        },
        "validGeoLocations": {
          "description": "Valid geo locations where the user is allowed to clock in/clock out and therefore the capability is enabled",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ValidGeoLocation"
          }
        },
        "clockReferenceDateTime": {
          "description": "Clock Reference to be used to record time.  This allows the application to synchronize its time with that of the server.  Data Representation Temporal Data Element Specification following ISO-8601:2000 specification.  The granularity for date-time for this API will always be the following: YYYY-MM-DDThh:mm:ss-+hh:mm.  where -+ is either minus or plus depending on whether the offset from GMT is positive or negative hours minutes.",
          "type": "string",
          "format": "date-time"
        },
        "allowBypassIndicator": {
          "description": "True indicates that the application should allow the person to clock in even if the device can not capture the geo location.",
          "type": "boolean"
        },
        "homeLaborAllocations": {
          "description": "Home labor allocations",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClockPolicyEntryHomeLaborAllocation"
          }
        },
        "timeNotationCode": {
          "description": "The time notation code",
          "type": "string"
        },
        "actions": {
          "description": "Actions which the user is allowed to initiate against the related pay distribution.  The applicable actions include: payDistribution.read, payDistribution.create, payDistribution.update, payDistribution.delete, based on the context",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Action"
          }
        },
        "minimumPunchInterval": {
          "description": "The minimum interval required in seconds between clock punches   e.g if employee clock at 10.00 am and minimumClockPunchDuration is 3 min.  He will not able to clock in back till 10:03 am.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ValidGeoLocation": {
      "title": "ValidGeoLocation",
      "description": "geographical location information of the device",
      "type": "object",
      "properties": {
        "validGeoLocationID": {
          "description": "Is the Identifier of the given instance of an entity.",
          "type": "string"
        },
        "location": {
          "$ref": "#/definitions/Location"
        },
        "range": {
          "$ref": "#/definitions/Range"
        }
      }
    },
    "Location": {
      "title": "Location",
      "description": "The location where the punch was made.  Requires geo coordiates to be captured",
      "type": "object",
      "properties": {
        "nameCode": {
          "$ref": "#/definitions/NameCode"
        },
        "communication": {
          "$ref": "#/definitions/Communication"
        },
        "address": {
          "$ref": "#/definitions/Address"
        },
        "accuracy": {
          "$ref": "#/definitions/Accuracy"
        }
      }
    },
    "Communication": {
      "title": "Communication",
      "description": "Communication objects to include various communication mechanisms, e,g, phone, email, etc.",
      "type": "object",
      "properties": {
        "landlines": {
          "description": "A list of land-line telephone numbers",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Landline"
          }
        },
        "mobiles": {
          "description": "A list of mobile telephone numbers",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Mobile"
          }
        },
        "emails": {
          "description": "A list of email addresses",
          "type": "array",
          "items": {
            "$ref": "#/definitions/EmailContactCommunicationType"
          }
        },
        "socialNetworks": {
          "description": "A list of social networks addresses",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SocialNetworkContactCommunicationType"
          }
        },
        "faxes": {
          "description": "A list of fax telephone numbers",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Faxis"
          }
        },
        "pagers": {
          "description": "A list of pager telephone numbers",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Pager"
          }
        },
        "internetAddresses": {
          "description": "A list of internet URIs",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InternetAddressWithItemID"
          }
        },
        "instantMessages": {
          "description": "A list of instant messages URIs",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InstantMessage"
          }
        }
      }
    },
    "Landline": {
      "title": "Landline",
      "type": "object",
      "properties": {
        "nameCode": {
          "$ref": "#/definitions/NameCode3"
        },
        "countryDialing": {
          "description": "The country dialing code is the national prefix to be used when dialing TO that particular country FROM another country.",
          "type": "string"
        },
        "areaDialing": {
          "description": "The local area dialing code for a telephone number.",
          "type": "string"
        },
        "dialNumber": {
          "description": "The local communication number, not including country dialing or area dialing codes.   If component parts of the telephone number are being communicated then the dialNumber is required.",
          "type": "string"
        },
        "extension": {
          "description": "The extension of the local communication number.  In the case of a Telephone Number accessing a Pager Network, the extension may be the Pager Identification Number required to leave a message for the Pager Number (i.e. Pager Pin).  These are mutually exclusive.",
          "type": "string"
        },
        "access": {
          "description": "National Direct Dialing Prefix.  Also known as the trunk prefix or National Prefix.  It is the number to be dialed in a domestic telephone call, preceding any necessary area code and subscriber number (i.e. dial number).  When calling from outside of the country, the national direct dial prefix is omitted by the caller.  In Australia, Germany, and United Kingdom the trunk prefix is 0.  In the US and Canada it is 1.",
          "type": "string"
        },
        "formattedNumber": {
          "description": "The formatted telephone number.  The component parts of the telephone are put together into a presentation pattern as defined by the regex format specified.  Please note that \\ is used as an escape character in regex, but a double \\ is needed to escape within the json schema.  The regex will accept +CC NNNNNNNNNNNNNN where + is the symbol indicating the caller to enter their country specific code to call from outside the country.  CC is the country code for an international number (optional), and the area code and dial number.  The local access code (i.e. 1 (201) 333 4444. 1 is the access code in US) is not passed.  The UI will present the phone number following its own presentation convention",
          "type": "string"
        },
        "itemID": {
          "description": "The unique identifier of the object in a collection",
          "type": "string"
        },
        "notifIcationIndicator": {
          "type": "boolean"
        }
      }
    },
    "NameCode3": {
      "title": "NameCode3",
      "description": "A coded name or descriptive label of the associated entity. If this is a coded value, codeValue and shortName should be used. If this is just a string value, only shortName is necessary",
      "type": "object",
      "properties": {
        "codeValue": {
          "description": "The code for the related entity",
          "type": "string"
        },
        "shortName": {
          "description": "Short description of the related code",
          "type": "string"
        },
        "longName": {
          "description": "Long description of the related code",
          "type": "string"
        }
      }
    },
    "Mobile": {
      "title": "Mobile",
      "type": "object",
      "properties": {
        "nameCode": {
          "$ref": "#/definitions/NameCode3"
        },
        "countryDialing": {
          "description": "The country dialing code is the national prefix to be used when dialing TO that particular country FROM another country.",
          "type": "string"
        },
        "areaDialing": {
          "description": "The local area dialing code for a telephone number.",
          "type": "string"
        },
        "dialNumber": {
          "description": "The local communication number, not including country dialing or area dialing codes.   If component parts of the telephone number are being communicated then the dialNumber is required.",
          "type": "string"
        },
        "extension": {
          "description": "The extension of the local communication number.  In the case of a Telephone Number accessing a Pager Network, the extension may be the Pager Identification Number required to leave a message for the Pager Number (i.e. Pager Pin).  These are mutually exclusive.",
          "type": "string"
        },
        "access": {
          "description": "National Direct Dialing Prefix.  Also known as the trunk prefix or National Prefix.  It is the number to be dialed in a domestic telephone call, preceding any necessary area code and subscriber number (i.e. dial number).  When calling from outside of the country, the national direct dial prefix is omitted by the caller.  In Australia, Germany, and United Kingdom the trunk prefix is 0.  In the US and Canada it is 1.",
          "type": "string"
        },
        "formattedNumber": {
          "description": "The formatted telephone number.  The component parts of the telephone are put together into a presentation pattern as defined by the regex format specified.  Please note that \\ is used as an escape character in regex, but a double \\ is needed to escape within the json schema.  The regex will accept +CC NNNNNNNNNNNNNN where + is the symbol indicating the caller to enter their country specific code to call from outside the country.  CC is the country code for an international number (optional), and the area code and dial number.  The local access code (i.e. 1 (201) 333 4444. 1 is the access code in US) is not passed.  The UI will present the phone number following its own presentation convention",
          "type": "string"
        },
        "itemID": {
          "description": "The unique identifier of the object in a collection",
          "type": "string"
        },
        "notifIcationIndicator": {
          "type": "boolean"
        }
      }
    },
    "EmailContactCommunicationType": {
      "title": "EmailContactCommunicationType",
      "type": "object",
      "properties": {
        "nameCode": {
          "$ref": "#/definitions/NameCode3"
        },
        "emailUri": {
          "description": "The URI of the associated email address",
          "type": "string"
        },
        "itemID": {
          "description": "The unique identifier of the object in a collection",
          "type": "string"
        },
        "notifIcationIndicator": {
          "type": "boolean"
        }
      }
    },
    "SocialNetworkContactCommunicationType": {
      "title": "SocialNetworkContactCommunicationType",
      "type": "object",
      "properties": {
        "nameCode": {
          "$ref": "#/definitions/NameCode3"
        },
        "uri": {
          "description": "The URI of the associated email address",
          "type": "string"
        },
        "itemID": {
          "description": "The unique identifier of the object in a collection",
          "type": "string"
        },
        "notifIcationIndicator": {
          "type": "boolean"
        }
      }
    },
    "Faxis": {
      "title": "Faxis",
      "type": "object",
      "properties": {
        "nameCode": {
          "$ref": "#/definitions/NameCode3"
        },
        "countryDialing": {
          "description": "The country dialing code is the national prefix to be used when dialing TO that particular country FROM another country.",
          "type": "string"
        },
        "areaDialing": {
          "description": "The local area dialing code for a telephone number.",
          "type": "string"
        },
        "dialNumber": {
          "description": "The local communication number, not including country dialing or area dialing codes.   If component parts of the telephone number are being communicated then the dialNumber is required.",
          "type": "string"
        },
        "extension": {
          "description": "The extension of the local communication number.  In the case of a Telephone Number accessing a Pager Network, the extension may be the Pager Identification Number required to leave a message for the Pager Number (i.e. Pager Pin).  These are mutually exclusive.",
          "type": "string"
        },
        "access": {
          "description": "National Direct Dialing Prefix.  Also known as the trunk prefix or National Prefix.  It is the number to be dialed in a domestic telephone call, preceding any necessary area code and subscriber number (i.e. dial number).  When calling from outside of the country, the national direct dial prefix is omitted by the caller.  In Australia, Germany, and United Kingdom the trunk prefix is 0.  In the US and Canada it is 1.",
          "type": "string"
        },
        "formattedNumber": {
          "description": "The formatted telephone number.  The component parts of the telephone are put together into a presentation pattern as defined by the regex format specified.  Please note that \\ is used as an escape character in regex, but a double \\ is needed to escape within the json schema.  The regex will accept +CC NNNNNNNNNNNNNN where + is the symbol indicating the caller to enter their country specific code to call from outside the country.  CC is the country code for an international number (optional), and the area code and dial number.  The local access code (i.e. 1 (201) 333 4444. 1 is the access code in US) is not passed.  The UI will present the phone number following its own presentation convention",
          "type": "string"
        },
        "itemID": {
          "description": "The unique identifier of the object in a collection",
          "type": "string"
        },
        "notifIcationIndicator": {
          "type": "boolean"
        }
      }
    },
    "Pager": {
      "title": "Pager",
      "type": "object",
      "properties": {
        "nameCode": {
          "$ref": "#/definitions/NameCode3"
        },
        "countryDialing": {
          "description": "The country dialing code is the national prefix to be used when dialing TO that particular country FROM another country.",
          "type": "string"
        },
        "areaDialing": {
          "description": "The local area dialing code for a telephone number.",
          "type": "string"
        },
        "dialNumber": {
          "description": "The local communication number, not including country dialing or area dialing codes.   If component parts of the telephone number are being communicated then the dialNumber is required.",
          "type": "string"
        },
        "extension": {
          "description": "The extension of the local communication number.  In the case of a Telephone Number accessing a Pager Network, the extension may be the Pager Identification Number required to leave a message for the Pager Number (i.e. Pager Pin).  These are mutually exclusive.",
          "type": "string"
        },
        "access": {
          "description": "National Direct Dialing Prefix.  Also known as the trunk prefix or National Prefix.  It is the number to be dialed in a domestic telephone call, preceding any necessary area code and subscriber number (i.e. dial number).  When calling from outside of the country, the national direct dial prefix is omitted by the caller.  In Australia, Germany, and United Kingdom the trunk prefix is 0.  In the US and Canada it is 1.",
          "type": "string"
        },
        "formattedNumber": {
          "description": "The formatted telephone number.  The component parts of the telephone are put together into a presentation pattern as defined by the regex format specified.  Please note that \\ is used as an escape character in regex, but a double \\ is needed to escape within the json schema.  The regex will accept +CC NNNNNNNNNNNNNN where + is the symbol indicating the caller to enter their country specific code to call from outside the country.  CC is the country code for an international number (optional), and the area code and dial number.  The local access code (i.e. 1 (201) 333 4444. 1 is the access code in US) is not passed.  The UI will present the phone number following its own presentation convention",
          "type": "string"
        },
        "itemID": {
          "description": "The unique identifier of the object in a collection",
          "type": "string"
        },
        "notifIcationIndicator": {
          "type": "boolean"
        }
      }
    },
    "InternetAddressWithItemID": {
      "title": "InternetAddressWithItemID",
      "type": "object",
      "properties": {
        "nameCode": {
          "$ref": "#/definitions/NameCode3"
        },
        "uri": {
          "description": "The URI of the associated email address",
          "type": "string"
        },
        "itemID": {
          "description": "The unique identifier of the object in a collection",
          "type": "string"
        }
      }
    },
    "InstantMessage": {
      "title": "InstantMessage",
      "type": "object",
      "properties": {
        "nameCode": {
          "$ref": "#/definitions/NameCode3"
        },
        "uri": {
          "description": "The URI of the associated email address",
          "type": "string"
        },
        "itemID": {
          "description": "The unique identifier of the object in a collection",
          "type": "string"
        },
        "notifIcationIndicator": {
          "type": "boolean"
        }
      }
    },
    "Range": {
      "title": "Range",
      "description": "the range in meters tolerated outside of the coordinates.  Example 5000 meter radius from the coordinate",
      "type": "object",
      "properties": {
        "unitValue": {
          "description": "the radius (distance) that the person may clock in from the coordinate.",
          "type": "number",
          "format": "double"
        },
        "unitCode": {
          "$ref": "#/definitions/UnitCode"
        }
      }
    },
    "ClockPolicyEntryHomeLaborAllocation": {
      "title": "ClockPolicyEntryHomeLaborAllocation",
      "type": "object",
      "properties": {
        "itemID": {
          "description": "The unique identifier of the object in a collection",
          "type": "string"
        },
        "allocationCode": {
          "$ref": "#/definitions/AllocationCode"
        },
        "allocationTypeCode": {
          "$ref": "#/definitions/AllocationTypeCode"
        }
      }
    },
    "Action": {
      "title": "Action",
      "description": "Actions which the user is allowed to initiate against the related entity",
      "type": "object",
      "properties": {
        "operationID": {
          "description": "Identifies the operation of an action",
          "type": "string"
        },
        "canonicalUri": {
          "description": "A unique identifier of the feature/function/operation",
          "type": "string"
        },
        "actionTypeCode": {
          "$ref": "#/definitions/ActionTypeCode"
        },
        "confirmationRequiredIndicator": {
          "description": "True indicates that the application will prompt the user to confirm the action before it takes the action. False indicates that the action will be executed once selected by the user.",
          "example": false,
          "type": "boolean",
          "default": false
        },
        "defaultIndicator": {
          "description": "True indicates that this is the default action",
          "example": false,
          "type": "boolean",
          "default": false
        },
        "sequence": {
          "description": "Sequence indicates that the item in the array must be in a sequence in relation to the other items in the sequence.  The action must not ocurr before another action with a lower sequence",
          "type": "integer",
          "format": "int32"
        },
        "attestation": {
          "$ref": "#/definitions/Attestation"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        },
        "enabledIndicator": {
          "description": "True indicates that this action is shown and enabled.  Default is true.",
          "type": "boolean"
        },
        "title": {
          "description": "This property defines a title for the link.  The value must be a string. User agents MAY use this title when presenting the link to the user.",
          "type": "string"
        }
      }
    },
    "ActionTypeCode": {
      "title": "ActionTypeCode",
      "description": "Identifies the type of action to be taken to fulfill the request.  Action can be a callback to a service to complete the action.  A callback requires the methodCode and uris to be returned.  An external link i.e. open a web page - requires the uris of the external link; An object reference is a reference to a related object within the application.  This is a canonical name which represents the object.  Based on this identifier, the application knows what view it needs to open.  The uris returns the data for the view.  For an object reference, the objectRefID, methodCode, and uris are required . modify indicates that a property is being modified",
      "example": "callback",
      "type": "string",
      "enum": [
        "callback",
        "externalLink",
        "objectReference",
        "modify"
      ]
    },
    "Attestation": {
      "title": "Attestation",
      "description": "Optional text provided to the user when they take an action to affirm to be correct, true, or genuine. Requires confirmation indicator to be set to true.",
      "type": "object",
      "properties": {
        "messageTxt": {
          "description": "Message to present to the user.  This is mutuallly exclusive with the messageUri which is an external link to the message.  If the text is sizable and fairly static then it should be an external link which may be cached",
          "type": "string"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        },
        "actionBlockIndicator": {
          "description": "Action blocking flag.  True indicates that the user must acknowledge the text as specified in the attestation message, before the action can be taken.  False indicates that the action will be executed once selected by the user.",
          "example": false,
          "type": "boolean",
          "default": false
        }
      }
    },
    "Transform": {
      "title": "Transform",
      "type": "object",
      "properties": {
        "eventReasonCode": {
          "$ref": "#/definitions/EventReasonCode1"
        },
        "eventStatusCode": {
          "$ref": "#/definitions/EventStatusCode1"
        },
        "effectiveDateTime": {
          "description": "This is the effective date, or effective date time fo the event from a business perspective. In some systems, this may be referred to as the Event Date. For example, for a birth event, this is the date of birth. If there is no effective date from a business perspective, this is set equal to the record date time",
          "type": "string",
          "format": "date-time"
        },
        "notificationIndicator": {
          "description": "True indicates that the requestor wants notifications on the status of the request",
          "type": "boolean"
        },
        "clockEntry": {
          "$ref": "#/definitions/ClockEntryTransform"
        },
        "attestation": {
          "$ref": "#/definitions/AttestationClockPunchTransform"
        }
      }
    },
    "EventReasonCode1": {
      "title": "EventReasonCode1",
      "description": "This allows for further refinement of the associated event. For example, for a worker.maritalStatus.change event, the reason code could be used to describe whether it is a Marriage vs. Divorce vs. Separation",
      "type": "object",
      "properties": {
        "codeValue": {
          "description": "The code for the related entity",
          "type": "string"
        },
        "shortName": {
          "description": "Short description of the related code",
          "type": "string"
        },
        "longName": {
          "description": "Long description of the related code",
          "type": "string"
        }
      }
    },
    "EventStatusCode1": {
      "title": "EventStatusCode1",
      "description": "This identifies the status of the event. An event that has been created, either by the system of record or as the result of a user, will have an event status code of Created. An event that is saved in a work in progress state (as determined by the permissable state codes), will have an event status code of InProgress. An event that has been recorded, will have an event status code of Complete. This value is set by the system of record",
      "type": "object",
      "properties": {
        "codeValue": {
          "description": "The code for the related entity",
          "type": "string"
        },
        "shortName": {
          "description": "Short description of the related code",
          "type": "string"
        },
        "longName": {
          "description": "Long description of the related code",
          "type": "string"
        }
      }
    },
    "ClockEntryTransform": {
      "title": "ClockEntryTransform",
      "description": "Entry properties for the Time Clock paradigm.  User punches in",
      "type": "object",
      "properties": {
        "deviceDateTime": {
          "description": "Date Time of the entering device.  This time is to be logged by the System of Record to maintain forensics on the time logged based on synchronization with the server clock and that of the user's mobile device. Data Representation Temporal Data Element Specification following ISO-8601:2000 specification.  The granularity for date-time for this API will always be the following: YYYY-MM-DDThh:mm:ss-+hh:mm.  where -+ is either minus or plus depending on whether the offset from GMT is positive or negative hours minutes.",
          "type": "string",
          "format": "date-time"
        },
        "entryDateTime": {
          "description": "The date as logged by the device based on the clock reference time from the server. Data Representation Temporal Data Element Specification following ISO-8601:2000 specification.  The granularity for date-time for this API will always be the following: YYYY-MM-DDThh:mm:ss-+hh:mm.  where -+ is either minus or plus depending on whether the offset from GMT is positive or negative hours minutes.",
          "type": "string",
          "format": "date-time"
        },
        "actionCode": {
          "$ref": "#/definitions/ActionCode"
        },
        "validGeoLocationID": {
          "description": "Identifier if the geo location which the device was within a valid range.  This identifier is sent in the timeEntryDetails json (//clockPolicy/validGeoLocations/id)",
          "type": "string"
        },
        "laborAllocations": {
          "description": "Time may be allocated to a department, project, location, etc...",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LaborAllocation"
          }
        },
        "entryOverrideCodes": {
          "description": "Codes that represent overrides that a user may select for the entry,e.g. if the worker is requesting to override the standard meal deduction for this entry, the code would identify the rule.  Example is that the worker is scheduled for lunch, but is working through lunch.  This tells the system that the worker is working through lunch and to not count the regularly scheduled lunch time",
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntryOverrideCode"
          }
        },
        "punchLocation": {
          "$ref": "#/definitions/PunchLocationTransform"
        },
        "comment": {
          "$ref": "#/definitions/Comment1"
        }
      }
    },
    "PunchLocationTransform": {
      "title": "PunchLocationTransform",
      "description": "The location where the punch was made.  Requires geo coordiates to be captured",
      "type": "object",
      "properties": {
        "address": {
          "$ref": "#/definitions/Address2"
        },
        "accuracy": {
          "$ref": "#/definitions/Accuracy"
        }
      }
    },
    "Address2": {
      "title": "Address2",
      "description": "An address related to the associated entity",
      "type": "object",
      "properties": {
        "geoCoordinate": {
          "$ref": "#/definitions/GeoCoordinate"
        }
      }
    },
    "Comment1": {
      "title": "Comment1",
      "description": "The comment entered by the submitter or the reviewer",
      "type": "object",
      "properties": {
        "textValue": {
          "description": "The text entered by the user",
          "type": "string"
        },
        "commentCode": {
          "$ref": "#/definitions/CommentCode"
        },
        "appliesToCode": {
          "description": "Code describing what part of the object the comment applies to, pre-defined by the backend SOR",
          "type": "string"
        }
      }
    },
    "AttestationClockPunchTransform": {
      "title": "AttestationClockPunchTransform",
      "description": "Attestation answers for a single step / section",
      "type": "object",
      "properties": {
        "attestationActionID": {
          "description": "The unique identifier of the action related to attestation",
          "type": "string"
        },
        "section": {
          "$ref": "#/definitions/SectionClockPunchTransform"
        }
      }
    },
    "SectionClockPunchTransform": {
      "title": "SectionClockPunchTransform",
      "description": "Answers to attestation questions that are logically related",
      "type": "object",
      "properties": {
        "sectionID": {
          "description": "The unique identifier of the section",
          "type": "string"
        },
        "questionAnswers": {
          "description": "The answers provided to the related questions",
          "type": "array",
          "items": {
            "$ref": "#/definitions/QuestionAnswer"
          }
        }
      }
    },
    "QuestionAnswer": {
      "title": "QuestionAnswer",
      "description": "Answers to a given questions",
      "type": "object",
      "properties": {
        "questionID": {
          "description": "The unique identifier of the question",
          "type": "string"
        },
        "answers": {
          "description": "Answers for the given question",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Answer"
          }
        }
      }
    },
    "Answer": {
      "title": "Answer",
      "description": "Answer for the given question",
      "type": "object",
      "properties": {
        "answerID": {
          "description": "The unique identifier of the answer",
          "type": "string"
        },
        "answerValue": {
          "description": "The answer",
          "type": "string"
        },
        "answerIndicator": {
          "description": "True indicates that the answer is true.  False indicates that the answer is false",
          "type": "boolean"
        }
      }
    },
    "Output": {
      "title": "Output",
      "description": "Result of the event",
      "type": "object",
      "properties": {
        "clockEntry": {
          "$ref": "#/definitions/ClockEntryOutput"
        },
        "attestation": {
          "$ref": "#/definitions/AttestationClockPunchOutput"
        }
      }
    },
    "ClockEntryOutput": {
      "title": "ClockEntryOutput",
      "description": "Entry properties for the Time Clock paradigm.  User punches in",
      "type": "object",
      "properties": {
        "deviceDateTime": {
          "description": "Date Time of the entering device.  This time is to be logged by the System of Record to maintain forensics on the time logged based on synchronization with the server clock and that of the user's mobile device. Data Representation Temporal Data Element Specification following ISO-8601:2000 specification.  The granularity for date-time for this API will always be the following: YYYY-MM-DDThh:mm:ss-+hh:mm.  where -+ is either minus or plus depending on whether the offset from GMT is positive or negative hours minutes.",
          "type": "string",
          "format": "date-time"
        },
        "entryDateTime": {
          "description": "The date as logged by the device based on the clock reference time from the server. Data Representation Temporal Data Element Specification following ISO-8601:2000 specification.  The granularity for date-time for this API will always be the following: YYYY-MM-DDThh:mm:ss-+hh:mm.  where -+ is either minus or plus depending on whether the offset from GMT is positive or negative hours minutes.",
          "type": "string",
          "format": "date-time"
        },
        "actionCode": {
          "$ref": "#/definitions/ActionCode"
        },
        "validGeoLocationID": {
          "description": "Identifier if the geo location which the device was within a valid range.  This identifier is sent in the timeEntryDetails json (//clockPolicy/validGeoLocations/id)",
          "type": "string"
        },
        "laborAllocations": {
          "description": "Time may be allocated to a department, project, location, etc...",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LaborAllocation"
          }
        },
        "entryOverrideCodes": {
          "description": "Codes that represent overrides that a user may select for the entry,e.g. if the worker is requesting to override the standard meal deduction for this entry, the code would identify the rule.  Example is that the worker is scheduled for lunch, but is working through lunch.  This tells the system that the worker is working through lunch and to not count the regularly scheduled lunch time",
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntryOverrideCode"
          }
        },
        "entryID": {
          "description": "The unique identifier of the entry",
          "type": "string"
        },
        "workAssignmentID": {
          "description": "A unique identifier of a work assignment",
          "type": "string"
        },
        "punchLocation": {
          "$ref": "#/definitions/PunchLocationOutput"
        },
        "comments": {
          "description": "The comments entered by the submitter or the reviewer.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CommentOutput"
          }
        }
      }
    },
    "PunchLocationOutput": {
      "title": "PunchLocationOutput",
      "description": "The location where the punch was made.  Requires geo coordiates to be captured",
      "type": "object",
      "properties": {
        "nameCode": {
          "$ref": "#/definitions/NameCode"
        },
        "address": {
          "$ref": "#/definitions/Address"
        },
        "accuracy": {
          "$ref": "#/definitions/Accuracy"
        }
      }
    },
    "CommentOutput": {
      "title": "CommentOutput",
      "type": "object",
      "properties": {
        "textValue": {
          "description": "The text entered by the user",
          "type": "string"
        },
        "commentCode": {
          "$ref": "#/definitions/CommentCode"
        },
        "entryDateTime": {
          "description": "The date time of the entry",
          "type": "string",
          "format": "date-time"
        },
        "author": {
          "$ref": "#/definitions/Author"
        },
        "appliesToCode": {
          "description": "Code describing what part of the object the comment applies to, pre-defined by the backend SOR",
          "type": "string"
        },
        "itemID": {
          "description": "The unique identifier of the object in a collection",
          "type": "string"
        }
      }
    },
    "AttestationClockPunchOutput": {
      "title": "AttestationClockPunchOutput",
      "description": "Attestation answers for all steps / section completed so far",
      "type": "object",
      "properties": {
        "attestationActionID": {
          "description": "The unique identifier of the action related to attestation",
          "type": "string"
        },
        "sections": {
          "description": "Answers to attestation questions that are logically related",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SectionClockPunchOutput"
          }
        }
      }
    },
    "SectionClockPunchOutput": {
      "title": "SectionClockPunchOutput",
      "type": "object",
      "properties": {
        "sectionID": {
          "description": "The unique identifier of the section",
          "type": "string"
        },
        "sectionTitle": {
          "description": "The title of the related section",
          "type": "string"
        },
        "sectionDescription": {
          "description": "The description, which could be presented as a brief instruction set",
          "type": "string"
        },
        "questionAnswers": {
          "description": "The answers provided to related questions",
          "type": "array",
          "items": {
            "$ref": "#/definitions/QuestionAnswer"
          }
        }
      }
    },
    "EventsTimeV1ClockPunch400Error": {
      "title": "EventsTimeV1ClockPunch400Error",
      "example": {
        "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/confirmMessage_v1_0_rev002.json"
      },
      "type": "object",
      "properties": {
        "externalValue": {
          "type": "string"
        }
      },
      "required": [
        "externalValue"
      ]
    },
    "ClockPunchEventMeta": {
      "title": "ClockPunchEventMeta",
      "description": "An instance to capture when a worker punches a clock - Meta",
      "example": {
        "externalValue": "https://s3.amazonaws.com/es-schema-dev-portal-iat/schema/events_time.clock.punch_v01_00_rev001_meta_sample.json"
      },
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/Meta2"
        },
        "data": {
          "$ref": "#/definitions/DataMeta"
        }
      }
    },
    "Meta2": {
      "title": "Meta2",
      "description": "Event meta data",
      "type": "object",
      "properties": {
        "/serviceCategoryCode/codeValue": {
          "description": "The service domain, e.g HR, Payroll, Benefits, etc. This field is always present and valued based on a standard codelist.",
          "example": "time",
          "type": "string",
          "default": "time"
        },
        "/eventNameCode/codeValue": {
          "description": "This is the canonical name of the event, e.g. dependent.add, worker.hire. This field is always present and valued based on a standard codelist.",
          "example": "clock.punch,clockOffline.punch,crewClock.punch",
          "type": "string",
          "default": "clock.punch,clockOffline.punch,crewClock.punch"
        },
        "queryCriteria": {
          "description": "A collection of query criteria",
          "type": "array",
          "items": {
            "$ref": "#/definitions/clockpunchQueryCriterion"
          }
        },
        "/data/eventContext": {
          "$ref": "#/definitions/DataEventContext"
        },
        "/data/transforms": {
          "description": "A collection of transform rules",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataTransform"
          }
        }
      },
      "required": [
        "/serviceCategoryCode/codeValue",
        "/eventNameCode/codeValue"
      ]
    },
    "clockpunchQueryCriterion": {
      "title": "clockpunchQueryCriterion",
      "description": "A single query parameter",
      "type": "object",
      "properties": {
        "queryOptionCode": {
          "description": "A simple (string) code.  Can have a code list reference",
          "type": "string"
        },
        "obligationCode": {
          "description": "A simple (string) code.  Can have a code list reference",
          "type": "string"
        },
        "queryOptionTypeCode": {
          "description": "A simple (string) code.  Can have a code list reference",
          "type": "string"
        },
        "defaultNumberValue": {
          "description": "The default number value",
          "type": "number",
          "format": "double"
        },
        "defaultStringValue": {
          "description": "The default string value",
          "type": "string"
        },
        "resourcePathMax": {
          "description": "Maximum number of resource paths supported",
          "type": "integer",
          "format": "int32"
        },
        "pattern": {
          "description": "Indicates a regular expression on the required pattern for the value",
          "type": "string"
        },
        "resourcePaths": {
          "description": "A collection of acceptable resource paths to pass to the query option",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "excludedResourcePaths": {
          "description": "A collection of resource paths which may not be passed to the query option.  An example use of this is where you allow all paths except 1 or 2.  You would want to only specify those which are excluded",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "queryValueCodeList": {
          "$ref": "#/definitions/codeListType_v03"
        },
        "logicalOperators": {
          "description": "A collection of logical operators",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LogicalOperator"
          }
        },
        "itemID": {
          "description": "The simple (string) identifier of an object",
          "type": "string"
        }
      }
    },
    "codeListType_v03": {
      "title": "codeListType_v03",
      "type": "object",
      "properties": {
        "codeListTitle": {
          "description": "Code list title",
          "type": "string"
        },
        "exclusiveIndicator": {
          "description": "Boolean expression",
          "type": "boolean"
        },
        "listItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/codeListItemType_v02"
          }
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/linkType_v02"
          }
        }
      }
    },
    "codeListItemType_v02": {
      "title": "codeListItemType_v02",
      "type": "object",
      "properties": {
        "codeValue": {
          "description": "The code for the related entity",
          "type": "string"
        },
        "shortName": {
          "description": "Short description of the related code",
          "type": "string"
        },
        "longName": {
          "description": "Long description of the related code",
          "type": "string"
        },
        "itemID": {
          "description": "The simple (string) identifier of an object",
          "type": "string"
        },
        "valueDescription": {
          "description": "Additional list item description",
          "type": "string"
        },
        "foreignKey": {
          "description": "Allows for filtering the code list",
          "type": "string"
        },
        "inactiveIndicator": {
          "description": "Boolean expression",
          "type": "boolean"
        },
        "defaultIndicator": {
          "description": "Boolean expression",
          "type": "boolean"
        }
      }
    },
    "linkType_v02": {
      "title": "linkType_v02",
      "description": "A link description object is used to describe link relations.  In the context of a schema, it defines the link relations of the instances of the schema, and can be parameterized by the instance values.  The link description format can be used on its own in regular (non-schema documents), and use of this format can be declared by referencing the normative link description schema as the the schema for the data structure that uses the links",
      "type": "object",
      "properties": {
        "href": {
          "description": "The URI of the related entity",
          "type": "string"
        },
        "rel": {
          "$ref": "#/definitions/Rel"
        },
        "canonicalUri": {
          "description": "The URI of the related entity",
          "type": "string"
        },
        "title": {
          "description": "This property defines a title for the link.  The value must be a string. User agents MAY use this title when presenting the link to the user",
          "type": "string"
        },
        "targetSchema": {
          "description": "This property is a schema that defines the expected structure of the JSON representation of the target of the link, if the target of the link is returned using JSON representation",
          "type": "string"
        },
        "mediaType": {
          "$ref": "#/definitions/MediaType"
        },
        "method": {
          "$ref": "#/definitions/Method"
        },
        "encType": {
          "$ref": "#/definitions/EncType"
        },
        "schema": {
          "description": "This property contains a schema which defines the acceptable structure of the submitted request.  For a GET request, this schema would define the properties for the query string and for a POST request, this would define the body",
          "type": "string"
        },
        "payLoadArguments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PayLoadArgument"
          }
        }
      }
    },
    "LogicalOperator": {
      "title": "LogicalOperator",
      "description": "A logical operation",
      "type": "object",
      "properties": {
        "logicalOperatorCode": {
          "description": "A simple (string) code.  Can have a code list reference",
          "type": "string"
        },
        "mutuallyExclusiveIndicator": {
          "description": "Boolean expression",
          "type": "boolean"
        },
        "mutuallyExclusiveLogicalOperatorCodes": {
          "description": "A list of mutually exclusive operator codes.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "DataEventContext": {
      "title": "DataEventContext",
      "description": "Validation rules for the event context",
      "type": "object",
      "properties": {
        "/contextExpressionID": {
          "$ref": "#/definitions/stringType"
        },
        "/associateOID": {
          "$ref": "#/definitions/stringType"
        },
        "/workAssignmentID": {
          "$ref": "#/definitions/stringType"
        },
        "/badgeID": {
          "$ref": "#/definitions/stringType"
        }
      }
    },
    "stringType": {
      "title": "stringType",
      "type": "object",
      "properties": {
        "readOnly": {
          "type": "boolean"
        },
        "optional": {
          "type": "boolean"
        },
        "hidden": {
          "type": "boolean"
        },
        "sequence": {
          "type": "integer",
          "format": "int32"
        },
        "disallow": {
          "description": "Specified on a target property.  If the passed conditions are true then this property is disallowed and therefore, not presented to a user.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/disallowItemType"
          }
        },
        "shortLabelName": {
          "description": "Provides a client defined UI label for the property which is less than an average of 20 characters in length.",
          "type": "string"
        },
        "longLabelName": {
          "description": "Provides a client defined UI long label for the property.",
          "type": "string"
        },
        "minLength": {
          "description": "Indicates the minimum length required for a property.",
          "type": "integer",
          "format": "int32"
        },
        "maxLength": {
          "description": "Indicates the maximum length supported for a property",
          "type": "integer",
          "format": "int32"
        },
        "default": {
          "description": "Indicates the default value which should be populated by default",
          "type": "string"
        },
        "pattern": {
          "description": "Indicates a regular expression on the required pattern for the value",
          "type": "string"
        },
        "masking": {
          "$ref": "#/definitions/maskingRuleType"
        },
        "equals": {
          "description": "Provides 1 to many properties which the value of this property must be equal to.  If the property is equal to any of the value of the properties then the validation is successful.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "greaterThan": {
          "description": "The value of the related property must be greater than the value of  all the given properties in the array.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "lessThan": {
          "description": "The value of the related property must be less than the value of all the given properties in the array.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "dependencies": {
          "description": "List conditional dependencies of supported properties (readOnly, pattern, hidden, disallow etc.) of an attribute or an object. Dependencies can be defined using oneOf (OR) / allOf (AND) object. oneOf - successful if one of the conditions satisfies, allOf - successful if all the conditions satisfies. Refer API specification for dependencies context object syntax and rules. Dependencies context cannot be validated against context schema if dependencies is defined context JSON, because the dependencies JSON structure is dynamically defined for attributes and the not defined in the context schema. Attribute level properties and dependencies properties are mutually exclusive, example - readOnly property can be set either at attribute level or inside dependencies. If both hidden and disallow properties are set inside dependencies or at attribute level, hidden property takes precedence.",
          "type": "object"
        },
        "helperMessage": {
          "$ref": "#/definitions/helperMessageType"
        },
        "dataType": {
          "$ref": "#/definitions/metaDataType"
        },
        "valueSet": {
          "$ref": "#/definitions/valueSetType"
        },
        "dependencyLinks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/linkType_v02"
          }
        }
      }
    },
    "disallowItemType": {
      "title": "disallowItemType",
      "type": "object",
      "properties": {
        "itemID": {
          "description": "A unique identifier of an object within the collection",
          "type": "string"
        }
      }
    },
    "maskingRuleType": {
      "title": "maskingRuleType",
      "type": "object",
      "properties": {
        "authorizationRequiredIndicator": {
          "type": "boolean"
        },
        "authorizationResourceID": {
          "type": "string"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/linkType_v02"
          }
        }
      }
    },
    "helperMessageType": {
      "title": "helperMessageType",
      "description": "Helper text provided to the user when they take an action to affirm to be correct, true, or genuine.",
      "type": "object",
      "properties": {
        "messageTxt": {
          "description": "Message to present to the user.",
          "type": "string"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/linkType_v02"
          }
        }
      }
    },
    "metaDataType": {
      "title": "metaDataType",
      "example": "string",
      "type": "string",
      "enum": [
        "string",
        "number",
        "integer",
        "boolean",
        "object",
        "array",
        "null",
        "any",
        "string[date-time]",
        "string[date]",
        "string[time]",
        "string[duration]",
        "string[regex]",
        "string[phone]",
        "string[uri]",
        "string[email]",
        "string[ip-address]",
        "string[ipv6]",
        "string[host-name]",
        "integer[regex]",
        "integer[utc-millisec]",
        "number[regex]",
        "number[utc-millisec]"
      ]
    },
    "valueSetType": {
      "title": "valueSetType",
      "description": "A reference to the codelist extended with values",
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/ValueSetMeta"
        },
        "valueSetListItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/valueSetItemType"
          }
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/linkType_v02"
          }
        }
      }
    },
    "ValueSetMeta": {
      "title": "ValueSetMeta",
      "type": "object",
      "properties": {
        "idValuePath": {
          "description": "Code value (typically a key field) of the code list item",
          "type": "string"
        },
        "itemDescriptionPath": {
          "description": "Short name field of the code list item",
          "type": "string"
        }
      }
    },
    "valueSetItemType": {
      "title": "valueSetItemType",
      "description": "The value set item type",
      "type": "object",
      "properties": {
        "idValue": {
          "description": "The code for the related entity",
          "type": "string"
        },
        "itemDescription": {
          "description": "Short description of the related code",
          "type": "string"
        },
        "defaultIndicator": {
          "description": "Indicates if the current value is a default (pre-selected)",
          "type": "boolean"
        }
      }
    },
    "DataTransform": {
      "title": "DataTransform",
      "type": "object",
      "properties": {
        "itemID": {
          "description": "The unique identifier of the collection.",
          "type": "string"
        },
        "/eventReasonCode": {
          "$ref": "#/definitions/stringCodeListType"
        },
        "/eventReasonCode/codeValue": {
          "$ref": "#/definitions/stringType"
        },
        "/eventReasonCode/shortName": {
          "$ref": "#/definitions/stringType"
        },
        "/eventReasonCode/longName": {
          "$ref": "#/definitions/stringType"
        },
        "/eventStatusCode": {
          "$ref": "#/definitions/stringCodeListType"
        },
        "/eventStatusCode/codeValue": {
          "$ref": "#/definitions/stringType"
        },
        "/eventStatusCode/shortName": {
          "$ref": "#/definitions/stringType"
        },
        "/eventStatusCode/longName": {
          "$ref": "#/definitions/stringType"
        },
        "/effectiveDateTime": {
          "$ref": "#/definitions/stringType"
        },
        "/notificationIndicator": {
          "$ref": "#/definitions/booleanType"
        },
        "/clockEntry": {
          "$ref": "#/definitions/objectType"
        },
        "/clockEntry/deviceDateTime": {
          "$ref": "#/definitions/stringType"
        },
        "/clockEntry/entryDateTime": {
          "$ref": "#/definitions/stringType"
        },
        "/clockEntry/actionCode": {
          "$ref": "#/definitions/stringCodeListType"
        },
        "/clockEntry/actionCode/codeValue": {
          "$ref": "#/definitions/stringType"
        },
        "/clockEntry/actionCode/shortName": {
          "$ref": "#/definitions/stringType"
        },
        "/clockEntry/actionCode/longName": {
          "$ref": "#/definitions/stringType"
        },
        "/clockEntry/validGeoLocationID": {
          "$ref": "#/definitions/stringType"
        },
        "/clockEntry/laborAllocations": {
          "$ref": "#/definitions/arrayType"
        },
        "/clockEntry/laborAllocations/allocationCode": {
          "$ref": "#/definitions/stringCodeListType"
        },
        "/clockEntry/laborAllocations/allocationCode/codeValue": {
          "$ref": "#/definitions/stringType"
        },
        "/clockEntry/laborAllocations/allocationCode/shortName": {
          "$ref": "#/definitions/stringType"
        },
        "/clockEntry/laborAllocations/allocationCode/longName": {
          "$ref": "#/definitions/stringType"
        },
        "/clockEntry/laborAllocations/allocationTypeCode": {
          "$ref": "#/definitions/stringCodeListType"
        },
        "/clockEntry/laborAllocations/allocationTypeCode/codeValue": {
          "$ref": "#/definitions/stringType"
        },
        "/clockEntry/laborAllocations/allocationTypeCode/shortName": {
          "$ref": "#/definitions/stringType"
        },
        "/clockEntry/laborAllocations/allocationTypeCode/longName": {
          "$ref": "#/definitions/stringType"
        },
        "/clockEntry/laborAllocations/itemID": {
          "$ref": "#/definitions/stringType"
        },
        "/clockEntry/entryOverrideCodes": {
          "$ref": "#/definitions/arrayType"
        },
        "/clockEntry/entryOverrideCodes/itemID": {
          "$ref": "#/definitions/stringType"
        },
        "/clockEntry/entryOverrideCodes/overrideCode": {
          "$ref": "#/definitions/stringCodeListType"
        },
        "/clockEntry/entryOverrideCodes/overrideCode/codeValue": {
          "$ref": "#/definitions/stringType"
        },
        "/clockEntry/entryOverrideCodes/overrideCode/shortName": {
          "$ref": "#/definitions/stringType"
        },
        "/clockEntry/entryOverrideCodes/overrideCode/longName": {
          "$ref": "#/definitions/stringType"
        },
        "/clockEntry/entryOverrideCodes/overrideTypeCode": {
          "$ref": "#/definitions/stringCodeListType"
        },
        "/clockEntry/entryOverrideCodes/overrideTypeCode/codeValue": {
          "$ref": "#/definitions/stringType"
        },
        "/clockEntry/entryOverrideCodes/overrideTypeCode/shortName": {
          "$ref": "#/definitions/stringType"
        },
        "/clockEntry/entryOverrideCodes/overrideTypeCode/longName": {
          "$ref": "#/definitions/stringType"
        },
        "/clockEntry/punchLocation": {
          "$ref": "#/definitions/objectType"
        },
        "/clockEntry/punchLocation/address": {
          "$ref": "#/definitions/objectType"
        },
        "/clockEntry/punchLocation/address/geoCoordinate": {
          "$ref": "#/definitions/objectType"
        },
        "/clockEntry/punchLocation/address/geoCoordinate/latitude": {
          "$ref": "#/definitions/numberType"
        },
        "/clockEntry/punchLocation/address/geoCoordinate/longitude": {
          "$ref": "#/definitions/numberType"
        },
        "/clockEntry/punchLocation/accuracy": {
          "$ref": "#/definitions/objectType"
        },
        "/clockEntry/punchLocation/accuracy/unitValue": {
          "$ref": "#/definitions/numberType"
        },
        "/clockEntry/punchLocation/accuracy/unitCode": {
          "$ref": "#/definitions/stringCodeListType"
        },
        "/clockEntry/punchLocation/accuracy/unitCode/codeValue": {
          "$ref": "#/definitions/stringType"
        },
        "/clockEntry/punchLocation/accuracy/unitCode/shortName": {
          "$ref": "#/definitions/stringType"
        },
        "/clockEntry/punchLocation/accuracy/unitCode/longName": {
          "$ref": "#/definitions/stringType"
        },
        "/clockEntry/comment": {
          "$ref": "#/definitions/objectType"
        },
        "/clockEntry/comment/textValue": {
          "$ref": "#/definitions/stringType"
        },
        "/clockEntry/comment/commentCode": {
          "$ref": "#/definitions/stringCodeListType"
        },
        "/clockEntry/comment/commentCode/codeValue": {
          "$ref": "#/definitions/stringType"
        },
        "/clockEntry/comment/commentCode/shortName": {
          "$ref": "#/definitions/stringType"
        },
        "/clockEntry/comment/commentCode/longName": {
          "$ref": "#/definitions/stringType"
        },
        "/clockEntry/comment/appliesToCode": {
          "$ref": "#/definitions/stringCodeListType"
        },
        "/attestation": {
          "$ref": "#/definitions/objectType"
        },
        "/attestation/attestationActionID": {
          "$ref": "#/definitions/stringType"
        },
        "/attestation/section": {
          "$ref": "#/definitions/objectType"
        },
        "/attestation/section/sectionID": {
          "$ref": "#/definitions/stringType"
        },
        "/attestation/section/questionAnswers": {
          "$ref": "#/definitions/arrayType"
        },
        "/attestation/section/questionAnswers/questionID": {
          "$ref": "#/definitions/stringType"
        },
        "/attestation/section/questionAnswers/answers": {
          "$ref": "#/definitions/arrayType"
        },
        "/attestation/section/questionAnswers/answers/answerID": {
          "$ref": "#/definitions/stringType"
        },
        "/attestation/section/questionAnswers/answers/answerValue": {
          "$ref": "#/definitions/stringType"
        },
        "/attestation/section/questionAnswers/answers/answerIndicator": {
          "$ref": "#/definitions/booleanType"
        }
      }
    },
    "stringCodeListType": {
      "title": "stringCodeListType",
      "type": "object",
      "properties": {
        "codeList": {
          "$ref": "#/definitions/codeListType_v03"
        },
        "readOnly": {
          "type": "boolean"
        },
        "optional": {
          "type": "boolean"
        },
        "hidden": {
          "type": "boolean"
        },
        "sequence": {
          "type": "integer",
          "format": "int32"
        },
        "disallow": {
          "description": "Specified on a target property.  If the passed conditions are true then this property is disallowed and therefore, not presented to a user.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/disallowItemType"
          }
        },
        "shortLabelName": {
          "description": "Provides a client defined UI label for the property which is less than an average of 20 characters in length.",
          "type": "string"
        },
        "longLabelName": {
          "description": "Provides a client defined UI long label for the property.",
          "type": "string"
        },
        "minLength": {
          "description": "Indicates the minimum length required for a property.",
          "type": "integer",
          "format": "int32"
        },
        "maxLength": {
          "description": "Indicates the maximum length supported for a property",
          "type": "integer",
          "format": "int32"
        },
        "default": {
          "description": "Indicates the default value which should be populated by default",
          "type": "string"
        },
        "pattern": {
          "description": "Indicates a regular expression on the required pattern for the value",
          "type": "string"
        },
        "masking": {
          "$ref": "#/definitions/maskingRuleType"
        },
        "equals": {
          "description": "Provides 1 to many properties which the value of this property must be equal to.  If the property is equal to any of the value of the properties then the validation is successful.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "greaterThan": {
          "description": "The value of the related property must be greater than the value of  all the given properties in the array.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "lessThan": {
          "description": "The value of the related property must be less than the value of all the given properties in the array.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "dependencies": {
          "description": "List conditional dependencies of supported properties (readOnly, pattern, hidden, disallow etc.) of an attribute or an object. Dependencies can be defined using oneOf (OR) / allOf (AND) object. oneOf - successful if one of the conditions satisfies, allOf - successful if all the conditions satisfies. Refer API specification for dependencies context object syntax and rules. Dependencies context cannot be validated against context schema if dependencies is defined context JSON, because the dependencies JSON structure is dynamically defined for attributes and the not defined in the context schema. Attribute level properties and dependencies properties are mutually exclusive, example - readOnly property can be set either at attribute level or inside dependencies. If both hidden and disallow properties are set inside dependencies or at attribute level, hidden property takes precedence.",
          "type": "object"
        },
        "helperMessage": {
          "$ref": "#/definitions/helperMessageType"
        },
        "dataType": {
          "$ref": "#/definitions/metaDataType"
        },
        "valueSet": {
          "$ref": "#/definitions/valueSetType"
        },
        "dependencyLinks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/linkType_v02"
          }
        }
      }
    },
    "booleanType": {
      "title": "booleanType",
      "type": "object",
      "properties": {
        "readOnly": {
          "description": "True indicates that the property is marked read only in the given context",
          "example": false,
          "type": "boolean",
          "default": false
        },
        "optional": {
          "description": "True indicates that this property does not need to be valued",
          "example": false,
          "type": "boolean",
          "default": false
        },
        "hidden": {
          "description": "True indicates that the property is carried in the message - to and from the System of Record, but is not exposed in the UI",
          "type": "boolean"
        },
        "sequence": {
          "type": "integer",
          "format": "int32"
        },
        "disallow": {
          "description": "Specified on a target property.  If the passed conditions are true then this property is disallowed and therefore, not presented to a user.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/disallowItemType"
          }
        },
        "shortLabelName": {
          "description": "Provides a client defined UI label for the property which is less than an average of 20 characters in length.",
          "type": "string"
        },
        "longLabelName": {
          "description": "Provides a client defined UI long label for the property",
          "type": "string"
        },
        "default": {
          "description": "Indicates the default value which should be populated by default",
          "type": "boolean"
        },
        "equals": {
          "description": "Provides 1 to many properties which the value of this property must be equal to.  If the property is equal to any of the value of the properties then the validation is successful.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "dependencies": {
          "description": "List conditional dependencies of supported properties (readOnly, pattern, hidden, disallow etc.) of an attribute or an object. Dependencies can be defined using oneOf (OR) / allOf (AND) object. oneOf - successful if one of the conditions satisfies, allOf - successful if all the conditions satisfies. Refer API specification for dependencies context object syntax and rules. Dependencies context cannot be validated against context schema if dependencies is defined context JSON, because the dependencies JSON structure is dynamically defined for attributes and the not defined in the context schema. Attribute level properties and dependencies properties are mutually exclusive, example - readOnly property can be set either at attribute level or inside dependencies. If both hidden and disallow properties are set inside dependencies or at attribute level, hidden property takes precedence.",
          "type": "object"
        },
        "helperMessage": {
          "$ref": "#/definitions/helperMessageType"
        },
        "dataType": {
          "$ref": "#/definitions/DataType"
        },
        "dependencyLinks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/linkType_v02"
          }
        }
      }
    },
    "DataType": {
      "title": "DataType",
      "description": "Data type of the attribute",
      "example": "string",
      "type": "string",
      "enum": [
        "string",
        "number",
        "integer",
        "boolean",
        "object",
        "array",
        "null",
        "any",
        "string[date-time]",
        "string[date]",
        "string[time]",
        "string[regex]",
        "string[phone]",
        "string[uri]",
        "string[email]",
        "string[ip-address]",
        "string[ipv6]",
        "string[host-name]",
        "integer[regex]",
        "integer[utc-millisec]",
        "number[regex]",
        "number[utc-millisec]"
      ]
    },
    "objectType": {
      "title": "objectType",
      "type": "object",
      "properties": {
        "readOnly": {
          "description": "True indicates that the property is marked read only in the given context",
          "example": false,
          "type": "boolean",
          "default": false
        },
        "optional": {
          "description": "True indicates that this property does not need to be valued",
          "example": true,
          "type": "boolean",
          "default": true
        },
        "hidden": {
          "description": "True indicates that the property is carried in the message - to and from the System of Record, but is not exposed in the UI",
          "example": false,
          "type": "boolean",
          "default": false
        },
        "sequence": {
          "type": "integer",
          "format": "int32"
        },
        "disallow": {
          "description": "Specified on a target property.  If the passed conditions are true then this property is disallowed and therefore, not presented to a user.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/disallowItemType"
          }
        },
        "dependencies": {
          "description": "List conditional dependencies of supported properties (readOnly, pattern, hidden, disallow etc.) of an attribute or an object. Dependencies can be defined using oneOf (OR) / allOf (AND) object. oneOf - successful if one of the conditions satisfies, allOf - successful if all the conditions satisfies. Refer API specification for dependencies context object syntax and rules. Dependencies context cannot be validated against context schema if dependencies is defined context JSON, because the dependencies JSON structure is dynamically defined for attributes and the not defined in the context schema. Attribute level properties and dependencies properties are mutually exclusive, example - readOnly property can be set either at attribute level or inside dependencies. If both hidden and disallow properties are set inside dependencies or at attribute level, hidden property takes precedence.",
          "type": "object"
        },
        "helperMessage": {
          "$ref": "#/definitions/helperMessageType"
        },
        "dataType": {
          "$ref": "#/definitions/metaDataType"
        },
        "dependencyLinks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/linkType_v02"
          }
        }
      }
    },
    "arrayType": {
      "title": "arrayType",
      "type": "object",
      "properties": {
        "minItems": {
          "description": "Indicates the minimum items required for an array type.  This is only relevant if the given property is an array.",
          "type": "integer",
          "format": "int32"
        },
        "maxItems": {
          "description": "Indicates the maximum items supported for an array type.  This is only relevant if the given property is an array.",
          "type": "integer",
          "format": "int32"
        },
        "sameValueProperties": {
          "description": "A list of properties which must have the exact same value within the array",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "uniqueProperties": {
          "description": "A list of properties which together must be unique",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "uniqueItems": {
          "type": "boolean"
        },
        "dependencies": {
          "description": "List conditional dependencies of supported properties (readOnly, pattern, hidden, disallow etc.) of an attribute or an object. Dependencies can be defined using oneOf (OR) / allOf (AND) object. oneOf - successful if one of the conditions satisfies, allOf - successful if all the conditions satisfies. Refer API specification for dependencies context object syntax and rules. Dependencies context cannot be validated against context schema if dependencies is defined context JSON, because the dependencies JSON structure is dynamically defined for attributes and the not defined in the context schema. Attribute level properties and dependencies properties are mutually exclusive, example - readOnly property can be set either at attribute level or inside dependencies. If both hidden and disallow properties are set inside dependencies or at attribute level, hidden property takes precedence.",
          "type": "object"
        },
        "helperMessage": {
          "$ref": "#/definitions/helperMessageType"
        },
        "dataType": {
          "$ref": "#/definitions/metaDataType"
        },
        "dependencyLinks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/linkType_v02"
          }
        }
      }
    },
    "numberType": {
      "title": "numberType",
      "type": "object",
      "properties": {
        "readOnly": {
          "description": "True indicates that the property is marked read only in the given context",
          "example": false,
          "type": "boolean",
          "default": false
        },
        "optional": {
          "description": "True indicates that this property does not need to be valued",
          "example": false,
          "type": "boolean",
          "default": false
        },
        "hidden": {
          "description": "True indicates that the property is carried in the message - to and from the System of Record, but is not exposed in the UI",
          "example": false,
          "type": "boolean",
          "default": false
        },
        "sequence": {
          "type": "integer",
          "format": "int32"
        },
        "disallow": {
          "description": "Specified on a target property.  If the passed conditions are true then this property is disallowed and therefore, not presented to a user.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/disallowItemType"
          }
        },
        "shortLabelName": {
          "description": "Provides a client defined UI label for the property which is less than an average of 20 characters in length.",
          "type": "string"
        },
        "longLabelName": {
          "description": "Provides a client defined UI long label for the property.",
          "type": "string"
        },
        "minLength": {
          "description": "Indicates the minimum length required for a property.",
          "type": "integer",
          "format": "int32"
        },
        "maxLength": {
          "description": "Indicates the maximum length supported for a property",
          "type": "integer",
          "format": "int32"
        },
        "minValue": {
          "description": "Indicates the minimum value required for a property.",
          "type": "number",
          "format": "double"
        },
        "maxValue": {
          "description": "Indicates the maximum value supported for a property",
          "type": "number",
          "format": "double"
        },
        "multipleOf": {
          "description": "Indicates that the value must be a multiple of this value or divisible by this value.",
          "type": "number",
          "format": "double"
        },
        "default": {
          "description": "Indicates the default value which should be populated by default",
          "type": "number",
          "format": "double"
        },
        "pattern": {
          "description": "Indicates a regular expression on the required pattern for the value",
          "type": "string"
        },
        "masking": {
          "$ref": "#/definitions/maskingRuleType"
        },
        "equals": {
          "description": "Provides 1 to many properties which the value of this property must be equal to.  If the property is equal to any of the value of the properties then the validation is successful.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "greaterThan": {
          "description": "The value of the related property must be greater than the value of  all the given properties in the array.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "lessThan": {
          "description": "The value of the related property must be less than the value of all the given properties in the array.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "dependencies": {
          "description": "List conditional dependencies of supported properties (readOnly, pattern, hidden, disallow etc.) of an attribute or an object. Dependencies can be defined using oneOf (OR) / allOf (AND) object. oneOf - successful if one of the conditions satisfies, allOf - successful if all the conditions satisfies. Refer API specification for dependencies context object syntax and rules. Dependencies context cannot be validated against context schema if dependencies is defined context JSON, because the dependencies JSON structure is dynamically defined for attributes and the not defined in the context schema. Attribute level properties and dependencies properties are mutually exclusive, example - readOnly property can be set either at attribute level or inside dependencies. If both hidden and disallow properties are set inside dependencies or at attribute level, hidden property takes precedence.",
          "type": "object"
        },
        "helperMessage": {
          "$ref": "#/definitions/helperMessageType"
        },
        "dataType": {
          "$ref": "#/definitions/metaDataType"
        },
        "dependencyLinks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/linkType_v02"
          }
        }
      }
    },
    "DataMeta": {
      "title": "DataMeta",
      "description": "Event Data",
      "type": "object",
      "properties": {
        "control": {
          "$ref": "#/definitions/ControlMeta"
        }
      }
    },
    "ControlMeta": {
      "title": "ControlMeta",
      "description": "Data used byt he event but not modified by the event",
      "type": "object",
      "properties": {
        "attestation": {
          "$ref": "#/definitions/AttestationClockPunchControlMeta"
        },
        "clockPolicy": {
          "$ref": "#/definitions/ClockPolicyClockPunchControlMeta"
        },
        "badgeIDs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "AttestationClockPunchControlMeta": {
      "title": "AttestationClockPunchControlMeta",
      "description": "Attestation configuration data",
      "type": "object",
      "properties": {
        "attestationIndicator": {
          "description": "To indicate if the attestation is required",
          "type": "boolean"
        },
        "sections": {
          "description": "A group of questions that are logically related",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SectionClockPunchControlMeta"
          }
        }
      }
    },
    "SectionClockPunchControlMeta": {
      "title": "SectionClockPunchControlMeta",
      "type": "object",
      "properties": {
        "sectionID": {
          "description": "The simple (string) identifier of an object",
          "type": "string"
        },
        "sectionTitle": {
          "description": "The title of the related section",
          "type": "string"
        },
        "sectionDescription": {
          "description": "The description, which could be presented as a brief instruction set",
          "type": "string"
        },
        "currentSectionIndicator": {
          "description": "Boolean expression",
          "type": "boolean"
        },
        "completeIndicator": {
          "description": "Boolean expression",
          "type": "boolean"
        },
        "questions": {
          "description": "List of questions and possible answers",
          "type": "array",
          "items": {
            "$ref": "#/definitions/QuestionClockPunchControlMeta"
          }
        }
      }
    },
    "QuestionClockPunchControlMeta": {
      "title": "QuestionClockPunchControlMeta",
      "type": "object",
      "properties": {
        "questionID": {
          "description": "The simple (string) identifier of an object",
          "type": "string"
        },
        "questionText": {
          "description": "The actual text of the question",
          "type": "string"
        },
        "answerTypeCode": {
          "description": "A simple (string) code.  Can have a code list reference",
          "type": "string"
        },
        "answerOptions": {
          "description": "List of possible answers for the given question",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnswerOption1"
          }
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/linkType_v02"
          }
        },
        "requiredIndicator": {
          "description": "Boolean expression",
          "type": "boolean"
        },
        "skipLogic": {
          "$ref": "#/definitions/SkipLogicClockPunchControlMeta"
        }
      }
    },
    "AnswerOption1": {
      "title": "AnswerOption1",
      "type": "object",
      "properties": {
        "answerID": {
          "description": "The simple (string) identifier of an object",
          "type": "string"
        },
        "answerValue": {
          "description": "The answer",
          "type": "string"
        },
        "answerIndicator": {
          "description": "Boolean expression",
          "type": "boolean"
        },
        "defaultIndicator": {
          "description": "Boolean expression",
          "type": "boolean"
        }
      }
    },
    "SkipLogicClockPunchControlMeta": {
      "title": "SkipLogicClockPunchControlMeta",
      "description": "Skip logic is used to skip to another question within the questionnaire. You can only apply skip logic to close-ended questions.",
      "type": "object",
      "properties": {
        "nextQuestionID": {
          "description": "The simple (string) identifier of an object",
          "type": "string"
        }
      }
    },
    "ClockPolicyClockPunchControlMeta": {
      "title": "ClockPolicyClockPunchControlMeta",
      "description": "polices for the time clock paradigm for the user",
      "type": "object",
      "properties": {
        "policyExpireDateTime": {
          "description": "The string reprersentation of the date-time value. Follows the ISO-8601:2000 format",
          "type": "string",
          "format": "date-time"
        },
        "validGeoLocations": {
          "description": "Valid geo locations where the user is allowed to clock in/clock out and therefore the capability is enabled",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ValidGeoLocation1"
          }
        },
        "clockReferenceDateTime": {
          "description": "The string reprersentation of the date-time value. Follows the ISO-8601:2000 format",
          "type": "string",
          "format": "date-time"
        },
        "allowBypassIndicator": {
          "description": "Boolean expression",
          "type": "boolean"
        },
        "homeLaborAllocations": {
          "description": "Home labor allocations",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClockPolicyEntryHomeLaborAllocation1"
          }
        },
        "timeNotationCode": {
          "description": "A simple (string) code.  Can have a code list reference",
          "type": "string"
        },
        "actions": {
          "description": "Actions which the user is allowed to initiate against the related pay distribution.  The applicable actions include: payDistribution.read, payDistribution.create, payDistribution.update, payDistribution.delete, based on the context",
          "type": "array",
          "items": {
            "$ref": "#/definitions/clockPolicyActionType_v01"
          }
        },
        "minimumPunchInterval": {
          "description": "A representation of a quantity value",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ValidGeoLocation1": {
      "title": "ValidGeoLocation1",
      "description": "geographical location information of the device",
      "type": "object",
      "properties": {
        "validGeoLocationID": {
          "description": "The simple (string) identifier of an object",
          "type": "string"
        },
        "location": {
          "$ref": "#/definitions/Location1"
        },
        "range": {
          "$ref": "#/definitions/accuracyBaseType_v01"
        }
      }
    },
    "Location1": {
      "title": "Location1",
      "description": "The location where the punch was made.  Requires geo coordiates to be captured",
      "type": "object",
      "properties": {
        "nameCode": {
          "$ref": "#/definitions/codeType_v02"
        },
        "communication": {
          "$ref": "#/definitions/communicationType_v02"
        },
        "address": {
          "$ref": "#/definitions/addressType_v02"
        },
        "accuracy": {
          "$ref": "#/definitions/accuracyBaseType_v01"
        }
      }
    },
    "codeType_v02": {
      "title": "codeType_v02",
      "description": "The code for the related entity.  If this is a coded value, codeValue and shortName should be used. If this is just a string value, only shortName is necessary",
      "type": "object",
      "properties": {
        "codeValue": {
          "description": "The code for the related entity",
          "type": "string"
        },
        "shortName": {
          "description": "Short description of the related code",
          "type": "string"
        },
        "longName": {
          "description": "Long description of the related code",
          "type": "string"
        }
      }
    },
    "communicationType_v02": {
      "title": "communicationType_v02",
      "description": "Communication objects to include various communication mechanisms, e,g, phone, email, etc.",
      "type": "object",
      "properties": {
        "landlines": {
          "description": "A list of land-line telephone numbers",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Landline1"
          }
        },
        "mobiles": {
          "description": "A list of mobile telephone numbers",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Mobile1"
          }
        },
        "emails": {
          "description": "A list of email addresses",
          "type": "array",
          "items": {
            "$ref": "#/definitions/EmailContactCommunicationType1"
          }
        },
        "socialNetworks": {
          "description": "A list of social networks addresses",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SocialNetworkContactCommunicationType1"
          }
        },
        "faxes": {
          "description": "A list of fax telephone numbers",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Faxis1"
          }
        },
        "pagers": {
          "description": "A list of pager telephone numbers",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Pager1"
          }
        },
        "internetAddresses": {
          "description": "A list of internet URIs",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InternetAddressWithItemID1"
          }
        },
        "instantMessages": {
          "description": "A list of instant messages URIs",
          "type": "array",
          "items": {
            "$ref": "#/definitions/InstantMessage1"
          }
        }
      }
    },
    "Landline1": {
      "title": "Landline1",
      "type": "object",
      "properties": {
        "nameCode": {
          "$ref": "#/definitions/codeType_v02"
        },
        "countryDialing": {
          "description": "The country dialing code is the national prefix to be used when dialing TO that particular country FROM another country.",
          "type": "string"
        },
        "areaDialing": {
          "description": "The local area dialing code for a telephone number.",
          "type": "string"
        },
        "dialNumber": {
          "description": "The local communication number, not including country dialing or area dialing codes.   If component parts of the telephone number are being communicated then the dialNumber is required.",
          "type": "string"
        },
        "extension": {
          "description": "The extension of the local communication number.  In the case of a Telephone Number accessing a Pager Network, the extension may be the Pager Identification Number required to leave a message for the Pager Number (i.e. Pager Pin).  These are mutually exclusive.",
          "type": "string"
        },
        "access": {
          "description": "National Direct Dialing Prefix.  Also known as the trunk prefix or National Prefix.  It is the number to be dialed in a domestic telephone call, preceding any necessary area code and subscriber number (i.e. dial number).  When calling from outside of the country, the national direct dial prefix is omitted by the caller.  In Australia, Germany, and United Kingdom the trunk prefix is 0.  In the US and Canada it is 1.",
          "type": "string"
        },
        "formattedNumber": {
          "description": "The formatted telephone number.  The component parts of the telephone are put together into a presentation pattern as defined by the regex format specified.  Please note that \\ is used as an escape character in regex, but a double \\ is needed to escape within the json schema.  The regex will accept +CC NNNNNNNNNNNNNN where + is the symbol indicating the caller to enter their country specific code to call from outside the country.  CC is the country code for an international number (optional), and the area code and dial number.  The local access code (i.e. 1 (201) 333 4444. 1 is the access code in US) is not passed.  The UI will present the phone number following its own presentation convention",
          "type": "string"
        },
        "itemID": {
          "description": "The simple (string) identifier of an object",
          "type": "string"
        },
        "notificationIndicator": {
          "type": "boolean"
        }
      }
    },
    "Mobile1": {
      "title": "Mobile1",
      "type": "object",
      "properties": {
        "nameCode": {
          "$ref": "#/definitions/codeType_v02"
        },
        "countryDialing": {
          "description": "The country dialing code is the national prefix to be used when dialing TO that particular country FROM another country.",
          "type": "string"
        },
        "areaDialing": {
          "description": "The local area dialing code for a telephone number.",
          "type": "string"
        },
        "dialNumber": {
          "description": "The local communication number, not including country dialing or area dialing codes.   If component parts of the telephone number are being communicated then the dialNumber is required.",
          "type": "string"
        },
        "extension": {
          "description": "The extension of the local communication number.  In the case of a Telephone Number accessing a Pager Network, the extension may be the Pager Identification Number required to leave a message for the Pager Number (i.e. Pager Pin).  These are mutually exclusive.",
          "type": "string"
        },
        "access": {
          "description": "National Direct Dialing Prefix.  Also known as the trunk prefix or National Prefix.  It is the number to be dialed in a domestic telephone call, preceding any necessary area code and subscriber number (i.e. dial number).  When calling from outside of the country, the national direct dial prefix is omitted by the caller.  In Australia, Germany, and United Kingdom the trunk prefix is 0.  In the US and Canada it is 1.",
          "type": "string"
        },
        "formattedNumber": {
          "description": "The formatted telephone number.  The component parts of the telephone are put together into a presentation pattern as defined by the regex format specified.  Please note that \\ is used as an escape character in regex, but a double \\ is needed to escape within the json schema.  The regex will accept +CC NNNNNNNNNNNNNN where + is the symbol indicating the caller to enter their country specific code to call from outside the country.  CC is the country code for an international number (optional), and the area code and dial number.  The local access code (i.e. 1 (201) 333 4444. 1 is the access code in US) is not passed.  The UI will present the phone number following its own presentation convention",
          "type": "string"
        },
        "itemID": {
          "description": "The simple (string) identifier of an object",
          "type": "string"
        },
        "notificationIndicator": {
          "type": "boolean"
        }
      }
    },
    "EmailContactCommunicationType1": {
      "title": "EmailContactCommunicationType1",
      "type": "object",
      "properties": {
        "nameCode": {
          "$ref": "#/definitions/codeType_v02"
        },
        "emailUri": {
          "description": "The email URI of the related entity",
          "type": "string"
        },
        "itemID": {
          "description": "The simple (string) identifier of an object",
          "type": "string"
        },
        "notificationIndicator": {
          "type": "boolean"
        }
      }
    },
    "SocialNetworkContactCommunicationType1": {
      "title": "SocialNetworkContactCommunicationType1",
      "type": "object",
      "properties": {
        "nameCode": {
          "$ref": "#/definitions/codeType_v02"
        },
        "uri": {
          "description": "The URI of the related entity",
          "type": "string"
        },
        "itemID": {
          "description": "The simple (string) identifier of an object",
          "type": "string"
        },
        "notificationIndicator": {
          "type": "boolean"
        }
      }
    },
    "Faxis1": {
      "title": "Faxis1",
      "type": "object",
      "properties": {
        "nameCode": {
          "$ref": "#/definitions/codeType_v02"
        },
        "countryDialing": {
          "description": "The country dialing code is the national prefix to be used when dialing TO that particular country FROM another country.",
          "type": "string"
        },
        "areaDialing": {
          "description": "The local area dialing code for a telephone number.",
          "type": "string"
        },
        "dialNumber": {
          "description": "The local communication number, not including country dialing or area dialing codes.   If component parts of the telephone number are being communicated then the dialNumber is required.",
          "type": "string"
        },
        "extension": {
          "description": "The extension of the local communication number.  In the case of a Telephone Number accessing a Pager Network, the extension may be the Pager Identification Number required to leave a message for the Pager Number (i.e. Pager Pin).  These are mutually exclusive.",
          "type": "string"
        },
        "access": {
          "description": "National Direct Dialing Prefix.  Also known as the trunk prefix or National Prefix.  It is the number to be dialed in a domestic telephone call, preceding any necessary area code and subscriber number (i.e. dial number).  When calling from outside of the country, the national direct dial prefix is omitted by the caller.  In Australia, Germany, and United Kingdom the trunk prefix is 0.  In the US and Canada it is 1.",
          "type": "string"
        },
        "formattedNumber": {
          "description": "The formatted telephone number.  The component parts of the telephone are put together into a presentation pattern as defined by the regex format specified.  Please note that \\ is used as an escape character in regex, but a double \\ is needed to escape within the json schema.  The regex will accept +CC NNNNNNNNNNNNNN where + is the symbol indicating the caller to enter their country specific code to call from outside the country.  CC is the country code for an international number (optional), and the area code and dial number.  The local access code (i.e. 1 (201) 333 4444. 1 is the access code in US) is not passed.  The UI will present the phone number following its own presentation convention",
          "type": "string"
        },
        "itemID": {
          "description": "The simple (string) identifier of an object",
          "type": "string"
        },
        "notificationIndicator": {
          "type": "boolean"
        }
      }
    },
    "Pager1": {
      "title": "Pager1",
      "type": "object",
      "properties": {
        "nameCode": {
          "$ref": "#/definitions/codeType_v02"
        },
        "countryDialing": {
          "description": "The country dialing code is the national prefix to be used when dialing TO that particular country FROM another country.",
          "type": "string"
        },
        "areaDialing": {
          "description": "The local area dialing code for a telephone number.",
          "type": "string"
        },
        "dialNumber": {
          "description": "The local communication number, not including country dialing or area dialing codes.   If component parts of the telephone number are being communicated then the dialNumber is required.",
          "type": "string"
        },
        "extension": {
          "description": "The extension of the local communication number.  In the case of a Telephone Number accessing a Pager Network, the extension may be the Pager Identification Number required to leave a message for the Pager Number (i.e. Pager Pin).  These are mutually exclusive.",
          "type": "string"
        },
        "access": {
          "description": "National Direct Dialing Prefix.  Also known as the trunk prefix or National Prefix.  It is the number to be dialed in a domestic telephone call, preceding any necessary area code and subscriber number (i.e. dial number).  When calling from outside of the country, the national direct dial prefix is omitted by the caller.  In Australia, Germany, and United Kingdom the trunk prefix is 0.  In the US and Canada it is 1.",
          "type": "string"
        },
        "formattedNumber": {
          "description": "The formatted telephone number.  The component parts of the telephone are put together into a presentation pattern as defined by the regex format specified.  Please note that \\ is used as an escape character in regex, but a double \\ is needed to escape within the json schema.  The regex will accept +CC NNNNNNNNNNNNNN where + is the symbol indicating the caller to enter their country specific code to call from outside the country.  CC is the country code for an international number (optional), and the area code and dial number.  The local access code (i.e. 1 (201) 333 4444. 1 is the access code in US) is not passed.  The UI will present the phone number following its own presentation convention",
          "type": "string"
        },
        "itemID": {
          "description": "The simple (string) identifier of an object",
          "type": "string"
        },
        "notificationIndicator": {
          "type": "boolean"
        }
      }
    },
    "InternetAddressWithItemID1": {
      "title": "InternetAddressWithItemID1",
      "type": "object",
      "properties": {
        "nameCode": {
          "$ref": "#/definitions/codeType_v02"
        },
        "uri": {
          "description": "The URI of the related entity",
          "type": "string"
        },
        "itemID": {
          "description": "The simple (string) identifier of an object",
          "type": "string"
        }
      }
    },
    "InstantMessage1": {
      "title": "InstantMessage1",
      "type": "object",
      "properties": {
        "nameCode": {
          "$ref": "#/definitions/codeType_v02"
        },
        "uri": {
          "description": "The URI of the related entity",
          "type": "string"
        },
        "itemID": {
          "description": "The simple (string) identifier of an object",
          "type": "string"
        },
        "notificationIndicator": {
          "type": "boolean"
        }
      }
    },
    "addressType_v02": {
      "title": "addressType_v02",
      "description": "Address objects / components",
      "type": "object",
      "properties": {
        "nameCode": {
          "$ref": "#/definitions/codeType_v02"
        },
        "attentionOfName": {
          "description": "Attention of Name",
          "type": "string"
        },
        "careOfName": {
          "description": "Care Of Name",
          "type": "string"
        },
        "lineOne": {
          "description": "Line One of Street Address Information",
          "type": "string"
        },
        "lineTwo": {
          "description": "Line Two of Street Address Information",
          "type": "string"
        },
        "lineThree": {
          "description": "Line Three of Street Address Information",
          "type": "string"
        },
        "cityName": {
          "description": "A city in the context of an address",
          "type": "string"
        },
        "countrySubdivisionLevel1": {
          "$ref": "#/definitions/countrySubdivisionType_v02"
        },
        "countryCode": {
          "description": "A simple (string) code.  Can have a code list reference",
          "type": "string"
        },
        "postalCode": {
          "description": "The string of characters used to identify the postal code",
          "type": "string"
        },
        "geoCoordinate": {
          "$ref": "#/definitions/coordinateType_v02"
        },
        "scriptCode": {
          "$ref": "#/definitions/codeType_v02"
        },
        "lineFour": {
          "description": "Line Four of Street Address Information",
          "type": "string"
        },
        "lineFive": {
          "description": "Line Five of Street Address Information",
          "type": "string"
        },
        "buildingNumber": {
          "description": "The number of a building in the context of a physical address, e.g. House Number",
          "type": "string"
        },
        "buildingName": {
          "description": "The name of a building in the context of a physical address, e.g. Rockefeller Center",
          "type": "string"
        },
        "blockName": {
          "description": "The name the block",
          "type": "string"
        },
        "streetName": {
          "description": "The name of the street",
          "type": "string"
        },
        "streetTypeCode": {
          "$ref": "#/definitions/codeType_v02"
        },
        "unit": {
          "description": "A unit in the context of an address, e.g. an Apartment Number or an Office",
          "type": "string"
        },
        "floor": {
          "description": "A floor in the context of an address",
          "type": "string"
        },
        "stairCase": {
          "description": "A reference to a particular staircase in the context of an address",
          "type": "string"
        },
        "door": {
          "description": "A reference to a particular door in the context of an address. e.g. Apartment Number",
          "type": "string"
        },
        "postOfficeBox": {
          "description": "A post office box",
          "type": "string"
        },
        "deliveryPoint": {
          "description": "A way to identify a specific delivery location, e.g. a mail-stop",
          "type": "string"
        },
        "plotID": {
          "description": "A way to identify a building plot, e.g. a specific building construction site",
          "type": "string"
        },
        "countrySubdivisionLevel2": {
          "$ref": "#/definitions/countrySubdivisionType_v02"
        }
      }
    },
    "countrySubdivisionType_v02": {
      "title": "countrySubdivisionType_v02",
      "description": "A country sub-division correlating to a administrative level one or two levels below country. For example, in the United States, this might be a state or a county",
      "type": "object",
      "properties": {
        "codeValue": {
          "description": "The code for the related entity",
          "type": "string"
        },
        "shortName": {
          "description": "Short description of the related code",
          "type": "string"
        },
        "longName": {
          "description": "Long description of the related code",
          "type": "string"
        },
        "subdivisionType": {
          "description": "The type of a country sub-division, e.g. state, county",
          "type": "string"
        }
      }
    },
    "coordinateType_v02": {
      "title": "coordinateType_v02",
      "description": "The coordinates of the location",
      "type": "object",
      "properties": {
        "latitude": {
          "description": "The angle, in degrees, of a position on Earth above the equator. (Latitude is negative for a place below the equator.) specified in decimal degrees",
          "type": "number",
          "format": "double"
        },
        "longitude": {
          "description": "The angle, in degrees, of a position on Earth around the equator from the Greenwich Meridian specified in decimal degrees",
          "type": "number",
          "format": "double"
        }
      }
    },
    "accuracyBaseType_v01": {
      "title": "accuracyBaseType_v01",
      "description": "Denotes the accuracy level of the latitude and longitude coordinates.  It is specified in meters.  The value must be a non-negative real number.  The value should correspond to a 95% confidence level",
      "type": "object",
      "properties": {
        "unitValue": {
          "description": "the radius (distance) that the person may clock in from the coordinate.",
          "type": "number",
          "format": "double"
        },
        "unitCode": {
          "$ref": "#/definitions/codeType_v02"
        }
      }
    },
    "ClockPolicyEntryHomeLaborAllocation1": {
      "title": "ClockPolicyEntryHomeLaborAllocation1",
      "type": "object",
      "properties": {
        "itemID": {
          "description": "The simple (string) identifier of an object",
          "type": "string"
        },
        "allocationCode": {
          "$ref": "#/definitions/codeType_v02"
        },
        "allocationTypeCode": {
          "$ref": "#/definitions/codeType_v02"
        }
      }
    },
    "clockPolicyActionType_v01": {
      "title": "clockPolicyActionType_v01",
      "description": "The clock policy action type",
      "type": "object",
      "properties": {
        "operationID": {
          "description": "Identifies the operation of an action",
          "type": "string"
        },
        "canonicalUri": {
          "description": "The URI of the related entity",
          "type": "string"
        },
        "actionTypeCode": {
          "$ref": "#/definitions/ActionTypeCode"
        },
        "confirmationRequiredIndicator": {
          "description": "Boolean expression",
          "example": false,
          "type": "boolean",
          "default": false
        },
        "defaultIndicator": {
          "description": "Boolean expression",
          "example": false,
          "type": "boolean",
          "default": false
        },
        "sequence": {
          "description": "Sequence of a related entity when included in the collection or a group",
          "type": "integer",
          "format": "int32"
        },
        "attestation": {
          "$ref": "#/definitions/attestationType_v03"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/linkType_v02"
          }
        },
        "enabledIndicator": {
          "description": "Boolean expression",
          "type": "boolean"
        },
        "title": {
          "description": "This property defines a title for the link.  The value must be a string. User agents MAY use this title when presenting the link to the user.",
          "type": "string"
        }
      }
    },
    "attestationType_v03": {
      "title": "attestationType_v03",
      "description": "Optional text provided to the user when they take an action to affirm to be correct, true, or genuine. Requires confirmation indicator to be set to true",
      "type": "object",
      "properties": {
        "messageTxt": {
          "description": "Message to present to the user.  This is mutuallly exclusive with the messageUri which is an external link to the message.  If the text is sizable and fairly static then it should be an external link which may be cached",
          "type": "string"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/linkType_v02"
          }
        },
        "actionBlockIndicator": {
          "description": "Boolean expression",
          "example": false,
          "type": "boolean",
          "default": false
        }
      }
    }
  },
  "tags": [
    {
      "name": "Clock Entries",
      "description": "The list of clock entries for a worker"
    },
    {
      "name": "Clock Punch",
      "description": "Punch clock management events"
    },
    {
      "name": "Offline Clock Punch",
      "description": "Punch clock offline management events"
    },
    {
      "name": "Crew Clock Punch",
      "description": "Crew clock punch management events"
    }
  ]
}